ADC1_COMP_IRQHandler	twr/src/twr_adc.c	/^void ADC1_COMP_IRQHandler(void)$/;"	f	typeref:typename:void
ADC_ConversionStop	stm/hal/src/stm32l0xx_hal_adc.c	/^static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
ADC_DMAConvCplt	stm/hal/src/stm32l0xx_hal_adc.c	/^static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
ADC_DMAError	stm/hal/src/stm32l0xx_hal_adc.c	/^static void ADC_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
ADC_DMAHalfConvCplt	stm/hal/src/stm32l0xx_hal_adc.c	/^static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
ADC_DelayMicroSecond	stm/hal/src/stm32l0xx_hal_adc.c	/^static void ADC_DelayMicroSecond(uint32_t microSecond)$/;"	f	typeref:typename:void	file:
ADC_Disable	stm/hal/src/stm32l0xx_hal_adc.c	/^static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
ADC_Enable	stm/hal/src/stm32l0xx_hal_adc.c	/^static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
AES_RNG_LPUART1_IRQHandler	twr/src/twr_uart.c	/^void AES_RNG_LPUART1_IRQHandler(void)$/;"	f	typeref:typename:void
ARM_MPU_ClrRegion	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)$/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_Disable	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_Disable(void)$/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_Enable	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_Enable(uint32_t MPU_Control)$/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_Load	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)$/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_OrderedMemcpy	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* __RESTRICT sr/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_SetRegion	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)$/;"	f	typeref:typename:__STATIC_INLINE void
ARM_MPU_SetRegionEx	sys/inc/mpu_armv7.h	/^__STATIC_INLINE void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)$/;"	f	typeref:typename:__STATIC_INLINE void
CDC_Control_FS	twr/stm/src/usbd_cdc_if.c	/^static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)$/;"	f	typeref:typename:int8_t	file:
CDC_DeInit_FS	twr/stm/src/usbd_cdc_if.c	/^static int8_t CDC_DeInit_FS(void)$/;"	f	typeref:typename:int8_t	file:
CDC_Init_FS	twr/stm/src/usbd_cdc_if.c	/^static int8_t CDC_Init_FS(void)$/;"	f	typeref:typename:int8_t	file:
CDC_Receive_FS	twr/stm/src/usbd_cdc_if.c	/^static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)$/;"	f	typeref:typename:int8_t	file:
CDC_Transmit_FS	twr/stm/src/usbd_cdc_if.c	/^uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)$/;"	f	typeref:typename:uint8_t
CRC_Handle_16	stm/hal/src/stm32l0xx_hal_crc.c	/^static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength/;"	f	typeref:typename:uint32_t	file:
CRC_Handle_8	stm/hal/src/stm32l0xx_hal_crc.c	/^static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)$/;"	f	typeref:typename:uint32_t	file:
CRYP_DMAError	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
CRYP_DMAInCplt	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_DMAInCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
CRYP_DMAOutCplt	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_DMAOutCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
CRYP_EncryptDecrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^static HAL_StatusTypeDef CRYP_EncryptDecrypt_IT(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
CRYP_ProcessData	stm/hal/src/stm32l0xx_hal_cryp.c	/^static HAL_StatusTypeDef CRYP_ProcessData(CRYP_HandleTypeDef *hcryp, uint8_t* Input, uint16_t Il/;"	f	typeref:typename:HAL_StatusTypeDef	file:
CRYP_SetDMAConfig	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_SetDMAConfig(CRYP_HandleTypeDef *hcryp, uint32_t inputaddr, uint16_t Size, uint/;"	f	typeref:typename:void	file:
CRYP_SetInitVector	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_SetInitVector(CRYP_HandleTypeDef *hcryp, uint8_t *InitVector)$/;"	f	typeref:typename:void	file:
CRYP_SetKey	stm/hal/src/stm32l0xx_hal_cryp.c	/^static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint8_t *Key)$/;"	f	typeref:typename:void	file:
DAC_DMAConvCpltCh1	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DAC_DMAConvCpltCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DAC_DMAErrorCh1	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DAC_DMAErrorCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DAC_DMAHalfConvCpltCh1	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DAC_DMAHalfConvCpltCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
DMA1_Channel1_IRQHandler	twr/src/twr_dma.c	/^void DMA1_Channel1_IRQHandler(void)$/;"	f	typeref:typename:void
DMA1_Channel2_3_IRQHandler	twr/src/twr_dma.c	/^void DMA1_Channel2_3_IRQHandler(void)$/;"	f	typeref:typename:void
DMA1_Channel4_5_6_7_IRQHandler	twr/src/twr_dma.c	/^void DMA1_Channel4_5_6_7_IRQHandler(void)$/;"	f	typeref:typename:void
DMA_SetConfig	stm/hal/src/stm32l0xx_hal_dma.c	/^static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uin/;"	f	typeref:typename:void	file:
EXTI0_1_IRQHandler	twr/src/twr_exti.c	/^void EXTI0_1_IRQHandler(void)$/;"	f	typeref:typename:void
EXTI2_3_IRQHandler	twr/src/twr_exti.c	/^void EXTI2_3_IRQHandler(void)$/;"	f	typeref:typename:void
EXTI4_15_IRQHandler	twr/src/twr_exti.c	/^void EXTI4_15_IRQHandler(void)$/;"	f	typeref:typename:void
FLASHRAM_SetErrorCode	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^static __RAM_FUNC FLASHRAM_SetErrorCode(void)$/;"	f	typeref:typename:__RAM_FUNC	file:
FLASHRAM_WaitForLastOperation	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^static __RAM_FUNC  FLASHRAM_WaitForLastOperation(uint32_t Timeout)$/;"	f	typeref:typename:__RAM_FUNC	file:
FLASH_OB_BOOTBit1Config	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef  FLASH_OB_BOOTBit1Config(uint8_t OB_BootBit1)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_OB_BORConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef FLASH_OB_BORConfig(uint8_t OB_BOR)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_OB_BootConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t OB_BOOT)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_OB_GetBOOTBit1	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint8_t FLASH_OB_GetBOOTBit1(void)$/;"	f	typeref:typename:uint8_t	file:
FLASH_OB_GetBOR	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint8_t FLASH_OB_GetBOR(void)$/;"	f	typeref:typename:uint8_t	file:
FLASH_OB_GetRDP	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint8_t FLASH_OB_GetRDP(void)$/;"	f	typeref:typename:uint8_t	file:
FLASH_OB_GetUser	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint8_t FLASH_OB_GetUser(void)$/;"	f	typeref:typename:uint8_t	file:
FLASH_OB_GetWRP	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint32_t FLASH_OB_GetWRP(void)$/;"	f	typeref:typename:uint32_t	file:
FLASH_OB_GetWRP2	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static uint32_t FLASH_OB_GetWRP2(void)$/;"	f	typeref:typename:uint32_t	file:
FLASH_OB_ProtectedSectorsConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t Sector2, uint/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_OB_RDPConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint8_t OB_RDP)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_OB_UserConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
FLASH_PageErase	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^void FLASH_PageErase(uint32_t PageAddress)$/;"	f	typeref:typename:void
FLASH_SetErrorCode	stm/hal/src/stm32l0xx_hal_flash.c	/^static void FLASH_SetErrorCode(void)$/;"	f	typeref:typename:void	file:
FLASH_WaitForLastOperation	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADCEx_Calibration_GetValue	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)$/;"	f	typeref:typename:uint32_t
HAL_ADCEx_Calibration_SetValue	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef* hadc, uint32_t SingleDiff, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADCEx_Calibration_Start	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADCEx_DisableVREFINT	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^void HAL_ADCEx_DisableVREFINT(void)$/;"	f	typeref:typename:void
HAL_ADCEx_DisableVREFINTTempSensor	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^void HAL_ADCEx_DisableVREFINTTempSensor(void)$/;"	f	typeref:typename:void
HAL_ADCEx_EnableVREFINT	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADCEx_EnableVREFINTTempSensor	stm/hal/src/stm32l0xx_hal_adc_ex.c	/^HAL_StatusTypeDef HAL_ADCEx_EnableVREFINTTempSensor(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_AnalogWDGConfig	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Ana/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_ConfigChannel	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_ConvCpltCallback	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_ConvHalfCpltCallback	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_DeInit	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_ErrorCallback	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_GetError	stm/hal/src/stm32l0xx_hal_adc.c	/^uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)$/;"	f	typeref:typename:uint32_t
HAL_ADC_GetState	stm/hal/src/stm32l0xx_hal_adc.c	/^uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:uint32_t
HAL_ADC_GetValue	stm/hal/src/stm32l0xx_hal_adc.c	/^uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:uint32_t
HAL_ADC_IRQHandler	stm/hal/src/stm32l0xx_hal_adc.c	/^void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:void
HAL_ADC_Init	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_LevelOutOfWindowCallback	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_MspDeInit	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_MspInit	stm/hal/src/stm32l0xx_hal_adc.c	/^__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:__weak void
HAL_ADC_PollForConversion	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_PollForEvent	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Tim/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Start	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Start_DMA	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Start_IT	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Stop	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Stop_DMA	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ADC_Stop_IT	stm/hal/src/stm32l0xx_hal_adc.c	/^HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMPEx_DisableVREFINT	stm/hal/src/stm32l0xx_hal_comp_ex.c	/^void HAL_COMPEx_DisableVREFINT(void)$/;"	f	typeref:typename:void
HAL_COMPEx_EnableVREFINT	stm/hal/src/stm32l0xx_hal_comp_ex.c	/^void HAL_COMPEx_EnableVREFINT(void)$/;"	f	typeref:typename:void
HAL_COMP_DeInit	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_StatusTypeDef HAL_COMP_DeInit(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMP_GetOutputLevel	stm/hal/src/stm32l0xx_hal_comp.c	/^uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:uint32_t
HAL_COMP_GetState	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_COMP_StateTypeDef HAL_COMP_GetState(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_COMP_StateTypeDef
HAL_COMP_IRQHandler	stm/hal/src/stm32l0xx_hal_comp.c	/^void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:void
HAL_COMP_Init	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMP_Lock	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_StatusTypeDef HAL_COMP_Lock(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMP_MspDeInit	stm/hal/src/stm32l0xx_hal_comp.c	/^__weak void HAL_COMP_MspDeInit(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:__weak void
HAL_COMP_MspInit	stm/hal/src/stm32l0xx_hal_comp.c	/^__weak void HAL_COMP_MspInit(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:__weak void
HAL_COMP_Start	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMP_Stop	stm/hal/src/stm32l0xx_hal_comp.c	/^HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_COMP_TriggerCallback	stm/hal/src/stm32l0xx_hal_comp.c	/^__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)$/;"	f	typeref:typename:__weak void
HAL_CRCEx_Input_Data_Reverse	stm/hal/src/stm32l0xx_hal_crc_ex.c	/^HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMod/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRCEx_Output_Data_Reverse	stm/hal/src/stm32l0xx_hal_crc_ex.c	/^HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseM/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRCEx_Polynomial_Set	stm/hal/src/stm32l0xx_hal_crc_ex.c	/^HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyL/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRC_Accumulate	stm/hal/src/stm32l0xx_hal_crc.c	/^uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)$/;"	f	typeref:typename:uint32_t
HAL_CRC_Calculate	stm/hal/src/stm32l0xx_hal_crc.c	/^uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)$/;"	f	typeref:typename:uint32_t
HAL_CRC_DeInit	stm/hal/src/stm32l0xx_hal_crc.c	/^HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRC_GetState	stm/hal/src/stm32l0xx_hal_crc.c	/^HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)$/;"	f	typeref:typename:HAL_CRC_StateTypeDef
HAL_CRC_Init	stm/hal/src/stm32l0xx_hal_crc.c	/^HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRC_MspDeInit	stm/hal/src/stm32l0xx_hal_crc.c	/^__weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)$/;"	f	typeref:typename:__weak void
HAL_CRC_MspInit	stm/hal/src/stm32l0xx_hal_crc.c	/^__weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)$/;"	f	typeref:typename:__weak void
HAL_CRYPEx_ComputationCpltCallback	stm/hal/src/stm32l0xx_hal_cryp_ex.c	/^__weak void HAL_CRYPEx_ComputationCpltCallback(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_CRYP_AESCBC_Decrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint1/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCBC_Decrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCBC_Decrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCBC_Encrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCBC_Encrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCBC_Encrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCBC_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Decrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint1/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Decrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Decrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Encrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Encrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESCTR_Encrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESCTR_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Decrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, uint1/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Decrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Decrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Decrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pCypherData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Encrypt	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uint16/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Encrypt_DMA	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt_DMA(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_AESECB_Encrypt_IT	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_AESECB_Encrypt_IT(CRYP_HandleTypeDef *hcryp, uint8_t *pPlainData, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_DeInit	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_ErrorCallback	stm/hal/src/stm32l0xx_hal_cryp.c	/^ __weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_CRYP_GetState	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_CRYP_STATETypeDef HAL_CRYP_GetState(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:HAL_CRYP_STATETypeDef
HAL_CRYP_IRQHandler	stm/hal/src/stm32l0xx_hal_cryp.c	/^void HAL_CRYP_IRQHandler(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:void
HAL_CRYP_InCpltCallback	stm/hal/src/stm32l0xx_hal_cryp.c	/^__weak void HAL_CRYP_InCpltCallback(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_CRYP_Init	stm/hal/src/stm32l0xx_hal_cryp.c	/^HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_CRYP_MspDeInit	stm/hal/src/stm32l0xx_hal_cryp.c	/^__weak void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_CRYP_MspInit	stm/hal/src/stm32l0xx_hal_cryp.c	/^__weak void HAL_CRYP_MspInit(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_CRYP_OutCpltCallback	stm/hal/src/stm32l0xx_hal_cryp.c	/^__weak void HAL_CRYP_OutCpltCallback(CRYP_HandleTypeDef *hcryp)$/;"	f	typeref:typename:__weak void
HAL_DACEx_ConvCpltCallbackCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DACEx_ConvHalfCpltCallbackCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DACEx_DMAUnderrunCallbackCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)$/;"	f	typeref:typename:__weak void
HAL_DACEx_DualGetValue	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:uint32_t
HAL_DACEx_DualSetValue	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t D/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DACEx_ErrorCallbackCh2	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)$/;"	f	typeref:typename:__weak void
HAL_DACEx_NoiseWaveGenerate	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DACEx_TriangleWaveGenerate	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_ConfigChannel	stm/hal/src/stm32l0xx_hal_dac.c	/^HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_ConvCpltCallbackCh1	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_ConvHalfCpltCallbackCh1	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_DMAUnderrunCallbackCh1	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_DeInit	stm/hal/src/stm32l0xx_hal_dac.c	/^HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_ErrorCallbackCh1	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_GetError	stm/hal/src/stm32l0xx_hal_dac.c	/^uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)$/;"	f	typeref:typename:uint32_t
HAL_DAC_GetState	stm/hal/src/stm32l0xx_hal_dac.c	/^HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:HAL_DAC_StateTypeDef
HAL_DAC_GetValue	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:__weak uint32_t
HAL_DAC_GetValue	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:uint32_t
HAL_DAC_IRQHandler	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_IRQHandler	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:void
HAL_DAC_Init	stm/hal/src/stm32l0xx_hal_dac.c	/^HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_MspDeInit	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_MspInit	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)$/;"	f	typeref:typename:__weak void
HAL_DAC_SetValue	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Al/;"	f	typeref:typename:__weak HAL_StatusTypeDef
HAL_DAC_SetValue	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_Start	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:__weak HAL_StatusTypeDef
HAL_DAC_Start	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_Start_DMA	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* /;"	f	typeref:typename:__weak HAL_StatusTypeDef
HAL_DAC_Start_DMA	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_Stop	stm/hal/src/stm32l0xx_hal_dac.c	/^HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DAC_Stop_DMA	stm/hal/src/stm32l0xx_hal_dac.c	/^__weak HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:__weak HAL_StatusTypeDef
HAL_DAC_Stop_DMA	stm/hal/src/stm32l0xx_hal_dac_ex.c	/^HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DBGMCU_DBG_DisableLowPowerConfig	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_DBG_DisableLowPowerConfig(uint32_t Periph)$/;"	f	typeref:typename:void
HAL_DBGMCU_DBG_EnableLowPowerConfig	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_DBG_EnableLowPowerConfig(uint32_t Periph)$/;"	f	typeref:typename:void
HAL_DBGMCU_DisableDBGSleepMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_DisableDBGSleepMode(void)$/;"	f	typeref:typename:void
HAL_DBGMCU_DisableDBGStandbyMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_DisableDBGStandbyMode(void)$/;"	f	typeref:typename:void
HAL_DBGMCU_DisableDBGStopMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_DisableDBGStopMode(void)$/;"	f	typeref:typename:void
HAL_DBGMCU_EnableDBGSleepMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_EnableDBGSleepMode(void)$/;"	f	typeref:typename:void
HAL_DBGMCU_EnableDBGStandbyMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_EnableDBGStandbyMode(void)$/;"	f	typeref:typename:void
HAL_DBGMCU_EnableDBGStopMode	stm/hal/src/stm32l0xx_hal.c	/^void HAL_DBGMCU_EnableDBGStopMode(void)$/;"	f	typeref:typename:void
HAL_DMA_Abort	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_Abort_IT	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_DeInit	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_GetError	stm/hal/src/stm32l0xx_hal_dma.c	/^uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:uint32_t
HAL_DMA_GetState	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:HAL_DMA_StateTypeDef
HAL_DMA_IRQHandler	stm/hal/src/stm32l0xx_hal_dma.c	/^void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void
HAL_DMA_Init	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_PollForTransfer	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_Start	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddres/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DMA_Start_IT	stm/hal/src/stm32l0xx_hal_dma.c	/^HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAdd/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_DeInit	stm/hal/src/stm32l0xx_hal.c	/^HAL_StatusTypeDef HAL_DeInit(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_Delay	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_Delay(__IO uint32_t Delay)$/;"	f	typeref:typename:__weak void
HAL_FIREWALL_Config	stm/hal/src/stm32l0xx_hal_firewall.c	/^HAL_StatusTypeDef HAL_FIREWALL_Config(FIREWALL_InitTypeDef * fw_init)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FIREWALL_DisablePreArmFlag	stm/hal/src/stm32l0xx_hal_firewall.c	/^void HAL_FIREWALL_DisablePreArmFlag(void)$/;"	f	typeref:typename:void
HAL_FIREWALL_EnableFirewall	stm/hal/src/stm32l0xx_hal_firewall.c	/^void HAL_FIREWALL_EnableFirewall(void)$/;"	f	typeref:typename:void
HAL_FIREWALL_EnablePreArmFlag	stm/hal/src/stm32l0xx_hal_firewall.c	/^void HAL_FIREWALL_EnablePreArmFlag(void)$/;"	f	typeref:typename:void
HAL_FIREWALL_GetConfig	stm/hal/src/stm32l0xx_hal_firewall.c	/^void HAL_FIREWALL_GetConfig(FIREWALL_InitTypeDef * fw_config)$/;"	f	typeref:typename:void
HAL_FLASHEx_AdvOBGetConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)$/;"	f	typeref:typename:void
HAL_FLASHEx_AdvOBProgram	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^void HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void)$/;"	f	typeref:typename:void
HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)$/;"	f	typeref:typename:void
HAL_FLASHEx_DATAEEPROM_Erase	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_DATAEEPROM_Lock	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_DATAEEPROM_Program	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_DATAEEPROM_Unlock	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_DisableRunPowerDown	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_DisableRunPowerDown(void)$/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASHEx_EnableRunPowerDown	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_EnableRunPowerDown(void)$/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASHEx_Erase	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_EraseParallelPage	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_EraseParallelPage(uint32_t Page_Address1, uint32_t Page_Address2)$/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASHEx_Erase_IT	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_GetError	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_GetError(uint32_t * Error)$/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASHEx_HalfPageProgram	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_HalfPageProgram(uint32_t Address, uint32_t* pBuffer)$/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASHEx_OBGetConfig	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)$/;"	f	typeref:typename:void
HAL_FLASHEx_OBProgram	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_OB_DeSelectPCROP	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_OB_SelectPCROP	stm/hal/src/stm32l0xx_hal_flash_ex.c	/^HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASHEx_ProgramParallelHalfPage	stm/hal/src/stm32l0xx_hal_flash_ramfunc.c	/^__RAM_FUNC HAL_FLASHEx_ProgramParallelHalfPage(uint32_t Address1, uint32_t* pBuffer1, uint32_t A/;"	f	typeref:typename:__RAM_FUNC
HAL_FLASH_EndOfOperationCallback	stm/hal/src/stm32l0xx_hal_flash.c	/^__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)$/;"	f	typeref:typename:__weak void
HAL_FLASH_GetError	stm/hal/src/stm32l0xx_hal_flash.c	/^uint32_t HAL_FLASH_GetError(void)$/;"	f	typeref:typename:uint32_t
HAL_FLASH_IRQHandler	stm/hal/src/stm32l0xx_hal_flash.c	/^void HAL_FLASH_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_FLASH_Lock	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_Lock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_OB_Launch	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_OB_Lock	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_OB_Unlock	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_OperationErrorCallback	stm/hal/src/stm32l0xx_hal_flash.c	/^__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)$/;"	f	typeref:typename:__weak void
HAL_FLASH_Program	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_Program_IT	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint32_t Data)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_FLASH_Unlock	stm/hal/src/stm32l0xx_hal_flash.c	/^HAL_StatusTypeDef HAL_FLASH_Unlock(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_GPIO_DeInit	stm/hal/src/stm32l0xx_hal_gpio.c	/^void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)$/;"	f	typeref:typename:void
HAL_GPIO_EXTI_Callback	stm/hal/src/stm32l0xx_hal_gpio.c	/^__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)$/;"	f	typeref:typename:__weak void
HAL_GPIO_EXTI_IRQHandler	stm/hal/src/stm32l0xx_hal_gpio.c	/^void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)$/;"	f	typeref:typename:void
HAL_GPIO_Init	stm/hal/src/stm32l0xx_hal_gpio.c	/^void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)$/;"	f	typeref:typename:void
HAL_GPIO_LockPin	stm/hal/src/stm32l0xx_hal_gpio.c	/^HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_GPIO_ReadPin	stm/hal/src/stm32l0xx_hal_gpio.c	/^GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)$/;"	f	typeref:typename:GPIO_PinState
HAL_GPIO_TogglePin	stm/hal/src/stm32l0xx_hal_gpio.c	/^void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)$/;"	f	typeref:typename:void
HAL_GPIO_WritePin	stm/hal/src/stm32l0xx_hal_gpio.c	/^void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)$/;"	f	typeref:typename:void
HAL_GetDEVID	stm/hal/src/stm32l0xx_hal.c	/^uint32_t HAL_GetDEVID(void)$/;"	f	typeref:typename:uint32_t
HAL_GetHalVersion	stm/hal/src/stm32l0xx_hal.c	/^uint32_t HAL_GetHalVersion(void)$/;"	f	typeref:typename:uint32_t
HAL_GetREVID	stm/hal/src/stm32l0xx_hal.c	/^uint32_t HAL_GetREVID(void)$/;"	f	typeref:typename:uint32_t
HAL_GetTick	stm/hal/src/stm32l0xx_hal.c	/^__weak uint32_t HAL_GetTick(void)$/;"	f	typeref:typename:__weak uint32_t
HAL_HalfDuplex_EnableReceiver	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_HalfDuplex_EnableTransmitter	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_HalfDuplex_Init	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2CEx_ConfigAnalogFilter	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2CEx_ConfigDigitalFilter	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2CEx_DisableFastModePlus	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)$/;"	f	typeref:typename:void
HAL_I2CEx_DisableWakeUp	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp (I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2CEx_EnableFastModePlus	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)$/;"	f	typeref:typename:void
HAL_I2CEx_EnableWakeUp	stm/hal/src/stm32l0xx_hal_i2c_ex.c	/^HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp (I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_AbortCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_AddrCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t Ad/;"	f	typeref:typename:__weak void
HAL_I2C_DeInit	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_DisableListen_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_ER_IRQHandler	stm/hal/src/stm32l0xx_hal_i2c.c	/^void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:void
HAL_I2C_EV_IRQHandler	stm/hal/src/stm32l0xx_hal_i2c.c	/^void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:void
HAL_I2C_EnableListen_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_ErrorCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_GetError	stm/hal/src/stm32l0xx_hal_i2c.c	/^uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:uint32_t
HAL_I2C_GetMode	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_I2C_ModeTypeDef
HAL_I2C_GetState	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_I2C_StateTypeDef
HAL_I2C_Init	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_IsDeviceReady	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t T/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_ListenCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_MasterRxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_MasterTxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_Master_Abort_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Receive	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t */;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Receive_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Receive_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Sequential_Receive_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddr/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Sequential_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAdd/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Transmit	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Transmit_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Master_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_MemRxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_MemTxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_Mem_Read	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAdd/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Mem_Read_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t Me/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Mem_Read_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t Mem/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Mem_Write	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAd/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Mem_Write_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t M/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Mem_Write_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t Me/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_MspDeInit	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_MspInit	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_SlaveRxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_SlaveTxCpltCallback	stm/hal/src/stm32l0xx_hal_i2c.c	/^__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:__weak void
HAL_I2C_Slave_Receive	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Receive_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Si/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Receive_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Siz/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Sequential_Receive_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Sequential_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Transmit	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Transmit_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t S/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2C_Slave_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Si/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_DMAPause	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_DMAResume	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_DMAStop	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_DeInit	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_ErrorCallback	stm/hal/src/stm32l0xx_hal_i2s.c	/^ __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_GetError	stm/hal/src/stm32l0xx_hal_i2s.c	/^uint32_t HAL_I2S_GetError(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:uint32_t
HAL_I2S_GetState	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_I2S_StateTypeDef
HAL_I2S_IRQHandler	stm/hal/src/stm32l0xx_hal_i2s.c	/^void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:void
HAL_I2S_Init	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_MspDeInit	stm/hal/src/stm32l0xx_hal_i2s.c	/^ __weak void HAL_I2S_MspDeInit(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_MspInit	stm/hal/src/stm32l0xx_hal_i2s.c	/^ __weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_Receive	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_Receive_DMA	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_Receive_IT	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Receive_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_RxCpltCallback	stm/hal/src/stm32l0xx_hal_i2s.c	/^__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_RxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_i2s.c	/^__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_Transmit	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_Transmit_DMA	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2s.c	/^HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_I2S_TxCpltCallback	stm/hal/src/stm32l0xx_hal_i2s.c	/^ __weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_I2S_TxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_i2s.c	/^ __weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:__weak void
HAL_IRDA_Abort	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_AbortCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_AbortCpltCallback (IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_AbortReceive	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_AbortReceiveCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_AbortReceiveCpltCallback (IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_AbortReceive_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_AbortTransmit	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_AbortTransmitCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_AbortTransmitCpltCallback (IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_AbortTransmit_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_Abort_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_DMAPause	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_DMAResume	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_DMAStop	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_DeInit	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_ErrorCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_GetError	stm/hal/src/stm32l0xx_hal_irda.c	/^uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:uint32_t
HAL_IRDA_GetState	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_IRDA_StateTypeDef
HAL_IRDA_IRQHandler	stm/hal/src/stm32l0xx_hal_irda.c	/^void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:void
HAL_IRDA_Init	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_MspDeInit	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_MspInit	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_Receive	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_Receive_DMA	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_Receive_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_RxCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_RxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_Transmit	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_Transmit_DMA	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_Transmit_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IRDA_TxCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IRDA_TxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^__weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:__weak void
HAL_IWDG_Init	stm/hal/src/stm32l0xx_hal_iwdg.c	/^HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IWDG_Refresh	stm/hal/src/stm32l0xx_hal_iwdg.c	/^HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_IncTick	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_IncTick(void)$/;"	f	typeref:typename:__weak void
HAL_Init	stm/hal/src/stm32l0xx_hal.c	/^HAL_StatusTypeDef HAL_Init(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_InitTick	stm/hal/src/stm32l0xx_hal.c	/^__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)$/;"	f	typeref:typename:__weak HAL_StatusTypeDef
HAL_LCD_Clear	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LCD_DeInit	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef HAL_LCD_DeInit(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LCD_GetError	stm/hal/src/stm32l0xx_hal_lcd.c	/^uint32_t HAL_LCD_GetError(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:uint32_t
HAL_LCD_GetState	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_LCD_StateTypeDef HAL_LCD_GetState(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_LCD_StateTypeDef
HAL_LCD_Init	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LCD_MspDeInit	stm/hal/src/stm32l0xx_hal_lcd.c	/^ __weak void HAL_LCD_MspDeInit(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:__weak void
HAL_LCD_MspInit	stm/hal/src/stm32l0xx_hal_lcd.c	/^ __weak void HAL_LCD_MspInit(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:__weak void
HAL_LCD_UpdateDisplayRequest	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LCD_Write	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAM/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LIN_Init	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LIN_SendBreak	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_AutoReloadMatchCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_AutoReloadWriteCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_CompareMatchCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_CompareWriteCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_Counter_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Counter_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Counter_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Counter_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_DeInit	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_DeInit(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_DirectionDownCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_DirectionUpCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_Encoder_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Encoder_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Encoder_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_Encoder_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_GetState	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_LPTIM_StateTypeDef
HAL_LPTIM_IRQHandler	stm/hal/src/stm32l0xx_hal_lptim.c	/^void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:void
HAL_LPTIM_Init	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_MspDeInit	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_MspDeInit(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_MspInit	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_LPTIM_OnePulse_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_OnePulse_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_OnePulse_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_OnePulse_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_OnePulse_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_OnePulse_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_OnePulse_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_OnePulse_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_PWM_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pul/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_PWM_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_PWM_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_PWM_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_PWM_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_PWM_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_ReadAutoReload	stm/hal/src/stm32l0xx_hal_lptim.c	/^uint32_t HAL_LPTIM_ReadAutoReload(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:uint32_t
HAL_LPTIM_ReadCompare	stm/hal/src/stm32l0xx_hal_lptim.c	/^uint32_t HAL_LPTIM_ReadCompare(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:uint32_t
HAL_LPTIM_ReadCounter	stm/hal/src/stm32l0xx_hal_lptim.c	/^uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:uint32_t
HAL_LPTIM_SetOnce_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_SetOnce_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_SetOnce_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_SetOnce_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_SetOnce_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_SetOnce_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_TimeOut_Start	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_TimeOut_Start_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_TimeOut_Stop	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_TimeOut_Stop_IT	stm/hal/src/stm32l0xx_hal_lptim.c	/^HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_LPTIM_TriggerCallback	stm/hal/src/stm32l0xx_hal_lptim.c	/^__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)$/;"	f	typeref:typename:__weak void
HAL_MPU_ConfigRegion	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)$/;"	f	typeref:typename:void
HAL_MPU_Disable	stm/hal/inc/stm32l0xx_hal_cortex.h	/^__STATIC_INLINE void HAL_MPU_Disable(void)$/;"	f	typeref:typename:__STATIC_INLINE void
HAL_MPU_Enable	stm/hal/inc/stm32l0xx_hal_cortex.h	/^__STATIC_INLINE void HAL_MPU_Enable(uint32_t MPU_Control)$/;"	f	typeref:typename:__STATIC_INLINE void
HAL_MspDeInit	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_MspDeInit(void)$/;"	f	typeref:typename:__weak void
HAL_MspInit	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_MspInit(void)$/;"	f	typeref:typename:__weak void
HAL_MultiProcessorEx_AddressLength_Set	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t Add/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_MultiProcessor_DisableMuteMode	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_MultiProcessor_EnableMuteMode	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_MultiProcessor_EnterMuteMode	stm/hal/src/stm32l0xx_hal_uart.c	/^void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:void
HAL_MultiProcessor_Init	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t W/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_NVIC_ClearPendingIRQ	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:void
HAL_NVIC_DisableIRQ	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:void
HAL_NVIC_EnableIRQ	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:void
HAL_NVIC_GetPendingIRQ	stm/hal/src/stm32l0xx_hal_cortex.c	/^uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:uint32_t
HAL_NVIC_GetPriority	stm/hal/src/stm32l0xx_hal_cortex.c	/^uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)$/;"	f	typeref:typename:uint32_t
HAL_NVIC_SetPendingIRQ	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:void
HAL_NVIC_SetPriority	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)$/;"	f	typeref:typename:void
HAL_NVIC_SystemReset	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_NVIC_SystemReset(void)$/;"	f	typeref:typename:void
HAL_PCDEx_ActivateBCD	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCDEx_ActivateLPM	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCDEx_BCD_Callback	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)$/;"	f	typeref:typename:__weak void
HAL_PCDEx_BCD_VBUSDetect	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCDEx_DeActivateBCD	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCDEx_DeActivateLPM	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^HAL_StatusTypeDef HAL_PCDEx_DeActivateLPM(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCDEx_LPM_Callback	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)$/;"	f	typeref:typename:__weak void
HAL_PCDEx_PMAConfig	stm/hal/src/stm32l0xx_hal_pcd_ex.c	/^HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCDEx_SetConnectionState	twr/stm/src/usbd_conf.c	/^void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)$/;"	f	typeref:typename:void
HAL_PCD_ActivateRemoteWakeup	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_ConnectCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_ConnectCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_DataInStageCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:__weak void
HAL_PCD_DataInStageCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:void
HAL_PCD_DataOutStageCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:__weak void
HAL_PCD_DataOutStageCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:void
HAL_PCD_DeActivateRemoteWakeup	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_DeInit	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_DevConnect	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_DevDisconnect	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_DisconnectCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_DisconnectCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_EP_Close	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_ClrStall	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_Flush	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_GetRxCount	stm/hal/src/stm32l0xx_hal_pcd.c	/^uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)$/;"	f	typeref:typename:uint16_t
HAL_PCD_EP_Open	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_Receive	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_SetStall	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_EP_Transmit	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_GetState	stm/hal/src/stm32l0xx_hal_pcd.c	/^PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:PCD_StateTypeDef
HAL_PCD_IRQHandler	stm/hal/src/stm32l0xx_hal_pcd.c	/^void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_ISOINIncompleteCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:__weak void
HAL_PCD_ISOINIncompleteCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:void
HAL_PCD_ISOOUTIncompleteCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:__weak void
HAL_PCD_ISOOUTIncompleteCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)$/;"	f	typeref:typename:void
HAL_PCD_Init	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_MspDeInit	stm/hal/src/stm32l0xx_hal_pcd.c	/^__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_MspDeInit	twr/stm/src/usbd_conf.c	/^void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)$/;"	f	typeref:typename:void
HAL_PCD_MspInit	stm/hal/src/stm32l0xx_hal_pcd.c	/^__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_MspInit	twr/stm/src/usbd_conf.c	/^void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)$/;"	f	typeref:typename:void
HAL_PCD_ResetCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_ResetCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_ResumeCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_ResumeCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_SOFCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_SOFCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_SetAddress	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_SetupStageCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_SetupStageCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PCD_Start	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_Stop	stm/hal/src/stm32l0xx_hal_pcd.c	/^HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PCD_SuspendCallback	stm/hal/src/stm32l0xx_hal_pcd.c	/^ __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:__weak void
HAL_PCD_SuspendCallback	twr/stm/src/usbd_conf.c	/^void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:void
HAL_PWREx_DisableFastWakeUp	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^void HAL_PWREx_DisableFastWakeUp(void)$/;"	f	typeref:typename:void
HAL_PWREx_DisableLowPowerRunMode	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_PWREx_DisableUltraLowPower	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^void HAL_PWREx_DisableUltraLowPower(void)$/;"	f	typeref:typename:void
HAL_PWREx_EnableFastWakeUp	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^void HAL_PWREx_EnableFastWakeUp(void)$/;"	f	typeref:typename:void
HAL_PWREx_EnableLowPowerRunMode	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^void HAL_PWREx_EnableLowPowerRunMode(void)$/;"	f	typeref:typename:void
HAL_PWREx_EnableUltraLowPower	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^void HAL_PWREx_EnableUltraLowPower(void)$/;"	f	typeref:typename:void
HAL_PWREx_GetVoltageRange	stm/hal/src/stm32l0xx_hal_pwr_ex.c	/^uint32_t HAL_PWREx_GetVoltageRange(void)$/;"	f	typeref:typename:uint32_t
HAL_PWR_ConfigPVD	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)$/;"	f	typeref:typename:void
HAL_PWR_DeInit	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DeInit(void)$/;"	f	typeref:typename:void
HAL_PWR_DisableBkUpAccess	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DisableBkUpAccess(void)$/;"	f	typeref:typename:void
HAL_PWR_DisablePVD	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DisablePVD(void)$/;"	f	typeref:typename:void
HAL_PWR_DisableSEVOnPend	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DisableSEVOnPend(void)$/;"	f	typeref:typename:void
HAL_PWR_DisableSleepOnExit	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DisableSleepOnExit(void)$/;"	f	typeref:typename:void
HAL_PWR_DisableWakeUpPin	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)$/;"	f	typeref:typename:void
HAL_PWR_EnableBkUpAccess	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnableBkUpAccess(void)$/;"	f	typeref:typename:void
HAL_PWR_EnablePVD	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnablePVD(void)$/;"	f	typeref:typename:void
HAL_PWR_EnableSEVOnPend	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnableSEVOnPend(void)$/;"	f	typeref:typename:void
HAL_PWR_EnableSleepOnExit	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnableSleepOnExit(void)$/;"	f	typeref:typename:void
HAL_PWR_EnableWakeUpPin	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)$/;"	f	typeref:typename:void
HAL_PWR_EnterSLEEPMode	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)$/;"	f	typeref:typename:void
HAL_PWR_EnterSTANDBYMode	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnterSTANDBYMode(void)$/;"	f	typeref:typename:void
HAL_PWR_EnterSTOPMode	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)$/;"	f	typeref:typename:void
HAL_PWR_PVDCallback	stm/hal/src/stm32l0xx_hal_pwr.c	/^__weak void HAL_PWR_PVDCallback(void)$/;"	f	typeref:typename:__weak void
HAL_PWR_PVD_IRQHandler	stm/hal/src/stm32l0xx_hal_pwr.c	/^void HAL_PWR_PVD_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_RCCEx_CRSConfig	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)$/;"	f	typeref:typename:void
HAL_RCCEx_CRSGetSynchronizationInfo	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)$/;"	f	typeref:typename:void
HAL_RCCEx_CRSSoftwareSynchronizationGenerate	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)$/;"	f	typeref:typename:void
HAL_RCCEx_CRSWaitSynchronization	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)$/;"	f	typeref:typename:uint32_t
HAL_RCCEx_CRS_ErrorCallback	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)$/;"	f	typeref:typename:__weak void
HAL_RCCEx_CRS_ExpectedSyncCallback	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)$/;"	f	typeref:typename:__weak void
HAL_RCCEx_CRS_IRQHandler	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_CRS_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_RCCEx_CRS_SyncOkCallback	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^__weak void HAL_RCCEx_CRS_SyncOkCallback(void)$/;"	f	typeref:typename:__weak void
HAL_RCCEx_CRS_SyncWarnCallback	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)$/;"	f	typeref:typename:__weak void
HAL_RCCEx_DisableHSI48_VREFINT	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_DisableHSI48_VREFINT(void)$/;"	f	typeref:typename:void
HAL_RCCEx_DisableLSECSS	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_DisableLSECSS(void)$/;"	f	typeref:typename:void
HAL_RCCEx_EnableHSI48_VREFINT	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_EnableHSI48_VREFINT(void)$/;"	f	typeref:typename:void
HAL_RCCEx_EnableLSECSS	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_EnableLSECSS(void)$/;"	f	typeref:typename:void
HAL_RCCEx_EnableLSECSS_IT	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_EnableLSECSS_IT(void)$/;"	f	typeref:typename:void
HAL_RCCEx_GetPeriphCLKConfig	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)$/;"	f	typeref:typename:void
HAL_RCCEx_GetPeriphCLKFreq	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)$/;"	f	typeref:typename:uint32_t
HAL_RCCEx_LSECSS_Callback	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^__weak void HAL_RCCEx_LSECSS_Callback(void)$/;"	f	typeref:typename:__weak void
HAL_RCCEx_LSECSS_IRQHandler	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^void HAL_RCCEx_LSECSS_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_RCCEx_PeriphCLKConfig	stm/hal/src/stm32l0xx_hal_rcc_ex.c	/^HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RCC_CSSCallback	stm/hal/src/stm32l0xx_hal_rcc.c	/^__weak void HAL_RCC_CSSCallback(void)$/;"	f	typeref:typename:__weak void
HAL_RCC_ClockConfig	stm/hal/src/stm32l0xx_hal_rcc.c	/^HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RCC_DeInit	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_DeInit(void)$/;"	f	typeref:typename:void
HAL_RCC_EnableCSS	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_EnableCSS(void)$/;"	f	typeref:typename:void
HAL_RCC_GetClockConfig	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)$/;"	f	typeref:typename:void
HAL_RCC_GetHCLKFreq	stm/hal/src/stm32l0xx_hal_rcc.c	/^uint32_t HAL_RCC_GetHCLKFreq(void)$/;"	f	typeref:typename:uint32_t
HAL_RCC_GetOscConfig	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)$/;"	f	typeref:typename:void
HAL_RCC_GetPCLK1Freq	stm/hal/src/stm32l0xx_hal_rcc.c	/^uint32_t HAL_RCC_GetPCLK1Freq(void)$/;"	f	typeref:typename:uint32_t
HAL_RCC_GetPCLK2Freq	stm/hal/src/stm32l0xx_hal_rcc.c	/^uint32_t HAL_RCC_GetPCLK2Freq(void)$/;"	f	typeref:typename:uint32_t
HAL_RCC_GetSysClockFreq	stm/hal/src/stm32l0xx_hal_rcc.c	/^uint32_t HAL_RCC_GetSysClockFreq(void)$/;"	f	typeref:typename:uint32_t
HAL_RCC_MCOConfig	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)$/;"	f	typeref:typename:void
HAL_RCC_NMI_IRQHandler	stm/hal/src/stm32l0xx_hal_rcc.c	/^void HAL_RCC_NMI_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_RCC_OscConfig	stm/hal/src/stm32l0xx_hal_rcc.c	/^HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RNG_DeInit	stm/hal/src/stm32l0xx_hal_rng.c	/^HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RNG_ErrorCallback	stm/hal/src/stm32l0xx_hal_rng.c	/^__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:__weak void
HAL_RNG_GenerateRandomNumber	stm/hal/src/stm32l0xx_hal_rng.c	/^HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RNG_GenerateRandomNumber_IT	stm/hal/src/stm32l0xx_hal_rng.c	/^HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RNG_GetRandomNumber	stm/hal/src/stm32l0xx_hal_rng.c	/^uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:uint32_t
HAL_RNG_GetRandomNumber_IT	stm/hal/src/stm32l0xx_hal_rng.c	/^uint32_t HAL_RNG_GetRandomNumber_IT(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:uint32_t
HAL_RNG_GetState	stm/hal/src/stm32l0xx_hal_rng.c	/^HAL_RNG_StateTypeDef HAL_RNG_GetState(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:HAL_RNG_StateTypeDef
HAL_RNG_IRQHandler	stm/hal/src/stm32l0xx_hal_rng.c	/^void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:void
HAL_RNG_Init	stm/hal/src/stm32l0xx_hal_rng.c	/^HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RNG_MspDeInit	stm/hal/src/stm32l0xx_hal_rng.c	/^__weak void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:__weak void
HAL_RNG_MspInit	stm/hal/src/stm32l0xx_hal_rng.c	/^__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:__weak void
HAL_RNG_ReadLastRandomNumber	stm/hal/src/stm32l0xx_hal_rng.c	/^uint32_t HAL_RNG_ReadLastRandomNumber(RNG_HandleTypeDef *hrng)$/;"	f	typeref:typename:uint32_t
HAL_RNG_ReadyDataCallback	stm/hal/src/stm32l0xx_hal_rng.c	/^__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)$/;"	f	typeref:typename:__weak void
HAL_RS485Ex_Init	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t Assert/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_AlarmBEventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_BKUPRead	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)$/;"	f	typeref:typename:uint32_t
HAL_RTCEx_BKUPWrite	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)$/;"	f	typeref:typename:void
HAL_RTCEx_DeactivateCalibrationOutPut	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_DeactivateRefClock	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_DeactivateTamper	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_DeactivateTimeStamp	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_DeactivateWakeUpTimer	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:uint32_t
HAL_RTCEx_DisableBypassShadow	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_EnableBypassShadow	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_GetTimeStamp	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* sTimeStamp, R/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_GetWakeUpTimer	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:uint32_t
HAL_RTCEx_PollForAlarmBEvent	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForAlarmBEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_PollForTamper1Event	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_PollForTamper2Event	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForTamper2Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_PollForTamper3Event	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForTamper3Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_PollForTimeStampEvent	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_PollForWakeUpTimerEvent	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetCalibrationOutPut	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetRefClock	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetSmoothCalib	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetSynchroShift	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetSynchroShift(RTC_HandleTypeDef* hrtc, uint32_t ShiftAdd1S, uint32/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetTamper	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetTamper_IT	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetTimeStamp	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetTimeStamp_IT	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetWakeUpTimer	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_SetWakeUpTimer_IT	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTCEx_Tamper1EventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_Tamper2EventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_Tamper3EventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_TamperTimeStampIRQHandler	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:void
HAL_RTCEx_TimeStampEventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_WakeUpTimerEventCallback	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTCEx_WakeUpTimerIRQHandler	stm/hal/src/stm32l0xx_hal_rtc_ex.c	/^void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:void
HAL_RTC_AlarmAEventCallback	stm/hal/src/stm32l0xx_hal_rtc.c	/^__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTC_AlarmIRQHandler	stm/hal/src/stm32l0xx_hal_rtc.c	/^void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:void
HAL_RTC_DeInit	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_DeactivateAlarm	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_GetAlarm	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t A/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_GetDate	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Form/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_GetState	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_RTCStateTypeDef
HAL_RTC_GetTime	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Form/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_Init	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_MspDeInit	stm/hal/src/stm32l0xx_hal_rtc.c	/^__weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTC_MspInit	stm/hal/src/stm32l0xx_hal_rtc.c	/^__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:__weak void
HAL_RTC_PollForAlarmAEvent	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_SetAlarm	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_SetAlarm_IT	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_SetDate	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Form/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_SetTime	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Form/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_RTC_WaitForSynchro	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_ResumeTick	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_ResumeTick(void)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARDEx_BlockLength_Config	stm/hal/src/stm32l0xx_hal_smartcard_ex.c	/^void HAL_SMARTCARDEx_BlockLength_Config(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t BlockLength/;"	f	typeref:typename:void
HAL_SMARTCARDEx_DisableReceiverTimeOut	stm/hal/src/stm32l0xx_hal_smartcard_ex.c	/^HAL_StatusTypeDef HAL_SMARTCARDEx_DisableReceiverTimeOut(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARDEx_EnableReceiverTimeOut	stm/hal/src/stm32l0xx_hal_smartcard_ex.c	/^HAL_StatusTypeDef HAL_SMARTCARDEx_EnableReceiverTimeOut(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARDEx_TimeOut_Config	stm/hal/src/stm32l0xx_hal_smartcard_ex.c	/^void HAL_SMARTCARDEx_TimeOut_Config(SMARTCARD_HandleTypeDef *hsmartcard, uint32_t TimeOutValue)$/;"	f	typeref:typename:void
HAL_SMARTCARD_Abort	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Abort(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_AbortCpltCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_AbortCpltCallback (SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_AbortReceive	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_AbortReceive(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_AbortReceiveCpltCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_AbortReceiveCpltCallback (SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_AbortReceive_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_AbortReceive_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_AbortTransmit	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_AbortTransmit(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_AbortTransmitCpltCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_AbortTransmitCpltCallback (SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_AbortTransmit_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_AbortTransmit_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_Abort_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Abort_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_DeInit	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_DeInit(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_ErrorCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_ErrorCallback(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_GetError	stm/hal/src/stm32l0xx_hal_smartcard.c	/^uint32_t HAL_SMARTCARD_GetError(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:uint32_t
HAL_SMARTCARD_GetState	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_SMARTCARD_StateTypeDef HAL_SMARTCARD_GetState(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_SMARTCARD_StateTypeDef
HAL_SMARTCARD_IRQHandler	stm/hal/src/stm32l0xx_hal_smartcard.c	/^void HAL_SMARTCARD_IRQHandler(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:void
HAL_SMARTCARD_Init	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_MspDeInit	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_MspDeInit(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_MspInit	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_Receive	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_Receive_DMA	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_Receive_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_RxCpltCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_RxCpltCallback(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMARTCARD_Transmit	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_Transmit_DMA	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_Transmit_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsmartcard, uint8_t *pData,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMARTCARD_TxCpltCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^__weak void HAL_SMARTCARD_TxCpltCallback(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_AddrCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint1/;"	f	typeref:typename:__weak void
HAL_SMBUS_DeInit	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_DeInit(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_DisableAlert_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_DisableAlert_IT(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_DisableListen_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_DisableListen_IT(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_ER_IRQHandler	stm/hal/src/stm32l0xx_hal_smbus.c	/^void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:void
HAL_SMBUS_EV_IRQHandler	stm/hal/src/stm32l0xx_hal_smbus.c	/^void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:void
HAL_SMBUS_EnableAlert_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_EnableListen_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_EnableListen_IT(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_ErrorCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_GetError	stm/hal/src/stm32l0xx_hal_smbus.c	/^uint32_t HAL_SMBUS_GetError(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:uint32_t
HAL_SMBUS_GetState	stm/hal/src/stm32l0xx_hal_smbus.c	/^uint32_t HAL_SMBUS_GetState(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:uint32_t
HAL_SMBUS_Init	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_IsDeviceReady	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_IsDeviceReady(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_ListenCpltCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_MasterRxCpltCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_MasterTxCpltCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_Master_Abort_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Master_Abort_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_Master_Receive_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Master_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_Master_Transmit_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Master_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_MspDeInit	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_MspDeInit(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_MspInit	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_SlaveRxCpltCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_SlaveTxCpltCallback	stm/hal/src/stm32l0xx_hal_smbus.c	/^__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:__weak void
HAL_SMBUS_Slave_Receive_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Slave_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SMBUS_Slave_Transmit_IT	stm/hal/src/stm32l0xx_hal_smbus.c	/^HAL_StatusTypeDef HAL_SMBUS_Slave_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint1/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_DMAPause	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_DMAResume	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_DMAStop	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_DeInit	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_ErrorCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^ __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_GetError	stm/hal/src/stm32l0xx_hal_spi.c	/^uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:uint32_t
HAL_SPI_GetState	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_SPI_StateTypeDef
HAL_SPI_IRQHandler	stm/hal/src/stm32l0xx_hal_spi.c	/^void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void
HAL_SPI_Init	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_MspDeInit	stm/hal/src/stm32l0xx_hal_spi.c	/^ __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_MspInit	stm/hal/src/stm32l0xx_hal_spi.c	/^ __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_Receive	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_Receive_DMA	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_Receive_IT	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_RxCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_RxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_Transmit	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint3/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_TransmitReceive	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pR/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_TransmitReceive_DMA	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_TransmitReceive_IT	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_Transmit_DMA	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_Transmit_IT	stm/hal/src/stm32l0xx_hal_spi.c	/^HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_SPI_TxCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_TxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_TxRxCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SPI_TxRxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_spi.c	/^__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:__weak void
HAL_SYSCFG_Disable_Lock_VREFINT	stm/hal/src/stm32l0xx_hal.c	/^void HAL_SYSCFG_Disable_Lock_VREFINT(void)$/;"	f	typeref:typename:void
HAL_SYSCFG_Enable_Lock_VREFINT	stm/hal/src/stm32l0xx_hal.c	/^void HAL_SYSCFG_Enable_Lock_VREFINT(void)$/;"	f	typeref:typename:void
HAL_SYSCFG_GetBootMode	stm/hal/src/stm32l0xx_hal.c	/^uint32_t  HAL_SYSCFG_GetBootMode(void)$/;"	f	typeref:typename:uint32_t
HAL_SYSCFG_VREFINT_OutputSelect	stm/hal/src/stm32l0xx_hal.c	/^void HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)$/;"	f	typeref:typename:void
HAL_SYSTICK_CLKSourceConfig	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)$/;"	f	typeref:typename:void
HAL_SYSTICK_Callback	stm/hal/src/stm32l0xx_hal_cortex.c	/^__weak void HAL_SYSTICK_Callback(void)$/;"	f	typeref:typename:__weak void
HAL_SYSTICK_Config	stm/hal/src/stm32l0xx_hal_cortex.c	/^uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)$/;"	f	typeref:typename:uint32_t
HAL_SYSTICK_IRQHandler	stm/hal/src/stm32l0xx_hal_cortex.c	/^void HAL_SYSTICK_IRQHandler(void)$/;"	f	typeref:typename:void
HAL_SuspendTick	stm/hal/src/stm32l0xx_hal.c	/^__weak void HAL_SuspendTick(void)$/;"	f	typeref:typename:__weak void
HAL_TIMEx_MasterConfigSynchronization	stm/hal/src/stm32l0xx_hal_tim_ex.c	/^HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfi/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIMEx_RemapConfig	stm/hal/src/stm32l0xx_hal_tim_ex.c	/^HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_Base_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_Base_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_Base_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_Start_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Leng/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_Stop_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Base_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_ConfigClockSource	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sC/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_ConfigOCrefClear	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_ConfigTI1Input	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_DMABurst_ReadStart	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_DMABurst_ReadStop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_DMABurst_WriteStart	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_DMABurst_WriteStop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_Encoder_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfi/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_Encoder_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_Encoder_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_Start_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_Stop_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_Encoder_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_ErrorCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_GenerateEvent	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_CaptureCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_IC_ConfigChannel	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_IC_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_IC_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_IC_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_Start_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pDat/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_Stop_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IC_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_IRQHandler	stm/hal/src/stm32l0xx_hal_tim.c	/^void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:void
HAL_TIM_OC_ConfigChannel	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig,/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_DelayElapsedCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_OC_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_OC_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_OC_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_OC_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_Start_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pDat/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_Stop_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OC_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_ConfigChannel	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitType/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_OnePulse_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_OnePulse_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_OnePulse_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_OnePulse_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_ConfigChannel	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_DeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_GetState	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_TIM_StateTypeDef
HAL_TIM_PWM_Init	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_MspDeInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_PWM_MspInit	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_PWM_PulseFinishedCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_PWM_Start	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_Start_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pDa/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_Start_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_Stop	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_Stop_DMA	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PWM_Stop_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_PeriodElapsedCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TIM_PeriodElapsedCallback	twr/src/twr_ws2812b.c	/^void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:void
HAL_TIM_ReadCapturedValue	stm/hal/src/stm32l0xx_hal_tim.c	/^uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)$/;"	f	typeref:typename:uint32_t
HAL_TIM_SlaveConfigSynchronization	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTyp/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_SlaveConfigSynchronization_IT	stm/hal/src/stm32l0xx_hal_tim.c	/^HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TIM_TriggerCallback	stm/hal/src/stm32l0xx_hal_tim.c	/^__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)$/;"	f	typeref:typename:__weak void
HAL_TSC_ConvCpltCallback	stm/hal/src/stm32l0xx_hal_tsc.c	/^__weak void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:__weak void
HAL_TSC_DeInit	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_DeInit(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_ErrorCallback	stm/hal/src/stm32l0xx_hal_tsc.c	/^__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:__weak void
HAL_TSC_GetState	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_TSC_StateTypeDef HAL_TSC_GetState(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_TSC_StateTypeDef
HAL_TSC_GroupGetStatus	stm/hal/src/stm32l0xx_hal_tsc.c	/^TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef* htsc, uint32_t gx_index)$/;"	f	typeref:typename:TSC_GroupStatusTypeDef
HAL_TSC_GroupGetValue	stm/hal/src/stm32l0xx_hal_tsc.c	/^uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef* htsc, uint32_t gx_index)$/;"	f	typeref:typename:uint32_t
HAL_TSC_IOConfig	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef* htsc, TSC_IOConfigTypeDef* config)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_IODischarge	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef* htsc, uint32_t choice)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_IRQHandler	stm/hal/src/stm32l0xx_hal_tsc.c	/^void HAL_TSC_IRQHandler(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:void
HAL_TSC_Init	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_MspDeInit	stm/hal/src/stm32l0xx_hal_tsc.c	/^__weak void HAL_TSC_MspDeInit(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:__weak void
HAL_TSC_MspInit	stm/hal/src/stm32l0xx_hal_tsc.c	/^__weak void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:__weak void
HAL_TSC_PollForAcquisition	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_PollForAcquisition(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_Start	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_Start(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_Start_IT	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_Stop	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_Stop(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_TSC_Stop_IT	stm/hal/src/stm32l0xx_hal_tsc.c	/^HAL_StatusTypeDef HAL_TSC_Stop_IT(TSC_HandleTypeDef* htsc)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_DisableClockStopMode	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_DisableStopMode	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_EnableClockStopMode	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_EnableStopMode	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_StopModeWakeUpSourceConfig	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTy/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UARTEx_WakeupCallback	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_Abort	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_AbortCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_AbortReceive	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_AbortReceiveCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_AbortReceive_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_AbortTransmit	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_AbortTransmitCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_AbortTransmit_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_Abort_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_DMAPause	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_DMAResume	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_DMAStop	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_DeInit	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_ErrorCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_GetError	stm/hal/src/stm32l0xx_hal_uart.c	/^uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:uint32_t
HAL_UART_GetState	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_UART_StateTypeDef
HAL_UART_IRQHandler	stm/hal/src/stm32l0xx_hal_uart.c	/^void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:void
HAL_UART_Init	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_MspDeInit	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_MspInit	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_Receive	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uin/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_Receive_DMA	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_Receive_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_RxCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_RxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_Transmit	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_Transmit_DMA	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_Transmit_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_UART_TxCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_UART_TxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:__weak void
HAL_USART_Abort	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Abort(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_AbortCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_AbortCpltCallback (USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_Abort_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Abort_IT(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_DMAPause	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_DMAResume	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_DMAStop	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_DeInit	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_ErrorCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_GetError	stm/hal/src/stm32l0xx_hal_usart.c	/^uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:uint32_t
HAL_USART_GetState	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_USART_StateTypeDef
HAL_USART_IRQHandler	stm/hal/src/stm32l0xx_hal_usart.c	/^void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:void
HAL_USART_Init	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_MspDeInit	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_MspDeInit(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_MspInit	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_Receive	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_Receive_DMA	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_Receive_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t S/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_RxCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_RxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_Transmit	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Siz/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_TransmitReceive	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_TransmitReceive_DMA	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, u/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_TransmitReceive_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, ui/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_Transmit_DMA	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_Transmit_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t /;"	f	typeref:typename:HAL_StatusTypeDef
HAL_USART_TxCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_TxHalfCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_USART_TxRxCpltCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:__weak void
HAL_WWDG_EarlyWakeupCallback	stm/hal/src/stm32l0xx_hal_wwdg.c	/^__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)$/;"	f	typeref:typename:__weak void
HAL_WWDG_IRQHandler	stm/hal/src/stm32l0xx_hal_wwdg.c	/^void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)$/;"	f	typeref:typename:void
HAL_WWDG_Init	stm/hal/src/stm32l0xx_hal_wwdg.c	/^HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)$/;"	f	typeref:typename:HAL_StatusTypeDef
HAL_WWDG_MspInit	stm/hal/src/stm32l0xx_hal_wwdg.c	/^__weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)$/;"	f	typeref:typename:__weak void
HAL_WWDG_Refresh	stm/hal/src/stm32l0xx_hal_wwdg.c	/^HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)$/;"	f	typeref:typename:HAL_StatusTypeDef
HardFault_Handler	twr/src/twr_system.c	/^void HardFault_Handler(void)$/;"	f	typeref:typename:void
I2C_DMAAbort	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_DMAError	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_DMAMasterReceiveCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_DMAMasterTransmitCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_DMASlaveReceiveCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_DMASlaveTransmitCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2C_Disable_IRQ	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Enable_IRQ	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Flush_TXDR	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:void	file:
I2C_ITAddrCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)$/;"	f	typeref:typename:void	file:
I2C_ITError	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)$/;"	f	typeref:typename:void	file:
I2C_ITListenCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)$/;"	f	typeref:typename:void	file:
I2C_ITMasterCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)$/;"	f	typeref:typename:void	file:
I2C_ITMasterSequentialCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:void	file:
I2C_ITSlaveCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)$/;"	f	typeref:typename:void	file:
I2C_ITSlaveSequentialCplt	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)$/;"	f	typeref:typename:void	file:
I2C_IsAcknowledgeFailed	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Master_ISR_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, /;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Master_ISR_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, u/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_RequestMemoryRead	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uin/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_RequestMemoryWrite	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, ui/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Slave_ISR_DMA	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, u/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_Slave_ISR_IT	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, ui/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_TransferConfig	stm/hal/src/stm32l0xx_hal_i2c.c	/^static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint/;"	f	typeref:typename:void	file:
I2C_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, Flag/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_WaitOnRXNEFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeou/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_WaitOnSTOPFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeou/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2C_WaitOnTXISFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_i2c.c	/^static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeou/;"	f	typeref:typename:HAL_StatusTypeDef	file:
I2S_DMAError	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2S_DMARxCplt	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2S_DMARxHalfCplt	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2S_DMATxCplt	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2S_DMATxHalfCplt	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
I2S_Receive_IT	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:void	file:
I2S_Transmit_IT	stm/hal/src/stm32l0xx_hal_i2s.c	/^static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)$/;"	f	typeref:typename:void	file:
I2S_WaitFlagStateUntilTimeout	stm/hal/src/stm32l0xx_hal_i2s.c	/^static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, u/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_CheckIdleState	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_DMAAbortOnError	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMAError	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMAReceiveCplt	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMAReceiveHalfCplt	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMARxAbortCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMARxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMATransmitCplt	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMATransmitHalfCplt	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMATxAbortCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_DMATxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
IRDA_EndRxTransfer	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:void	file:
IRDA_EndTransmit_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_EndTxTransfer	stm/hal/src/stm32l0xx_hal_irda.c	/^static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:void	file:
IRDA_Receive_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_SetConfig	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_Transmit_IT	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
IRDA_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_irda.c	/^static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, F/;"	f	typeref:typename:HAL_StatusTypeDef	file:
LCD_WaitForSynchro	stm/hal/src/stm32l0xx_hal_lcd.c	/^HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)$/;"	f	typeref:typename:HAL_StatusTypeDef
NMI_Handler	twr/src/main.c	/^void NMI_Handler(void)$/;"	f	typeref:typename:void
NVIC_DecodePriority	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* c/;"	f	typeref:typename:__STATIC_INLINE void
NVIC_EncodePriority	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, /;"	f	typeref:typename:__STATIC_INLINE uint32_t
PCD_EP_ISR_Handler	stm/hal/src/stm32l0xx_hal_pcd.c	/^static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
PCD_ReadPMA	stm/hal/src/stm32l0xx_hal_pcd.c	/^void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)$/;"	f	typeref:typename:void
PCD_WritePMA	stm/hal/src/stm32l0xx_hal_pcd.c	/^void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)$/;"	f	typeref:typename:void
PendSV_Handler	twr/src/main.c	/^void PendSV_Handler(void)$/;"	f	typeref:typename:void
RCC_SetFlashLatencyFromMSIRange	stm/hal/src/stm32l0xx_hal_rcc.c	/^static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
RTC_Bcd2ToByte	stm/hal/src/stm32l0xx_hal_rtc.c	/^uint8_t RTC_Bcd2ToByte(uint8_t Value)$/;"	f	typeref:typename:uint8_t
RTC_ByteToBcd2	stm/hal/src/stm32l0xx_hal_rtc.c	/^uint8_t RTC_ByteToBcd2(uint8_t Value)$/;"	f	typeref:typename:uint8_t
RTC_EnterInitMode	stm/hal/src/stm32l0xx_hal_rtc.c	/^HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)$/;"	f	typeref:typename:HAL_StatusTypeDef
RTC_IRQHandler	twr/src/twr_system.c	/^void RTC_IRQHandler(void)$/;"	f	typeref:typename:void
SCB_GetFPUType	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t SCB_GetFPUType(void)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
SMARTCARD_AdvFeatureConfig	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_AdvFeatureConfig(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:void	file:
SMARTCARD_CheckIdleState	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_CheckIdleState(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMARTCARD_DMAAbortOnError	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMAAbortOnError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMAError	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMAReceiveCplt	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMARxAbortCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMARxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMARxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMATransmitCplt	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMATransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMATxAbortCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMATxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_DMATxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SMARTCARD_EndRxTransfer	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_EndRxTransfer(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:void	file:
SMARTCARD_EndTransmit_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_EndTransmit_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMARTCARD_EndTxTransfer	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static void SMARTCARD_EndTxTransfer(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:void	file:
SMARTCARD_Receive_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMARTCARD_SetConfig	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMARTCARD_Transmit_IT	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsmartcard)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMARTCARD_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_smartcard.c	/^static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsmartcard, u/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMBUS_ConvertOtherXferOptions	stm/hal/src/stm32l0xx_hal_smbus.c	/^static void SMBUS_ConvertOtherXferOptions(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:void	file:
SMBUS_Disable_IRQ	stm/hal/src/stm32l0xx_hal_smbus.c	/^static HAL_StatusTypeDef SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint16_t InterruptReques/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMBUS_Enable_IRQ	stm/hal/src/stm32l0xx_hal_smbus.c	/^static HAL_StatusTypeDef SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint16_t InterruptRequest/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMBUS_Master_ISR	stm/hal/src/stm32l0xx_hal_smbus.c	/^static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMBUS_Slave_ISR	stm/hal/src/stm32l0xx_hal_smbus.c	/^static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SMBUS_TransferConfig	stm/hal/src/stm32l0xx_hal_smbus.c	/^static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size/;"	f	typeref:typename:void	file:
SMBUS_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_smbus.c	/^static HAL_StatusTypeDef SMBUS_WaitOnFlagUntilTimeout(SMBUS_HandleTypeDef *hsmbus, uint32_t Flag/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SPI_2LinesRxISR	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void	file:
SPI_DMAError	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMAHalfReceiveCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMAHalfTransmitCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMAHalfTransmitReceiveCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMAReceiveCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMATransmitCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_DMATransmitReceiveCplt	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
SPI_RxCloseIRQHandler	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void	file:
SPI_RxISR	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_RxISR(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void	file:
SPI_TxCloseIRQHandler	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void	file:
SPI_TxISR	stm/hal/src/stm32l0xx_hal_spi.c	/^static void SPI_TxISR(SPI_HandleTypeDef *hspi)$/;"	f	typeref:typename:void	file:
SPI_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_spi.c	/^static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, Flag/;"	f	typeref:typename:HAL_StatusTypeDef	file:
SVC_Handler	twr/src/main.c	/^void SVC_Handler(void)$/;"	f	typeref:typename:void
SpiritAesDeriveDecKeyExecuteDec	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesDeriveDecKeyExecuteDec(void)$/;"	f	typeref:typename:void
SpiritAesDeriveDecKeyFromEnc	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesDeriveDecKeyFromEnc(void)$/;"	f	typeref:typename:void
SpiritAesExecuteDecryption	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesExecuteDecryption(void)$/;"	f	typeref:typename:void
SpiritAesExecuteEncryption	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesExecuteEncryption(void)$/;"	f	typeref:typename:void
SpiritAesMode	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesMode(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritAesReadDataOut	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesReadDataOut(uint8_t* pcBufferDataOut, uint8_t cDataLength)$/;"	f	typeref:typename:void
SpiritAesReadKey	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesReadKey(uint8_t* pcKey)$/;"	f	typeref:typename:void
SpiritAesWriteDataIn	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesWriteDataIn(uint8_t* pcBufferDataIn, uint8_t cDataLength)$/;"	f	typeref:typename:void
SpiritAesWriteKey	stm/spirit1/src/SPIRIT_Aes.c	/^void SpiritAesWriteKey(uint8_t* pcKey)$/;"	f	typeref:typename:void
SpiritCalibrationGetRcoCalWords	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationGetRcoCalWords(uint8_t* pcRwt, uint8_t* pcRfb)$/;"	f	typeref:typename:void
SpiritCalibrationGetVcoCalData	stm/spirit1/src/SPIRIT_Calibration.c	/^uint8_t SpiritCalibrationGetVcoCalData(void)$/;"	f	typeref:typename:uint8_t
SpiritCalibrationGetVcoCalDataRx	stm/spirit1/src/SPIRIT_Calibration.c	/^uint8_t SpiritCalibrationGetVcoCalDataRx(void)$/;"	f	typeref:typename:uint8_t
SpiritCalibrationGetVcoCalDataTx	stm/spirit1/src/SPIRIT_Calibration.c	/^uint8_t SpiritCalibrationGetVcoCalDataTx(void)$/;"	f	typeref:typename:uint8_t
SpiritCalibrationGetVcoSelecttion	stm/spirit1/src/SPIRIT_Calibration.c	/^VcoSel SpiritCalibrationGetVcoSelecttion(void)$/;"	f	typeref:typename:VcoSel
SpiritCalibrationRco	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationRco(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritCalibrationSelectVco	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationSelectVco(VcoSel xVco)$/;"	f	typeref:typename:void
SpiritCalibrationSetRcoCalWords	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationSetRcoCalWords(uint8_t cRwt, uint8_t cRfb)$/;"	f	typeref:typename:void
SpiritCalibrationSetVcoCalDataRx	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)$/;"	f	typeref:typename:void
SpiritCalibrationSetVcoCalDataTx	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)$/;"	f	typeref:typename:void
SpiritCalibrationVco	stm/spirit1/src/SPIRIT_Calibration.c	/^void SpiritCalibrationVco(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritCmdStrobeCommand	stm/spirit1/src/SPIRIT_Commands.c	/^void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)$/;"	f	typeref:typename:void
SpiritCsma	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsma(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritCsmaGetBuCounterSeed	stm/spirit1/src/SPIRIT_Csma.c	/^uint16_t SpiritCsmaGetBuCounterSeed(void)$/;"	f	typeref:typename:uint16_t
SpiritCsmaGetBuPrescaler	stm/spirit1/src/SPIRIT_Csma.c	/^uint8_t SpiritCsmaGetBuPrescaler(void)$/;"	f	typeref:typename:uint8_t
SpiritCsmaGetCcaLength	stm/spirit1/src/SPIRIT_Csma.c	/^uint8_t SpiritCsmaGetCcaLength(void)$/;"	f	typeref:typename:uint8_t
SpiritCsmaGetCcaPeriod	stm/spirit1/src/SPIRIT_Csma.c	/^CcaPeriod SpiritCsmaGetCcaPeriod(void)$/;"	f	typeref:typename:CcaPeriod
SpiritCsmaGetCsma	stm/spirit1/src/SPIRIT_Csma.c	/^SpiritFunctionalState SpiritCsmaGetCsma(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritCsmaGetInfo	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaGetInfo(CsmaInit* pxCsmaInit)$/;"	f	typeref:typename:void
SpiritCsmaGetMaxNumberBackoff	stm/spirit1/src/SPIRIT_Csma.c	/^uint8_t SpiritCsmaGetMaxNumberBackoff(void)$/;"	f	typeref:typename:uint8_t
SpiritCsmaGetPersistentMode	stm/spirit1/src/SPIRIT_Csma.c	/^SpiritFunctionalState SpiritCsmaGetPersistentMode(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritCsmaGetSeedReloadMode	stm/spirit1/src/SPIRIT_Csma.c	/^SpiritFunctionalState SpiritCsmaGetSeedReloadMode(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritCsmaInit	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaInit(CsmaInit* pxCsmaInit)$/;"	f	typeref:typename:void
SpiritCsmaPersistentMode	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaPersistentMode(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritCsmaSeedReloadMode	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSeedReloadMode(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritCsmaSetBuCounterSeed	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSetBuCounterSeed(uint16_t nBuCounterSeed)$/;"	f	typeref:typename:void
SpiritCsmaSetBuPrescaler	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSetBuPrescaler(uint8_t cBuPrescaler)$/;"	f	typeref:typename:void
SpiritCsmaSetCcaLength	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSetCcaLength(CsmaLength xCcaLength)$/;"	f	typeref:typename:void
SpiritCsmaSetCcaPeriod	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSetCcaPeriod(CcaPeriod xMultiplierTbit)$/;"	f	typeref:typename:void
SpiritCsmaSetMaxNumberBackoff	stm/spirit1/src/SPIRIT_Csma.c	/^void SpiritCsmaSetMaxNumberBackoff(uint8_t cMaxNb)$/;"	f	typeref:typename:void
SpiritDirectRfGetRxMode	stm/spirit1/src/SPIRIT_DirectRF.c	/^DirectRx SpiritDirectRfGetRxMode(void)$/;"	f	typeref:typename:DirectRx
SpiritDirectRfGetTxMode	stm/spirit1/src/SPIRIT_DirectRF.c	/^DirectTx SpiritDirectRfGetTxMode(void)$/;"	f	typeref:typename:DirectTx
SpiritDirectRfSetRxMode	stm/spirit1/src/SPIRIT_DirectRF.c	/^void SpiritDirectRfSetRxMode(DirectRx xDirectRx)$/;"	f	typeref:typename:void
SpiritDirectRfSetTxMode	stm/spirit1/src/SPIRIT_DirectRF.c	/^void SpiritDirectRfSetTxMode(DirectTx xDirectTx)$/;"	f	typeref:typename:void
SpiritGeneralBatteryLevel	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralBatteryLevel(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritGeneralBrownOut	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralBrownOut(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritGeneralGetBatteryLevel	stm/spirit1/src/SPIRIT_General.c	/^BatteryLevel SpiritGeneralGetBatteryLevel(void)$/;"	f	typeref:typename:BatteryLevel
SpiritGeneralGetDevicePartNumber	stm/spirit1/src/SPIRIT_General.c	/^uint16_t SpiritGeneralGetDevicePartNumber(void)$/;"	f	typeref:typename:uint16_t
SpiritGeneralGetExtRef	stm/spirit1/src/SPIRIT_General.c	/^ModeExtRef SpiritGeneralGetExtRef(void)$/;"	f	typeref:typename:ModeExtRef
SpiritGeneralGetPktType	stm/spirit1/src/SPIRIT_General.c	/^PacketType SpiritGeneralGetPktType(void)$/;"	f	typeref:typename:PacketType
SpiritGeneralGetSpiritVersion	stm/spirit1/src/SPIRIT_General.c	/^uint8_t SpiritGeneralGetSpiritVersion(void)$/;"	f	typeref:typename:uint8_t
SpiritGeneralGetXoGm	stm/spirit1/src/SPIRIT_General.c	/^GmConf SpiritGeneralGetXoGm(void)$/;"	f	typeref:typename:GmConf
SpiritGeneralHighPwr	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralHighPwr(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritGeneralSetBatteryLevel	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralSetBatteryLevel(BatteryLevel xBatteryLevel)$/;"	f	typeref:typename:void
SpiritGeneralSetExtRef	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralSetExtRef(ModeExtRef xExtMode)$/;"	f	typeref:typename:void
SpiritGeneralSetXoGm	stm/spirit1/src/SPIRIT_General.c	/^void SpiritGeneralSetXoGm(GmConf xGm)$/;"	f	typeref:typename:void
SpiritGpioClockOutput	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioClockOutput(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritGpioClockOutputInit	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioClockOutputInit(ClockOutputInit* pxClockOutputInitStruct)$/;"	f	typeref:typename:void
SpiritGpioGetExtraClockCycles	stm/spirit1/src/SPIRIT_Gpio.c	/^ExtraClockCycles SpiritGpioGetExtraClockCycles(void)$/;"	f	typeref:typename:ExtraClockCycles
SpiritGpioGetLevel	stm/spirit1/src/SPIRIT_Gpio.c	/^OutputLevel SpiritGpioGetLevel(SpiritGpioPin xGpioX)$/;"	f	typeref:typename:OutputLevel
SpiritGpioGetRCOPrescaler	stm/spirit1/src/SPIRIT_Gpio.c	/^ClockOutputRCOPrescaler SpiritGpioGetRCOPrescaler(void)$/;"	f	typeref:typename:ClockOutputRCOPrescaler
SpiritGpioGetXOPrescaler	stm/spirit1/src/SPIRIT_Gpio.c	/^ClockOutputXOPrescaler SpiritGpioGetXOPrescaler(void)$/;"	f	typeref:typename:ClockOutputXOPrescaler
SpiritGpioInit	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioInit(SGpioInit* pxGpioInitStruct)$/;"	f	typeref:typename:void
SpiritGpioSetExtraClockCycles	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioSetExtraClockCycles(ExtraClockCycles xExtraCycles)$/;"	f	typeref:typename:void
SpiritGpioSetLevel	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioSetLevel(SpiritGpioPin xGpioX, OutputLevel xLevel)$/;"	f	typeref:typename:void
SpiritGpioSetRCOPrescaler	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioSetRCOPrescaler(ClockOutputRCOPrescaler xRCOPrescaler)$/;"	f	typeref:typename:void
SpiritGpioSetXOPrescaler	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioSetXOPrescaler(ClockOutputXOPrescaler xXOPrescaler)$/;"	f	typeref:typename:void
SpiritGpioTemperatureSensor	stm/spirit1/src/SPIRIT_Gpio.c	/^void SpiritGpioTemperatureSensor(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritIrq	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritIrqCheckFlag	stm/spirit1/src/SPIRIT_Irq.c	/^SpiritBool SpiritIrqCheckFlag(IrqList xFlag)$/;"	f	typeref:typename:SpiritBool
SpiritIrqClearStatus	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrqClearStatus(void)$/;"	f	typeref:typename:void
SpiritIrqDeInit	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)$/;"	f	typeref:typename:void
SpiritIrqGetMask	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrqGetMask(SpiritIrqs* pxIrqMask)$/;"	f	typeref:typename:void
SpiritIrqGetStatus	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)$/;"	f	typeref:typename:void
SpiritIrqInit	stm/spirit1/src/SPIRIT_Irq.c	/^void SpiritIrqInit(SpiritIrqs* pxIrqInit)$/;"	f	typeref:typename:void
SpiritLinearFifoGetAlmostEmptyThresholdRx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoGetAlmostEmptyThresholdRx(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoGetAlmostEmptyThresholdTx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoGetAlmostEmptyThresholdTx(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoGetAlmostFullThresholdRx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoGetAlmostFullThresholdRx(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoGetAlmostFullThresholdTx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoGetAlmostFullThresholdTx(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoReadNumElementsRxFifo	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoReadNumElementsTxFifo	stm/spirit1/src/SPIRIT_LinearFifo.c	/^uint8_t SpiritLinearFifoReadNumElementsTxFifo(void)$/;"	f	typeref:typename:uint8_t
SpiritLinearFifoSetAlmostEmptyThresholdRx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^void SpiritLinearFifoSetAlmostEmptyThresholdRx(uint8_t cThrRxFifo)$/;"	f	typeref:typename:void
SpiritLinearFifoSetAlmostEmptyThresholdTx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^void SpiritLinearFifoSetAlmostEmptyThresholdTx(uint8_t cThrTxFifo)$/;"	f	typeref:typename:void
SpiritLinearFifoSetAlmostFullThresholdRx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^void SpiritLinearFifoSetAlmostFullThresholdRx(uint8_t cThrRxFifo)$/;"	f	typeref:typename:void
SpiritLinearFifoSetAlmostFullThresholdTx	stm/spirit1/src/SPIRIT_LinearFifo.c	/^void SpiritLinearFifoSetAlmostFullThresholdTx(uint8_t cThrTxFifo)$/;"	f	typeref:typename:void
SpiritManagementSetFrequencyBase	stm/spirit1/src/SPIRIT_Management.c	/^void SpiritManagementSetFrequencyBase(uint32_t lFBase)$/;"	f	typeref:typename:void
SpiritManagementWaCmdStrobeRx	stm/spirit1/src/SPIRIT_Management.c	/^void SpiritManagementWaCmdStrobeRx(void)$/;"	f	typeref:typename:void
SpiritManagementWaCmdStrobeTx	stm/spirit1/src/SPIRIT_Management.c	/^void SpiritManagementWaCmdStrobeTx(void)$/;"	f	typeref:typename:void
SpiritManagementWaExtraCurrent	stm/spirit1/src/SPIRIT_Management.c	/^void SpiritManagementWaExtraCurrent(void)$/;"	f	typeref:typename:void
SpiritManagementWaTRxFcMem	stm/spirit1/src/SPIRIT_Management.c	/^void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)$/;"	f	typeref:typename:void
SpiritManagementWaVcoCalibration	stm/spirit1/src/SPIRIT_Management.c	/^uint8_t SpiritManagementWaVcoCalibration(void)$/;"	f	typeref:typename:uint8_t
SpiritPktBasicAddressField	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicAddressField(SpiritFunctionalState xAddressField)$/;"	f	typeref:typename:void
SpiritPktBasicAddressesInit	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)$/;"	f	typeref:typename:void
SpiritPktBasicGetAddressField	stm/spirit1/src/SPIRIT_PktBasic.c	/^SpiritFunctionalState SpiritPktBasicGetAddressField(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktBasicGetAddressesInfo	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicGetAddressesInfo(PktBasicAddressesInit* pxPktBasicAddresses)$/;"	f	typeref:typename:void
SpiritPktBasicGetInfo	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicGetInfo(PktBasicInit* pxPktBasicInit)$/;"	f	typeref:typename:void
SpiritPktBasicGetPayloadLength	stm/spirit1/src/SPIRIT_PktBasic.c	/^uint16_t SpiritPktBasicGetPayloadLength(void)$/;"	f	typeref:typename:uint16_t
SpiritPktBasicGetReceivedPktLength	stm/spirit1/src/SPIRIT_PktBasic.c	/^uint16_t SpiritPktBasicGetReceivedPktLength(void)$/;"	f	typeref:typename:uint16_t
SpiritPktBasicInit	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)$/;"	f	typeref:typename:void
SpiritPktBasicSetFormat	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicSetFormat(void)$/;"	f	typeref:typename:void
SpiritPktBasicSetPayloadLength	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)$/;"	f	typeref:typename:void
SpiritPktBasicSetVarLengthWidth	stm/spirit1/src/SPIRIT_PktBasic.c	/^void SpiritPktBasicSetVarLengthWidth(uint16_t nMaxPayloadLength, SpiritFunctionalState xAddressF/;"	f	typeref:typename:void
SpiritPktCommonAutoAck	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonAutoAck(SpiritFunctionalState xAutoAck , SpiritFunctionalState xPiggybacking/;"	f	typeref:typename:void
SpiritPktCommonFec	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFec(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonFilterOnBroadcastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFilterOnBroadcastAddress(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonFilterOnControlField	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFilterOnControlField(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonFilterOnCrc	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonFilterOnMulticastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFilterOnMulticastAddress(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonFilterOnMyAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonFilterOnMyAddress(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonGetBroadcastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetBroadcastAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetControlLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetControlLength(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetCrcMode	stm/spirit1/src/SPIRIT_PktCommon.c	/^PktCrcMode SpiritPktCommonGetCrcMode(void)$/;"	f	typeref:typename:PktCrcMode
SpiritPktCommonGetCtrlMask	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint32_t SpiritPktCommonGetCtrlMask(void)$/;"	f	typeref:typename:uint32_t
SpiritPktCommonGetCtrlReference	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint32_t SpiritPktCommonGetCtrlReference(void)$/;"	f	typeref:typename:uint32_t
SpiritPktCommonGetFilterOnBroadcastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetFilterOnBroadcastAddress(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetFilterOnControlField	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetFilterOnControlField(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetFilterOnCrc	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetFilterOnCrc(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetFilterOnMulticastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetFilterOnMulticastAddress(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetFilterOnMyAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetFilterOnMyAddress(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetMulticastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetMulticastAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetMyAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetMyAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetNMaxReTx	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetNMaxReTx(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetNReTx	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetNReTx(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetPreambleLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetPreambleLength(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetReceivedCrcField	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonGetReceivedCrcField(uint8_t* cCrcFieldVect)$/;"	f	typeref:typename:void
SpiritPktCommonGetReceivedCtrlField	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint32_t SpiritPktCommonGetReceivedCtrlField(void)$/;"	f	typeref:typename:uint32_t
SpiritPktCommonGetReceivedDestAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetReceivedDestAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetReceivedNackRx	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetReceivedNackRx(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetReceivedSeqNumber	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetReceivedSeqNumber(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetReceivedSourceAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetReceivedSourceAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetSyncLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetSyncLength(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetSyncWords	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint32_t SpiritPktCommonGetSyncWords(PktSyncLength xSyncLength)$/;"	f	typeref:typename:uint32_t
SpiritPktCommonGetSyncxWord	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetSyncxWord(PktSyncX xSyncX)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetTransmittedCtrlField	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint32_t SpiritPktCommonGetTransmittedCtrlField(void)$/;"	f	typeref:typename:uint32_t
SpiritPktCommonGetTransmittedDestAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetTransmittedDestAddress(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetTransmittedSeqNumber	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetTransmittedSeqNumber(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonGetTxAckRequest	stm/spirit1/src/SPIRIT_PktCommon.c	/^SpiritFunctionalState SpiritPktCommonGetTxAckRequest(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritPktCommonGetVarLengthWidth	stm/spirit1/src/SPIRIT_PktCommon.c	/^uint8_t SpiritPktCommonGetVarLengthWidth(void)$/;"	f	typeref:typename:uint8_t
SpiritPktCommonRequireAck	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonRequireAck(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktCommonSetBroadcastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetBroadcastAddress(uint8_t cAddress)$/;"	f	typeref:typename:void
SpiritPktCommonSetControlLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetControlLength(PktControlLength xControlLength)$/;"	f	typeref:typename:void
SpiritPktCommonSetCrcMode	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetCrcMode(PktCrcMode xCrcMode)$/;"	f	typeref:typename:void
SpiritPktCommonSetCtrlMask	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetCtrlMask(uint32_t lMask)$/;"	f	typeref:typename:void
SpiritPktCommonSetCtrlReference	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetCtrlReference(uint32_t lReference)$/;"	f	typeref:typename:void
SpiritPktCommonSetDestinationAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)$/;"	f	typeref:typename:void
SpiritPktCommonSetFixVarLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetFixVarLength(PktFixVarLength xFixVarLength)$/;"	f	typeref:typename:void
SpiritPktCommonSetMulticastAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetMulticastAddress(uint8_t cAddress)$/;"	f	typeref:typename:void
SpiritPktCommonSetMyAddress	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetMyAddress(uint8_t cAddress)$/;"	f	typeref:typename:void
SpiritPktCommonSetNMaxReTx	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetNMaxReTx(PktNMaxReTx xNMaxReTx)$/;"	f	typeref:typename:void
SpiritPktCommonSetPreambleLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetPreambleLength(PktPreambleLength xPreambleLength)$/;"	f	typeref:typename:void
SpiritPktCommonSetSyncLength	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetSyncLength(PktSyncLength xSyncLength)$/;"	f	typeref:typename:void
SpiritPktCommonSetSyncWords	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetSyncWords(uint32_t lSyncWords, PktSyncLength xSyncLength)$/;"	f	typeref:typename:void
SpiritPktCommonSetSyncxWord	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetSyncxWord(PktSyncX xSyncX ,  uint8_t cSyncWord)$/;"	f	typeref:typename:void
SpiritPktCommonSetTransmittedCtrlField	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetTransmittedCtrlField(uint32_t lField)$/;"	f	typeref:typename:void
SpiritPktCommonSetTransmittedSeqNumberReload	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonSetTransmittedSeqNumberReload(uint8_t cSeqNumberReload){$/;"	f	typeref:typename:void
SpiritPktCommonWhitening	stm/spirit1/src/SPIRIT_PktCommon.c	/^void SpiritPktCommonWhitening(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktMbusGetInfo	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusGetInfo(PktMbusInit* pxPktMbusInit)$/;"	f	typeref:typename:void
SpiritPktMbusGetPayloadLength	stm/spirit1/src/SPIRIT_PktMbus.c	/^uint16_t SpiritPktMbusGetPayloadLength(void)$/;"	f	typeref:typename:uint16_t
SpiritPktMbusGetPostamble	stm/spirit1/src/SPIRIT_PktMbus.c	/^uint8_t SpiritPktMbusGetPostamble(void)$/;"	f	typeref:typename:uint8_t
SpiritPktMbusGetPreamble	stm/spirit1/src/SPIRIT_PktMbus.c	/^uint8_t SpiritPktMbusGetPreamble(void)$/;"	f	typeref:typename:uint8_t
SpiritPktMbusGetSubmode	stm/spirit1/src/SPIRIT_PktMbus.c	/^MbusSubmode SpiritPktMbusGetSubmode(void)$/;"	f	typeref:typename:MbusSubmode
SpiritPktMbusInit	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusInit(PktMbusInit* pxPktMbusInit)$/;"	f	typeref:typename:void
SpiritPktMbusSetFormat	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusSetFormat(void)$/;"	f	typeref:typename:void
SpiritPktMbusSetPayloadLength	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusSetPayloadLength(uint16_t nPayloadLength)$/;"	f	typeref:typename:void
SpiritPktMbusSetPostamble	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusSetPostamble(uint8_t cPostamble)$/;"	f	typeref:typename:void
SpiritPktMbusSetPreamble	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusSetPreamble(uint8_t cPreamble)$/;"	f	typeref:typename:void
SpiritPktMbusSetSubmode	stm/spirit1/src/SPIRIT_PktMbus.c	/^void SpiritPktMbusSetSubmode(MbusSubmode xMbusSubmode)$/;"	f	typeref:typename:void
SpiritPktStackAddressesInit	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)$/;"	f	typeref:typename:void
SpiritPktStackFilterOnSourceAddress	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackFilterOnSourceAddress(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritPktStackGetAddressesInfo	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackGetAddressesInfo(PktStackAddressesInit* pxPktStackAddresses)$/;"	f	typeref:typename:void
SpiritPktStackGetInfo	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackGetInfo(PktStackInit* pxPktStackInit)$/;"	f	typeref:typename:void
SpiritPktStackGetPayloadLength	stm/spirit1/src/SPIRIT_PktStack.c	/^uint16_t SpiritPktStackGetPayloadLength(void)$/;"	f	typeref:typename:uint16_t
SpiritPktStackGetReceivedPktLength	stm/spirit1/src/SPIRIT_PktStack.c	/^uint16_t SpiritPktStackGetReceivedPktLength(void)$/;"	f	typeref:typename:uint16_t
SpiritPktStackGetRxSourceMask	stm/spirit1/src/SPIRIT_PktStack.c	/^uint8_t SpiritPktStackGetRxSourceMask(void)$/;"	f	typeref:typename:uint8_t
SpiritPktStackInit	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackInit(PktStackInit* pxPktStackInit)$/;"	f	typeref:typename:void
SpiritPktStackLlpGetInfo	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackLlpGetInfo(PktStackLlpInit* pxPktStackLlpInit)$/;"	f	typeref:typename:void
SpiritPktStackLlpInit	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)$/;"	f	typeref:typename:void
SpiritPktStackSetAddressLength	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackSetAddressLength(void)$/;"	f	typeref:typename:void
SpiritPktStackSetFormat	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackSetFormat(void)$/;"	f	typeref:typename:void
SpiritPktStackSetPayloadLength	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)$/;"	f	typeref:typename:void
SpiritPktStackSetRxSourceMask	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackSetRxSourceMask(uint8_t cMask)$/;"	f	typeref:typename:void
SpiritPktStackSetVarLengthWidth	stm/spirit1/src/SPIRIT_PktStack.c	/^void SpiritPktStackSetVarLengthWidth(uint16_t nMaxPayloadLength, StackControlLength xControlLeng/;"	f	typeref:typename:void
SpiritQiComputeRssiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiComputeRssiThreshold(int32_t nDbmValue)$/;"	f	typeref:typename:uint8_t
SpiritQiCsTimeoutMask	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiCsTimeoutMask(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritQiGetCs	stm/spirit1/src/SPIRIT_Qi.c	/^SpiritFlagStatus SpiritQiGetCs(void)$/;"	f	typeref:typename:SpiritFlagStatus
SpiritQiGetCsMode	stm/spirit1/src/SPIRIT_Qi.c	/^CSMode SpiritQiGetCsMode(void)$/;"	f	typeref:typename:CSMode
SpiritQiGetLqi	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiGetLqi(void)$/;"	f	typeref:typename:uint8_t
SpiritQiGetPqi	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiGetPqi(void)$/;"	f	typeref:typename:uint8_t
SpiritQiGetPqiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^PqiThreshold SpiritQiGetPqiThreshold(void)$/;"	f	typeref:typename:PqiThreshold
SpiritQiGetRssi	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiGetRssi(void)$/;"	f	typeref:typename:uint8_t
SpiritQiGetRssiFilterGain	stm/spirit1/src/SPIRIT_Qi.c	/^RssiFilterGain SpiritQiGetRssiFilterGain(void)$/;"	f	typeref:typename:RssiFilterGain
SpiritQiGetRssiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiGetRssiThreshold(void)$/;"	f	typeref:typename:uint8_t
SpiritQiGetSqi	stm/spirit1/src/SPIRIT_Qi.c	/^uint8_t SpiritQiGetSqi(void)$/;"	f	typeref:typename:uint8_t
SpiritQiGetSqiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^SqiThreshold SpiritQiGetSqiThreshold(void)$/;"	f	typeref:typename:SqiThreshold
SpiritQiPqiCheck	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiPqiCheck(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritQiPqiTimeoutMask	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiPqiTimeoutMask(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritQiSetCsMode	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetCsMode(CSMode xCsMode)$/;"	f	typeref:typename:void
SpiritQiSetPqiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetPqiThreshold(PqiThreshold xPqiThr)$/;"	f	typeref:typename:void
SpiritQiSetRssiFilterGain	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetRssiFilterGain(RssiFilterGain xRssiFg)$/;"	f	typeref:typename:void
SpiritQiSetRssiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetRssiThreshold(uint8_t cRssiThr)$/;"	f	typeref:typename:void
SpiritQiSetRssiThresholddBm	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)$/;"	f	typeref:typename:void
SpiritQiSetSqiThreshold	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)$/;"	f	typeref:typename:void
SpiritQiSqiCheck	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSqiCheck(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritQiSqiTimeoutMask	stm/spirit1/src/SPIRIT_Qi.c	/^void SpiritQiSqiTimeoutMask(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioAFC	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioAFC(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioAFCFreezeOnSync	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioAGC	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioAGC(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioCWTransmitMode	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioCWTransmitMode(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioCsBlanking	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioGetAFCCorrectionHz	stm/spirit1/src/SPIRIT_Radio.c	/^int32_t SpiritRadioGetAFCCorrectionHz(void)$/;"	f	typeref:typename:int32_t
SpiritRadioGetAFCCorrectionReg	stm/spirit1/src/SPIRIT_Radio.c	/^int8_t SpiritRadioGetAFCCorrectionReg(void)$/;"	f	typeref:typename:int8_t
SpiritRadioGetAFCFastGain	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAFCFastGain(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAFCFastPeriod	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAFCFastPeriod(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAFCMode	stm/spirit1/src/SPIRIT_Radio.c	/^AFCMode SpiritRadioGetAFCMode(void)$/;"	f	typeref:typename:AFCMode
SpiritRadioGetAFCPDLeakage	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAFCPDLeakage(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAFCSlowGain	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAFCSlowGain(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAGCHighThreshold	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAGCHighThreshold(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAGCLowThreshold	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAGCLowThreshold(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAGCMeasureTime	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetAGCMeasureTime(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetAGCMeasureTimeUs	stm/spirit1/src/SPIRIT_Radio.c	/^uint16_t SpiritRadioGetAGCMeasureTimeUs(void)$/;"	f	typeref:typename:uint16_t
SpiritRadioGetBand	stm/spirit1/src/SPIRIT_Radio.c	/^BandSelect SpiritRadioGetBand(void)$/;"	f	typeref:typename:BandSelect
SpiritRadioGetCenterFrequency	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetCenterFrequency(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetChannel	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetChannel(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetChannelBW	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetChannelBW(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetChannelSpace	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetChannelSpace(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetClkRecIGain	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetClkRecIGain(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetClkRecMode	stm/spirit1/src/SPIRIT_Radio.c	/^ClkRecMode SpiritRadioGetClkRecMode(void)$/;"	f	typeref:typename:ClkRecMode
SpiritRadioGetClkRecPGain	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetClkRecPGain(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetClkRecPstFltLength	stm/spirit1/src/SPIRIT_Radio.c	/^PstFltLength SpiritRadioGetClkRecPstFltLength(void)$/;"	f	typeref:typename:PstFltLength
SpiritRadioGetDatarate	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetDatarate(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetDigDiv	stm/spirit1/src/SPIRIT_Radio.c	/^SpiritFunctionalState SpiritRadioGetDigDiv(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritRadioGetFrequencyBase	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetFrequencyBase(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetFrequencyDev	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetFrequencyDev(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetFrequencyOffset	stm/spirit1/src/SPIRIT_Radio.c	/^int32_t SpiritRadioGetFrequencyOffset(void)$/;"	f	typeref:typename:int32_t
SpiritRadioGetInfo	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioGetInfo(SRadioInit* pxSRadioInitStruct)$/;"	f	typeref:typename:void
SpiritRadioGetModulation	stm/spirit1/src/SPIRIT_Radio.c	/^ModulationSelect SpiritRadioGetModulation(void)$/;"	f	typeref:typename:ModulationSelect
SpiritRadioGetOokPeakDecay	stm/spirit1/src/SPIRIT_Radio.c	/^OokPeakDecay SpiritRadioGetOokPeakDecay(void)$/;"	f	typeref:typename:OokPeakDecay
SpiritRadioGetPACwc	stm/spirit1/src/SPIRIT_Radio.c	/^PALoadCapacitor SpiritRadioGetPACwc(void)$/;"	f	typeref:typename:PALoadCapacitor
SpiritRadioGetPALevel	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetPALevel(uint8_t cIndex)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetPALevelMaxIndex	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetPALevelMaxIndex(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetPALeveldBm	stm/spirit1/src/SPIRIT_Radio.c	/^float SpiritRadioGetPALeveldBm(uint8_t cIndex)$/;"	f	typeref:typename:float
SpiritRadioGetPARamping	stm/spirit1/src/SPIRIT_Radio.c	/^SpiritFunctionalState SpiritRadioGetPARamping(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritRadioGetPAStepWidth	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetPAStepWidth(void)$/;"	f	typeref:typename:uint8_t
SpiritRadioGetPATable	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioGetPATable(uint8_t* pcPALevelMaxIndex, uint8_t* pcPAtable)$/;"	f	typeref:typename:void
SpiritRadioGetPATabledBm	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioGetPATabledBm(uint8_t* pcPALevelMaxIndex, float* pfPAtabledBm)$/;"	f	typeref:typename:void
SpiritRadioGetRefDiv	stm/spirit1/src/SPIRIT_Radio.c	/^SpiritFunctionalState SpiritRadioGetRefDiv(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritRadioGetReg2dBm	stm/spirit1/src/SPIRIT_Radio.c	/^float SpiritRadioGetReg2dBm(uint32_t lFBase, uint8_t cPowerReg)$/;"	f	typeref:typename:float
SpiritRadioGetSynthWord	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetSynthWord(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetXtalFlag	stm/spirit1/src/SPIRIT_Radio.c	/^XtalFlag SpiritRadioGetXtalFlag(void)$/;"	f	typeref:typename:XtalFlag
SpiritRadioGetXtalFrequency	stm/spirit1/src/SPIRIT_Radio.c	/^uint32_t SpiritRadioGetXtalFrequency(void)$/;"	f	typeref:typename:uint32_t
SpiritRadioGetdBm2Reg	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)$/;"	f	typeref:typename:uint8_t
SpiritRadioInit	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)$/;"	f	typeref:typename:uint8_t
SpiritRadioPARamping	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioPARamping(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioPersistenRx	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioSearchChannelBwME	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)$/;"	f	typeref:typename:void
SpiritRadioSearchDatarateME	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)$/;"	f	typeref:typename:void
SpiritRadioSearchFreqDevME	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)$/;"	f	typeref:typename:void
SpiritRadioSearchWCP	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioSearchWCP(uint32_t lFc)$/;"	f	typeref:typename:uint8_t
SpiritRadioSetAFCFastGain	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAFCFastGain(uint8_t cGain)$/;"	f	typeref:typename:void
SpiritRadioSetAFCFastPeriod	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAFCFastPeriod(uint8_t cLength)$/;"	f	typeref:typename:void
SpiritRadioSetAFCMode	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAFCMode(AFCMode xMode)$/;"	f	typeref:typename:void
SpiritRadioSetAFCPDLeakage	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAFCPDLeakage(uint8_t cLeakage)$/;"	f	typeref:typename:void
SpiritRadioSetAFCSlowGain	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAFCSlowGain(uint8_t cGain)$/;"	f	typeref:typename:void
SpiritRadioSetAGCHighThreshold	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAGCHighThreshold(uint8_t cHighThreshold)$/;"	f	typeref:typename:void
SpiritRadioSetAGCLowThreshold	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAGCLowThreshold(uint8_t cLowThreshold)$/;"	f	typeref:typename:void
SpiritRadioSetAGCMeasureTime	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAGCMeasureTime(uint8_t cTime)$/;"	f	typeref:typename:void
SpiritRadioSetAGCMeasureTimeUs	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetAGCMeasureTimeUs(uint16_t nTime)$/;"	f	typeref:typename:void
SpiritRadioSetBand	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetBand(BandSelect xBand)$/;"	f	typeref:typename:void
SpiritRadioSetChannel	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetChannel(uint8_t cChannel)$/;"	f	typeref:typename:void
SpiritRadioSetChannelBW	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetChannelBW(uint32_t lBandwidth)$/;"	f	typeref:typename:void
SpiritRadioSetChannelSpace	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetChannelSpace(uint32_t fChannelSpace)$/;"	f	typeref:typename:void
SpiritRadioSetClkRecIGain	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetClkRecIGain(uint8_t cIGain)$/;"	f	typeref:typename:void
SpiritRadioSetClkRecMode	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetClkRecMode(ClkRecMode xMode)$/;"	f	typeref:typename:void
SpiritRadioSetClkRecPGain	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetClkRecPGain(uint8_t cPGain)$/;"	f	typeref:typename:void
SpiritRadioSetClkRecPstFltLength	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetClkRecPstFltLength(PstFltLength xLength)$/;"	f	typeref:typename:void
SpiritRadioSetDatarate	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetDatarate(uint32_t lDatarate)$/;"	f	typeref:typename:void
SpiritRadioSetDigDiv	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioSetFrequencyBase	stm/spirit1/src/SPIRIT_Radio.c	/^uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)$/;"	f	typeref:typename:uint8_t
SpiritRadioSetFrequencyDev	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetFrequencyDev(uint32_t lFDev)$/;"	f	typeref:typename:void
SpiritRadioSetFrequencyOffset	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetFrequencyOffset(int32_t lFOffset)$/;"	f	typeref:typename:void
SpiritRadioSetFrequencyOffsetPpm	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetFrequencyOffsetPpm(int16_t nXtalPpm)$/;"	f	typeref:typename:void
SpiritRadioSetModulation	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetModulation(ModulationSelect xModulation)$/;"	f	typeref:typename:void
SpiritRadioSetOokPeakDecay	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetOokPeakDecay(OokPeakDecay xOokDecay)$/;"	f	typeref:typename:void
SpiritRadioSetPACwc	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)$/;"	f	typeref:typename:void
SpiritRadioSetPALevel	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPALevel(uint8_t cIndex, uint8_t cPower)$/;"	f	typeref:typename:void
SpiritRadioSetPALevelMaxIndex	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)$/;"	f	typeref:typename:void
SpiritRadioSetPALeveldBm	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)$/;"	f	typeref:typename:void
SpiritRadioSetPAStepWidth	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPAStepWidth(uint8_t cWidth)$/;"	f	typeref:typename:void
SpiritRadioSetPATable	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPATable(uint8_t cPALevelMaxIndex, uint8_t cWidth, PALoadCapacitor xCLoad, uin/;"	f	typeref:typename:void
SpiritRadioSetPATabledBm	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetPATabledBm(uint8_t cPALevelMaxIndex, uint8_t cWidth, PALoadCapacitor xCLoad, /;"	f	typeref:typename:void
SpiritRadioSetRefDiv	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritRadioSetSynthWord	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetSynthWord(uint32_t lSynthWord)$/;"	f	typeref:typename:void
SpiritRadioSetXtalFlag	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetXtalFlag(XtalFlag xXtal)$/;"	f	typeref:typename:void
SpiritRadioSetXtalFrequency	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)$/;"	f	typeref:typename:void
SpiritRadioVcoCalibrationWAFB	stm/spirit1/src/SPIRIT_Radio.c	/^void SpiritRadioVcoCalibrationWAFB(SpiritFunctionalState xNewstate)$/;"	f	typeref:typename:void
SpiritRefreshStatus	stm/spirit1/src/SPIRIT_Types.c	/^void SpiritRefreshStatus(void)$/;"	f	typeref:typename:void
SpiritTimerComputeRxTimeoutValues	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPres/;"	f	typeref:typename:void
SpiritTimerComputeWakeUpValues	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerComputeWakeUpValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescal/;"	f	typeref:typename:void
SpiritTimerGetRcoFrequency	stm/spirit1/src/SPIRIT_Timer.c	/^uint16_t SpiritTimerGetRcoFrequency(void)$/;"	f	typeref:typename:uint16_t
SpiritTimerGetRxTimeout	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerGetRxTimeout(float* pfTimeoutMsec, uint8_t* pcCounter , uint8_t* pcPrescaler)$/;"	f	typeref:typename:void
SpiritTimerGetWakeUpTimer	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerGetWakeUpTimer(float* pfWakeUpMsec, uint8_t* pcCounter , uint8_t* pcPrescaler)$/;"	f	typeref:typename:void
SpiritTimerGetWakeUpTimerReload	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerGetWakeUpTimerReload(float* pfWakeUpReloadMsec, uint8_t* pcCounter , uint8_t* pc/;"	f	typeref:typename:void
SpiritTimerLdcrAutoReload	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerLdcrAutoReload(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritTimerLdcrGetAutoReload	stm/spirit1/src/SPIRIT_Timer.c	/^SpiritFunctionalState SpiritTimerLdcrGetAutoReload(void)$/;"	f	typeref:typename:SpiritFunctionalState
SpiritTimerLdcrMode	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerLdcrMode(SpiritFunctionalState xNewState)$/;"	f	typeref:typename:void
SpiritTimerReloadStrobe	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerReloadStrobe(void)$/;"	f	typeref:typename:void
SpiritTimerSetRxTimeout	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetRxTimeout(uint8_t cCounter , uint8_t cPrescaler)$/;"	f	typeref:typename:void
SpiritTimerSetRxTimeoutCounter	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)$/;"	f	typeref:typename:void
SpiritTimerSetRxTimeoutMs	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)$/;"	f	typeref:typename:void
SpiritTimerSetRxTimeoutPrescaler	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetRxTimeoutPrescaler(uint8_t cPrescaler)$/;"	f	typeref:typename:void
SpiritTimerSetRxTimeoutStopCondition	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimer	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimer(uint8_t cCounter , uint8_t cPrescaler)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerCounter	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerCounter(uint8_t cCounter)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerMs	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerMs(float fDesiredMsec)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerPrescaler	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerPrescaler(uint8_t cPrescaler)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerReload	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerReload(uint8_t cCounter , uint8_t cPrescaler)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerReloadCounter	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerReloadCounter(uint8_t cCounter)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerReloadMs	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerReloadMs(float fDesiredMsec)$/;"	f	typeref:typename:void
SpiritTimerSetWakeUpTimerReloadPrescaler	stm/spirit1/src/SPIRIT_Timer.c	/^void SpiritTimerSetWakeUpTimerReloadPrescaler(uint8_t cPrescaler)$/;"	f	typeref:typename:void
SysTick_Config	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
SysTick_Handler	twr/src/main.c	/^void SysTick_Handler(void)$/;"	f	typeref:typename:void
SystemClockConfig_Resume	twr/stm/src/usbd_conf.c	/^static void SystemClockConfig_Resume(void)$/;"	f	typeref:typename:void	file:
SystemCoreClockUpdate	sys/src/system_stm32l0xx.c	/^void SystemCoreClockUpdate (void)$/;"	f	typeref:typename:void
SystemInit	sys/src/system_stm32l0xx.c	/^void SystemInit (void)$/;"	f	typeref:typename:void
TIM2_IRQHandler	twr/src/twr_timer.c	/^void TIM2_IRQHandler(void)$/;"	f	typeref:typename:void
TIM3_IRQHandler	twr/src/twr_timer.c	/^void TIM3_IRQHandler(void)$/;"	f	typeref:typename:void
TIM6_IRQHandler	twr/src/twr_timer.c	/^void TIM6_IRQHandler()$/;"	f	typeref:typename:void
TIM6_handler	twr/src/twr_ir_rx.c	/^static void TIM6_handler(void *param)$/;"	f	typeref:typename:void	file:
TIM_Base_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)$/;"	f	typeref:typename:void	file:
TIM_CCxChannelCmd	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)$/;"	f	typeref:typename:void	file:
TIM_DMACaptureCplt	stm/hal/src/stm32l0xx_hal_tim.c	/^void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void
TIM_DMADelayPulseCplt	stm/hal/src/stm32l0xx_hal_tim.c	/^void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void
TIM_DMAError	stm/hal/src/stm32l0xx_hal_tim.c	/^void TIM_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void
TIM_DMAPeriodElapsedCplt	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
TIM_DMATriggerCplt	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
TIM_ETR_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,$/;"	f	typeref:typename:void	file:
TIM_ITRx_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)$/;"	f	typeref:typename:void	file:
TIM_OC1_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)$/;"	f	typeref:typename:void	file:
TIM_OC2_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)$/;"	f	typeref:typename:void	file:
TIM_OC3_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)$/;"	f	typeref:typename:void	file:
TIM_OC4_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)$/;"	f	typeref:typename:void	file:
TIM_SlaveTimer_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,$/;"	f	typeref:typename:void	file:
TIM_TI1_ConfigInputStage	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_IC/;"	f	typeref:typename:void	file:
TIM_TI1_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelecti/;"	f	typeref:typename:void	file:
TIM_TI2_ConfigInputStage	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_IC/;"	f	typeref:typename:void	file:
TIM_TI2_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelecti/;"	f	typeref:typename:void	file:
TIM_TI3_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelecti/;"	f	typeref:typename:void	file:
TIM_TI4_SetConfig	stm/hal/src/stm32l0xx_hal_tim.c	/^static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelecti/;"	f	typeref:typename:void	file:
TSC_extract_groups	stm/hal/src/stm32l0xx_hal_tsc.c	/^static uint32_t TSC_extract_groups(uint32_t iomask)$/;"	f	typeref:typename:uint32_t	file:
UARTEx_Wakeup_AddressConfig	stm/hal/src/stm32l0xx_hal_uart_ex.c	/^static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSele/;"	f	typeref:typename:void	file:
UART_AdvFeatureConfig	stm/hal/src/stm32l0xx_hal_uart.c	/^void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:void
UART_CheckIdleState	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
UART_DMAAbortOnError	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMAError	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMAReceiveCplt	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMARxAbortCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMARxHalfCplt	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMARxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMATransmitCplt	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMATxAbortCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMATxHalfCplt	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_DMATxOnlyAbortCallback	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
UART_EndRxTransfer	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_EndRxTransfer(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:void	file:
UART_EndTransmit_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
UART_EndTxTransfer	stm/hal/src/stm32l0xx_hal_uart.c	/^static void UART_EndTxTransfer(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:void	file:
UART_Receive_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
UART_SetConfig	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef
UART_Transmit_IT	stm/hal/src/stm32l0xx_hal_uart.c	/^static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
UART_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_uart.c	/^HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStat/;"	f	typeref:typename:HAL_StatusTypeDef
USART1_IRQHandler	twr/src/twr_uart.c	/^void USART1_IRQHandler(void)$/;"	f	typeref:typename:void
USART2_IRQHandler	twr/src/twr_uart.c	/^void USART2_IRQHandler(void)$/;"	f	typeref:typename:void
USART4_5_IRQHandler	twr/src/twr_uart.c	/^void USART4_5_IRQHandler(void)$/;"	f	typeref:typename:void
USART_CheckIdleState	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_DMAAbortOnError	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMAError	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMAError(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMAReceiveCplt	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMARxAbortCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMARxHalfCplt	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMATransmitCplt	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMATxAbortCallback	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_DMATxHalfCplt	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)$/;"	f	typeref:typename:void	file:
USART_EndTransfer	stm/hal/src/stm32l0xx_hal_usart.c	/^static void USART_EndTransfer(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:void	file:
USART_EndTransmit_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_Receive_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_SetConfig	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_TransmitReceive_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_Transmit_IT	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)$/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USART_WaitOnFlagUntilTimeout	stm/hal/src/stm32l0xx_hal_usart.c	/^static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag/;"	f	typeref:typename:HAL_StatusTypeDef	file:
USBD_CDC_DataIn	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_DataOut	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_DeInit	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_EP0_RxReady	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_GetDeviceQualifierDescriptor	stm/usb/src/usbd_cdc.c	/^uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_CDC_GetFSCfgDesc	stm/usb/src/usbd_cdc.c	/^static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)$/;"	f	typeref:typename:uint8_t *	file:
USBD_CDC_GetHSCfgDesc	stm/usb/src/usbd_cdc.c	/^static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)$/;"	f	typeref:typename:uint8_t *	file:
USBD_CDC_GetOtherSpeedCfgDesc	stm/usb/src/usbd_cdc.c	/^static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)$/;"	f	typeref:typename:uint8_t *	file:
USBD_CDC_Init	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_ReceivePacket	stm/usb/src/usbd_cdc.c	/^uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:uint8_t
USBD_CDC_RegisterInterface	stm/usb/src/usbd_cdc.c	/^uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,$/;"	f	typeref:typename:uint8_t
USBD_CDC_SetRxBuffer	stm/usb/src/usbd_cdc.c	/^uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,$/;"	f	typeref:typename:uint8_t
USBD_CDC_SetTxBuffer	stm/usb/src/usbd_cdc.c	/^uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,$/;"	f	typeref:typename:uint8_t
USBD_CDC_Setup	stm/usb/src/usbd_cdc.c	/^static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:uint8_t	file:
USBD_CDC_TransmitPacket	stm/usb/src/usbd_cdc.c	/^uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:uint8_t
USBD_ClrClassConfig	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_ClrFeature	stm/usb/src/usbd_ctlreq.c	/^static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_CtlContinueRx	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_CtlContinueSendData	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_CtlError	stm/usb/src/usbd_ctlreq.c	/^void USBD_CtlError( USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void
USBD_CtlPrepareRx	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_CtlReceiveStatus	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_CtlSendData	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_CtlSendStatus	stm/usb/src/usbd_ioreq.c	/^USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_DeInit	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_FS_ConfigStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_DeviceDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_InterfaceStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_LangIDStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_ManufacturerStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_ProductStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_FS_SerialStrDescriptor	twr/stm/src/usbd_desc.c	/^uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)$/;"	f	typeref:typename:uint8_t *
USBD_GetConfig	stm/usb/src/usbd_ctlreq.c	/^static void USBD_GetConfig(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_GetDescriptor	stm/usb/src/usbd_ctlreq.c	/^static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_GetLen	stm/usb/src/usbd_ctlreq.c	/^static uint8_t USBD_GetLen(uint8_t *buf)$/;"	f	typeref:typename:uint8_t	file:
USBD_GetRxCount	stm/usb/src/usbd_ioreq.c	/^uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)$/;"	f	typeref:typename:uint16_t
USBD_GetStatus	stm/usb/src/usbd_ctlreq.c	/^static void USBD_GetStatus(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_GetString	stm/usb/src/usbd_ctlreq.c	/^void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)$/;"	f	typeref:typename:void
USBD_Init	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t i/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_ClearStallEP	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_CloseEP	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_DataInStage	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_DataOutStage	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_DeInit	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Delay	twr/stm/src/usbd_conf.c	/^void  USBD_LL_Delay (uint32_t Delay)$/;"	f	typeref:typename:void
USBD_LL_DevConnected	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_DevDisconnected	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_FlushEP	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_GetRxDataSize	twr/stm/src/usbd_conf.c	/^uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)$/;"	f	typeref:typename:uint32_t
USBD_LL_Init	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_IsStallEP	twr/stm/src/usbd_conf.c	/^uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)$/;"	f	typeref:typename:uint8_t
USBD_LL_IsoINIncomplete	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_IsoOUTIncomplete	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_OpenEP	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_PrepareReceive	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Reset	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Resume	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_SOF	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_SetSpeed	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_SetUSBAddress	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_SetupStage	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_StallEP	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Start	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Stop	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Suspend	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_LL_Transmit	twr/stm/src/usbd_conf.c	/^USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev,$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_ParseSetupRequest	stm/usb/src/usbd_ctlreq.c	/^void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)$/;"	f	typeref:typename:void
USBD_RegisterClass	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_RunTestMode	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_SetAddress	stm/usb/src/usbd_ctlreq.c	/^static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_SetClassConfig	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_SetConfig	stm/usb/src/usbd_ctlreq.c	/^static void USBD_SetConfig(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_SetFeature	stm/usb/src/usbd_ctlreq.c	/^static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,$/;"	f	typeref:typename:void	file:
USBD_Start	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_StdDevReq	stm/usb/src/usbd_ctlreq.c	/^USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_StdEPReq	stm/usb/src/usbd_ctlreq.c	/^USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_StdItfReq	stm/usb/src/usbd_ctlreq.c	/^USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_Stop	stm/usb/src/usbd_core.c	/^USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)$/;"	f	typeref:typename:USBD_StatusTypeDef
USBD_static_free	twr/stm/src/usbd_conf.c	/^void USBD_static_free(void *p)$/;"	f	typeref:typename:void
USBD_static_malloc	twr/stm/src/usbd_conf.c	/^void *USBD_static_malloc(uint32_t size)$/;"	f	typeref:typename:void *
USB_IRQHandler	twr/stm/src/stm32l0xx_it.c	/^void USB_IRQHandler(void)$/;"	f	typeref:typename:void
__CLREX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __CLREX(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__CLZ	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint8_t
__DMB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __DMB(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__DSB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __DSB(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__ISB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __ISB(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__LDA	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__LDAB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint8_t
__LDAEX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__LDAEXB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint8_t
__LDAEXH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint16_t
__LDAH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint16_t
__LDRBT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint8_t
__LDREXB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint8_t
__LDREXH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint16_t
__LDREXW	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__LDRHT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint16_t
__LDRT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__NVIC_ClearPendingIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_DisableIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_EnableIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_GetEnableIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
__NVIC_GetPendingIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
__NVIC_GetPriority	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
__NVIC_GetVector	sys/inc/core_cm0plus.h	/^__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE uint32_t
__NVIC_SetPendingIRQ	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_SetPriority	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_SetVector	sys/inc/core_cm0plus.h	/^__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)$/;"	f	typeref:typename:__STATIC_INLINE void
__NVIC_SystemReset	sys/inc/core_cm0plus.h	/^__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)$/;"	f	typeref:typename:__NO_RETURN __STATIC_INLINE void
__QADD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE int32_t
__QADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__QADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__QASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__QSAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QSAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__QSUB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE  int32_t __QSUB( int32_t op1,  int32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE int32_t
__QSUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__QSUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__RBIT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__REV	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__REV16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__REVSH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE int16_t
__ROR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__RRX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SEL	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SEL  (uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHSAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHSAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHSUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHSUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SHSUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SHSUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMLAD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMLADX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMLALD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint64_t
__SMLALDX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint64_t
__SMLSD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMLSDX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMLSLD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint64_t
__SMLSLDX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint64_t
__SMMLA	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE int32_t
__SMUAD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMUADX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMUADX (uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMUSD	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMUSD  (uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SMUSDX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SSAT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)$/;"	f	typeref:typename:__STATIC_FORCEINLINE int32_t
__SSAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SSAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SSUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SSUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SSUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SSUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STL	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__STLB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__STLEX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STLEXB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STLEXH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STLH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__STRBT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__STREXB	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STREXH	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STREXW	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__STRHT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__STRT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__SXTAB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SXTAB16_RORn	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SXTB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__SXTB16_RORn	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_BASEPRI_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_CONTROL_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_FAULTMASK_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_MSPLIM_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_MSP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_PRIMASK_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_PSPLIM_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_PSP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_get_SP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__TZ_set_BASEPRI_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_CONTROL_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_FAULTMASK_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_MSPLIM_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_MSP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_PRIMASK_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_PSPLIM_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_PSP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_SP_NS	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__TZ_set_STACKSEAL_S	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__UADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHSAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHSAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHSUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHSUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UHSUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UHSUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQADD16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQADD16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQADD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQADD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQASX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQASX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQSAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQSAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQSUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQSUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UQSUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UQSUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USAD8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USAD8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USADA8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USAT	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USAX(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USUB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USUB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__USUB8	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __USUB8(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UXTAB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UXTAB16(uint32_t op1, uint32_t op2)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__UXTB16	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __UXTB16(uint32_t op1)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__bufio_lock	lib/picolibc/include/stdio-bufio.h	/^static inline void __bufio_lock(FILE *f) {$/;"	f	typeref:typename:void
__bufio_lock_close	lib/picolibc/include/stdio-bufio.h	/^static inline void __bufio_lock_close(FILE *f) {$/;"	f	typeref:typename:void
__bufio_lock_init	lib/picolibc/include/stdio-bufio.h	/^static inline void __bufio_lock_init(FILE *f) {$/;"	f	typeref:typename:void
__bufio_unlock	lib/picolibc/include/stdio-bufio.h	/^static inline void __bufio_unlock(FILE *f) {$/;"	f	typeref:typename:void
__cmsis_start	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE __NO_RETURN void
__ctype_lookup	lib/picolibc/include/ctype.h	/^static __inline char __ctype_lookup(int c) { return (__CTYPE_PTR + 1)[c]; }$/;"	f	typeref:typename:char
__ctype_lookup_l	lib/picolibc/include/ctype.h	/^static __inline char __ctype_lookup_l(int c, locale_t l) {$/;"	f	typeref:typename:char
__disable_fault_irq	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __disable_fault_irq(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__disable_irq	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __disable_irq(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__enable_fault_irq	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __enable_fault_irq(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__enable_irq	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __enable_irq(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__get_APSR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_APSR(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_BASEPRI	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_CONTROL	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_FAULTMASK	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_FPSCR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_FPSCR(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_IPSR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_IPSR(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_MSP	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_MSP(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_MSPLIM	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_PRIMASK	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_PSP	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_PSP(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_PSPLIM	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__get_xPSR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE uint32_t __get_xPSR(void)$/;"	f	typeref:typename:__STATIC_FORCEINLINE uint32_t
__locale_ctype_ptr_l	lib/picolibc/include/ctype.h	/^__locale_ctype_ptr_l(locale_t _l)$/;"	f	typeref:typename:const char *
__printf_float	lib/picolibc/include/stdio.h	/^__printf_float(float f)$/;"	f	typeref:typename:uint32_t
__set_BASEPRI	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_BASEPRI_MAX	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_CONTROL	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_FAULTMASK	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_FPSCR	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_MSP	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_MSPLIM	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_PRIMASK	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_PSP	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
__set_PSPLIM	sys/inc/cmsis_gcc.h	/^__STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)$/;"	f	typeref:typename:__STATIC_FORCEINLINE void
_adc_event_handler	_examples/adc/application.c	/^static void _adc_event_handler(twr_adc_channel_t channel, twr_adc_event_t event, void *param)$/;"	f	typeref:typename:void	file:
_config_eeprom_read	twr/src/twr_config.c	/^static void _config_eeprom_read(uint32_t address, void *buffer, size_t length)$/;"	f	typeref:typename:void	file:
_config_eeprom_write	twr/src/twr_config.c	/^static void _config_eeprom_write(uint32_t address, const void *buffer, size_t length)$/;"	f	typeref:typename:void	file:
_tls_align	lib/picolibc/include/picotls.h	/^static inline size_t _tls_align(void) { return (size_t) (uintptr_t) __tls_align; }$/;"	f	typeref:typename:size_t
_tls_size	lib/picolibc/include/picotls.h	/^static inline size_t _tls_size(void) { return (size_t) (uintptr_t) __tls_size; }$/;"	f	typeref:typename:size_t
_twr_adc_configure_oversampling	twr/src/twr_adc.c	/^static void _twr_adc_configure_oversampling(twr_adc_oversampling_t oversampling)$/;"	f	typeref:typename:void	file:
_twr_adc_configure_resolution	twr/src/twr_adc.c	/^static void _twr_adc_configure_resolution(twr_adc_resolution_t resolution)$/;"	f	typeref:typename:void	file:
_twr_adc_get_measured_value	twr/src/twr_adc.c	/^static uint16_t _twr_adc_get_measured_value(twr_adc_channel_t channel)$/;"	f	typeref:typename:uint16_t	file:
_twr_adc_get_pending	twr/src/twr_adc.c	/^static inline bool _twr_adc_get_pending(twr_adc_channel_t *next ,twr_adc_channel_t start)$/;"	f	typeref:typename:bool	file:
_twr_adc_task	twr/src/twr_adc.c	/^static void _twr_adc_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_aes_process	twr/src/twr_aes.c	/^static bool _twr_aes_process(void *buffer_out, const void *buffer_in, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_aes_set_iv	twr/src/twr_aes.c	/^static void _twr_aes_set_iv(const twr_aes_iv_t iv)$/;"	f	typeref:typename:void	file:
_twr_aes_set_key	twr/src/twr_aes.c	/^static void _twr_aes_set_key(const twr_aes_key_t key)$/;"	f	typeref:typename:void	file:
_twr_analog_sensor_adc_event_handler	twr/src/twr_analog_sensor.c	/^static void _twr_analog_sensor_adc_event_handler(twr_adc_channel_t channel, twr_adc_event_t even/;"	f	typeref:typename:void	file:
_twr_analog_sensor_task_interval	twr/src/twr_analog_sensor.c	/^static void _twr_analog_sensor_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_analog_sensor_task_measure	twr/src/twr_analog_sensor.c	/^static void _twr_analog_sensor_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_at_lora_param_format_and_test	twr/src/twr_at_lora.c	/^static bool _twr_at_lora_param_format_and_test(twr_atci_param_t *param, uint8_t length)$/;"	f	typeref:typename:bool	file:
_twr_atci_printf	twr/src/twr_atci.c	/^static size_t _twr_atci_printf(const char *format, va_list ap, size_t maxlen)$/;"	f	typeref:typename:size_t	file:
_twr_atci_process_character	twr/src/twr_atci.c	/^static void _twr_atci_process_character(char character)$/;"	f	typeref:typename:void	file:
_twr_atci_process_line	twr/src/twr_atci.c	/^static bool _twr_atci_process_line(void)$/;"	f	typeref:typename:bool	file:
_twr_atci_uart_active_test	twr/src/twr_atci.c	/^static void _twr_atci_uart_active_test(void)$/;"	f	typeref:typename:void	file:
_twr_atci_uart_active_test_task	twr/src/twr_atci.c	/^static void _twr_atci_uart_active_test_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_atci_uart_event_handler	twr/src/twr_atci.c	/^static void _twr_atci_uart_event_handler(twr_uart_channel_t channel, twr_uart_event_t event, voi/;"	f	typeref:typename:void	file:
_twr_atsha204_calculate_crc16	twr/src/twr_atsha204.c	/^static uint16_t _twr_atsha204_calculate_crc16(uint8_t *buffer, uint8_t length)$/;"	f	typeref:typename:uint16_t	file:
_twr_atsha204_read	twr/src/twr_atsha204.c	/^static bool _twr_atsha204_read(twr_atsha204_t *self, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_atsha204_send_command	twr/src/twr_atsha204.c	/^static bool _twr_atsha204_send_command(twr_atsha204_t *self, uint8_t opcode, uint8_t param0, uin/;"	f	typeref:typename:bool	file:
_twr_atsha204_task	twr/src/twr_atsha204.c	/^static void _twr_atsha204_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_atsha204_wakeup	twr/src/twr_atsha204.c	/^static bool _twr_atsha204_wakeup(twr_atsha204_t *self)$/;"	f	typeref:typename:bool	file:
_twr_atsha204_wakeup_puls	twr/src/twr_atsha204.c	/^static void _twr_atsha204_wakeup_puls(twr_atsha204_t *self)$/;"	f	typeref:typename:void	file:
_twr_button_gpio_get_input	twr/src/twr_button.c	/^static int _twr_button_gpio_get_input(twr_button_t *self)$/;"	f	typeref:typename:int	file:
_twr_button_gpio_init	twr/src/twr_button.c	/^static void _twr_button_gpio_init(twr_button_t *self)$/;"	f	typeref:typename:void	file:
_twr_button_task	twr/src/twr_button.c	/^static void _twr_button_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_cmwx1zzabz_async_write	twr/src/twr_cmwx1zzabz.c	/^static size_t _twr_cmwx1zzabz_async_write(twr_cmwx1zzabz_t *self, const void *buffer, size_t len/;"	f	typeref:typename:size_t	file:
_twr_cmwx1zzabz_read_response	twr/src/twr_cmwx1zzabz.c	/^static bool _twr_cmwx1zzabz_read_response(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool	file:
_twr_cmwx1zzabz_save_config	twr/src/twr_cmwx1zzabz.c	/^static void _twr_cmwx1zzabz_save_config(twr_cmwx1zzabz_t *self, twr_cmwx1zzabz_config_index_t co/;"	f	typeref:typename:void	file:
_twr_cmwx1zzabz_task	twr/src/twr_cmwx1zzabz.c	/^static void _twr_cmwx1zzabz_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_cmwx1zzabz_write	twr/src/twr_cmwx1zzabz.c	/^static size_t _twr_cmwx1zzabz_write(twr_cmwx1zzabz_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:size_t	file:
_twr_cp201t_adc_event_handler	twr/src/twr_cp201t.c	/^static void _twr_cp201t_adc_event_handler(twr_adc_channel_t channel, twr_adc_event_t event, void/;"	f	typeref:typename:void	file:
_twr_cp201t_task_interval	twr/src/twr_cp201t.c	/^static void _twr_cp201t_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_cp201t_task_measure	twr/src/twr_cp201t.c	/^static void _twr_cp201t_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_cy8cmbr3102_task	twr/src/twr_cy8cmbr3102.c	/^static void _twr_cy8cmbr3102_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_dac_dma_handler	twr/src/twr_dac.c	/^static void _twr_dac_dma_handler(twr_dma_channel_t channel, twr_dma_event_t event, void *event_p/;"	f	typeref:typename:void	file:
_twr_data_stream_compare_float	twr/src/twr_data_stream.c	/^static int _twr_data_stream_compare_float(const void *a, const void *b)$/;"	f	typeref:typename:int	file:
_twr_data_stream_compare_int	twr/src/twr_data_stream.c	/^static int _twr_data_stream_compare_int(const void *a, const void *b)$/;"	f	typeref:typename:int	file:
_twr_dma_irq_handler	twr/src/twr_dma.c	/^void _twr_dma_irq_handler(twr_dma_channel_t channel, twr_dma_event_t event)$/;"	f	typeref:typename:void
_twr_dma_task	twr/src/twr_dma.c	/^void _twr_dma_task(void *param)$/;"	f	typeref:typename:void
_twr_ds18b20_is_scratchpad_valid	twr/src/twr_ds18b20.c	/^static bool _twr_ds18b20_is_scratchpad_valid(uint8_t *scratchpad)$/;"	f	typeref:typename:bool	file:
_twr_ds18b20_power_down	twr/src/twr_ds18b20.c	/^static bool _twr_ds18b20_power_down(twr_ds18b20_t *self)$/;"	f	typeref:typename:bool	file:
_twr_ds18b20_power_up	twr/src/twr_ds18b20.c	/^static bool _twr_ds18b20_power_up(twr_ds18b20_t *self)$/;"	f	typeref:typename:bool	file:
_twr_ds18b20_task_interval	twr/src/twr_ds18b20.c	/^static void _twr_ds18b20_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_ds18b20_task_measure	twr/src/twr_ds18b20.c	/^static void _twr_ds18b20_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_ds2484_device_reset	twr/src/twr_ds2484.c	/^static bool _twr_ds2484_device_reset(twr_ds2484_t *self)$/;"	f	typeref:typename:bool	file:
_twr_ds2484_i2c_read_byte	twr/src/twr_ds2484.c	/^static bool _twr_ds2484_i2c_read_byte(twr_ds2484_t *self, uint8_t *b)$/;"	f	typeref:typename:bool	file:
_twr_ds2484_i2c_write_byte	twr/src/twr_ds2484.c	/^static bool _twr_ds2484_i2c_write_byte(twr_ds2484_t *self, const uint8_t b)$/;"	f	typeref:typename:bool	file:
_twr_ds2484_set_reed_pointer	twr/src/twr_ds2484.c	/^static bool _twr_ds2484_set_reed_pointer(twr_ds2484_t *self, uint8_t srp)$/;"	f	typeref:typename:bool	file:
_twr_ds2484_write_config	twr/src/twr_ds2484.c	/^static bool _twr_ds2484_write_config(twr_ds2484_t *self, const uint8_t cfg)$/;"	f	typeref:typename:bool	file:
_twr_ds28e17_read	twr/src/twr_ds28e17.c	/^static bool _twr_ds28e17_read(twr_ds28e17_t *self, uint8_t *head, size_t head_length, void *buff/;"	f	typeref:typename:bool	file:
_twr_ds28e17_write	twr/src/twr_ds28e17.c	/^static bool _twr_ds28e17_write(twr_ds28e17_t *self, uint8_t *head, size_t head_length, void *buf/;"	f	typeref:typename:bool	file:
_twr_eeprom_async_write_task	twr/src/twr_eeprom.c	/^static void _twr_eeprom_async_write_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_eeprom_is_busy	twr/src/twr_eeprom.c	/^static bool _twr_eeprom_is_busy(twr_tick_t timeout)$/;"	f	typeref:typename:bool	file:
_twr_eeprom_lock	twr/src/twr_eeprom.c	/^static void _twr_eeprom_lock(void)$/;"	f	typeref:typename:void	file:
_twr_eeprom_unlock	twr/src/twr_eeprom.c	/^static void _twr_eeprom_unlock(void)$/;"	f	typeref:typename:void	file:
_twr_eeprom_write	twr/src/twr_eeprom.c	/^static bool _twr_eeprom_write(uint32_t address, size_t *i, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_esp8266_disable	twr/src/twr_esp8266.c	/^void _twr_esp8266_disable(twr_esp8266_t *self)$/;"	f	typeref:typename:void
_twr_esp8266_enable	twr/src/twr_esp8266.c	/^void _twr_esp8266_enable(twr_esp8266_t *self)$/;"	f	typeref:typename:void
_twr_esp8266_read_response	twr/src/twr_esp8266.c	/^static bool _twr_esp8266_read_response(twr_esp8266_t *self)$/;"	f	typeref:typename:bool	file:
_twr_esp8266_read_socket_data	twr/src/twr_esp8266.c	/^static bool _twr_esp8266_read_socket_data(twr_esp8266_t *self)$/;"	f	typeref:typename:bool	file:
_twr_esp8266_set_rtc_time	twr/src/twr_esp8266.c	/^static void _twr_esp8266_set_rtc_time(char *str)$/;"	f	typeref:typename:void	file:
_twr_esp8266_task	twr/src/twr_esp8266.c	/^static void _twr_esp8266_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_exti_irq_handler	twr/src/twr_exti.c	/^static inline void _twr_exti_irq_handler(void)$/;"	f	typeref:typename:void	file:
_twr_flood_task_interval	twr/src/twr_flood_detector.c	/^static void _twr_flood_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_flood_task_measure	twr/src/twr_flood_detector.c	/^static void _twr_flood_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_hc_sr04_task_interval	twr/src/twr_hc_sr04.c	/^static void _twr_hc_sr04_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_hc_sr04_task_notify	twr/src/twr_hc_sr04.c	/^static void _twr_hc_sr04_task_notify(void *param)$/;"	f	typeref:typename:void	file:
_twr_hc_sr04_tim2_iqr_handler	twr/src/twr_hc_sr04.c	/^static void _twr_hc_sr04_tim2_iqr_handler(void *param)$/;"	f	typeref:typename:void	file:
_twr_hc_sr04_tim3_iqr_handler	twr/src/twr_hc_sr04.c	/^static void _twr_hc_sr04_tim3_iqr_handler(void *param)$/;"	f	typeref:typename:void	file:
_twr_hdc2080_task_interval	twr/src/twr_hdc2080.c	/^static void _twr_hdc2080_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_hdc2080_task_measure	twr/src/twr_hdc2080.c	/^static void _twr_hdc2080_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_hts221_load_calibration	twr/src/twr_hts221.c	/^static bool _twr_hts221_load_calibration(twr_hts221_t *self)$/;"	f	typeref:typename:bool	file:
_twr_hts221_task_interval	twr/src/twr_hts221.c	/^static void _twr_hts221_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_hts221_task_measure	twr/src/twr_hts221.c	/^static void _twr_hts221_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_i2c_config	twr/src/twr_i2c.c	/^static void _twr_i2c_config(I2C_TypeDef *i2c, uint8_t device_address, uint8_t length, uint32_t m/;"	f	typeref:typename:void	file:
_twr_i2c_is_ack_failure	twr/src/twr_i2c.c	/^static bool _twr_i2c_is_ack_failure(I2C_TypeDef *i2c)$/;"	f	typeref:typename:bool	file:
_twr_i2c_mem_read	twr/src/twr_i2c.c	/^static bool _twr_i2c_mem_read(I2C_TypeDef *i2c, uint8_t device_address, uint16_t memory_address,/;"	f	typeref:typename:bool	file:
_twr_i2c_mem_write	twr/src/twr_i2c.c	/^static bool _twr_i2c_mem_write(I2C_TypeDef *i2c, uint8_t device_address, uint16_t memory_address/;"	f	typeref:typename:bool	file:
_twr_i2c_read	twr/src/twr_i2c.c	/^static bool _twr_i2c_read(I2C_TypeDef *i2c, const void *buffer, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_i2c_req_mem_read	twr/src/twr_i2c.c	/^static bool _twr_i2c_req_mem_read(I2C_TypeDef *i2c, uint8_t device_address, uint16_t memory_addr/;"	f	typeref:typename:bool	file:
_twr_i2c_req_mem_write	twr/src/twr_i2c.c	/^static bool _twr_i2c_req_mem_write(I2C_TypeDef *i2c, uint8_t device_address, uint16_t memory_add/;"	f	typeref:typename:bool	file:
_twr_i2c_restore_bus	twr/src/twr_i2c.c	/^static void _twr_i2c_restore_bus(I2C_TypeDef *i2c)$/;"	f	typeref:typename:void	file:
_twr_i2c_timeout_begin	twr/src/twr_i2c.c	/^void _twr_i2c_timeout_begin(uint32_t timeout_ms)$/;"	f	typeref:typename:void
_twr_i2c_timeout_is_expired	twr/src/twr_i2c.c	/^bool _twr_i2c_timeout_is_expired(void)$/;"	f	typeref:typename:bool
_twr_i2c_watch_flag	twr/src/twr_i2c.c	/^static bool _twr_i2c_watch_flag(I2C_TypeDef *i2c, uint32_t flag, FlagStatus status)$/;"	f	typeref:typename:bool	file:
_twr_i2c_write	twr/src/twr_i2c.c	/^static bool _twr_i2c_write(I2C_TypeDef *i2c, const void *buffer, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_ir_rx_exti_int	twr/src/twr_ir_rx.c	/^static void _twr_ir_rx_exti_int(twr_exti_line_t line, void *param)$/;"	f	typeref:typename:void	file:
_twr_ir_rx_task_notify	twr/src/twr_ir_rx.c	/^static void _twr_ir_rx_task_notify(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_gpio_init	twr/src/twr_led.c	/^static void _twr_led_gpio_init(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_led_gpio_off	twr/src/twr_led.c	/^static void _twr_led_gpio_off(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_led_gpio_on	twr/src/twr_led.c	/^static void _twr_led_gpio_on(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_color_wipe_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_color_wipe_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_done	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_done(twr_led_strip_t *self)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_icicle_task	twr/src/twr_led_strip.c	/^void _twr_led_strip_effect_icicle_task(void *param)$/;"	f	typeref:typename:void
_twr_led_strip_effect_pulse_color_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_pulse_color_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_rainbow_cycle_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_rainbow_cycle_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_rainbow_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_rainbow_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_test_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_test_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_theater_chase_rainbow_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_theater_chase_rainbow_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_effect_theater_chase_task	twr/src/twr_led_strip.c	/^static void _twr_led_strip_effect_theater_chase_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_led_strip_get_heat_map_color	twr/src/twr_led_strip.c	/^static void _twr_led_strip_get_heat_map_color(float value, float *red, float *green, float *blue/;"	f	typeref:typename:void	file:
_twr_led_strip_wheel	twr/src/twr_led_strip.c	/^static uint32_t _twr_led_strip_wheel(int position) {$/;"	f	typeref:typename:uint32_t	file:
_twr_led_task	twr/src/twr_led.c	/^static void _twr_led_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_lis2dh12_continuous_conversion	twr/src/twr_lis2dh12.c	/^static bool _twr_lis2dh12_continuous_conversion(twr_lis2dh12_t *self)$/;"	f	typeref:typename:bool	file:
_twr_lis2dh12_interrupt	twr/src/twr_lis2dh12.c	/^static void _twr_lis2dh12_interrupt(twr_exti_line_t line, void *param)$/;"	f	typeref:typename:void	file:
_twr_lis2dh12_power_down	twr/src/twr_lis2dh12.c	/^static bool _twr_lis2dh12_power_down(twr_lis2dh12_t *self)$/;"	f	typeref:typename:bool	file:
_twr_lis2dh12_read_result	twr/src/twr_lis2dh12.c	/^static bool _twr_lis2dh12_read_result(twr_lis2dh12_t *self)$/;"	f	typeref:typename:bool	file:
_twr_lis2dh12_task_interval	twr/src/twr_lis2dh12.c	/^static void _twr_lis2dh12_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_lis2dh12_task_measure	twr/src/twr_lis2dh12.c	/^static void _twr_lis2dh12_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_log_message	twr/src/twr_log.c	/^static void _twr_log_message(twr_log_level_t level, char id, const char *format, va_list ap)$/;"	f	typeref:typename:void	file:
_twr_lp8_calculate_crc16	twr/src/twr_lp8.c	/^static uint16_t _twr_lp8_calculate_crc16(uint8_t *buffer, uint8_t length)$/;"	f	typeref:typename:uint16_t	file:
_twr_lp8_error	twr/src/twr_lp8.c	/^static void _twr_lp8_error(twr_lp8_t *self, twr_lp8_error_t error)$/;"	f	typeref:typename:void	file:
_twr_lp8_task_interval	twr/src/twr_lp8.c	/^static void _twr_lp8_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_lp8_task_measure	twr/src/twr_lp8.c	/^static void _twr_lp8_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_ls013b7dh03_reverse	twr/src/twr_ls013b7dh03.c	/^static inline uint8_t _twr_ls013b7dh03_reverse(uint8_t b)$/;"	f	typeref:typename:uint8_t	file:
_twr_ls013b7dh03_spi_event_handler	twr/src/twr_ls013b7dh03.c	/^static void _twr_ls013b7dh03_spi_event_handler(twr_spi_event_t event, void *event_param)$/;"	f	typeref:typename:void	file:
_twr_ls013b7dh03_spi_transfer	twr/src/twr_ls013b7dh03.c	/^static bool _twr_ls013b7dh03_spi_transfer(twr_ls013b7dh03_t *self, uint8_t *buffer, size_t lengt/;"	f	typeref:typename:bool	file:
_twr_ls013b7dh03_task	twr/src/twr_ls013b7dh03.c	/^static void _twr_ls013b7dh03_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_battery_adc_event_handler	twr/src/twr_module_battery.c	/^static void _twr_module_battery_adc_event_handler(twr_adc_channel_t channel, twr_adc_event_t eve/;"	f	typeref:typename:void	file:
_twr_module_battery_measurement	twr/src/twr_module_battery.c	/^static void _twr_module_battery_measurement(int state)$/;"	f	typeref:typename:void	file:
_twr_module_battery_present_test	twr/src/twr_module_battery.c	/^static bool _twr_module_battery_present_test(void)$/;"	f	typeref:typename:bool	file:
_twr_module_battery_task	twr/src/twr_module_battery.c	/^static void _twr_module_battery_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_climate_mpl3115a2_event_handler	twr/src/twr_module_climate.c	/^static void _twr_module_climate_mpl3115a2_event_handler(twr_mpl3115a2_t *self, twr_mpl3115a2_eve/;"	f	typeref:typename:void	file:
_twr_module_climate_opt3001_event_handler	twr/src/twr_module_climate.c	/^static void _twr_module_climate_opt3001_event_handler(twr_opt3001_t *self, twr_opt3001_event_t e/;"	f	typeref:typename:void	file:
_twr_module_climate_sht20_event_handler	twr/src/twr_module_climate.c	/^static void _twr_module_climate_sht20_event_handler(twr_sht20_t *self, twr_sht20_event_t event, /;"	f	typeref:typename:void	file:
_twr_module_climate_sht30_event_handler	twr/src/twr_module_climate.c	/^static void _twr_module_climate_sht30_event_handler(twr_sht30_t *self, twr_sht30_event_t event, /;"	f	typeref:typename:void	file:
_twr_module_climate_tmp112_event_handler	twr/src/twr_module_climate.c	/^static void _twr_module_climate_tmp112_event_handler(twr_tmp112_t *self, twr_tmp112_event_t even/;"	f	typeref:typename:void	file:
_twr_module_co2_charge_enable	twr/src/twr_module_co2.c	/^static bool _twr_module_co2_charge_enable(bool state)$/;"	f	typeref:typename:bool	file:
_twr_module_co2_device_enable	twr/src/twr_module_co2.c	/^static bool _twr_module_co2_device_enable(bool state)$/;"	f	typeref:typename:bool	file:
_twr_module_co2_init	twr/src/twr_module_co2.c	/^static bool _twr_module_co2_init(void)$/;"	f	typeref:typename:bool	file:
_twr_module_co2_read_signal_rdy	twr/src/twr_module_co2.c	/^static bool _twr_module_co2_read_signal_rdy(int *value)$/;"	f	typeref:typename:bool	file:
_twr_module_co2_uart_enable	twr/src/twr_module_co2.c	/^static bool _twr_module_co2_uart_enable(bool state)$/;"	f	typeref:typename:bool	file:
_twr_module_co2_uart_read	twr/src/twr_module_co2.c	/^static size_t _twr_module_co2_uart_read(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:size_t	file:
_twr_module_co2_uart_write	twr/src/twr_module_co2.c	/^static size_t _twr_module_co2_uart_write(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:size_t	file:
_twr_module_encoder_button_event_handler	twr/src/twr_module_encoder.c	/^static void _twr_module_encoder_button_event_handler(twr_button_t *self, twr_button_event_t even/;"	f	typeref:typename:void	file:
_twr_module_encoder_exti_handler	twr/src/twr_module_encoder.c	/^static void _twr_module_encoder_exti_handler(twr_exti_line_t line, void *param)$/;"	f	typeref:typename:void	file:
_twr_module_encoder_present_test	twr/src/twr_module_encoder.c	/^static bool _twr_module_encoder_present_test(void)$/;"	f	typeref:typename:bool	file:
_twr_module_encoder_task	twr/src/twr_module_encoder.c	/^static void _twr_module_encoder_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_encoder_test_pin	twr/src/twr_module_encoder.c	/^static bool _twr_module_encoder_test_pin(twr_gpio_channel_t channel)$/;"	f	typeref:typename:bool	file:
_twr_module_gps_led_init	twr/src/twr_module_gps.c	/^static void _twr_module_gps_led_init(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_gps_led_off	twr/src/twr_module_gps.c	/^static void _twr_module_gps_led_off(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_gps_led_on	twr/src/twr_module_gps.c	/^static void _twr_module_gps_led_on(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_gps_sam_m8q_event_handler	twr/src/twr_module_gps.c	/^static void _twr_module_gps_sam_m8q_event_handler(twr_sam_m8q_t *self, twr_sam_m8q_event_t event/;"	f	typeref:typename:void	file:
_twr_module_gps_sam_m8q_off	twr/src/twr_module_gps.c	/^static bool _twr_module_gps_sam_m8q_off(twr_sam_m8q_t *self)$/;"	f	typeref:typename:bool	file:
_twr_module_gps_sam_m8q_on	twr/src/twr_module_gps.c	/^static bool _twr_module_gps_sam_m8q_on(twr_sam_m8q_t *self)$/;"	f	typeref:typename:bool	file:
_twr_module_infra_grid_task_interval	twr/src/twr_module_infra_grid.c	/^static void _twr_module_infra_grid_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_infra_grid_task_measure	twr/src/twr_module_infra_grid.c	/^static void _twr_module_infra_grid_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_lcd_button_event_handler	twr/src/twr_module_lcd.c	/^static void _twr_module_lcd_button_event_handler(twr_button_t *self, twr_button_event_t event, v/;"	f	typeref:typename:void	file:
_twr_module_lcd_button_get_input	twr/src/twr_module_lcd.c	/^static int _twr_module_lcd_button_get_input(twr_button_t *self)$/;"	f	typeref:typename:int	file:
_twr_module_lcd_button_init	twr/src/twr_module_lcd.c	/^static void _twr_module_lcd_button_init(twr_button_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_lcd_cs_pin_set	twr/src/twr_module_lcd.c	/^static bool _twr_module_lcd_cs_pin_set(bool state)$/;"	f	typeref:typename:bool	file:
_twr_module_lcd_led_init	twr/src/twr_module_lcd.c	/^static void _twr_module_lcd_led_init(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_lcd_led_off	twr/src/twr_module_lcd.c	/^static void _twr_module_lcd_led_off(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_lcd_led_on	twr/src/twr_module_lcd.c	/^static void _twr_module_lcd_led_on(twr_led_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_lcd_tca9534a_init	twr/src/twr_module_lcd.c	/^static bool _twr_module_lcd_tca9534a_init(void)$/;"	f	typeref:typename:bool	file:
_twr_module_relay_hardware_init	twr/src/twr_module_relay.c	/^static bool _twr_module_relay_hardware_init(twr_module_relay_t *self)$/;"	f	typeref:typename:bool	file:
_twr_module_relay_set_output	twr/src/twr_module_relay.c	/^static void _twr_module_relay_set_output(twr_module_relay_t *self, twr_module_relay_state_t stat/;"	f	typeref:typename:void	file:
_twr_module_relay_set_output_disable	twr/src/twr_module_relay.c	/^static void _twr_module_relay_set_output_disable(twr_module_relay_t *self)$/;"	f	typeref:typename:void	file:
_twr_module_relay_task	twr/src/twr_module_relay.c	/^static void _twr_module_relay_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_rs485_async_read_task	twr/src/twr_module_rs485.c	/^static void _twr_module_rs485_async_read_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_rs485_async_write_task	twr/src/twr_module_rs485.c	/^static void _twr_module_rs485_async_write_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_rs485_task_interval	twr/src/twr_module_rs485.c	/^static void _twr_module_rs485_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_rs485_task_measure	twr/src/twr_module_rs485.c	/^static void _twr_module_rs485_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_module_sigfox_event_handler_td1207r	twr/src/twr_module_sigfox.c	/^static void _twr_module_sigfox_event_handler_td1207r(twr_td1207r_t *child, twr_td1207r_event_t e/;"	f	typeref:typename:void	file:
_twr_module_sigfox_event_handler_wssfm10r1at	twr/src/twr_module_sigfox.c	/^static void _twr_module_sigfox_event_handler_wssfm10r1at(twr_wssfm10r1at_t *child, twr_wssfm10r1/;"	f	typeref:typename:void	file:
_twr_module_x1_set_slpz	twr/src/twr_module_x1.c	/^static bool _twr_module_x1_set_slpz(void *ctx, bool state)$/;"	f	typeref:typename:bool	file:
_twr_mpl3115a2_task_interval	twr/src/twr_mpl3115a2.c	/^static void _twr_mpl3115a2_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_mpl3115a2_task_measure	twr/src/twr_mpl3115a2.c	/^static void _twr_mpl3115a2_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_onewire_ds2484_disable	twr/src/twr_onewire_ds2484.c	/^static bool _twr_onewire_ds2484_disable(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_ds2484_enable	twr/src/twr_onewire_ds2484.c	/^static bool _twr_onewire_ds2484_enable(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_ds2484_init	twr/src/twr_onewire_ds2484.c	/^static bool _twr_onewire_ds2484_init(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_ds2484_read_bit	twr/src/twr_onewire_ds2484.c	/^static uint8_t _twr_onewire_ds2484_read_bit(void *ctx)$/;"	f	typeref:typename:uint8_t	file:
_twr_onewire_ds2484_read_byte	twr/src/twr_onewire_ds2484.c	/^static uint8_t _twr_onewire_ds2484_read_byte(void *ctx)$/;"	f	typeref:typename:uint8_t	file:
_twr_onewire_ds2484_reset	twr/src/twr_onewire_ds2484.c	/^static bool _twr_onewire_ds2484_reset(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_ds2484_search_next	twr/src/twr_onewire_ds2484.c	/^static bool _twr_onewire_ds2484_search_next(void *ctx, twr_onewire_t *onewire, uint64_t *device_/;"	f	typeref:typename:bool	file:
_twr_onewire_ds2484_write_bit	twr/src/twr_onewire_ds2484.c	/^static void _twr_onewire_ds2484_write_bit(void *ctx, uint8_t bit)$/;"	f	typeref:typename:void	file:
_twr_onewire_ds2484_write_byte	twr/src/twr_onewire_ds2484.c	/^static void _twr_onewire_ds2484_write_byte(void *ctx, uint8_t byte)$/;"	f	typeref:typename:void	file:
_twr_onewire_gpio_disable	twr/src/twr_onewire_gpio.c	/^static bool _twr_onewire_gpio_disable(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_gpio_enable	twr/src/twr_onewire_gpio.c	/^static bool _twr_onewire_gpio_enable(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_gpio_init	twr/src/twr_onewire_gpio.c	/^static bool _twr_onewire_gpio_init(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_gpio_read_bit	twr/src/twr_onewire_gpio.c	/^static uint8_t _twr_onewire_gpio_read_bit(void *ctx)$/;"	f	typeref:typename:uint8_t	file:
_twr_onewire_gpio_read_byte	twr/src/twr_onewire_gpio.c	/^static uint8_t _twr_onewire_gpio_read_byte(void *ctx)$/;"	f	typeref:typename:uint8_t	file:
_twr_onewire_gpio_reset	twr/src/twr_onewire_gpio.c	/^static bool _twr_onewire_gpio_reset(void *ctx)$/;"	f	typeref:typename:bool	file:
_twr_onewire_gpio_search_next	twr/src/twr_onewire_gpio.c	/^static bool _twr_onewire_gpio_search_next(void *ctx, twr_onewire_t *onewire, uint64_t *device_nu/;"	f	typeref:typename:bool	file:
_twr_onewire_gpio_write_bit	twr/src/twr_onewire_gpio.c	/^static void _twr_onewire_gpio_write_bit(void *ctx, uint8_t bit)$/;"	f	typeref:typename:void	file:
_twr_onewire_gpio_write_byte	twr/src/twr_onewire_gpio.c	/^static void _twr_onewire_gpio_write_byte(void *ctx, uint8_t byte)$/;"	f	typeref:typename:void	file:
_twr_onewire_lock	twr/src/twr_onewire.c	/^static void _twr_onewire_lock(twr_onewire_t *self)$/;"	f	typeref:typename:void	file:
_twr_onewire_relay_read_state	twr/src/twr_onewire_relay.c	/^bool _twr_onewire_relay_read_state(twr_onewire_relay_t *self)$/;"	f	typeref:typename:bool
_twr_onewire_search_devices	twr/src/twr_onewire.c	/^static int _twr_onewire_search_devices(twr_onewire_t *self, uint64_t *device_list, size_t device/;"	f	typeref:typename:int	file:
_twr_onewire_search_reset	twr/src/twr_onewire.c	/^static void _twr_onewire_search_reset(twr_onewire_t *self)$/;"	f	typeref:typename:void	file:
_twr_onewire_search_target_setup	twr/src/twr_onewire.c	/^static void _twr_onewire_search_target_setup(twr_onewire_t *self, uint8_t family_code)$/;"	f	typeref:typename:void	file:
_twr_onewire_unlock	twr/src/twr_onewire.c	/^static void _twr_onewire_unlock(twr_onewire_t *self)$/;"	f	typeref:typename:void	file:
_twr_opt3001_task_interval	twr/src/twr_opt3001.c	/^static void _twr_opt3001_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_opt3001_task_measure	twr/src/twr_opt3001.c	/^static void _twr_opt3001_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_pulse_counter_channel_exti	twr/src/twr_pulse_counter.c	/^static void _twr_pulse_counter_channel_exti(twr_exti_line_t line, void *param)$/;"	f	typeref:typename:void	file:
_twr_pulse_counter_channel_task_update	twr/src/twr_pulse_counter.c	/^static void _twr_pulse_counter_channel_task_update(void *param)$/;"	f	typeref:typename:void	file:
_twr_pwm_tim21_configure	twr/src/twr_pwm.c	/^static void _twr_pwm_tim21_configure(uint32_t resolution_us, uint32_t period_cycles)$/;"	f	typeref:typename:void	file:
_twr_pwm_tim2_configure	twr/src/twr_pwm.c	/^static void _twr_pwm_tim2_configure(uint32_t resolution_us, uint32_t period_cycles)$/;"	f	typeref:typename:void	file:
_twr_pwm_tim3_configure	twr/src/twr_pwm.c	/^static void _twr_pwm_tim3_configure(uint32_t resolution_us, uint32_t period_cycles)$/;"	f	typeref:typename:void	file:
_twr_pyq1648_clear_event	twr/src/twr_pyq1648.c	/^static void _twr_pyq1648_clear_event(twr_pyq1648_t *self)$/;"	f	typeref:typename:void	file:
_twr_pyq1648_compose_event_unit_config	twr/src/twr_pyq1648.c	/^void _twr_pyq1648_compose_event_unit_config(twr_pyq1648_t *self)$/;"	f	typeref:typename:void
_twr_pyq1648_dev_init	twr/src/twr_pyq1648.c	/^static inline void _twr_pyq1648_dev_init(twr_pyq1648_t *self)$/;"	f	typeref:typename:void	file:
_twr_pyq1648_msp_init	twr/src/twr_pyq1648.c	/^static inline void _twr_pyq1648_msp_init(twr_gpio_channel_t gpio_channel_serin, twr_gpio_channel/;"	f	typeref:typename:void	file:
_twr_pyq1648_task	twr/src/twr_pyq1648.c	/^static void _twr_pyq1648_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_radio_atsha204_event_handler	twr/src/twr_radio.c	/^static void _twr_radio_atsha204_event_handler(twr_atsha204_t *self, twr_atsha204_event_t event, /;"	f	typeref:typename:void	file:
_twr_radio_button_event_handler	twr/src/twr_radio.c	/^void _twr_radio_button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_p/;"	f	typeref:typename:void
_twr_radio_go_to_state_rx_or_sleep	twr/src/twr_radio.c	/^static void _twr_radio_go_to_state_rx_or_sleep(void)$/;"	f	typeref:typename:void	file:
_twr_radio_load_peer_devices	twr/src/twr_radio.c	/^static void _twr_radio_load_peer_devices(void)$/;"	f	typeref:typename:void	file:
_twr_radio_peer_device_add	twr/src/twr_radio.c	/^static bool _twr_radio_peer_device_add(uint64_t id)$/;"	f	typeref:typename:bool	file:
_twr_radio_peer_device_remove	twr/src/twr_radio.c	/^static bool _twr_radio_peer_device_remove(uint64_t id)$/;"	f	typeref:typename:bool	file:
_twr_radio_save_peer_devices	twr/src/twr_radio.c	/^static void _twr_radio_save_peer_devices(void)$/;"	f	typeref:typename:void	file:
_twr_radio_scan_cache_push	twr/src/twr_radio.c	/^static bool _twr_radio_scan_cache_push(void)$/;"	f	typeref:typename:bool	file:
_twr_radio_send_ack	twr/src/twr_radio.c	/^static void _twr_radio_send_ack(void)$/;"	f	typeref:typename:void	file:
_twr_radio_spirit1_event_handler	twr/src/twr_radio.c	/^static void _twr_radio_spirit1_event_handler(twr_spirit1_event_t event, void *event_param)$/;"	f	typeref:typename:void	file:
_twr_radio_task	twr/src/twr_radio.c	/^static void _twr_radio_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_ramp_interpolate	twr/src/twr_ramp.c	/^static float _twr_ramp_interpolate(twr_tick_t x, twr_tick_t x_min, twr_tick_t x_max, float y_min/;"	f	typeref:typename:float	file:
_twr_rf_ook_char_to_int	twr/src/twr_rf_ook.c	/^static int _twr_rf_ook_char_to_int(char input)$/;"	f	typeref:typename:int	file:
_twr_rf_ook_irq_TIM3_handler	twr/src/twr_rf_ook.c	/^void _twr_rf_ook_irq_TIM3_handler(void *param)$/;"	f	typeref:typename:void
_twr_rf_ook_string_to_array	twr/src/twr_rf_ook.c	/^static uint8_t _twr_rf_ook_string_to_array(char *str, uint8_t *array)$/;"	f	typeref:typename:uint8_t	file:
_twr_rf_ook_tim3_configure	twr/src/twr_rf_ook.c	/^static void _twr_rf_ook_tim3_configure(uint32_t resolution_us, uint32_t period_cycles)$/;"	f	typeref:typename:void	file:
_twr_sam_m8q_clear	twr/src/twr_sam_m8q.c	/^static void _twr_sam_m8q_clear(twr_sam_m8q_t *self)$/;"	f	typeref:typename:void	file:
_twr_sam_m8q_disable	twr/src/twr_sam_m8q.c	/^static bool _twr_sam_m8q_disable(twr_sam_m8q_t *self)$/;"	f	typeref:typename:bool	file:
_twr_sam_m8q_enable	twr/src/twr_sam_m8q.c	/^static bool _twr_sam_m8q_enable(twr_sam_m8q_t *self)$/;"	f	typeref:typename:bool	file:
_twr_sam_m8q_feed	twr/src/twr_sam_m8q.c	/^static bool _twr_sam_m8q_feed(twr_sam_m8q_t *self, char c)$/;"	f	typeref:typename:bool	file:
_twr_sam_m8q_parse	twr/src/twr_sam_m8q.c	/^static bool _twr_sam_m8q_parse(twr_sam_m8q_t *self, const char *line)$/;"	f	typeref:typename:bool	file:
_twr_sam_m8q_send_config	twr/src/twr_sam_m8q.c	/^static bool _twr_sam_m8q_send_config(twr_sam_m8q_t *self)$/;"	f	typeref:typename:bool	file:
_twr_sam_m8q_task	twr/src/twr_sam_m8q.c	/^static void _twr_sam_m8q_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_sgp30_calculate_crc	twr/src/twr_sgp30.c	/^static uint8_t _twr_sgp30_calculate_crc(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:uint8_t	file:
_twr_sgp30_task_interval	twr/src/twr_sgp30.c	/^static void _twr_sgp30_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_sgp30_task_measure	twr/src/twr_sgp30.c	/^static void _twr_sgp30_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_sgpc3_calculate_crc	twr/src/twr_sgpc3.c	/^static uint8_t _twr_sgpc3_calculate_crc(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:uint8_t	file:
_twr_sgpc3_task_interval	twr/src/twr_sgpc3.c	/^static void _twr_sgpc3_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_sgpc3_task_measure	twr/src/twr_sgpc3.c	/^static void _twr_sgpc3_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_sha256_transform	twr/src/twr_sha256.c	/^static void _twr_sha256_transform(twr_sha256_t *self, const uint8_t *buffer)$/;"	f	typeref:typename:void	file:
_twr_sht20_task_interval	twr/src/twr_sht20.c	/^static void _twr_sht20_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_sht20_task_measure	twr/src/twr_sht20.c	/^static void _twr_sht20_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_sht20_write	twr/src/twr_sht20.c	/^static bool _twr_sht20_write(twr_sht20_t *self, const uint8_t data)$/;"	f	typeref:typename:bool	file:
_twr_sht30_task_interval	twr/src/twr_sht30.c	/^static void _twr_sht30_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_sht30_task_measure	twr/src/twr_sht30.c	/^static void _twr_sht30_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_sht30_write	twr/src/twr_sht30.c	/^static bool _twr_sht30_write(twr_sht30_t *self, const uint16_t data)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_eeprom_fill	twr/src/twr_soil_sensor.c	/^static void _twr_soil_sensor_eeprom_fill(twr_soil_sensor_sensor_t *sensor)$/;"	f	typeref:typename:void	file:
_twr_soil_sensor_eeprom_load	twr/src/twr_soil_sensor.c	/^static twr_soil_sensor_error_t _twr_soil_sensor_eeprom_load(twr_soil_sensor_sensor_t *sensor)$/;"	f	typeref:typename:twr_soil_sensor_error_t	file:
_twr_soil_sensor_eeprom_read	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_eeprom_read(twr_soil_sensor_sensor_t *sensor, uint8_t address, void/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_eeprom_save	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_eeprom_save(twr_soil_sensor_sensor_t *sensor)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_eeprom_write	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_eeprom_write(twr_soil_sensor_sensor_t *sensor, uint8_t address, con/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_eeprom_write_chunk	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_eeprom_write_chunk(twr_ds28e17_t *ds28e17, twr_i2c_memory_transfer_/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_error	twr/src/twr_soil_sensor.c	/^static void _twr_soil_sensor_error(twr_soil_sensor_t *self, twr_soil_sensor_error_t error)$/;"	f	typeref:typename:void	file:
_twr_soil_sensor_task_interval	twr/src/twr_soil_sensor.c	/^static void _twr_soil_sensor_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_soil_sensor_task_measure	twr/src/twr_soil_sensor.c	/^static void _twr_soil_sensor_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_soil_sensor_tmp112_data_fetch	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_tmp112_data_fetch(twr_soil_sensor_sensor_t *sensor)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_tmp112_init	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_tmp112_init(twr_ds28e17_t *ds28e17)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_tmp112_measurement_request	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_tmp112_measurement_request(twr_ds28e17_t *ds28e17)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_zssc3123_data_fetch	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_zssc3123_data_fetch(twr_soil_sensor_sensor_t *sensor)$/;"	f	typeref:typename:bool	file:
_twr_soil_sensor_zssc3123_measurement_request	twr/src/twr_soil_sensor.c	/^static bool _twr_soil_sensor_zssc3123_measurement_request(twr_ds28e17_t *ds28e17)$/;"	f	typeref:typename:bool	file:
_twr_spi_dma_event_handler	twr/src/twr_spi.c	/^static void _twr_spi_dma_event_handler(twr_dma_channel_t channel, twr_dma_event_t event, void *e/;"	f	typeref:typename:void	file:
_twr_spi_task	twr/src/twr_spi.c	/^static void _twr_spi_task()$/;"	f	typeref:typename:void	file:
_twr_spi_transfer_byte	twr/src/twr_spi.c	/^static uint8_t _twr_spi_transfer_byte(uint8_t value)$/;"	f	typeref:typename:uint8_t	file:
_twr_spirit1_check_state_rx	twr/src/twr_spirit1.c	/^static void _twr_spirit1_check_state_rx(void)$/;"	f	typeref:typename:void	file:
_twr_spirit1_check_state_tx	twr/src/twr_spirit1.c	/^static void _twr_spirit1_check_state_tx(void)$/;"	f	typeref:typename:void	file:
_twr_spirit1_enter_state_rx	twr/src/twr_spirit1.c	/^static void _twr_spirit1_enter_state_rx(void)$/;"	f	typeref:typename:void	file:
_twr_spirit1_enter_state_sleep	twr/src/twr_spirit1.c	/^static void _twr_spirit1_enter_state_sleep(void)$/;"	f	typeref:typename:void	file:
_twr_spirit1_enter_state_tx	twr/src/twr_spirit1.c	/^static void _twr_spirit1_enter_state_tx(void)$/;"	f	typeref:typename:void	file:
_twr_spirit1_interrupt	twr/src/twr_spirit1.c	/^static void _twr_spirit1_interrupt(twr_exti_line_t line, void *param)$/;"	f	typeref:typename:void	file:
_twr_spirit1_task	twr/src/twr_spirit1.c	/^static void _twr_spirit1_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_sps30_calculate_crc	twr/src/twr_sps30.c	/^static uint8_t _twr_sps30_calculate_crc(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:uint8_t	file:
_twr_sps30_convert_to_words	twr/src/twr_sps30.c	/^static bool _twr_sps30_convert_to_words(uint8_t *buffer, size_t buffer_length, uint16_t *data, s/;"	f	typeref:typename:bool	file:
_twr_sps30_task_interval	twr/src/twr_sps30.c	/^static void _twr_sps30_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_sps30_task_measure	twr/src/twr_sps30.c	/^static void _twr_sps30_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_ssd1306_command	twr/src/twr_ssd1306.c	/^static bool _twr_ssd1306_command(twr_ssd1306_t *self, uint8_t command)$/;"	f	typeref:typename:bool	file:
_twr_ssd1306_init	twr/src/twr_ssd1306.c	/^static bool _twr_ssd1306_init(twr_ssd1306_t *self)$/;"	f	typeref:typename:bool	file:
_twr_ssd1306_send_data	twr/src/twr_ssd1306.c	/^static bool _twr_ssd1306_send_data(twr_ssd1306_t *self, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:bool	file:
_twr_switch_task	twr/src/twr_switch.c	/^static void _twr_switch_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_system_init_clock	twr/src/twr_system.c	/^static void _twr_system_init_clock(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_debug	twr/src/twr_system.c	/^static void _twr_system_init_debug(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_flash	twr/src/twr_system.c	/^static void _twr_system_init_flash(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_gpio	twr/src/twr_system.c	/^static void _twr_system_init_gpio(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_power	twr/src/twr_system.c	/^static void _twr_system_init_power(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_rtc	twr/src/twr_system.c	/^static void _twr_system_init_rtc(void)$/;"	f	typeref:typename:void	file:
_twr_system_init_shutdown_i2c_sensors	twr/src/twr_system.c	/^static void _twr_system_init_shutdown_i2c_sensors(void)$/;"	f	typeref:typename:void	file:
_twr_system_switch_clock	twr/src/twr_system.c	/^static void _twr_system_switch_clock(twr_system_clock_t clock)$/;"	f	typeref:typename:void	file:
_twr_tag_humidity_event_handler_hdc2080	twr/src/twr_tag_humidity.c	/^static void _twr_tag_humidity_event_handler_hdc2080(twr_hdc2080_t *child, twr_hdc2080_event_t ev/;"	f	typeref:typename:void	file:
_twr_tag_humidity_event_handler_hts221	twr/src/twr_tag_humidity.c	/^static void _twr_tag_humidity_event_handler_hts221(twr_hts221_t *child, twr_hts221_event_t event/;"	f	typeref:typename:void	file:
_twr_tag_humidity_event_handler_sht20	twr/src/twr_tag_humidity.c	/^static void _twr_tag_humidity_event_handler_sht20(twr_sht20_t *child, twr_sht20_event_t event, v/;"	f	typeref:typename:void	file:
_twr_tag_humidity_event_handler_sht30	twr/src/twr_tag_humidity.c	/^static void _twr_tag_humidity_event_handler_sht30(twr_sht30_t *child, twr_sht30_event_t event, v/;"	f	typeref:typename:void	file:
_twr_tag_nfc_ndef_add_record_head	twr/src/twr_tag_nfc.c	/^static bool _twr_tag_nfc_ndef_add_record_head(twr_tag_nfc_ndef_t *self, size_t payload_length)$/;"	f	typeref:typename:bool	file:
_twr_td1207r_read_response	twr/src/twr_td1207r.c	/^static bool _twr_td1207r_read_response(twr_td1207r_t *self)$/;"	f	typeref:typename:bool	file:
_twr_td1207r_task	twr/src/twr_td1207r.c	/^static void _twr_td1207r_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_tmp112_task_interval	twr/src/twr_tmp112.c	/^static void _twr_tmp112_task_interval(void *param)$/;"	f	typeref:typename:void	file:
_twr_tmp112_task_measure	twr/src/twr_tmp112.c	/^static void _twr_tmp112_task_measure(void *param)$/;"	f	typeref:typename:void	file:
_twr_uart_2_dma_read_task	twr/src/twr_uart.c	/^static void _twr_uart_2_dma_read_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_uart_async_read_task	twr/src/twr_uart.c	/^static void _twr_uart_async_read_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_uart_async_write_task	twr/src/twr_uart.c	/^static void _twr_uart_async_write_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_uart_irq_handler	twr/src/twr_uart.c	/^static void _twr_uart_irq_handler(twr_uart_channel_t channel)$/;"	f	typeref:typename:void	file:
_twr_usb_cdc_init_hsi48	twr/src/twr_usb_cdc.c	/^static void _twr_usb_cdc_init_hsi48()$/;"	f	typeref:typename:void	file:
_twr_usb_cdc_task	twr/src/twr_usb_cdc.c	/^static void _twr_usb_cdc_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_usb_cdc_task_start	twr/src/twr_usb_cdc.c	/^static void _twr_usb_cdc_task_start(void *param)$/;"	f	typeref:typename:void	file:
_twr_ws2812b_TIM2_interrupt_handler	twr/src/twr_ws2812b.c	/^static void _twr_ws2812b_TIM2_interrupt_handler(void *param)$/;"	f	typeref:typename:void	file:
_twr_ws2812b_dma_event_handler	twr/src/twr_ws2812b.c	/^static void _twr_ws2812b_dma_event_handler(twr_dma_channel_t channel, twr_dma_event_t event, voi/;"	f	typeref:typename:void	file:
_twr_ws2812b_task	twr/src/twr_ws2812b.c	/^static void _twr_ws2812b_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_wssfm10r1at_read_response	twr/src/twr_wssfm10r1at.c	/^static bool _twr_wssfm10r1at_read_response(twr_wssfm10r1at_t *self)$/;"	f	typeref:typename:bool	file:
_twr_wssfm10r1at_set_state	twr/src/twr_wssfm10r1at.c	/^static void _twr_wssfm10r1at_set_state(twr_wssfm10r1at_t *self, twr_wssfm10r1at_state_t state)$/;"	f	typeref:typename:void	file:
_twr_wssfm10r1at_task	twr/src/twr_wssfm10r1at.c	/^static void _twr_wssfm10r1at_task(void *param)$/;"	f	typeref:typename:void	file:
_twr_zssc3123_data_fetch	twr/src/twr_zssc3123.c	/^static bool _twr_zssc3123_data_fetch(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool	file:
_twr_zssc3123_get_response	twr/src/twr_zssc3123.c	/^static uint8_t _twr_zssc3123_get_response(twr_zssc3123_t *self)$/;"	f	typeref:typename:uint8_t	file:
_twr_zssc3123_measurement_request	twr/src/twr_zssc3123.c	/^static bool _twr_zssc3123_measurement_request(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool	file:
_twr_zssc3123_task	twr/src/twr_zssc3123.c	/^static void _twr_zssc3123_task(void *param)$/;"	f	typeref:typename:void	file:
_uart_event_handler	twr/src/twr_cmwx1zzabz.c	/^static void _uart_event_handler(twr_uart_channel_t channel, twr_uart_event_t event, void *param)$/;"	f	typeref:typename:void	file:
_uart_event_handler	twr/src/twr_esp8266.c	/^static void _uart_event_handler(twr_uart_channel_t channel, twr_uart_event_t event, void *param)$/;"	f	typeref:typename:void	file:
application_error	twr/src/main.c	/^__attribute__((weak)) void application_error(twr_error_t code)$/;"	f	typeref:typename:void
application_idle	twr/src/main.c	/^__attribute__((weak)) void application_idle()$/;"	f	typeref:typename:void
application_init	_examples/accelerometer/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/adc/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/battery/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/button/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/configuration/application.c	/^void application_init()$/;"	f	typeref:typename:void
application_init	_examples/dac/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/ds18b20_multiple/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/ds18b20_single/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/eeprom/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/gpio/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/gps/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/infrared-receiver/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/lcd-led/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/led-on-off/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/led-strip/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/lux-meter-tag/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/module_climate/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/nfc-tag/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/onewire-i2c/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/onewire-relay/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/onewire-search/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/pir/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/radio-base/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/radio-remote/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/scheduler-advanced/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/scheduler-basics/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/sigfox/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/switch/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/twr-log/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/ultrasound/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	_examples/usb-sensors/application.c	/^void application_init(void)$/;"	f	typeref:typename:void
application_init	twr/src/main.c	/^__attribute__((weak)) void application_init(void)$/;"	f	typeref:typename:void
application_task	_examples/adc/application.c	/^void application_task()$/;"	f	typeref:typename:void
application_task	_examples/gpio/application.c	/^void application_task()$/;"	f	typeref:typename:void
application_task	_examples/onewire-relay/application.c	/^void application_task()$/;"	f	typeref:typename:void
application_task	_examples/onewire-search/application.c	/^void application_task()$/;"	f	typeref:typename:void
application_task	_examples/scheduler-advanced/application.c	/^void application_task(void)$/;"	f	typeref:typename:void
application_task	_examples/scheduler-basics/application.c	/^void application_task(void)$/;"	f	typeref:typename:void
application_task	twr/src/main.c	/^__attribute__((weak)) void application_task(void *param)$/;"	f	typeref:typename:void
barometer_tag_event_handler	_examples/usb-sensors/application.c	/^void barometer_tag_event_handler(twr_tag_barometer_t *self, twr_tag_barometer_event_t event, voi/;"	f	typeref:typename:void
bswap_16	lib/picolibc/include/byteswap.h	/^bswap_16(__uint16_t _x)$/;"	f	typeref:typename:__uint16_t
bswap_32	lib/picolibc/include/byteswap.h	/^bswap_32(__uint32_t _x)$/;"	f	typeref:typename:__uint32_t
bswap_64	lib/picolibc/include/byteswap.h	/^bswap_64(__uint64_t _x)$/;"	f	typeref:typename:__uint64_t
button_5s_event_handler	_examples/radio-base/application.c	/^static void button_5s_event_handler(twr_button_t *self, twr_button_event_t event, void *event_pa/;"	f	typeref:typename:void	file:
button_event_handler	_examples/battery/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/button/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/eeprom/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/lcd-led/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/led-on-off/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/led-strip/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/radio-base/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/radio-remote/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/sigfox/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/switch/application.c	/^void button_event_handler(twr_switch_t *self, twr_switch_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/ultrasound/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
button_event_handler	_examples/usb-sensors/application.c	/^void button_event_handler(twr_button_t *self, twr_button_event_t event, void *event_param)$/;"	f	typeref:typename:void
calc_crc	twr/src/twr_info.c	/^calc_crc(uint32_t *crc, const uint8_t *buf, size_t len)$/;"	f	typeref:typename:void	file:
climate_event_handler	_examples/module_climate/application.c	/^void climate_event_handler(twr_module_climate_event_t event, void* params)$/;"	f	typeref:typename:void
door_sensor_event_handler	_examples/switch/application.c	/^void door_sensor_event_handler(twr_switch_t *self, twr_switch_event_t event, void *event_param)$/;"	f	typeref:typename:void
ds18b20_event_handler	_examples/ds18b20_multiple/application.c	/^void ds18b20_event_handler(twr_ds18b20_t *self, uint64_t device_address, twr_ds18b20_event_t e, /;"	f	typeref:typename:void
ds18b20_event_handler	_examples/ds18b20_single/application.c	/^void ds18b20_event_handler(twr_ds18b20_t *self, uint64_t device_address, twr_ds18b20_event_t eve/;"	f	typeref:typename:void
gps_module_event_handler	_examples/gps/application.c	/^void gps_module_event_handler(twr_module_gps_event_t event, void *event_param)$/;"	f	typeref:typename:void
hc_sr04_event_handler	_examples/ultrasound/application.c	/^void hc_sr04_event_handler(twr_hc_sr04_t *self, twr_hc_sr04_event_t event, void *event_param)$/;"	f	typeref:typename:void
hex2int	lib/minmea/minmea.c	/^static int hex2int(char c)$/;"	f	typeref:typename:int	file:
humidity_tag_event_handler	_examples/usb-sensors/application.c	/^void humidity_tag_event_handler(twr_tag_humidity_t *self, twr_tag_humidity_event_t event, void */;"	f	typeref:typename:void
humidity_tag_event_handler_r1	_examples/usb-sensors/application.c	/^void humidity_tag_event_handler_r1(twr_tag_humidity_t *self, twr_tag_humidity_event_t event, voi/;"	f	typeref:typename:void
init_tca9534a	twr/src/twr_chester_a.c	/^static bool init_tca9534a(twr_chester_a_t *self)$/;"	f	typeref:typename:bool	file:
ir_event_handler	_examples/infrared-receiver/application.c	/^static void ir_event_handler(twr_ir_rx_event_t event, void *param)$/;"	f	typeref:typename:void	file:
isblank	lib/picolibc/include/ctype.h	/^static __inline int isblank(int c) {$/;"	f	typeref:typename:int
jsmn_alloc_token	lib/jsmn/jsmn.c	/^static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,$/;"	f	typeref:typename:jsmntok_t *	file:
jsmn_fill_token	lib/jsmn/jsmn.c	/^static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,$/;"	f	typeref:typename:void	file:
jsmn_init	lib/jsmn/jsmn.c	/^void jsmn_init(jsmn_parser *parser) {$/;"	f	typeref:typename:void
jsmn_parse	lib/jsmn/jsmn.c	/^int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,$/;"	f	typeref:typename:int
jsmn_parse_primitive	lib/jsmn/jsmn.c	/^static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,$/;"	f	typeref:typename:int	file:
jsmn_parse_string	lib/jsmn/jsmn.c	/^static int jsmn_parse_string(jsmn_parser *parser, const char *js,$/;"	f	typeref:typename:int	file:
led_strip_event_handler	_examples/led-strip/application.c	/^void led_strip_event_handler(twr_led_strip_t *self, twr_led_strip_event_t event, void *event_par/;"	f	typeref:typename:void
lis2_event_handler	_examples/accelerometer/application.c	/^void lis2_event_handler(twr_lis2dh12_t *self, twr_lis2dh12_event_t event, void *event_param)$/;"	f	typeref:typename:void
lis2dh12_event_handler	_examples/usb-sensors/application.c	/^void lis2dh12_event_handler(twr_lis2dh12_t *self, twr_lis2dh12_event_t event, void *event_param)$/;"	f	typeref:typename:void
lux_meter_event_handler	_examples/usb-sensors/application.c	/^void lux_meter_event_handler(twr_tag_lux_meter_t *self, twr_tag_lux_meter_event_t event, void *e/;"	f	typeref:typename:void
lux_module_event_handler	_examples/lux-meter-tag/application.c	/^void lux_module_event_handler(twr_opt3001_t *self, twr_opt3001_event_t event, void *event_param)/;"	f	typeref:typename:void
main	twr/src/main.c	/^int main(void)$/;"	f	typeref:typename:int
minmea_check	lib/minmea/minmea.c	/^bool minmea_check(const char *sentence, bool strict)$/;"	f	typeref:typename:bool
minmea_checksum	lib/minmea/minmea.c	/^uint8_t minmea_checksum(const char *sentence)$/;"	f	typeref:typename:uint8_t
minmea_isfield	lib/minmea/minmea.c	/^static inline bool minmea_isfield(char c) {$/;"	f	typeref:typename:bool	file:
minmea_parse_gga	lib/minmea/minmea.c	/^bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_gll	lib/minmea/minmea.c	/^bool minmea_parse_gll(struct minmea_sentence_gll *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_gsa	lib/minmea/minmea.c	/^bool minmea_parse_gsa(struct minmea_sentence_gsa *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_gst	lib/minmea/minmea.c	/^bool minmea_parse_gst(struct minmea_sentence_gst *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_gsv	lib/minmea/minmea.c	/^bool minmea_parse_gsv(struct minmea_sentence_gsv *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_pubx	lib/minmea/minmea.c	/^bool minmea_parse_pubx(struct minmea_sentence_pubx *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_rmc	lib/minmea/minmea.c	/^bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_vtg	lib/minmea/minmea.c	/^bool minmea_parse_vtg(struct minmea_sentence_vtg *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_parse_zda	lib/minmea/minmea.c	/^bool minmea_parse_zda(struct minmea_sentence_zda *frame, const char *sentence)$/;"	f	typeref:typename:bool
minmea_rescale	lib/minmea/minmea.h	/^static inline int_least32_t minmea_rescale(struct minmea_float *f, int_least32_t new_scale)$/;"	f	typeref:typename:int_least32_t
minmea_scan	lib/minmea/minmea.c	/^bool minmea_scan(const char *sentence, const char *format, ...)$/;"	f	typeref:typename:bool
minmea_sentence_id	lib/minmea/minmea.c	/^enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)$/;"	f	typeref:enum:minmea_sentence_id
minmea_talker_id	lib/minmea/minmea.c	/^bool minmea_talker_id(char talker[3], const char *sentence)$/;"	f	typeref:typename:bool
minmea_tocoord	lib/minmea/minmea.h	/^static inline float minmea_tocoord(struct minmea_float *f)$/;"	f	typeref:typename:float
minmea_tofloat	lib/minmea/minmea.h	/^static inline float minmea_tofloat(struct minmea_float *f)$/;"	f	typeref:typename:float
p0_event_handler	_examples/switch/application.c	/^void p0_event_handler(twr_switch_t *self, twr_switch_event_t event, void *event_param)$/;"	f	typeref:typename:void
pir_module_event_handler	_examples/pir/application.c	/^void pir_module_event_handler(twr_module_pir_t *self, twr_module_pir_event_t event, void *event_/;"	f	typeref:typename:void
radio_event_handler	_examples/radio-base/application.c	/^void radio_event_handler(twr_radio_event_t event, void *event_param)$/;"	f	typeref:typename:void
s_assert_failed	stm/spirit1/src/SPIRIT_Types.c	/^void s_assert_failed(char* expression)$/;"	f	typeref:typename:void
s_assert_failed	stm/spirit1/src/SPIRIT_Types.c	/^void s_assert_failed(uint8_t* file, uint32_t line)$/;"	f	typeref:typename:void
s_assert_failed	stm/spirit1/src/SPIRIT_Types.c	/^void s_assert_failed(uint8_t* file, uint32_t line, char* expression)$/;"	f	typeref:typename:void
sigfox_module_event_handler	_examples/sigfox/application.c	/^void sigfox_module_event_handler(twr_module_sigfox_t *self, twr_module_sigfox_event_t event, voi/;"	f	typeref:typename:void
spirit1_event_handler	_examples/usb-sensors/application.c	/^static void spirit1_event_handler(twr_spirit1_event_t event, void *event_param)$/;"	f	typeref:typename:void	file:
task_turn_off	_examples/scheduler-advanced/application.c	/^void task_turn_off(void *param)$/;"	f	typeref:typename:void
task_turn_on	_examples/scheduler-advanced/application.c	/^void task_turn_on(void *param)$/;"	f	typeref:typename:void
temperature_tag_event_handler	_examples/onewire-i2c/application.c	/^void temperature_tag_event_handler(twr_tag_temperature_t *self, twr_tag_temperature_event_t even/;"	f	typeref:typename:void
temperature_tag_event_handler	_examples/sigfox/application.c	/^void temperature_tag_event_handler(twr_tag_temperature_t *self, twr_tag_temperature_event_t even/;"	f	typeref:typename:void
temperature_tag_event_handler	_examples/usb-sensors/application.c	/^void temperature_tag_event_handler(twr_tag_temperature_t *self, twr_tag_temperature_event_t even/;"	f	typeref:typename:void
twr_adc_async_get_value	twr/src/twr_adc.c	/^bool twr_adc_async_get_value(twr_adc_channel_t channel, uint16_t *result)$/;"	f	typeref:typename:bool
twr_adc_async_get_voltage	twr/src/twr_adc.c	/^bool twr_adc_async_get_voltage(twr_adc_channel_t channel, float *result)$/;"	f	typeref:typename:bool
twr_adc_async_measure	twr/src/twr_adc.c	/^bool twr_adc_async_measure(twr_adc_channel_t channel)$/;"	f	typeref:typename:bool
twr_adc_calibration	twr/src/twr_adc.c	/^bool twr_adc_calibration(void)$/;"	f	typeref:typename:bool
twr_adc_get_value	twr/src/twr_adc.c	/^bool twr_adc_get_value(twr_adc_channel_t channel, uint16_t *result)$/;"	f	typeref:typename:bool
twr_adc_get_vdda_voltage	twr/src/twr_adc.c	/^bool twr_adc_get_vdda_voltage(float *vdda_voltage)$/;"	f	typeref:typename:bool
twr_adc_init	twr/src/twr_adc.c	/^void twr_adc_init()$/;"	f	typeref:typename:void
twr_adc_is_ready	twr/src/twr_adc.c	/^bool twr_adc_is_ready()$/;"	f	typeref:typename:bool
twr_adc_oversampling_set	twr/src/twr_adc.c	/^void twr_adc_oversampling_set(twr_adc_channel_t channel, twr_adc_oversampling_t oversampling)$/;"	f	typeref:typename:void
twr_adc_resolution_set	twr/src/twr_adc.c	/^void twr_adc_resolution_set(twr_adc_channel_t channel, twr_adc_resolution_t resolution)$/;"	f	typeref:typename:void
twr_adc_set_event_handler	twr/src/twr_adc.c	/^bool twr_adc_set_event_handler(twr_adc_channel_t channel, void (*event_handler)(twr_adc_channel_/;"	f	typeref:typename:bool
twr_aes_ctwr_decrypt	twr/src/twr_aes.c	/^bool twr_aes_ctwr_decrypt(void *buffer_out, const void *buffer_in, size_t length, twr_aes_key_t /;"	f	typeref:typename:bool
twr_aes_ctwr_encrypt	twr/src/twr_aes.c	/^bool twr_aes_ctwr_encrypt(void *buffer_out, const void *buffer_in, size_t length, twr_aes_key_t /;"	f	typeref:typename:bool
twr_aes_ecb_decrypt	twr/src/twr_aes.c	/^bool twr_aes_ecb_decrypt(void *buffer_out, const void *buffer_in, size_t length, twr_aes_key_t k/;"	f	typeref:typename:bool
twr_aes_ecb_encrypt	twr/src/twr_aes.c	/^bool twr_aes_ecb_encrypt(void *buffer_out, const void *buffer_in, const size_t length, const twr/;"	f	typeref:typename:bool
twr_aes_init	twr/src/twr_aes.c	/^void twr_aes_init(void)$/;"	f	typeref:typename:void
twr_aes_iv_from_uint8	twr/src/twr_aes.c	/^void twr_aes_iv_from_uint8(twr_aes_iv_t iv, const uint8_t *buffer)$/;"	f	typeref:typename:void
twr_aes_key_derivation	twr/src/twr_aes.c	/^bool twr_aes_key_derivation(twr_aes_key_t decryption_key, const twr_aes_key_t key)$/;"	f	typeref:typename:bool
twr_aes_key_from_uint8	twr/src/twr_aes.c	/^void twr_aes_key_from_uint8(twr_aes_key_t key, const uint8_t *buffer)$/;"	f	typeref:typename:void
twr_analog_sensor_get_value	twr/src/twr_analog_sensor.c	/^bool twr_analog_sensor_get_value(twr_analog_sensor_t *self, uint16_t *result)$/;"	f	typeref:typename:bool
twr_analog_sensor_init	twr/src/twr_analog_sensor.c	/^void twr_analog_sensor_init(twr_analog_sensor_t *self, twr_adc_channel_t adc_channel, const twr_/;"	f	typeref:typename:void
twr_analog_sensor_measure	twr/src/twr_analog_sensor.c	/^bool twr_analog_sensor_measure(twr_analog_sensor_t *self)$/;"	f	typeref:typename:bool
twr_analog_sensor_set_event_handler	twr/src/twr_analog_sensor.c	/^void twr_analog_sensor_set_event_handler(twr_analog_sensor_t *self, void (*event_handler)(twr_an/;"	f	typeref:typename:void
twr_analog_sensor_set_update_interval	twr/src/twr_analog_sensor.c	/^void twr_analog_sensor_set_update_interval(twr_analog_sensor_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_at_lora_adr_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_adr_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_adr_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_adr_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_appeui_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_appeui_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_appeui_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_appeui_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_appkey_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_appkey_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_appkey_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_appkey_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_appskey_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_appskey_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_appskey_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_appskey_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_band_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_band_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_band_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_band_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_custom_at_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_custom_at_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_debug_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_debug_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_devaddr_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_devaddr_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_devaddr_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_devaddr_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_deveui_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_deveui_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_deveui_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_deveui_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_dr_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_dr_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_dr_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_dr_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_freset	twr/src/twr_at_lora.c	/^bool twr_at_lora_freset(void)$/;"	f	typeref:typename:bool
twr_at_lora_frmcnt	twr/src/twr_at_lora.c	/^bool twr_at_lora_frmcnt(void)$/;"	f	typeref:typename:bool
twr_at_lora_init	twr/src/twr_at_lora.c	/^void twr_at_lora_init(twr_cmwx1zzabz_t *lora)$/;"	f	typeref:typename:void
twr_at_lora_join	twr/src/twr_at_lora.c	/^bool twr_at_lora_join(void)$/;"	f	typeref:typename:bool
twr_at_lora_link_check	twr/src/twr_at_lora.c	/^bool twr_at_lora_link_check(void)$/;"	f	typeref:typename:bool
twr_at_lora_mode_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_mode_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_mode_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_mode_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_nwk_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_nwk_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_nwk_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_nwk_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_nwkskey_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_nwkskey_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_nwkskey_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_nwkskey_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_reboot	twr/src/twr_at_lora.c	/^bool twr_at_lora_reboot(void)$/;"	f	typeref:typename:bool
twr_at_lora_repc_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_repc_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_repc_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_repc_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_repu_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_repu_read(void)$/;"	f	typeref:typename:bool
twr_at_lora_repu_set	twr/src/twr_at_lora.c	/^bool twr_at_lora_repu_set(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_at_lora_rfq	twr/src/twr_at_lora.c	/^bool twr_at_lora_rfq(void)$/;"	f	typeref:typename:bool
twr_at_lora_ver_read	twr/src/twr_at_lora.c	/^bool twr_at_lora_ver_read(void)$/;"	f	typeref:typename:bool
twr_atci_clac_action	twr/src/twr_atci.c	/^bool twr_atci_clac_action(void)$/;"	f	typeref:typename:bool
twr_atci_get_buffer_from_hex_string	twr/src/twr_atci.c	/^bool twr_atci_get_buffer_from_hex_string(twr_atci_param_t *param, void *buffer, size_t *length)$/;"	f	typeref:typename:bool
twr_atci_get_string	twr/src/twr_atci.c	/^bool twr_atci_get_string(twr_atci_param_t *param, char *str, size_t length)$/;"	f	typeref:typename:bool
twr_atci_get_uint	twr/src/twr_atci.c	/^bool twr_atci_get_uint(twr_atci_param_t *param, uint32_t *value)$/;"	f	typeref:typename:bool
twr_atci_help_action	twr/src/twr_atci.c	/^bool twr_atci_help_action(void)$/;"	f	typeref:typename:bool
twr_atci_init	twr/src/twr_atci.c	/^void twr_atci_init(const twr_atci_command_t *commands, int length)$/;"	f	typeref:typename:void
twr_atci_is_comma	twr/src/twr_atci.c	/^bool twr_atci_is_comma(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_atci_is_quotation_mark	twr/src/twr_atci.c	/^bool twr_atci_is_quotation_mark(twr_atci_param_t *param)$/;"	f	typeref:typename:bool
twr_atci_print	twr/src/twr_atci.c	/^size_t twr_atci_print(const char *message)$/;"	f	typeref:typename:size_t
twr_atci_print_buffer_as_hex	twr/src/twr_atci.c	/^size_t twr_atci_print_buffer_as_hex(const void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_atci_printf	twr/src/twr_atci.c	/^size_t twr_atci_printf(const char *format, ...)$/;"	f	typeref:typename:size_t
twr_atci_printfln	twr/src/twr_atci.c	/^size_t twr_atci_printfln(const char *format, ...)$/;"	f	typeref:typename:size_t
twr_atci_println	twr/src/twr_atci.c	/^size_t twr_atci_println(const char *message)$/;"	f	typeref:typename:size_t
twr_atci_set_uart_active_callback	twr/src/twr_atci.c	/^void twr_atci_set_uart_active_callback(bool(*callback)(void), twr_tick_t scan_interval)$/;"	f	typeref:typename:void
twr_atci_skip_response	twr/src/twr_atci.c	/^bool twr_atci_skip_response(void)$/;"	f	typeref:typename:bool
twr_atci_write_error	twr/src/twr_atci.c	/^void twr_atci_write_error(void)$/;"	f	typeref:typename:void
twr_atci_write_ok	twr/src/twr_atci.c	/^void twr_atci_write_ok(void)$/;"	f	typeref:typename:void
twr_atsha204_get_serial_number	twr/src/twr_atsha204.c	/^bool twr_atsha204_get_serial_number(twr_atsha204_t *self, void *destination, size_t size)$/;"	f	typeref:typename:bool
twr_atsha204_init	twr/src/twr_atsha204.c	/^void twr_atsha204_init(twr_atsha204_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_atsha204_is_ready	twr/src/twr_atsha204.c	/^bool twr_atsha204_is_ready(twr_atsha204_t *self)$/;"	f	typeref:typename:bool
twr_atsha204_read_serial_number	twr/src/twr_atsha204.c	/^bool twr_atsha204_read_serial_number(twr_atsha204_t *self)$/;"	f	typeref:typename:bool
twr_atsha204_set_event_handler	twr/src/twr_atsha204.c	/^void twr_atsha204_set_event_handler(twr_atsha204_t *self, void (*event_handler)(twr_atsha204_t */;"	f	typeref:typename:void
twr_base64_calculate_decode_length	twr/src/twr_base64.c	/^size_t twr_base64_calculate_decode_length(char *input, size_t length)$/;"	f	typeref:typename:size_t
twr_base64_calculate_encode_length	twr/src/twr_base64.c	/^size_t twr_base64_calculate_encode_length(size_t length)$/;"	f	typeref:typename:size_t
twr_base64_decode	twr/src/twr_base64.c	/^bool twr_base64_decode(uint8_t *output, size_t *output_length, char *input, size_t input_length)$/;"	f	typeref:typename:bool
twr_base64_encode	twr/src/twr_base64.c	/^bool twr_base64_encode(char *output, size_t *output_length, uint8_t *input, size_t input_length)$/;"	f	typeref:typename:bool
twr_base64_lookup	twr/src/twr_base64.c	/^static uint8_t twr_base64_lookup(char c)$/;"	f	typeref:typename:uint8_t	file:
twr_button_init	twr/src/twr_button.c	/^void twr_button_init(twr_button_t *self, twr_gpio_channel_t gpio_channel, twr_gpio_pull_t gpio_p/;"	f	typeref:typename:void
twr_button_init_virtual	twr/src/twr_button.c	/^void twr_button_init_virtual(twr_button_t *self, int channel, const twr_button_driver_t *driver,/;"	f	typeref:typename:void
twr_button_set_click_timeout	twr/src/twr_button.c	/^void twr_button_set_click_timeout(twr_button_t *self, twr_tick_t click_timeout)$/;"	f	typeref:typename:void
twr_button_set_debounce_time	twr/src/twr_button.c	/^void twr_button_set_debounce_time(twr_button_t *self, twr_tick_t debounce_time)$/;"	f	typeref:typename:void
twr_button_set_event_handler	twr/src/twr_button.c	/^void twr_button_set_event_handler(twr_button_t *self, void (*event_handler)(twr_button_t *, twr_/;"	f	typeref:typename:void
twr_button_set_hold_time	twr/src/twr_button.c	/^void twr_button_set_hold_time(twr_button_t *self, twr_tick_t hold_time)$/;"	f	typeref:typename:void
twr_button_set_scan_interval	twr/src/twr_button.c	/^void twr_button_set_scan_interval(twr_button_t *self, twr_tick_t scan_interval)$/;"	f	typeref:typename:void
twr_chester_a_init	twr/src/twr_chester_a.c	/^bool twr_chester_a_init(twr_chester_a_t *self, twr_i2c_channel_t i2c_channel)$/;"	f	typeref:typename:bool
twr_chester_a_relay_get_state	twr/src/twr_chester_a.c	/^bool twr_chester_a_relay_get_state(twr_chester_a_t *self, twr_chester_a_relay_t relay, bool *sta/;"	f	typeref:typename:bool
twr_chester_a_relay_set_state	twr/src/twr_chester_a.c	/^bool twr_chester_a_relay_set_state(twr_chester_a_t *self, twr_chester_a_relay_t relay, bool stat/;"	f	typeref:typename:bool
twr_chester_a_relay_toggle	twr/src/twr_chester_a.c	/^bool twr_chester_a_relay_toggle(twr_chester_a_t *self, twr_chester_a_relay_t relay)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_custom_at	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_custom_at(twr_cmwx1zzabz_t *self, char *at_command)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_deinit	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_deinit(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_factory_reset	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_factory_reset(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_frame_counter	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_frame_counter(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_get_adaptive_datarate	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_get_adaptive_datarate(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_get_appeui	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_appeui(twr_cmwx1zzabz_t *self, char *appeui)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_appkey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_appkey(twr_cmwx1zzabz_t *self, char *appkey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_appskey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_appskey(twr_cmwx1zzabz_t *self, char *appskey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_band	twr/src/twr_cmwx1zzabz.c	/^twr_cmwx1zzabz_config_band_t twr_cmwx1zzabz_get_band(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:twr_cmwx1zzabz_config_band_t
twr_cmwx1zzabz_get_class	twr/src/twr_cmwx1zzabz.c	/^twr_cmwx1zzabz_config_class_t twr_cmwx1zzabz_get_class(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:twr_cmwx1zzabz_config_class_t
twr_cmwx1zzabz_get_datarate	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_datarate(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_devaddr	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_devaddr(twr_cmwx1zzabz_t *self, char *devaddr)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_deveui	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_deveui(twr_cmwx1zzabz_t *self, char *deveui)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_error_command	twr/src/twr_cmwx1zzabz.c	/^char *twr_cmwx1zzabz_get_error_command(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:char *
twr_cmwx1zzabz_get_error_response	twr/src/twr_cmwx1zzabz.c	/^char *twr_cmwx1zzabz_get_error_response(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:char *
twr_cmwx1zzabz_get_frame_counter	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_get_frame_counter(twr_cmwx1zzabz_t *self, uint32_t *uplink, uint32_t *downli/;"	f	typeref:typename:bool
twr_cmwx1zzabz_get_fw_version	twr/src/twr_cmwx1zzabz.c	/^char *twr_cmwx1zzabz_get_fw_version(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:char *
twr_cmwx1zzabz_get_link_check	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_get_link_check(twr_cmwx1zzabz_t *self, uint8_t *margin, uint8_t *gateway_cou/;"	f	typeref:typename:bool
twr_cmwx1zzabz_get_mode	twr/src/twr_cmwx1zzabz.c	/^twr_cmwx1zzabz_config_mode_t twr_cmwx1zzabz_get_mode(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:twr_cmwx1zzabz_config_mode_t
twr_cmwx1zzabz_get_nwk_public	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_nwk_public(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_nwkskey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_nwkskey(twr_cmwx1zzabz_t *self, char *nwkskey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_get_port	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_port(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_received_message_data	twr/src/twr_cmwx1zzabz.c	/^uint32_t twr_cmwx1zzabz_get_received_message_data(twr_cmwx1zzabz_t *self, uint8_t *buffer, uint3/;"	f	typeref:typename:uint32_t
twr_cmwx1zzabz_get_received_message_length	twr/src/twr_cmwx1zzabz.c	/^uint32_t twr_cmwx1zzabz_get_received_message_length(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint32_t
twr_cmwx1zzabz_get_received_message_port	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_received_message_port(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_repeat_confirmed	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_repeat_confirmed(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_repeat_unconfirmed	twr/src/twr_cmwx1zzabz.c	/^uint8_t twr_cmwx1zzabz_get_repeat_unconfirmed(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:uint8_t
twr_cmwx1zzabz_get_rfq	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_get_rfq(twr_cmwx1zzabz_t *self, int32_t *rssi, int32_t *snr)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_get_rx2	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_get_rx2(twr_cmwx1zzabz_t *self, uint32_t *frequency, uint8_t *datarate)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_init	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_init(twr_cmwx1zzabz_t *self,  twr_uart_channel_t uart_channel)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_is_ready	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_is_ready(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_join	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_join(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_link_check	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_link_check(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_reboot	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_reboot(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_rfq	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_rfq(twr_cmwx1zzabz_t *self)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_send_message	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_send_message(twr_cmwx1zzabz_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_cmwx1zzabz_send_message_confirmed	twr/src/twr_cmwx1zzabz.c	/^bool twr_cmwx1zzabz_send_message_confirmed(twr_cmwx1zzabz_t *self, const void *buffer, size_t le/;"	f	typeref:typename:bool
twr_cmwx1zzabz_set_adaptive_datarate	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_adaptive_datarate(twr_cmwx1zzabz_t *self, bool enable)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_appeui	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_appeui(twr_cmwx1zzabz_t *self, char *appeui)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_appkey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_appkey(twr_cmwx1zzabz_t *self, char *appkey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_appskey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_appskey(twr_cmwx1zzabz_t *self, char *appskey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_band	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_band(twr_cmwx1zzabz_t *self, twr_cmwx1zzabz_config_band_t band)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_class	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_class(twr_cmwx1zzabz_t *self, twr_cmwx1zzabz_config_class_t class)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_datarate	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_datarate(twr_cmwx1zzabz_t *self, uint8_t datarate)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_debug	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_debug(twr_cmwx1zzabz_t *self, bool debug)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_devaddr	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_devaddr(twr_cmwx1zzabz_t *self, char *devaddr)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_deveui	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_deveui(twr_cmwx1zzabz_t *self, char *deveui)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_event_handler	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_event_handler(twr_cmwx1zzabz_t *self, void (*event_handler)(twr_cmwx1zza/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_mode	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_mode(twr_cmwx1zzabz_t *self, twr_cmwx1zzabz_config_mode_t mode)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_nwk_public	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_nwk_public(twr_cmwx1zzabz_t *self, uint8_t public)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_nwkskey	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_nwkskey(twr_cmwx1zzabz_t *self, char *nwkskey)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_port	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_port(twr_cmwx1zzabz_t *self, uint8_t port)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_repeat_confirmed	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_repeat_confirmed(twr_cmwx1zzabz_t *self, uint8_t repeat)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_repeat_unconfirmed	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_repeat_unconfirmed(twr_cmwx1zzabz_t *self, uint8_t repeat)$/;"	f	typeref:typename:void
twr_cmwx1zzabz_set_rx2	twr/src/twr_cmwx1zzabz.c	/^void twr_cmwx1zzabz_set_rx2(twr_cmwx1zzabz_t *self, uint32_t frequency, uint8_t datarate)$/;"	f	typeref:typename:void
twr_config_init	twr/src/twr_config.c	/^void twr_config_init(uint64_t signature, void *config, size_t size, void *init_config)$/;"	f	typeref:typename:void
twr_config_load	twr/src/twr_config.c	/^bool twr_config_load(void)$/;"	f	typeref:typename:bool
twr_config_reset	twr/src/twr_config.c	/^void twr_config_reset(void)$/;"	f	typeref:typename:void
twr_config_save	twr/src/twr_config.c	/^bool twr_config_save(void)$/;"	f	typeref:typename:bool
twr_cp201t_get_temperature_celsius	twr/src/twr_cp201t.c	/^bool twr_cp201t_get_temperature_celsius(twr_module_sensor_channel_t channel, float *celsius)$/;"	f	typeref:typename:bool
twr_cp201t_init	twr/src/twr_cp201t.c	/^bool twr_cp201t_init(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:bool
twr_cp201t_measure	twr/src/twr_cp201t.c	/^bool twr_cp201t_measure(twr_cp201t_t *self)$/;"	f	typeref:typename:bool
twr_cp201t_set_event_handler	twr/src/twr_cp201t.c	/^void twr_cp201t_set_event_handler(twr_module_sensor_channel_t channel, void (*event_handler)(twr/;"	f	typeref:typename:void
twr_cp201t_set_update_interval	twr/src/twr_cp201t.c	/^void twr_cp201t_set_update_interval(twr_module_sensor_channel_t channel, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_crc8	twr/src/twr_crc.c	/^uint8_t twr_crc8(const uint8_t polynomial, const void *buffer, size_t length, const uint8_t init/;"	f	typeref:typename:uint8_t
twr_cy8cmbr3102_get_proximity	twr/src/twr_cy8cmbr3102.c	/^bool twr_cy8cmbr3102_get_proximity(twr_cy8cmbr3102_t *self, uint16_t value)$/;"	f	typeref:typename:bool
twr_cy8cmbr3102_init	twr/src/twr_cy8cmbr3102.c	/^bool twr_cy8cmbr3102_init(twr_cy8cmbr3102_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_ad/;"	f	typeref:typename:bool
twr_cy8cmbr3102_is_touch	twr/src/twr_cy8cmbr3102.c	/^bool twr_cy8cmbr3102_is_touch(twr_cy8cmbr3102_t *self, bool *is_touch)$/;"	f	typeref:typename:bool
twr_cy8cmbr3102_set_event_handler	twr/src/twr_cy8cmbr3102.c	/^void twr_cy8cmbr3102_set_event_handler(twr_cy8cmbr3102_t *self, void (*event_handler)(twr_cy8cmb/;"	f	typeref:typename:void
twr_cy8cmbr3102_set_scan_interval	twr/src/twr_cy8cmbr3102.c	/^void twr_cy8cmbr3102_set_scan_interval(twr_cy8cmbr3102_t *self, twr_tick_t scan_interval)$/;"	f	typeref:typename:void
twr_dac_async_config	twr/src/twr_dac.c	/^bool twr_dac_async_config(twr_dac_channel_t channel, twr_dac_config_t *config)$/;"	f	typeref:typename:bool
twr_dac_async_run	twr/src/twr_dac.c	/^bool twr_dac_async_run(twr_dac_channel_t channel)$/;"	f	typeref:typename:bool
twr_dac_async_stop	twr/src/twr_dac.c	/^void twr_dac_async_stop(twr_dac_channel_t channel)$/;"	f	typeref:typename:void
twr_dac_deinit	twr/src/twr_dac.c	/^void twr_dac_deinit(twr_dac_channel_t channel)$/;"	f	typeref:typename:void
twr_dac_init	twr/src/twr_dac.c	/^void twr_dac_init(twr_dac_channel_t channel)$/;"	f	typeref:typename:void
twr_dac_set_event_handler	twr/src/twr_dac.c	/^void twr_dac_set_event_handler(twr_dac_channel_t channel, void (*event_handler)(twr_dac_channel_/;"	f	typeref:typename:void
twr_dac_set_output	twr/src/twr_dac.c	/^void twr_dac_set_output(twr_dac_channel_t channel, const void *raw, twr_dac_format_t format)$/;"	f	typeref:typename:void
twr_data_stream_feed	twr/src/twr_data_stream.c	/^void twr_data_stream_feed(twr_data_stream_t *self, void *data)$/;"	f	typeref:typename:void
twr_data_stream_get_average	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_average(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_counter	twr/src/twr_data_stream.c	/^int twr_data_stream_get_counter(twr_data_stream_t *self)$/;"	f	typeref:typename:int
twr_data_stream_get_first	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_first(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_last	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_last(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_length	twr/src/twr_data_stream.c	/^int twr_data_stream_get_length(twr_data_stream_t *self)$/;"	f	typeref:typename:int
twr_data_stream_get_max	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_max(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_median	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_median(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_min	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_min(twr_data_stream_t *self, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_nth	twr/src/twr_data_stream.c	/^bool twr_data_stream_get_nth(twr_data_stream_t *self, int n, void *result)$/;"	f	typeref:typename:bool
twr_data_stream_get_number_of_samples	twr/src/twr_data_stream.c	/^int twr_data_stream_get_number_of_samples(twr_data_stream_t *self)$/;"	f	typeref:typename:int
twr_data_stream_get_type	twr/src/twr_data_stream.c	/^twr_data_stream_type_t twr_data_stream_get_type(twr_data_stream_t *self)$/;"	f	typeref:typename:twr_data_stream_type_t
twr_data_stream_init	twr/src/twr_data_stream.c	/^void twr_data_stream_init(twr_data_stream_t *self, int min_number_of_samples, twr_data_stream_bu/;"	f	typeref:typename:void
twr_data_stream_reset	twr/src/twr_data_stream.c	/^void twr_data_stream_reset(twr_data_stream_t *self)$/;"	f	typeref:typename:void
twr_delay_us	twr/src/twr_delay.c	/^void twr_delay_us(uint16_t microseconds)$/;"	f	typeref:typename:void
twr_device_id_get	twr/src/twr_device_id.c	/^void twr_device_id_get(void *destination, size_t size)$/;"	f	typeref:typename:void
twr_dfu_jump	twr/src/twr_dfu.c	/^void twr_dfu_jump(void)$/;"	f	typeref:typename:void
twr_dice_feed_vectors	twr/src/twr_dice.c	/^void twr_dice_feed_vectors(twr_dice_t *self, float x_axis, float y_axis, float z_axis)$/;"	f	typeref:typename:void
twr_dice_get_face	twr/src/twr_dice.c	/^twr_dice_face_t twr_dice_get_face(twr_dice_t *self)$/;"	f	typeref:typename:twr_dice_face_t
twr_dice_init	twr/src/twr_dice.c	/^void twr_dice_init(twr_dice_t *self, twr_dice_face_t start)$/;"	f	typeref:typename:void
twr_dice_set_threshold	twr/src/twr_dice.c	/^void twr_dice_set_threshold(twr_dice_t *self, float threshold)$/;"	f	typeref:typename:void
twr_dma_channel_config	twr/src/twr_dma.c	/^void twr_dma_channel_config(twr_dma_channel_t channel, twr_dma_channel_config_t *config)$/;"	f	typeref:typename:void
twr_dma_channel_get_length	twr/src/twr_dma.c	/^size_t twr_dma_channel_get_length(twr_dma_channel_t channel)$/;"	f	typeref:typename:size_t
twr_dma_channel_run	twr/src/twr_dma.c	/^void twr_dma_channel_run(twr_dma_channel_t channel)$/;"	f	typeref:typename:void
twr_dma_channel_stop	twr/src/twr_dma.c	/^void twr_dma_channel_stop(twr_dma_channel_t channel)$/;"	f	typeref:typename:void
twr_dma_init	twr/src/twr_dma.c	/^void twr_dma_init(void)$/;"	f	typeref:typename:void
twr_dma_set_event_handler	twr/src/twr_dma.c	/^void twr_dma_set_event_handler(twr_dma_channel_t channel, void (*event_handler)(twr_dma_channel_/;"	f	typeref:typename:void
twr_ds182b0_get_short_address	twr/src/twr_ds18b20.c	/^uint64_t twr_ds182b0_get_short_address(twr_ds18b20_t *self, uint8_t index)$/;"	f	typeref:typename:uint64_t
twr_ds18b20_get_index_by_device_address	twr/src/twr_ds18b20.c	/^int twr_ds18b20_get_index_by_device_address(twr_ds18b20_t *self, uint64_t device_address)$/;"	f	typeref:typename:int
twr_ds18b20_get_sensor_found	twr/src/twr_ds18b20.c	/^int twr_ds18b20_get_sensor_found(twr_ds18b20_t *self)$/;"	f	typeref:typename:int
twr_ds18b20_get_temperature_celsius	twr/src/twr_ds18b20.c	/^bool twr_ds18b20_get_temperature_celsius(twr_ds18b20_t *self, uint64_t device_address, float *ce/;"	f	typeref:typename:bool
twr_ds18b20_get_temperature_raw	twr/src/twr_ds18b20.c	/^bool twr_ds18b20_get_temperature_raw(twr_ds18b20_t *self, uint64_t device_address, int16_t *raw)$/;"	f	typeref:typename:bool
twr_ds18b20_init	twr/src/twr_ds18b20.c	/^void twr_ds18b20_init(twr_ds18b20_t *self, twr_onewire_t *onewire, twr_ds18b20_sensor_t *sensors/;"	f	typeref:typename:void
twr_ds18b20_init_multiple	twr/src/twr_ds18b20.c	/^void twr_ds18b20_init_multiple(twr_ds18b20_t *self, twr_ds18b20_sensor_t *sensors, int sensor_co/;"	f	typeref:typename:void
twr_ds18b20_init_single	twr/src/twr_ds18b20.c	/^void twr_ds18b20_init_single(twr_ds18b20_t *self, twr_ds18b20_resolution_bits_t resolution)$/;"	f	typeref:typename:void
twr_ds18b20_measure	twr/src/twr_ds18b20.c	/^bool twr_ds18b20_measure(twr_ds18b20_t *self)$/;"	f	typeref:typename:bool
twr_ds18b20_rescan	twr/src/twr_ds18b20.c	/^void twr_ds18b20_rescan(twr_ds18b20_t *self)$/;"	f	typeref:typename:void
twr_ds18b20_set_event_handler	twr/src/twr_ds18b20.c	/^void twr_ds18b20_set_event_handler(twr_ds18b20_t *self,$/;"	f	typeref:typename:void
twr_ds18b20_set_power_dynamic	twr/src/twr_ds18b20.c	/^void twr_ds18b20_set_power_dynamic(twr_ds18b20_t *self, bool on)$/;"	f	typeref:typename:void
twr_ds18b20_set_update_interval	twr/src/twr_ds18b20.c	/^void twr_ds18b20_set_update_interval(twr_ds18b20_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_ds2484_busy_wait	twr/src/twr_ds2484.c	/^bool twr_ds2484_busy_wait(twr_ds2484_t *self)$/;"	f	typeref:typename:bool
twr_ds2484_disable	twr/src/twr_ds2484.c	/^void twr_ds2484_disable(twr_ds2484_t *self)$/;"	f	typeref:typename:void
twr_ds2484_enable	twr/src/twr_ds2484.c	/^void twr_ds2484_enable(twr_ds2484_t *self)$/;"	f	typeref:typename:void
twr_ds2484_init	twr/src/twr_ds2484.c	/^bool twr_ds2484_init(twr_ds2484_t *self, twr_i2c_channel_t i2c_channel)$/;"	f	typeref:typename:bool
twr_ds2484_is_present	twr/src/twr_ds2484.c	/^bool twr_ds2484_is_present(twr_ds2484_t *self)$/;"	f	typeref:typename:bool
twr_ds2484_is_ready	twr/src/twr_ds2484.c	/^bool twr_ds2484_is_ready(twr_ds2484_t *self)$/;"	f	typeref:typename:bool
twr_ds2484_read_bit	twr/src/twr_ds2484.c	/^bool twr_ds2484_read_bit(twr_ds2484_t *self, uint8_t *bit)$/;"	f	typeref:typename:bool
twr_ds2484_read_byte	twr/src/twr_ds2484.c	/^bool twr_ds2484_read_byte(twr_ds2484_t *self, uint8_t *byte)$/;"	f	typeref:typename:bool
twr_ds2484_reset	twr/src/twr_ds2484.c	/^bool twr_ds2484_reset(twr_ds2484_t *self)$/;"	f	typeref:typename:bool
twr_ds2484_set_slpz_handler	twr/src/twr_ds2484.c	/^void twr_ds2484_set_slpz_handler(twr_ds2484_t *self, bool (*handler)(void *, bool), void *handle/;"	f	typeref:typename:void
twr_ds2484_status_get	twr/src/twr_ds2484.c	/^uint8_t twr_ds2484_status_get(twr_ds2484_t *self)$/;"	f	typeref:typename:uint8_t
twr_ds2484_triplet	twr/src/twr_ds2484.c	/^bool twr_ds2484_triplet(twr_ds2484_t *self, const uint8_t direction)$/;"	f	typeref:typename:bool
twr_ds2484_write_byte	twr/src/twr_ds2484.c	/^bool twr_ds2484_write_byte(twr_ds2484_t *self, const uint8_t byte)$/;"	f	typeref:typename:bool
twr_ds28e17_deinit	twr/src/twr_ds28e17.c	/^void twr_ds28e17_deinit(twr_ds28e17_t *self)$/;"	f	typeref:typename:void
twr_ds28e17_get_device_number	twr/src/twr_ds28e17.c	/^uint64_t twr_ds28e17_get_device_number(twr_ds28e17_t *self)$/;"	f	typeref:typename:uint64_t
twr_ds28e17_init	twr/src/twr_ds28e17.c	/^void twr_ds28e17_init(twr_ds28e17_t *self, twr_onewire_t *onewire, uint64_t device_number)$/;"	f	typeref:typename:void
twr_ds28e17_memory_read	twr/src/twr_ds28e17.c	/^bool twr_ds28e17_memory_read(twr_ds28e17_t *self, const twr_i2c_memory_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_ds28e17_memory_write	twr/src/twr_ds28e17.c	/^bool twr_ds28e17_memory_write(twr_ds28e17_t *self, const twr_i2c_memory_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_ds28e17_read	twr/src/twr_ds28e17.c	/^bool twr_ds28e17_read(twr_ds28e17_t *self, const twr_i2c_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_ds28e17_set_speed	twr/src/twr_ds28e17.c	/^bool twr_ds28e17_set_speed(twr_ds28e17_t *self, twr_i2c_speed_t speed)$/;"	f	typeref:typename:bool
twr_ds28e17_write	twr/src/twr_ds28e17.c	/^bool twr_ds28e17_write(twr_ds28e17_t *self, const twr_i2c_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_eeprom_async_cancel	twr/src/twr_eeprom.c	/^void twr_eeprom_async_cancel(void)$/;"	f	typeref:typename:void
twr_eeprom_async_write	twr/src/twr_eeprom.c	/^bool twr_eeprom_async_write(uint32_t address, const void *buffer, size_t length, void (*event_ha/;"	f	typeref:typename:bool
twr_eeprom_get_size	twr/src/twr_eeprom.c	/^size_t twr_eeprom_get_size(void)$/;"	f	typeref:typename:size_t
twr_eeprom_read	twr/src/twr_eeprom.c	/^bool twr_eeprom_read(uint32_t address, void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_eeprom_write	twr/src/twr_eeprom.c	/^bool twr_eeprom_write(uint32_t address, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_error	twr/src/twr_error.c	/^void twr_error(twr_error_t code)$/;"	f	typeref:typename:void
twr_esp8266_check_ap_availability	twr/src/twr_esp8266.c	/^bool twr_esp8266_check_ap_availability(twr_esp8266_t *self)$/;"	f	typeref:typename:bool
twr_esp8266_connect	twr/src/twr_esp8266.c	/^bool twr_esp8266_connect(twr_esp8266_t *self)$/;"	f	typeref:typename:bool
twr_esp8266_disconnect	twr/src/twr_esp8266.c	/^bool twr_esp8266_disconnect(twr_esp8266_t *self)$/;"	f	typeref:typename:bool
twr_esp8266_get_ap_availability	twr/src/twr_esp8266.c	/^void twr_esp8266_get_ap_availability(twr_esp8266_t *self, bool *available, int *rssi)$/;"	f	typeref:typename:void
twr_esp8266_get_password	twr/src/twr_esp8266.c	/^void twr_esp8266_get_password(twr_esp8266_t *self, char *password)$/;"	f	typeref:typename:void
twr_esp8266_get_received_message_data	twr/src/twr_esp8266.c	/^uint32_t twr_esp8266_get_received_message_data(twr_esp8266_t *self, uint8_t *buffer, uint32_t bu/;"	f	typeref:typename:uint32_t
twr_esp8266_get_received_message_length	twr/src/twr_esp8266.c	/^uint32_t twr_esp8266_get_received_message_length(twr_esp8266_t *self)$/;"	f	typeref:typename:uint32_t
twr_esp8266_get_ssid	twr/src/twr_esp8266.c	/^void twr_esp8266_get_ssid(twr_esp8266_t *self, char *ssid)$/;"	f	typeref:typename:void
twr_esp8266_init	twr/src/twr_esp8266.c	/^void twr_esp8266_init(twr_esp8266_t *self,  twr_uart_channel_t uart_channel)$/;"	f	typeref:typename:void
twr_esp8266_is_ready	twr/src/twr_esp8266.c	/^bool twr_esp8266_is_ready(twr_esp8266_t *self)$/;"	f	typeref:typename:bool
twr_esp8266_send_data	twr/src/twr_esp8266.c	/^bool twr_esp8266_send_data(twr_esp8266_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_esp8266_set_event_handler	twr/src/twr_esp8266.c	/^void twr_esp8266_set_event_handler(twr_esp8266_t *self, void (*event_handler)(twr_esp8266_t *, t/;"	f	typeref:typename:void
twr_esp8266_set_password	twr/src/twr_esp8266.c	/^void twr_esp8266_set_password(twr_esp8266_t *self, char *password)$/;"	f	typeref:typename:void
twr_esp8266_set_sntp	twr/src/twr_esp8266.c	/^void twr_esp8266_set_sntp(twr_esp8266_t *self, int timezone)$/;"	f	typeref:typename:void
twr_esp8266_set_sntp_with_servers	twr/src/twr_esp8266.c	/^void twr_esp8266_set_sntp_with_servers(twr_esp8266_t *self, int timezone, char *sntp_server1, ch/;"	f	typeref:typename:void
twr_esp8266_set_ssid	twr/src/twr_esp8266.c	/^void twr_esp8266_set_ssid(twr_esp8266_t *self, char *ssid)$/;"	f	typeref:typename:void
twr_esp8266_set_station_mode	twr/src/twr_esp8266.c	/^void twr_esp8266_set_station_mode(twr_esp8266_t *self, char *ssid, char *password)$/;"	f	typeref:typename:void
twr_esp8266_socket_connect	twr/src/twr_esp8266.c	/^bool twr_esp8266_socket_connect(twr_esp8266_t *self, const char *type, const char *host, uint16_/;"	f	typeref:typename:bool
twr_esp8266_ssl_connect	twr/src/twr_esp8266.c	/^bool twr_esp8266_ssl_connect(twr_esp8266_t *self, const char *host, uint16_t port)$/;"	f	typeref:typename:bool
twr_esp8266_tcp_connect	twr/src/twr_esp8266.c	/^bool twr_esp8266_tcp_connect(twr_esp8266_t *self, const char *host, uint16_t port)$/;"	f	typeref:typename:bool
twr_esp8266_udp_connect	twr/src/twr_esp8266.c	/^bool twr_esp8266_udp_connect(twr_esp8266_t *self, const char *host, uint16_t port)$/;"	f	typeref:typename:bool
twr_exti_register	twr/src/twr_exti.c	/^void twr_exti_register(twr_exti_line_t line, twr_exti_edge_t edge, void (*callback)(twr_exti_lin/;"	f	typeref:typename:void
twr_exti_unregister	twr/src/twr_exti.c	/^void twr_exti_unregister(twr_exti_line_t line)$/;"	f	typeref:typename:void
twr_fifo_init	twr/src/twr_fifo.c	/^void twr_fifo_init(twr_fifo_t *fifo, void *buffer, size_t size)$/;"	f	typeref:typename:void
twr_fifo_irq_read	twr/src/twr_fifo.c	/^size_t twr_fifo_irq_read(twr_fifo_t *fifo, void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_fifo_irq_write	twr/src/twr_fifo.c	/^size_t twr_fifo_irq_write(twr_fifo_t *fifo, const void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_fifo_is_empty	twr/src/twr_fifo.c	/^bool twr_fifo_is_empty(twr_fifo_t *fifo)$/;"	f	typeref:typename:bool
twr_fifo_purge	twr/src/twr_fifo.c	/^void twr_fifo_purge(twr_fifo_t *fifo)$/;"	f	typeref:typename:void
twr_fifo_read	twr/src/twr_fifo.c	/^size_t twr_fifo_read(twr_fifo_t *fifo, void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_fifo_write	twr/src/twr_fifo.c	/^size_t twr_fifo_write(twr_fifo_t *fifo, const void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_flood_detector_init	twr/src/twr_flood_detector.c	/^void twr_flood_detector_init(twr_flood_detector_t *self, twr_flood_detector_type_t type)$/;"	f	typeref:typename:void
twr_flood_detector_is_alarm	twr/src/twr_flood_detector.c	/^bool twr_flood_detector_is_alarm(twr_flood_detector_t *self)$/;"	f	typeref:typename:bool
twr_flood_detector_measure	twr/src/twr_flood_detector.c	/^bool twr_flood_detector_measure(twr_flood_detector_t *self)$/;"	f	typeref:typename:bool
twr_flood_detector_set_event_handler	twr/src/twr_flood_detector.c	/^void twr_flood_detector_set_event_handler(twr_flood_detector_t *self, void (*event_handler)(twr_/;"	f	typeref:typename:void
twr_flood_detector_set_update_interval	twr/src/twr_flood_detector.c	/^void twr_flood_detector_set_update_interval(twr_flood_detector_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_gfx_calc_char_width	twr/src/twr_gfx.c	/^int twr_gfx_calc_char_width(twr_gfx_t *self, uint8_t ch)$/;"	f	typeref:typename:int
twr_gfx_calc_string_width	twr/src/twr_gfx.c	/^int twr_gfx_calc_string_width(twr_gfx_t *self,  char *str)$/;"	f	typeref:typename:int
twr_gfx_clear	twr/src/twr_gfx.c	/^void twr_gfx_clear(twr_gfx_t *self)$/;"	f	typeref:typename:void
twr_gfx_display_is_ready	twr/src/twr_gfx.c	/^bool twr_gfx_display_is_ready(twr_gfx_t *self)$/;"	f	typeref:typename:bool
twr_gfx_draw_char	twr/src/twr_gfx.c	/^int twr_gfx_draw_char(twr_gfx_t *self, int left, int top, uint8_t ch, uint32_t color)$/;"	f	typeref:typename:int
twr_gfx_draw_circle	twr/src/twr_gfx.c	/^void twr_gfx_draw_circle(twr_gfx_t *self, int x0, int y0, int radius, uint32_t color)$/;"	f	typeref:typename:void
twr_gfx_draw_fill_circle	twr/src/twr_gfx.c	/^void twr_gfx_draw_fill_circle(twr_gfx_t *self, int x0, int y0, int radius, uint32_t color)$/;"	f	typeref:typename:void
twr_gfx_draw_fill_rectangle	twr/src/twr_gfx.c	/^void twr_gfx_draw_fill_rectangle(twr_gfx_t *self, int x0, int y0, int x1, int y1, uint32_t color/;"	f	typeref:typename:void
twr_gfx_draw_fill_rectangle_dithering	twr/src/twr_gfx.c	/^void twr_gfx_draw_fill_rectangle_dithering(twr_gfx_t *self, int x0, int y0, int x1, int y1, uint/;"	f	typeref:typename:void
twr_gfx_draw_fill_rectangle_dithering_color	twr/src/twr_gfx.c	/^void twr_gfx_draw_fill_rectangle_dithering_color(twr_gfx_t *self, int x0, int y0, int x1, int y1/;"	f	typeref:typename:void
twr_gfx_draw_fill_round_corner	twr/src/twr_gfx.c	/^void twr_gfx_draw_fill_round_corner(twr_gfx_t *self, int x0, int y0, int radius, twr_gfx_round_c/;"	f	typeref:typename:void
twr_gfx_draw_line	twr/src/twr_gfx.c	/^void twr_gfx_draw_line(twr_gfx_t *self, int x0, int y0, int x1, int y1, uint32_t color)$/;"	f	typeref:typename:void
twr_gfx_draw_pixel	twr/src/twr_gfx.c	/^void twr_gfx_draw_pixel(twr_gfx_t *self, int x, int y, uint32_t color)$/;"	f	typeref:typename:void
twr_gfx_draw_rectangle	twr/src/twr_gfx.c	/^void twr_gfx_draw_rectangle(twr_gfx_t *self, int x0, int y0, int x1, int y1, uint32_t color)$/;"	f	typeref:typename:void
twr_gfx_draw_round_corner	twr/src/twr_gfx.c	/^void twr_gfx_draw_round_corner(twr_gfx_t *self, int x0, int y0, int radius, twr_gfx_round_corner/;"	f	typeref:typename:void
twr_gfx_draw_string	twr/src/twr_gfx.c	/^int twr_gfx_draw_string(twr_gfx_t *self, int left, int top, char *str, uint32_t color)$/;"	f	typeref:typename:int
twr_gfx_get_caps	twr/src/twr_gfx.c	/^twr_gfx_caps_t twr_gfx_get_caps(twr_gfx_t *self)$/;"	f	typeref:typename:twr_gfx_caps_t
twr_gfx_get_rotation	twr/src/twr_gfx.c	/^twr_gfx_rotation_t twr_gfx_get_rotation(twr_gfx_t *self)$/;"	f	typeref:typename:twr_gfx_rotation_t
twr_gfx_init	twr/src/twr_gfx.c	/^void twr_gfx_init(twr_gfx_t *self, void *display, const twr_gfx_driver_t *driver)$/;"	f	typeref:typename:void
twr_gfx_printf	twr/src/twr_gfx.c	/^int twr_gfx_printf(twr_gfx_t *self, int left, int top, uint32_t color, char *format, ...)$/;"	f	typeref:typename:int
twr_gfx_set_font	twr/src/twr_gfx.c	/^void twr_gfx_set_font(twr_gfx_t *self, const twr_font_t *font)$/;"	f	typeref:typename:void
twr_gfx_set_rotation	twr/src/twr_gfx.c	/^void twr_gfx_set_rotation(twr_gfx_t *self, twr_gfx_rotation_t rotation)$/;"	f	typeref:typename:void
twr_gfx_update	twr/src/twr_gfx.c	/^bool twr_gfx_update(twr_gfx_t *self)$/;"	f	typeref:typename:bool
twr_gpio_get_input	twr/src/twr_gpio.c	/^int twr_gpio_get_input(twr_gpio_channel_t channel)$/;"	f	typeref:typename:int
twr_gpio_get_mode	twr/src/twr_gpio.c	/^twr_gpio_mode_t twr_gpio_get_mode(twr_gpio_channel_t channel)$/;"	f	typeref:typename:twr_gpio_mode_t
twr_gpio_get_output	twr/src/twr_gpio.c	/^int twr_gpio_get_output(twr_gpio_channel_t channel)$/;"	f	typeref:typename:int
twr_gpio_get_pull	twr/src/twr_gpio.c	/^twr_gpio_pull_t twr_gpio_get_pull(twr_gpio_channel_t channel)$/;"	f	typeref:typename:twr_gpio_pull_t
twr_gpio_init	twr/src/twr_gpio.c	/^void twr_gpio_init(twr_gpio_channel_t channel)$/;"	f	typeref:typename:void
twr_gpio_set_mode	twr/src/twr_gpio.c	/^void twr_gpio_set_mode(twr_gpio_channel_t channel, twr_gpio_mode_t mode)$/;"	f	typeref:typename:void
twr_gpio_set_output	twr/src/twr_gpio.c	/^void twr_gpio_set_output(twr_gpio_channel_t channel, int state)$/;"	f	typeref:typename:void
twr_gpio_set_pull	twr/src/twr_gpio.c	/^void twr_gpio_set_pull(twr_gpio_channel_t channel, twr_gpio_pull_t pull)$/;"	f	typeref:typename:void
twr_gpio_toggle_output	twr/src/twr_gpio.c	/^void twr_gpio_toggle_output(twr_gpio_channel_t channel)$/;"	f	typeref:typename:void
twr_hc_sr04_get_distance_millimeter	twr/src/twr_hc_sr04.c	/^bool twr_hc_sr04_get_distance_millimeter(twr_hc_sr04_t *self, float *millimeter)$/;"	f	typeref:typename:bool
twr_hc_sr04_init	twr/src/twr_hc_sr04.c	/^void twr_hc_sr04_init(twr_hc_sr04_t *self, twr_gpio_channel_t trig, twr_hc_sr04_echo_t echo)$/;"	f	typeref:typename:void
twr_hc_sr04_init_sensor_module	twr/src/twr_hc_sr04.c	/^void twr_hc_sr04_init_sensor_module(twr_hc_sr04_t *self)$/;"	f	typeref:typename:void
twr_hc_sr04_measure	twr/src/twr_hc_sr04.c	/^bool twr_hc_sr04_measure(twr_hc_sr04_t *self)$/;"	f	typeref:typename:bool
twr_hc_sr04_set_event_handler	twr/src/twr_hc_sr04.c	/^void twr_hc_sr04_set_event_handler(twr_hc_sr04_t *self, void (*event_handler)(twr_hc_sr04_t *, t/;"	f	typeref:typename:void
twr_hc_sr04_set_update_interval	twr/src/twr_hc_sr04.c	/^void twr_hc_sr04_set_update_interval(twr_hc_sr04_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_hdc2080_deinit	twr/src/twr_hdc2080.c	/^void twr_hdc2080_deinit(twr_hdc2080_t *self)$/;"	f	typeref:typename:void
twr_hdc2080_get_humidity_percentage	twr/src/twr_hdc2080.c	/^bool twr_hdc2080_get_humidity_percentage(twr_hdc2080_t *self, float *percentage)$/;"	f	typeref:typename:bool
twr_hdc2080_get_humidity_raw	twr/src/twr_hdc2080.c	/^bool twr_hdc2080_get_humidity_raw(twr_hdc2080_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_hdc2080_get_temperature_celsius	twr/src/twr_hdc2080.c	/^bool twr_hdc2080_get_temperature_celsius(twr_hdc2080_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_hdc2080_get_temperature_raw	twr/src/twr_hdc2080.c	/^bool twr_hdc2080_get_temperature_raw(twr_hdc2080_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_hdc2080_init	twr/src/twr_hdc2080.c	/^void twr_hdc2080_init(twr_hdc2080_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_hdc2080_measure	twr/src/twr_hdc2080.c	/^bool twr_hdc2080_measure(twr_hdc2080_t *self)$/;"	f	typeref:typename:bool
twr_hdc2080_set_event_handler	twr/src/twr_hdc2080.c	/^void twr_hdc2080_set_event_handler(twr_hdc2080_t *self, void (*event_handler)(twr_hdc2080_t *, t/;"	f	typeref:typename:void
twr_hdc2080_set_update_interval	twr/src/twr_hdc2080.c	/^void twr_hdc2080_set_update_interval(twr_hdc2080_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_hts221_deinit	twr/src/twr_hts221.c	/^void twr_hts221_deinit(twr_hts221_t *self)$/;"	f	typeref:typename:void
twr_hts221_get_humidity_percentage	twr/src/twr_hts221.c	/^bool twr_hts221_get_humidity_percentage(twr_hts221_t *self, float *percentage)$/;"	f	typeref:typename:bool
twr_hts221_init	twr/src/twr_hts221.c	/^void twr_hts221_init(twr_hts221_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_hts221_measure	twr/src/twr_hts221.c	/^bool twr_hts221_measure(twr_hts221_t *self)$/;"	f	typeref:typename:bool
twr_hts221_set_event_handler	twr/src/twr_hts221.c	/^void twr_hts221_set_event_handler(twr_hts221_t *self, void (*event_handler)(twr_hts221_t *, twr_/;"	f	typeref:typename:void
twr_hts221_set_update_interval	twr/src/twr_hts221.c	/^void twr_hts221_set_update_interval(twr_hts221_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_i2c_deinit	twr/src/twr_i2c.c	/^void twr_i2c_deinit(twr_i2c_channel_t channel)$/;"	f	typeref:typename:void
twr_i2c_get_speed	twr/src/twr_i2c.c	/^twr_i2c_speed_t twr_i2c_get_speed(twr_i2c_channel_t channel)$/;"	f	typeref:typename:twr_i2c_speed_t
twr_i2c_get_timeout_ms	twr/src/twr_i2c.c	/^static uint32_t twr_i2c_get_timeout_ms(twr_i2c_channel_t channel, size_t length)$/;"	f	typeref:typename:uint32_t	file:
twr_i2c_get_timeout_us	twr/src/twr_i2c.c	/^static uint32_t twr_i2c_get_timeout_us(twr_i2c_channel_t channel, size_t length)$/;"	f	typeref:typename:uint32_t	file:
twr_i2c_init	twr/src/twr_i2c.c	/^void twr_i2c_init(twr_i2c_channel_t channel, twr_i2c_speed_t speed)$/;"	f	typeref:typename:void
twr_i2c_memory_read	twr/src/twr_i2c.c	/^bool twr_i2c_memory_read(twr_i2c_channel_t channel, const twr_i2c_memory_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_i2c_memory_read_16b	twr/src/twr_i2c.c	/^bool twr_i2c_memory_read_16b(twr_i2c_channel_t channel, uint8_t device_address, uint32_t memory_/;"	f	typeref:typename:bool
twr_i2c_memory_read_8b	twr/src/twr_i2c.c	/^bool twr_i2c_memory_read_8b(twr_i2c_channel_t channel, uint8_t device_address, uint32_t memory_a/;"	f	typeref:typename:bool
twr_i2c_memory_write	twr/src/twr_i2c.c	/^bool twr_i2c_memory_write(twr_i2c_channel_t channel, const twr_i2c_memory_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_i2c_memory_write_16b	twr/src/twr_i2c.c	/^bool twr_i2c_memory_write_16b(twr_i2c_channel_t channel, uint8_t device_address, uint32_t memory/;"	f	typeref:typename:bool
twr_i2c_memory_write_8b	twr/src/twr_i2c.c	/^bool twr_i2c_memory_write_8b(twr_i2c_channel_t channel, uint8_t device_address, uint32_t memory_/;"	f	typeref:typename:bool
twr_i2c_read	twr/src/twr_i2c.c	/^bool twr_i2c_read(twr_i2c_channel_t channel, const twr_i2c_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_i2c_set_speed	twr/src/twr_i2c.c	/^void twr_i2c_set_speed(twr_i2c_channel_t channel, twr_i2c_speed_t speed)$/;"	f	typeref:typename:void
twr_i2c_write	twr/src/twr_i2c.c	/^bool twr_i2c_write(twr_i2c_channel_t channel, const twr_i2c_transfer_t *transfer)$/;"	f	typeref:typename:bool
twr_info_fw_version	twr/src/twr_info.c	/^twr_info_fw_version(void)$/;"	f	typeref:typename:uint32_t
twr_info_hw_revision	twr/src/twr_info.c	/^twr_info_hw_revision(void)$/;"	f	typeref:typename:uint16_t
twr_info_hw_variant	twr/src/twr_info.c	/^twr_info_hw_variant(void)$/;"	f	typeref:typename:uint32_t
twr_info_init	twr/src/twr_info.c	/^void twr_info_init(void)$/;"	f	typeref:typename:void
twr_info_pib_check	twr/src/twr_info.c	/^twr_info_pib_check(void)$/;"	f	typeref:typename:twr_info_pib_t
twr_info_product_name	twr/src/twr_info.c	/^twr_info_product_name(void)$/;"	f	typeref:typename:const char *
twr_info_serial_number	twr/src/twr_info.c	/^twr_info_serial_number(void)$/;"	f	typeref:typename:uint32_t
twr_info_vendor_name	twr/src/twr_info.c	/^twr_info_vendor_name(void)$/;"	f	typeref:typename:const char *
twr_ir_rx_get_code	twr/src/twr_ir_rx.c	/^void twr_ir_rx_get_code(uint32_t *nec_code)$/;"	f	typeref:typename:void
twr_ir_rx_init	twr/src/twr_ir_rx.c	/^void twr_ir_rx_init()$/;"	f	typeref:typename:void
twr_ir_rx_set_event_handler	twr/src/twr_ir_rx.c	/^void twr_ir_rx_set_event_handler(void (*event_handler)(twr_ir_rx_event_t, void *), void *event_p/;"	f	typeref:typename:void
twr_irq_disable	twr/src/twr_irq.c	/^void twr_irq_disable(void)$/;"	f	typeref:typename:void
twr_irq_enable	twr/src/twr_irq.c	/^void twr_irq_enable(void)$/;"	f	typeref:typename:void
twr_led_blink	twr/src/twr_led.c	/^void twr_led_blink(twr_led_t *self, int count)$/;"	f	typeref:typename:void
twr_led_init	twr/src/twr_led.c	/^void twr_led_init(twr_led_t *self, twr_gpio_channel_t gpio_channel, bool open_drain_output, int /;"	f	typeref:typename:void
twr_led_init_virtual	twr/src/twr_led.c	/^void twr_led_init_virtual(twr_led_t *self, int channel, const twr_led_driver_t *driver, int idle/;"	f	typeref:typename:void
twr_led_is_pulse	twr/src/twr_led.c	/^bool twr_led_is_pulse(twr_led_t *self)$/;"	f	typeref:typename:bool
twr_led_pulse	twr/src/twr_led.c	/^void twr_led_pulse(twr_led_t *self, twr_tick_t duration)$/;"	f	typeref:typename:void
twr_led_set_count	twr/src/twr_led.c	/^void twr_led_set_count(twr_led_t *self, int count)$/;"	f	typeref:typename:void
twr_led_set_mode	twr/src/twr_led.c	/^void twr_led_set_mode(twr_led_t *self, twr_led_mode_t mode)$/;"	f	typeref:typename:void
twr_led_set_pattern	twr/src/twr_led.c	/^void twr_led_set_pattern(twr_led_t *self, uint32_t pattern)$/;"	f	typeref:typename:void
twr_led_set_slot_interval	twr/src/twr_led.c	/^void twr_led_set_slot_interval(twr_led_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_led_strip_effect_color_wipe	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_color_wipe(twr_led_strip_t *self, uint32_t color, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_icicle	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_icicle(twr_led_strip_t *self, uint32_t color, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_pulse_color	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_pulse_color(twr_led_strip_t *self, uint32_t color, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_rainbow	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_rainbow(twr_led_strip_t *self, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_rainbow_cycle	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_rainbow_cycle(twr_led_strip_t *self, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_stop	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_stop(twr_led_strip_t *self)$/;"	f	typeref:typename:void
twr_led_strip_effect_stroboscope	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_stroboscope(twr_led_strip_t *self, uint32_t color, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_stroboscope_task	twr/src/twr_led_strip.c	/^static void twr_led_strip_effect_stroboscope_task(void *param)$/;"	f	typeref:typename:void	file:
twr_led_strip_effect_test	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_test(twr_led_strip_t *self)$/;"	f	typeref:typename:void
twr_led_strip_effect_theater_chase	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_theater_chase(twr_led_strip_t *self, uint32_t color, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_effect_theater_chase_rainbow	twr/src/twr_led_strip.c	/^void twr_led_strip_effect_theater_chase_rainbow(twr_led_strip_t *self, twr_tick_t wait)$/;"	f	typeref:typename:void
twr_led_strip_fill	twr/src/twr_led_strip.c	/^void twr_led_strip_fill(twr_led_strip_t *self, uint32_t color)$/;"	f	typeref:typename:void
twr_led_strip_get_pixel_count	twr/src/twr_led_strip.c	/^int twr_led_strip_get_pixel_count(twr_led_strip_t *self)$/;"	f	typeref:typename:int
twr_led_strip_get_strip_type	twr/src/twr_led_strip.c	/^twr_led_strip_type_t twr_led_strip_get_strip_type(twr_led_strip_t *self)$/;"	f	typeref:typename:twr_led_strip_type_t
twr_led_strip_init	twr/src/twr_led_strip.c	/^void twr_led_strip_init(twr_led_strip_t *self, const twr_led_strip_driver_t *driver, const twr_l/;"	f	typeref:typename:void
twr_led_strip_is_ready	twr/src/twr_led_strip.c	/^bool twr_led_strip_is_ready(twr_led_strip_t *self)$/;"	f	typeref:typename:bool
twr_led_strip_set_brightness	twr/src/twr_led_strip.c	/^void twr_led_strip_set_brightness(twr_led_strip_t *self, uint8_t brightness)$/;"	f	typeref:typename:void
twr_led_strip_set_event_handler	twr/src/twr_led_strip.c	/^void twr_led_strip_set_event_handler(twr_led_strip_t *self, void (*event_handler)(twr_led_strip_/;"	f	typeref:typename:void
twr_led_strip_set_pixel	twr/src/twr_led_strip.c	/^void twr_led_strip_set_pixel(twr_led_strip_t *self, int position, uint32_t color)$/;"	f	typeref:typename:void
twr_led_strip_set_pixel_rgbw	twr/src/twr_led_strip.c	/^void twr_led_strip_set_pixel_rgbw(twr_led_strip_t *self, int position, uint8_t r, uint8_t g, uin/;"	f	typeref:typename:void
twr_led_strip_set_rgbw_framebuffer	twr/src/twr_led_strip.c	/^bool twr_led_strip_set_rgbw_framebuffer(twr_led_strip_t *self, uint8_t *framebuffer, size_t leng/;"	f	typeref:typename:bool
twr_led_strip_thermometer	twr/src/twr_led_strip.c	/^void twr_led_strip_thermometer(twr_led_strip_t *self, float temperature, float min, float max, u/;"	f	typeref:typename:void
twr_led_strip_write	twr/src/twr_led_strip.c	/^bool twr_led_strip_write(twr_led_strip_t *self)$/;"	f	typeref:typename:bool
twr_lis2dh12_get_result_g	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_get_result_g(twr_lis2dh12_t *self, twr_lis2dh12_result_g_t *result_g)$/;"	f	typeref:typename:bool
twr_lis2dh12_get_result_raw	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_get_result_raw(twr_lis2dh12_t *self, twr_lis2dh12_result_raw_t *result_raw)$/;"	f	typeref:typename:bool
twr_lis2dh12_init	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_init(twr_lis2dh12_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:bool
twr_lis2dh12_measure	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_measure(twr_lis2dh12_t *self)$/;"	f	typeref:typename:bool
twr_lis2dh12_set_alarm	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_set_alarm(twr_lis2dh12_t *self, twr_lis2dh12_alarm_t *alarm)$/;"	f	typeref:typename:bool
twr_lis2dh12_set_event_handler	twr/src/twr_lis2dh12.c	/^void twr_lis2dh12_set_event_handler(twr_lis2dh12_t *self, void (*event_handler)(twr_lis2dh12_t */;"	f	typeref:typename:void
twr_lis2dh12_set_resolution	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_set_resolution(twr_lis2dh12_t *self, twr_lis2dh12_resolution_t resolution)$/;"	f	typeref:typename:bool
twr_lis2dh12_set_scale	twr/src/twr_lis2dh12.c	/^bool twr_lis2dh12_set_scale(twr_lis2dh12_t *self, twr_lis2dh12_scale_t scale)$/;"	f	typeref:typename:bool
twr_lis2dh12_set_update_interval	twr/src/twr_lis2dh12.c	/^void twr_lis2dh12_set_update_interval(twr_lis2dh12_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_log_debug	twr/src/twr_log.c	/^void twr_log_debug(const char *format, ...)$/;"	f	typeref:typename:void
twr_log_dump	twr/src/twr_log.c	/^void twr_log_dump(const void *buffer, size_t length, const char *format, ...)$/;"	f	typeref:typename:void
twr_log_error	twr/src/twr_log.c	/^void twr_log_error(const char *format, ...)$/;"	f	typeref:typename:void
twr_log_info	twr/src/twr_log.c	/^void twr_log_info(const char *format, ...)$/;"	f	typeref:typename:void
twr_log_init	twr/src/twr_log.c	/^void twr_log_init(twr_log_level_t level, twr_log_timestamp_t timestamp)$/;"	f	typeref:typename:void
twr_log_warning	twr/src/twr_log.c	/^void twr_log_warning(const char *format, ...)$/;"	f	typeref:typename:void
twr_lp8_calibration	twr/src/twr_lp8.c	/^void twr_lp8_calibration(twr_lp8_t *self, twr_lp8_calibration_t calibration)$/;"	f	typeref:typename:void
twr_lp8_get_concentration_ppm	twr/src/twr_lp8.c	/^bool twr_lp8_get_concentration_ppm(twr_lp8_t *self, float *ppm)$/;"	f	typeref:typename:bool
twr_lp8_get_error	twr/src/twr_lp8.c	/^bool twr_lp8_get_error(twr_lp8_t *self, twr_lp8_error_t *error)$/;"	f	typeref:typename:bool
twr_lp8_init	twr/src/twr_lp8.c	/^void twr_lp8_init(twr_lp8_t *self, const twr_lp8_driver_t *driver)$/;"	f	typeref:typename:void
twr_lp8_measure	twr/src/twr_lp8.c	/^bool twr_lp8_measure(twr_lp8_t *self)$/;"	f	typeref:typename:bool
twr_lp8_set_event_handler	twr/src/twr_lp8.c	/^void twr_lp8_set_event_handler(twr_lp8_t *self, void (*event_handler)(twr_lp8_event_t, void *), /;"	f	typeref:typename:void
twr_lp8_set_update_interval	twr/src/twr_lp8.c	/^void twr_lp8_set_update_interval(twr_lp8_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_ls013b7dh03_clear	twr/src/twr_ls013b7dh03.c	/^void twr_ls013b7dh03_clear(twr_ls013b7dh03_t *self)$/;"	f	typeref:typename:void
twr_ls013b7dh03_clear_memory_command	twr/src/twr_ls013b7dh03.c	/^bool twr_ls013b7dh03_clear_memory_command(twr_ls013b7dh03_t *self)$/;"	f	typeref:typename:bool
twr_ls013b7dh03_draw_pixel	twr/src/twr_ls013b7dh03.c	/^void twr_ls013b7dh03_draw_pixel(twr_ls013b7dh03_t *self, int x, int y, uint32_t color)$/;"	f	typeref:typename:void
twr_ls013b7dh03_get_caps	twr/src/twr_ls013b7dh03.c	/^twr_gfx_caps_t twr_ls013b7dh03_get_caps(twr_ls013b7dh03_t *self)$/;"	f	typeref:typename:twr_gfx_caps_t
twr_ls013b7dh03_get_driver	twr/src/twr_ls013b7dh03.c	/^const twr_gfx_driver_t *twr_ls013b7dh03_get_driver(void)$/;"	f	typeref:typename:const twr_gfx_driver_t *
twr_ls013b7dh03_get_pixel	twr/src/twr_ls013b7dh03.c	/^uint32_t twr_ls013b7dh03_get_pixel(twr_ls013b7dh03_t *self, int x, int y)$/;"	f	typeref:typename:uint32_t
twr_ls013b7dh03_init	twr/src/twr_ls013b7dh03.c	/^void twr_ls013b7dh03_init(twr_ls013b7dh03_t *self, bool (*pin_cs_set)(bool state))$/;"	f	typeref:typename:void
twr_ls013b7dh03_is_ready	twr/src/twr_ls013b7dh03.c	/^bool twr_ls013b7dh03_is_ready(twr_ls013b7dh03_t *self)$/;"	f	typeref:typename:bool
twr_ls013b7dh03_update	twr/src/twr_ls013b7dh03.c	/^bool twr_ls013b7dh03_update(twr_ls013b7dh03_t *self)$/;"	f	typeref:typename:bool
twr_module_battery_get_charge_level	twr/src/twr_module_battery.c	/^bool twr_module_battery_get_charge_level(int *percentage)$/;"	f	typeref:typename:bool
twr_module_battery_get_format	twr/src/twr_module_battery.c	/^twr_module_battery_format_t twr_module_battery_get_format()$/;"	f	typeref:typename:twr_module_battery_format_t
twr_module_battery_get_voltage	twr/src/twr_module_battery.c	/^bool twr_module_battery_get_voltage(float *voltage)$/;"	f	typeref:typename:bool
twr_module_battery_init	twr/src/twr_module_battery.c	/^void twr_module_battery_init(void)$/;"	f	typeref:typename:void
twr_module_battery_is_present	twr/src/twr_module_battery.c	/^bool twr_module_battery_is_present(void)$/;"	f	typeref:typename:bool
twr_module_battery_measure	twr/src/twr_module_battery.c	/^bool twr_module_battery_measure(void)$/;"	f	typeref:typename:bool
twr_module_battery_set_event_handler	twr/src/twr_module_battery.c	/^void twr_module_battery_set_event_handler(void (*event_handler)(twr_module_battery_event_t, void/;"	f	typeref:typename:void
twr_module_battery_set_threshold_levels	twr/src/twr_module_battery.c	/^void twr_module_battery_set_threshold_levels(float level_low_threshold, float level_critical_thr/;"	f	typeref:typename:void
twr_module_battery_set_update_interval	twr/src/twr_module_battery.c	/^void twr_module_battery_set_update_interval(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_climate_get_altitude_meter	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_altitude_meter(float *meter)$/;"	f	typeref:typename:bool
twr_module_climate_get_humidity_percentage	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_humidity_percentage(float *percentage)$/;"	f	typeref:typename:bool
twr_module_climate_get_illuminance_lux	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_illuminance_lux(float *lux)$/;"	f	typeref:typename:bool
twr_module_climate_get_pressure_pascal	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_pressure_pascal(float *pascal)$/;"	f	typeref:typename:bool
twr_module_climate_get_temperature_celsius	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_temperature_celsius(float *celsius)$/;"	f	typeref:typename:bool
twr_module_climate_get_temperature_fahrenheit	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_temperature_fahrenheit(float *fahrenheit)$/;"	f	typeref:typename:bool
twr_module_climate_get_temperature_kelvin	twr/src/twr_module_climate.c	/^bool twr_module_climate_get_temperature_kelvin(float *kelvin)$/;"	f	typeref:typename:bool
twr_module_climate_init	twr/src/twr_module_climate.c	/^void twr_module_climate_init(void)$/;"	f	typeref:typename:void
twr_module_climate_measure_all_sensors	twr/src/twr_module_climate.c	/^bool twr_module_climate_measure_all_sensors(void)$/;"	f	typeref:typename:bool
twr_module_climate_measure_barometer	twr/src/twr_module_climate.c	/^bool twr_module_climate_measure_barometer(void)$/;"	f	typeref:typename:bool
twr_module_climate_measure_hygrometer	twr/src/twr_module_climate.c	/^bool twr_module_climate_measure_hygrometer(void)$/;"	f	typeref:typename:bool
twr_module_climate_measure_lux_meter	twr/src/twr_module_climate.c	/^bool twr_module_climate_measure_lux_meter(void)$/;"	f	typeref:typename:bool
twr_module_climate_measure_thermometer	twr/src/twr_module_climate.c	/^bool twr_module_climate_measure_thermometer(void)$/;"	f	typeref:typename:bool
twr_module_climate_set_event_handler	twr/src/twr_module_climate.c	/^void twr_module_climate_set_event_handler(void (*event_handler)(twr_module_climate_event_t, void/;"	f	typeref:typename:void
twr_module_climate_set_update_interval_all_sensors	twr/src/twr_module_climate.c	/^void twr_module_climate_set_update_interval_all_sensors(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_climate_set_update_interval_barometer	twr/src/twr_module_climate.c	/^void twr_module_climate_set_update_interval_barometer(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_climate_set_update_interval_hygrometer	twr/src/twr_module_climate.c	/^void twr_module_climate_set_update_interval_hygrometer(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_climate_set_update_interval_lux_meter	twr/src/twr_module_climate.c	/^void twr_module_climate_set_update_interval_lux_meter(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_climate_set_update_interval_thermometer	twr/src/twr_module_climate.c	/^void twr_module_climate_set_update_interval_thermometer(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_co2_calibration	twr/src/twr_module_co2.c	/^void twr_module_co2_calibration(twr_lp8_calibration_t calibration)$/;"	f	typeref:typename:void
twr_module_co2_get_concentration_ppm	twr/src/twr_module_co2.c	/^bool twr_module_co2_get_concentration_ppm(float *ppm)$/;"	f	typeref:typename:bool
twr_module_co2_get_error	twr/src/twr_module_co2.c	/^bool twr_module_co2_get_error(twr_lp8_error_t *error)$/;"	f	typeref:typename:bool
twr_module_co2_init	twr/src/twr_module_co2.c	/^void twr_module_co2_init(void)$/;"	f	typeref:typename:void
twr_module_co2_measure	twr/src/twr_module_co2.c	/^bool twr_module_co2_measure(void)$/;"	f	typeref:typename:bool
twr_module_co2_set_event_handler	twr/src/twr_module_co2.c	/^void twr_module_co2_set_event_handler(void (*event_handler)(twr_module_co2_event_t, void *), voi/;"	f	typeref:typename:void
twr_module_co2_set_update_interval	twr/src/twr_module_co2.c	/^void twr_module_co2_set_update_interval(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_encoder_deinit	twr/src/twr_module_encoder.c	/^void twr_module_encoder_deinit(void)$/;"	f	typeref:typename:void
twr_module_encoder_get_button_instance	twr/src/twr_module_encoder.c	/^twr_button_t *twr_module_encoder_get_button_instance(void)$/;"	f	typeref:typename:twr_button_t *
twr_module_encoder_get_increment	twr/src/twr_module_encoder.c	/^int twr_module_encoder_get_increment(void)$/;"	f	typeref:typename:int
twr_module_encoder_init	twr/src/twr_module_encoder.c	/^void twr_module_encoder_init(void)$/;"	f	typeref:typename:void
twr_module_encoder_is_present	twr/src/twr_module_encoder.c	/^bool twr_module_encoder_is_present(void)$/;"	f	typeref:typename:bool
twr_module_encoder_set_event_handler	twr/src/twr_module_encoder.c	/^void twr_module_encoder_set_event_handler(void (*event_handler)(twr_module_encoder_event_t, void/;"	f	typeref:typename:void
twr_module_gps_get_accuracy	twr/src/twr_module_gps.c	/^bool twr_module_gps_get_accuracy(twr_module_gps_accuracy_t *accuracy)$/;"	f	typeref:typename:bool
twr_module_gps_get_altitude	twr/src/twr_module_gps.c	/^bool twr_module_gps_get_altitude(twr_module_gps_altitude_t *altitude)$/;"	f	typeref:typename:bool
twr_module_gps_get_led_driver	twr/src/twr_module_gps.c	/^const twr_led_driver_t *twr_module_gps_get_led_driver(void)$/;"	f	typeref:typename:const twr_led_driver_t *
twr_module_gps_get_position	twr/src/twr_module_gps.c	/^bool twr_module_gps_get_position(twr_module_gps_position_t *position)$/;"	f	typeref:typename:bool
twr_module_gps_get_quality	twr/src/twr_module_gps.c	/^bool twr_module_gps_get_quality(twr_module_gps_quality_t *quality)$/;"	f	typeref:typename:bool
twr_module_gps_get_time	twr/src/twr_module_gps.c	/^bool twr_module_gps_get_time(twr_module_gps_time_t *time)$/;"	f	typeref:typename:bool
twr_module_gps_init	twr/src/twr_module_gps.c	/^bool twr_module_gps_init(void)$/;"	f	typeref:typename:bool
twr_module_gps_invalidate	twr/src/twr_module_gps.c	/^void twr_module_gps_invalidate(void)$/;"	f	typeref:typename:void
twr_module_gps_set_event_handler	twr/src/twr_module_gps.c	/^void twr_module_gps_set_event_handler(twr_module_gps_event_handler_t event_handler, void *event_/;"	f	typeref:typename:void
twr_module_gps_start	twr/src/twr_module_gps.c	/^void twr_module_gps_start(void)$/;"	f	typeref:typename:void
twr_module_gps_stop	twr/src/twr_module_gps.c	/^void twr_module_gps_stop(void)$/;"	f	typeref:typename:void
twr_module_infra_grid_get_revision	twr/src/twr_module_infra_grid.c	/^twr_module_infra_grid_revision_t twr_module_infra_grid_get_revision(twr_module_infra_grid_t *sel/;"	f	typeref:typename:twr_module_infra_grid_revision_t
twr_module_infra_grid_get_temperatures_celsius	twr/src/twr_module_infra_grid.c	/^bool twr_module_infra_grid_get_temperatures_celsius(twr_module_infra_grid_t *self, float *values/;"	f	typeref:typename:bool
twr_module_infra_grid_init	twr/src/twr_module_infra_grid.c	/^void twr_module_infra_grid_init(twr_module_infra_grid_t *self)$/;"	f	typeref:typename:void
twr_module_infra_grid_measure	twr/src/twr_module_infra_grid.c	/^bool twr_module_infra_grid_measure(twr_module_infra_grid_t *self)$/;"	f	typeref:typename:bool
twr_module_infra_grid_read_thermistor	twr/src/twr_module_infra_grid.c	/^float twr_module_infra_grid_read_thermistor(twr_module_infra_grid_t *self)$/;"	f	typeref:typename:float
twr_module_infra_grid_read_values	twr/src/twr_module_infra_grid.c	/^bool twr_module_infra_grid_read_values(twr_module_infra_grid_t *self)$/;"	f	typeref:typename:bool
twr_module_infra_grid_set_event_handler	twr/src/twr_module_infra_grid.c	/^void twr_module_infra_grid_set_event_handler(twr_module_infra_grid_t *self, void (*event_handler/;"	f	typeref:typename:void
twr_module_infra_grid_set_update_interval	twr/src/twr_module_infra_grid.c	/^void twr_module_infra_grid_set_update_interval(twr_module_infra_grid_t *self, twr_tick_t interva/;"	f	typeref:typename:void
twr_module_lcd_clear	twr/src/twr_module_lcd.c	/^void twr_module_lcd_clear(void)$/;"	f	typeref:typename:void
twr_module_lcd_draw	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw(const uint8_t *frame, uint8_t width, uint8_t height) \/\/ In pixels$/;"	f	typeref:typename:void
twr_module_lcd_draw_char	twr/src/twr_module_lcd.c	/^int twr_module_lcd_draw_char(int left, int top, uint8_t ch, bool color)$/;"	f	typeref:typename:int
twr_module_lcd_draw_circle	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw_circle(int x0, int y0, int radius, bool color)$/;"	f	typeref:typename:void
twr_module_lcd_draw_image	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw_image(int left, int top, const twr_image_t *img)$/;"	f	typeref:typename:void
twr_module_lcd_draw_line	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw_line(int x0, int y0, int x1, int y1, bool color)$/;"	f	typeref:typename:void
twr_module_lcd_draw_pixel	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw_pixel(int x, int y, bool value)$/;"	f	typeref:typename:void
twr_module_lcd_draw_rectangle	twr/src/twr_module_lcd.c	/^void twr_module_lcd_draw_rectangle(int x0, int y0, int x1, int y1, bool color)$/;"	f	typeref:typename:void
twr_module_lcd_draw_string	twr/src/twr_module_lcd.c	/^int twr_module_lcd_draw_string(int left, int top, char *str, bool color)$/;"	f	typeref:typename:int
twr_module_lcd_get_button_driver	twr/src/twr_module_lcd.c	/^const twr_button_driver_t *twr_module_lcd_get_button_driver(void)$/;"	f	typeref:typename:const twr_button_driver_t *
twr_module_lcd_get_gfx	twr/src/twr_module_lcd.c	/^twr_gfx_t *twr_module_lcd_get_gfx()$/;"	f	typeref:typename:twr_gfx_t *
twr_module_lcd_get_led_driver	twr/src/twr_module_lcd.c	/^const twr_led_driver_t *twr_module_lcd_get_led_driver(void)$/;"	f	typeref:typename:const twr_led_driver_t *
twr_module_lcd_get_rotation	twr/src/twr_module_lcd.c	/^twr_module_lcd_rotation_t twr_module_lcd_get_rotation(void)$/;"	f	typeref:typename:twr_module_lcd_rotation_t
twr_module_lcd_init	twr/src/twr_module_lcd.c	/^void twr_module_lcd_init()$/;"	f	typeref:typename:void
twr_module_lcd_is_present	twr/src/twr_module_lcd.c	/^bool twr_module_lcd_is_present(void)$/;"	f	typeref:typename:bool
twr_module_lcd_is_ready	twr/src/twr_module_lcd.c	/^bool twr_module_lcd_is_ready(void)$/;"	f	typeref:typename:bool
twr_module_lcd_off	twr/src/twr_module_lcd.c	/^bool twr_module_lcd_off(void)$/;"	f	typeref:typename:bool
twr_module_lcd_on	twr/src/twr_module_lcd.c	/^bool twr_module_lcd_on(void)$/;"	f	typeref:typename:bool
twr_module_lcd_printf	twr/src/twr_module_lcd.c	/^void twr_module_lcd_printf(uint8_t line, \/*uint8_t size, font, *\/const uint8_t *string\/*, .../;"	f	typeref:typename:void
twr_module_lcd_set_button_click_timeout	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_button_click_timeout(twr_tick_t click_timeout)$/;"	f	typeref:typename:void
twr_module_lcd_set_button_debounce_time	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_button_debounce_time(twr_tick_t debounce_time)$/;"	f	typeref:typename:void
twr_module_lcd_set_button_hold_time	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_button_hold_time(twr_tick_t hold_time)$/;"	f	typeref:typename:void
twr_module_lcd_set_button_scan_interval	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_button_scan_interval(twr_tick_t scan_interval)$/;"	f	typeref:typename:void
twr_module_lcd_set_event_handler	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_event_handler(void (*event_handler)(twr_module_lcd_event_t, void *), voi/;"	f	typeref:typename:void
twr_module_lcd_set_font	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_font(const twr_font_t *font)$/;"	f	typeref:typename:void
twr_module_lcd_set_rotation	twr/src/twr_module_lcd.c	/^void twr_module_lcd_set_rotation(twr_module_lcd_rotation_t rotation)$/;"	f	typeref:typename:void
twr_module_lcd_update	twr/src/twr_module_lcd.c	/^bool twr_module_lcd_update(void)$/;"	f	typeref:typename:bool
twr_module_pir_init	twr/src/twr_module_pir.c	/^void twr_module_pir_init(twr_module_pir_t *self)$/;"	f	typeref:typename:void
twr_module_pir_set_event_handler	twr/src/twr_module_pir.c	/^void twr_module_pir_set_event_handler(twr_module_pir_t *self, void (*event_handler)(twr_module_p/;"	f	typeref:typename:void
twr_module_pir_set_sensitivity	twr/src/twr_module_pir.c	/^void twr_module_pir_set_sensitivity(twr_module_pir_t *self, twr_module_pir_sensitivity_t sensiti/;"	f	typeref:typename:void
twr_module_power_get_led_strip_driver	twr/src/twr_module_power.c	/^const twr_led_strip_driver_t *twr_module_power_get_led_strip_driver(void)$/;"	f	typeref:typename:const twr_led_strip_driver_t *
twr_module_power_init	twr/src/twr_module_power.c	/^void twr_module_power_init(void)$/;"	f	typeref:typename:void
twr_module_power_relay_get_state	twr/src/twr_module_power.c	/^bool twr_module_power_relay_get_state(void)$/;"	f	typeref:typename:bool
twr_module_power_relay_set_state	twr/src/twr_module_power.c	/^void twr_module_power_relay_set_state(bool state)$/;"	f	typeref:typename:void
twr_module_relay_get_state	twr/src/twr_module_relay.c	/^twr_module_relay_state_t twr_module_relay_get_state(twr_module_relay_t *self)$/;"	f	typeref:typename:twr_module_relay_state_t
twr_module_relay_init	twr/src/twr_module_relay.c	/^bool twr_module_relay_init(twr_module_relay_t *self, uint8_t i2c_address)$/;"	f	typeref:typename:bool
twr_module_relay_pulse	twr/src/twr_module_relay.c	/^void twr_module_relay_pulse(twr_module_relay_t *self, bool state, twr_tick_t duration)$/;"	f	typeref:typename:void
twr_module_relay_scheduler_register	twr/src/twr_module_relay.c	/^static void twr_module_relay_scheduler_register(twr_module_relay_t *self)$/;"	f	typeref:typename:void	file:
twr_module_relay_scheduler_unregister	twr/src/twr_module_relay.c	/^static void twr_module_relay_scheduler_unregister(twr_module_relay_t *self)$/;"	f	typeref:typename:void	file:
twr_module_relay_set_state	twr/src/twr_module_relay.c	/^void twr_module_relay_set_state(twr_module_relay_t *self, bool state)$/;"	f	typeref:typename:void
twr_module_relay_state_machine	twr/src/twr_module_relay.c	/^static twr_tick_t twr_module_relay_state_machine(twr_module_relay_t *self, twr_tick_t tick_now)$/;"	f	typeref:typename:twr_tick_t	file:
twr_module_relay_toggle	twr/src/twr_module_relay.c	/^void twr_module_relay_toggle(twr_module_relay_t *self)$/;"	f	typeref:typename:void
twr_module_rs485_async_read	twr/src/twr_module_rs485.c	/^size_t twr_module_rs485_async_read(void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_module_rs485_async_read_start	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_async_read_start(twr_tick_t timeout)$/;"	f	typeref:typename:bool
twr_module_rs485_async_read_stop	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_async_read_stop(void)$/;"	f	typeref:typename:bool
twr_module_rs485_async_write	twr/src/twr_module_rs485.c	/^size_t twr_module_rs485_async_write(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_module_rs485_available	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_available(size_t *available)$/;"	f	typeref:typename:bool
twr_module_rs485_deinit	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_deinit(void)$/;"	f	typeref:typename:bool
twr_module_rs485_get_voltage	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_get_voltage(float *volt)$/;"	f	typeref:typename:bool
twr_module_rs485_init	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_init(void)$/;"	f	typeref:typename:bool
twr_module_rs485_measure	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_measure(void)$/;"	f	typeref:typename:bool
twr_module_rs485_read	twr/src/twr_module_rs485.c	/^size_t twr_module_rs485_read(uint8_t *buffer, size_t length, twr_tick_t timeout)$/;"	f	typeref:typename:size_t
twr_module_rs485_set_async_fifo	twr/src/twr_module_rs485.c	/^void twr_module_rs485_set_async_fifo(twr_fifo_t *write_fifo, twr_fifo_t *read_fifo)$/;"	f	typeref:typename:void
twr_module_rs485_set_baudrate	twr/src/twr_module_rs485.c	/^bool twr_module_rs485_set_baudrate(twr_module_rs485_baudrate_t baudrate)$/;"	f	typeref:typename:bool
twr_module_rs485_set_event_handler	twr/src/twr_module_rs485.c	/^void twr_module_rs485_set_event_handler(void (*event_handler)(twr_module_rs485_event_t, void *),/;"	f	typeref:typename:void
twr_module_rs485_set_update_interval	twr/src/twr_module_rs485.c	/^void twr_module_rs485_set_update_interval(twr_tick_t interval)$/;"	f	typeref:typename:void
twr_module_rs485_write	twr/src/twr_module_rs485.c	/^size_t twr_module_rs485_write(uint8_t *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_module_sensor_deinit	twr/src/twr_module_sensor.c	/^void twr_module_sensor_deinit(void)$/;"	f	typeref:typename:void
twr_module_sensor_get_input	twr/src/twr_module_sensor.c	/^int twr_module_sensor_get_input(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:int
twr_module_sensor_get_onewire	twr/src/twr_module_sensor.c	/^twr_onewire_t *twr_module_sensor_get_onewire(void)$/;"	f	typeref:typename:twr_onewire_t *
twr_module_sensor_get_output	twr/src/twr_module_sensor.c	/^int twr_module_sensor_get_output(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:int
twr_module_sensor_get_pull	twr/src/twr_module_sensor.c	/^twr_module_sensor_pull_t twr_module_sensor_get_pull(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:twr_module_sensor_pull_t
twr_module_sensor_get_revision	twr/src/twr_module_sensor.c	/^twr_module_sensor_revision_t twr_module_sensor_get_revision(void)$/;"	f	typeref:typename:twr_module_sensor_revision_t
twr_module_sensor_init	twr/src/twr_module_sensor.c	/^bool twr_module_sensor_init(void)$/;"	f	typeref:typename:bool
twr_module_sensor_onewire_power_down	twr/src/twr_module_sensor.c	/^bool twr_module_sensor_onewire_power_down(void)$/;"	f	typeref:typename:bool
twr_module_sensor_onewire_power_up	twr/src/twr_module_sensor.c	/^bool twr_module_sensor_onewire_power_up(void)$/;"	f	typeref:typename:bool
twr_module_sensor_set_mode	twr/src/twr_module_sensor.c	/^void twr_module_sensor_set_mode(twr_module_sensor_channel_t channel, twr_module_sensor_mode_t mo/;"	f	typeref:typename:void
twr_module_sensor_set_output	twr/src/twr_module_sensor.c	/^void twr_module_sensor_set_output(twr_module_sensor_channel_t channel, int state)$/;"	f	typeref:typename:void
twr_module_sensor_set_pull	twr/src/twr_module_sensor.c	/^bool twr_module_sensor_set_pull(twr_module_sensor_channel_t channel, twr_module_sensor_pull_t pu/;"	f	typeref:typename:bool
twr_module_sensor_set_vdd	twr/src/twr_module_sensor.c	/^bool twr_module_sensor_set_vdd(bool on)$/;"	f	typeref:typename:bool
twr_module_sensor_toggle_output	twr/src/twr_module_sensor.c	/^void twr_module_sensor_toggle_output(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:void
twr_module_sigfox_continuous_wave	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_continuous_wave(twr_module_sigfox_t *self)$/;"	f	typeref:typename:bool
twr_module_sigfox_get_device_id	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_get_device_id(twr_module_sigfox_t *self, char *buffer, size_t buffer_size/;"	f	typeref:typename:bool
twr_module_sigfox_get_device_pac	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_get_device_pac(twr_module_sigfox_t *self, char *buffer, size_t buffer_siz/;"	f	typeref:typename:bool
twr_module_sigfox_init	twr/src/twr_module_sigfox.c	/^void twr_module_sigfox_init(twr_module_sigfox_t *self, twr_module_sigfox_revision_t revision)$/;"	f	typeref:typename:void
twr_module_sigfox_is_ready	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_is_ready(twr_module_sigfox_t *self)$/;"	f	typeref:typename:bool
twr_module_sigfox_read_device_id	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_read_device_id(twr_module_sigfox_t *self)$/;"	f	typeref:typename:bool
twr_module_sigfox_read_device_pac	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_read_device_pac(twr_module_sigfox_t *self)$/;"	f	typeref:typename:bool
twr_module_sigfox_send_rf_frame	twr/src/twr_module_sigfox.c	/^bool twr_module_sigfox_send_rf_frame(twr_module_sigfox_t *self, const void *buffer, size_t lengt/;"	f	typeref:typename:bool
twr_module_sigfox_set_event_handler	twr/src/twr_module_sigfox.c	/^void twr_module_sigfox_set_event_handler(twr_module_sigfox_t *self, void (*event_handler)(twr_mo/;"	f	typeref:typename:void
twr_module_x1_get_onewire	twr/src/twr_module_x1.c	/^twr_onewire_t *twr_module_x1_get_onewire(void)$/;"	f	typeref:typename:twr_onewire_t *
twr_module_x1_init	twr/src/twr_module_x1.c	/^bool twr_module_x1_init(void)$/;"	f	typeref:typename:bool
twr_mpl3115a2_deinit	twr/src/twr_mpl3115a2.c	/^void twr_mpl3115a2_deinit(twr_mpl3115a2_t *self)$/;"	f	typeref:typename:void
twr_mpl3115a2_get_altitude_meter	twr/src/twr_mpl3115a2.c	/^bool twr_mpl3115a2_get_altitude_meter(twr_mpl3115a2_t *self, float *meter)$/;"	f	typeref:typename:bool
twr_mpl3115a2_get_pressure_pascal	twr/src/twr_mpl3115a2.c	/^bool twr_mpl3115a2_get_pressure_pascal(twr_mpl3115a2_t *self, float *pascal)$/;"	f	typeref:typename:bool
twr_mpl3115a2_init	twr/src/twr_mpl3115a2.c	/^void twr_mpl3115a2_init(twr_mpl3115a2_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_addres/;"	f	typeref:typename:void
twr_mpl3115a2_measure	twr/src/twr_mpl3115a2.c	/^bool twr_mpl3115a2_measure(twr_mpl3115a2_t *self)$/;"	f	typeref:typename:bool
twr_mpl3115a2_set_event_handler	twr/src/twr_mpl3115a2.c	/^void twr_mpl3115a2_set_event_handler(twr_mpl3115a2_t *self, void (*event_handler)(twr_mpl3115a2_/;"	f	typeref:typename:void
twr_mpl3115a2_set_update_interval	twr/src/twr_mpl3115a2.c	/^void twr_mpl3115a2_set_update_interval(twr_mpl3115a2_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_onewire_auto_ds28e17_sleep_mode	twr/src/twr_onewire.c	/^void twr_onewire_auto_ds28e17_sleep_mode(twr_onewire_t *self, bool on)$/;"	f	typeref:typename:void
twr_onewire_crc16	twr/src/twr_onewire.c	/^uint16_t twr_onewire_crc16(const void *buffer, size_t length, uint16_t crc)$/;"	f	typeref:typename:uint16_t
twr_onewire_crc8	twr/src/twr_onewire.c	/^uint8_t twr_onewire_crc8(const void *buffer, size_t length, uint8_t crc)$/;"	f	typeref:typename:uint8_t
twr_onewire_det_driver	twr/src/twr_onewire_ds2484.c	/^const twr_onewire_driver_t *twr_onewire_det_driver(void)$/;"	f	typeref:typename:const twr_onewire_driver_t *
twr_onewire_ds2484_init	twr/src/twr_onewire_ds2484.c	/^void twr_onewire_ds2484_init(twr_onewire_t *onewire, twr_ds2484_t *twr_ds2484)$/;"	f	typeref:typename:void
twr_onewire_gpio_det_driver	twr/src/twr_onewire_gpio.c	/^const twr_onewire_driver_t *twr_onewire_gpio_det_driver(void)$/;"	f	typeref:typename:const twr_onewire_driver_t *
twr_onewire_gpio_init	twr/src/twr_onewire_gpio.c	/^void twr_onewire_gpio_init(twr_onewire_t *onewire, twr_gpio_channel_t channel)$/;"	f	typeref:typename:void
twr_onewire_init	twr/src/twr_onewire.c	/^bool twr_onewire_init(twr_onewire_t *self, const twr_onewire_driver_t *driver, void *driver_ctx)$/;"	f	typeref:typename:bool
twr_onewire_is_transaction	twr/src/twr_onewire.c	/^bool twr_onewire_is_transaction(twr_onewire_t *self)$/;"	f	typeref:typename:bool
twr_onewire_read	twr/src/twr_onewire.c	/^void twr_onewire_read(twr_onewire_t *self, void *buffer, size_t length)$/;"	f	typeref:typename:void
twr_onewire_read_bit	twr/src/twr_onewire.c	/^int twr_onewire_read_bit(twr_onewire_t *self)$/;"	f	typeref:typename:int
twr_onewire_read_byte	twr/src/twr_onewire.c	/^uint8_t twr_onewire_read_byte(twr_onewire_t *self)$/;"	f	typeref:typename:uint8_t
twr_onewire_relay_get_state	twr/src/twr_onewire_relay.c	/^bool twr_onewire_relay_get_state(twr_onewire_relay_t *self, twr_onewire_relay_channel_t relay_ch/;"	f	typeref:typename:bool
twr_onewire_relay_init	twr/src/twr_onewire_relay.c	/^bool twr_onewire_relay_init(twr_onewire_relay_t *self, twr_onewire_t *onewire, uint64_t device_n/;"	f	typeref:typename:bool
twr_onewire_relay_set_state	twr/src/twr_onewire_relay.c	/^bool twr_onewire_relay_set_state(twr_onewire_relay_t *self, twr_onewire_relay_channel_t relay_ch/;"	f	typeref:typename:bool
twr_onewire_reset	twr/src/twr_onewire.c	/^bool twr_onewire_reset(twr_onewire_t *self)$/;"	f	typeref:typename:bool
twr_onewire_search_all	twr/src/twr_onewire.c	/^int twr_onewire_search_all(twr_onewire_t *self, uint64_t *device_list, size_t device_list_size)$/;"	f	typeref:typename:int
twr_onewire_search_family	twr/src/twr_onewire.c	/^int twr_onewire_search_family(twr_onewire_t *self, uint8_t family_code, uint64_t *device_list, s/;"	f	typeref:typename:int
twr_onewire_search_next	twr/src/twr_onewire.c	/^bool twr_onewire_search_next(twr_onewire_t *self, uint64_t *device_number)$/;"	f	typeref:typename:bool
twr_onewire_search_start	twr/src/twr_onewire.c	/^void twr_onewire_search_start(twr_onewire_t *self, uint8_t family_code)$/;"	f	typeref:typename:void
twr_onewire_select	twr/src/twr_onewire.c	/^void twr_onewire_select(twr_onewire_t *self, uint64_t *device_number)$/;"	f	typeref:typename:void
twr_onewire_skip_rom	twr/src/twr_onewire.c	/^void twr_onewire_skip_rom(twr_onewire_t *self)$/;"	f	typeref:typename:void
twr_onewire_transaction_start	twr/src/twr_onewire.c	/^bool twr_onewire_transaction_start(twr_onewire_t *self)$/;"	f	typeref:typename:bool
twr_onewire_transaction_stop	twr/src/twr_onewire.c	/^bool twr_onewire_transaction_stop(twr_onewire_t *self)$/;"	f	typeref:typename:bool
twr_onewire_write	twr/src/twr_onewire.c	/^void twr_onewire_write(twr_onewire_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:void
twr_onewire_write_bit	twr/src/twr_onewire.c	/^void twr_onewire_write_bit(twr_onewire_t *self, int bit)$/;"	f	typeref:typename:void
twr_onewire_write_byte	twr/src/twr_onewire.c	/^void twr_onewire_write_byte(twr_onewire_t *self, uint8_t byte)$/;"	f	typeref:typename:void
twr_opt3001_deinit	twr/src/twr_opt3001.c	/^void twr_opt3001_deinit(twr_opt3001_t *self)$/;"	f	typeref:typename:void
twr_opt3001_get_illuminance_lux	twr/src/twr_opt3001.c	/^bool twr_opt3001_get_illuminance_lux(twr_opt3001_t *self, float *lux)$/;"	f	typeref:typename:bool
twr_opt3001_get_illuminance_raw	twr/src/twr_opt3001.c	/^bool twr_opt3001_get_illuminance_raw(twr_opt3001_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_opt3001_init	twr/src/twr_opt3001.c	/^void twr_opt3001_init(twr_opt3001_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_opt3001_measure	twr/src/twr_opt3001.c	/^bool twr_opt3001_measure(twr_opt3001_t *self)$/;"	f	typeref:typename:bool
twr_opt3001_set_event_handler	twr/src/twr_opt3001.c	/^void twr_opt3001_set_event_handler(twr_opt3001_t *self, void (*event_handler)(twr_opt3001_t *, t/;"	f	typeref:typename:void
twr_opt3001_set_update_interval	twr/src/twr_opt3001.c	/^void twr_opt3001_set_update_interval(twr_opt3001_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_pulse_counter_get	twr/src/twr_pulse_counter.c	/^unsigned int twr_pulse_counter_get(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:unsigned int
twr_pulse_counter_init	twr/src/twr_pulse_counter.c	/^void twr_pulse_counter_init(twr_module_sensor_channel_t channel, twr_pulse_counter_edge_t edge)$/;"	f	typeref:typename:void
twr_pulse_counter_reset	twr/src/twr_pulse_counter.c	/^void twr_pulse_counter_reset(twr_module_sensor_channel_t channel)$/;"	f	typeref:typename:void
twr_pulse_counter_set	twr/src/twr_pulse_counter.c	/^void twr_pulse_counter_set(twr_module_sensor_channel_t channel, unsigned int count)$/;"	f	typeref:typename:void
twr_pulse_counter_set_event_handler	twr/src/twr_pulse_counter.c	/^void twr_pulse_counter_set_event_handler(twr_module_sensor_channel_t channel, void (*event_handl/;"	f	typeref:typename:void
twr_pulse_counter_set_update_interval	twr/src/twr_pulse_counter.c	/^void twr_pulse_counter_set_update_interval(twr_module_sensor_channel_t channel, twr_tick_t inter/;"	f	typeref:typename:void
twr_pwm_disable	twr/src/twr_pwm.c	/^void twr_pwm_disable(twr_pwm_channel_t channel)$/;"	f	typeref:typename:void
twr_pwm_enable	twr/src/twr_pwm.c	/^void twr_pwm_enable(twr_pwm_channel_t channel)$/;"	f	typeref:typename:void
twr_pwm_init	twr/src/twr_pwm.c	/^void twr_pwm_init(twr_pwm_channel_t channel)$/;"	f	typeref:typename:void
twr_pwm_set	twr/src/twr_pwm.c	/^void twr_pwm_set(twr_pwm_channel_t channel, uint16_t pwm_value)$/;"	f	typeref:typename:void
twr_pwm_tim_configure	twr/src/twr_pwm.c	/^void twr_pwm_tim_configure(twr_pwm_tim_t tim, uint32_t resolution_us, uint32_t period_cycles)$/;"	f	typeref:typename:void
twr_pyq1648_init	twr/src/twr_pyq1648.c	/^void twr_pyq1648_init(twr_pyq1648_t *self, twr_gpio_channel_t gpio_channel_serin, twr_gpio_chann/;"	f	typeref:typename:void
twr_pyq1648_set_blank_period	twr/src/twr_pyq1648.c	/^void twr_pyq1648_set_blank_period(twr_pyq1648_t *self, twr_tick_t blank_period)$/;"	f	typeref:typename:void
twr_pyq1648_set_event_handler	twr/src/twr_pyq1648.c	/^void twr_pyq1648_set_event_handler(twr_pyq1648_t *self, void (*event_handler)(twr_pyq1648_t *, t/;"	f	typeref:typename:void
twr_pyq1648_set_sensitivity	twr/src/twr_pyq1648.c	/^void twr_pyq1648_set_sensitivity(twr_pyq1648_t *self, twr_pyq1648_sensitivity_t sensitivity)$/;"	f	typeref:typename:void
twr_queue_clear	twr/src/twr_queue.c	/^void twr_queue_clear(twr_queue_t *queue)$/;"	f	typeref:typename:void
twr_queue_get	twr/src/twr_queue.c	/^bool twr_queue_get(twr_queue_t *queue, void *buffer, size_t *length)$/;"	f	typeref:typename:bool
twr_queue_init	twr/src/twr_queue.c	/^void twr_queue_init(twr_queue_t *queue, void *buffer, size_t size)$/;"	f	typeref:typename:void
twr_queue_put	twr/src/twr_queue.c	/^bool twr_queue_put(twr_queue_t *queue, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_radio_automatic_pairing_start	twr/src/twr_radio.c	/^void twr_radio_automatic_pairing_start(void)$/;"	f	typeref:typename:void
twr_radio_automatic_pairing_stop	twr/src/twr_radio.c	/^void twr_radio_automatic_pairing_stop(void)$/;"	f	typeref:typename:void
twr_radio_bool_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_bool_from_buffer(uint8_t *buffer, bool *value, bool **pointer)$/;"	f	typeref:typename:uint8_t *
twr_radio_bool_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_bool_to_buffer(bool *value, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_data_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_data_from_buffer(uint8_t *buffer, void *data, size_t length)$/;"	f	typeref:typename:uint8_t *
twr_radio_data_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_data_to_buffer(void *data, size_t length, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_float_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_float_from_buffer(uint8_t *buffer, float *value, float **pointer)$/;"	f	typeref:typename:uint8_t *
twr_radio_float_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_float_to_buffer(float *value, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_get_event_id	twr/src/twr_radio.c	/^uint64_t twr_radio_get_event_id(void)$/;"	f	typeref:typename:uint64_t
twr_radio_get_my_id	twr/src/twr_radio.c	/^uint64_t twr_radio_get_my_id(void)$/;"	f	typeref:typename:uint64_t
twr_radio_get_peer_device	twr/src/twr_radio.c	/^twr_radio_peer_t *twr_radio_get_peer_device(uint64_t id)$/;"	f	typeref:typename:twr_radio_peer_t *
twr_radio_get_peer_id	twr/src/twr_radio.c	/^void twr_radio_get_peer_id(uint64_t *id, int length)$/;"	f	typeref:typename:void
twr_radio_id_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_id_from_buffer(uint8_t *buffer, uint64_t *id)$/;"	f	typeref:typename:uint8_t *
twr_radio_id_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_id_to_buffer(uint64_t *id, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_init	twr/src/twr_radio.c	/^void twr_radio_init(twr_radio_mode_t mode)$/;"	f	typeref:typename:void
twr_radio_init_pairing_button	twr/src/twr_radio.c	/^void twr_radio_init_pairing_button(const char *firmware, const char *version)$/;"	f	typeref:typename:void
twr_radio_int_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_int_from_buffer(uint8_t *buffer, int *value, int **pointer)$/;"	f	typeref:typename:uint8_t *
twr_radio_int_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_int_to_buffer(int *value, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_is_peer_device	twr/src/twr_radio.c	/^bool twr_radio_is_peer_device(uint64_t id)$/;"	f	typeref:typename:bool
twr_radio_listen	twr/src/twr_radio.c	/^void twr_radio_listen(twr_tick_t timeout)$/;"	f	typeref:typename:void
twr_radio_node_buffer	twr/src/twr_radio_node.c	/^bool twr_radio_node_buffer(uint64_t *id, void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_radio_node_decode	twr/src/twr_radio_node.c	/^void twr_radio_node_decode(uint64_t *id, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:void
twr_radio_node_led_strip_brightness_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_led_strip_brightness_set(uint64_t *id, uint8_t brightness)$/;"	f	typeref:typename:bool
twr_radio_node_led_strip_color_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_led_strip_color_set(uint64_t *id, uint32_t color)$/;"	f	typeref:typename:bool
twr_radio_node_led_strip_compound_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_led_strip_compound_set(uint64_t *id, uint8_t *compound, size_t length)$/;"	f	typeref:typename:bool
twr_radio_node_led_strip_effect_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_led_strip_effect_set(uint64_t *id, twr_radio_node_led_strip_effect_t type, u/;"	f	typeref:typename:bool
twr_radio_node_led_strip_thermometer_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_led_strip_thermometer_set(uint64_t *id, float temperature, int8_t min, int8_/;"	f	typeref:typename:bool
twr_radio_node_on_buffer	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_buffer(uint64_t *id, void *buffer, size_t length) {/;"	f	typeref:typename:void
twr_radio_node_on_led_strip_brightness_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_led_strip_brightness_set(uint64_t *id, uint8_t *bri/;"	f	typeref:typename:void
twr_radio_node_on_led_strip_color_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_led_strip_color_set(uint64_t *id, uint32_t *color) /;"	f	typeref:typename:void
twr_radio_node_on_led_strip_compound_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_led_strip_compound_set(uint64_t *id, uint8_t *compo/;"	f	typeref:typename:void
twr_radio_node_on_led_strip_effect_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_led_strip_effect_set(uint64_t *id, twr_radio_node_l/;"	f	typeref:typename:void
twr_radio_node_on_led_strip_thermometer_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_led_strip_thermometer_set(uint64_t *id, float *temp/;"	f	typeref:typename:void
twr_radio_node_on_state_get	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_state_get(uint64_t *id, uint8_t state_id) { (void) /;"	f	typeref:typename:void
twr_radio_node_on_state_set	twr/src/twr_radio_node.c	/^__attribute__((weak)) void twr_radio_node_on_state_set(uint64_t *id, uint8_t state_id, bool *sta/;"	f	typeref:typename:void
twr_radio_node_state_get	twr/src/twr_radio_node.c	/^bool twr_radio_node_state_get(uint64_t *id, uint8_t state_id)$/;"	f	typeref:typename:bool
twr_radio_node_state_set	twr/src/twr_radio_node.c	/^bool twr_radio_node_state_set(uint64_t *id, uint8_t state_id, bool *state)$/;"	f	typeref:typename:bool
twr_radio_on_info	twr/src/twr_radio.c	/^__attribute__((weak)) void twr_radio_on_info(uint64_t *id, char *firmware, char *version, twr_ra/;"	f	typeref:typename:void
twr_radio_on_push_button	_examples/radio-base/application.c	/^void twr_radio_on_push_button(uint64_t *peer_device_address, uint16_t *event_count)$/;"	f	typeref:typename:void
twr_radio_on_sub	twr/src/twr_radio.c	/^__attribute__((weak)) void twr_radio_on_sub(uint64_t *id, uint8_t *order, twr_radio_sub_pt_t *pt/;"	f	typeref:typename:void
twr_radio_pairing_mode_start	twr/src/twr_radio.c	/^void twr_radio_pairing_mode_start(void)$/;"	f	typeref:typename:void
twr_radio_pairing_mode_stop	twr/src/twr_radio.c	/^void twr_radio_pairing_mode_stop(void)$/;"	f	typeref:typename:void
twr_radio_pairing_request	twr/src/twr_radio.c	/^void twr_radio_pairing_request(const char *firmware, const char *version)$/;"	f	typeref:typename:void
twr_radio_peer_device_add	twr/src/twr_radio.c	/^bool twr_radio_peer_device_add(uint64_t id)$/;"	f	typeref:typename:bool
twr_radio_peer_device_purge_all	twr/src/twr_radio.c	/^bool twr_radio_peer_device_purge_all(void)$/;"	f	typeref:typename:bool
twr_radio_peer_device_remove	twr/src/twr_radio.c	/^bool twr_radio_peer_device_remove(uint64_t id)$/;"	f	typeref:typename:bool
twr_radio_pub_acceleration	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_acceleration(float *x_axis, float *y_axis, float *z_axis)$/;"	f	typeref:typename:bool
twr_radio_pub_barometer	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_barometer(uint8_t channel, float *pascal, float *meter)$/;"	f	typeref:typename:bool
twr_radio_pub_battery	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_battery(float *voltage)$/;"	f	typeref:typename:bool
twr_radio_pub_bool	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_bool(const char *subtopic, bool *value)$/;"	f	typeref:typename:bool
twr_radio_pub_buffer	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_buffer(void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_radio_pub_co2	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_co2(float *concentration)$/;"	f	typeref:typename:bool
twr_radio_pub_decode	twr/src/twr_radio_pub.c	/^void twr_radio_pub_decode(uint64_t *id, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:void
twr_radio_pub_event_count	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_event_count(uint8_t event_id, uint16_t *event_count)$/;"	f	typeref:typename:bool
twr_radio_pub_float	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_float(const char *subtopic, float *value)$/;"	f	typeref:typename:bool
twr_radio_pub_humidity	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_humidity(uint8_t channel, float *percentage)$/;"	f	typeref:typename:bool
twr_radio_pub_int	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_int(const char *subtopic, int *value)$/;"	f	typeref:typename:bool
twr_radio_pub_luminosity	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_luminosity(uint8_t channel, float *lux)$/;"	f	typeref:typename:bool
twr_radio_pub_on_acceleration	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_acceleration(uint64_t *id, float *x_axis, float *y_a/;"	f	typeref:typename:void
twr_radio_pub_on_barometer	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_barometer(uint64_t *id, uint8_t channel, float *pres/;"	f	typeref:typename:void
twr_radio_pub_on_battery	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_battery(uint64_t *id, float *voltage) { (void) id; (/;"	f	typeref:typename:void
twr_radio_pub_on_bool	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_bool(uint64_t *id, char *subtopic, bool *value) { (v/;"	f	typeref:typename:void
twr_radio_pub_on_buffer	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_buffer(uint64_t *id, void *buffer, size_t length) { /;"	f	typeref:typename:void
twr_radio_pub_on_co2	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_co2(uint64_t *id, float *concentration) { (void) id;/;"	f	typeref:typename:void
twr_radio_pub_on_event_count	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_event_count(uint64_t *id, uint8_t event_id, uint16_t/;"	f	typeref:typename:void
twr_radio_pub_on_float	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_float(uint64_t *id, char *subtopic, float *value) { /;"	f	typeref:typename:void
twr_radio_pub_on_humidity	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_humidity(uint64_t *id, uint8_t channel, float *perce/;"	f	typeref:typename:void
twr_radio_pub_on_int	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_int(uint64_t *id, char *subtopic, int *value) { (voi/;"	f	typeref:typename:void
twr_radio_pub_on_lux_meter	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_lux_meter(uint64_t *id, uint8_t channel, float *illu/;"	f	typeref:typename:void
twr_radio_pub_on_push_button	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_push_button(uint64_t *id, uint16_t *event_count) { (/;"	f	typeref:typename:void
twr_radio_pub_on_state	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_state(uint64_t *id, uint8_t state_id, bool *state) {/;"	f	typeref:typename:void
twr_radio_pub_on_string	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_string(uint64_t *id, char *subtopic, char *value) { /;"	f	typeref:typename:void
twr_radio_pub_on_temperature	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_temperature(uint64_t *id, uint8_t channel, float *ce/;"	f	typeref:typename:void
twr_radio_pub_on_uint32	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_uint32(uint64_t *id, char *subtopic, uint32_t *value/;"	f	typeref:typename:void
twr_radio_pub_on_value_int	twr/src/twr_radio_pub.c	/^__attribute__((weak)) void twr_radio_pub_on_value_int(uint64_t *id, uint8_t value_id, int *value/;"	f	typeref:typename:void
twr_radio_pub_push_button	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_push_button(uint16_t *event_count)$/;"	f	typeref:typename:bool
twr_radio_pub_queue_clear	twr/src/twr_radio.c	/^void twr_radio_pub_queue_clear()$/;"	f	typeref:typename:void
twr_radio_pub_queue_put	twr/src/twr_radio.c	/^bool twr_radio_pub_queue_put(const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_radio_pub_state	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_state(uint8_t state_id, bool *state)$/;"	f	typeref:typename:bool
twr_radio_pub_string	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_string(const char *subtopic, const char *value)$/;"	f	typeref:typename:bool
twr_radio_pub_temperature	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_temperature(uint8_t channel, float *celsius)$/;"	f	typeref:typename:bool
twr_radio_pub_uint32	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_uint32(const char *subtopic, uint32_t *value)$/;"	f	typeref:typename:bool
twr_radio_pub_value_int	twr/src/twr_radio_pub.c	/^bool twr_radio_pub_value_int(uint8_t value_id, int *value)$/;"	f	typeref:typename:bool
twr_radio_scan_start	twr/src/twr_radio.c	/^void twr_radio_scan_start(void)$/;"	f	typeref:typename:void
twr_radio_scan_stop	twr/src/twr_radio.c	/^void twr_radio_scan_stop(void)$/;"	f	typeref:typename:void
twr_radio_send_sub_data	twr/src/twr_radio.c	/^bool twr_radio_send_sub_data(uint64_t *id, uint8_t order, void *payload, size_t size)$/;"	f	typeref:typename:bool
twr_radio_set_event_handler	twr/src/twr_radio.c	/^void twr_radio_set_event_handler(void (*event_handler)(twr_radio_event_t, void *), void *event_p/;"	f	typeref:typename:void
twr_radio_set_rx_timeout_for_sleeping_node	twr/src/twr_radio.c	/^void twr_radio_set_rx_timeout_for_sleeping_node(twr_tick_t timeout)$/;"	f	typeref:typename:void
twr_radio_set_subs	twr/src/twr_radio.c	/^void twr_radio_set_subs(twr_radio_sub_t *subs, int length)$/;"	f	typeref:typename:void
twr_radio_uint16_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_uint16_from_buffer(uint8_t *buffer, uint16_t *value, uint16_t **pointer)$/;"	f	typeref:typename:uint8_t *
twr_radio_uint16_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_uint16_to_buffer(uint16_t *value, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_radio_uint32_from_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_uint32_from_buffer(uint8_t *buffer, uint32_t *value, uint32_t **pointer)$/;"	f	typeref:typename:uint8_t *
twr_radio_uint32_to_buffer	twr/src/twr_radio.c	/^uint8_t *twr_radio_uint32_to_buffer(uint32_t *value, uint8_t *buffer)$/;"	f	typeref:typename:uint8_t *
twr_ramp_get	twr/src/twr_ramp.c	/^float twr_ramp_get(twr_ramp_t *self)$/;"	f	typeref:typename:float
twr_ramp_init	twr/src/twr_ramp.c	/^void twr_ramp_init(twr_ramp_t *self, float start, float stop, twr_tick_t duration)$/;"	f	typeref:typename:void
twr_ramp_start	twr/src/twr_ramp.c	/^void twr_ramp_start(twr_ramp_t *self)$/;"	f	typeref:typename:void
twr_rf_ook_init	twr/src/twr_rf_ook.c	/^void twr_rf_ook_init(twr_gpio_channel_t gpio)$/;"	f	typeref:typename:void
twr_rf_ook_is_busy	twr/src/twr_rf_ook.c	/^bool twr_rf_ook_is_busy()$/;"	f	typeref:typename:bool
twr_rf_ook_is_ready	twr/src/twr_rf_ook.c	/^bool twr_rf_ook_is_ready()$/;"	f	typeref:typename:bool
twr_rf_ook_send	twr/src/twr_rf_ook.c	/^bool twr_rf_ook_send(uint8_t *packet, uint8_t length)$/;"	f	typeref:typename:bool
twr_rf_ook_send_hex_string	twr/src/twr_rf_ook.c	/^bool twr_rf_ook_send_hex_string(char *hex_string)$/;"	f	typeref:typename:bool
twr_rf_ook_set_bitlength	twr/src/twr_rf_ook.c	/^void twr_rf_ook_set_bitlength(uint32_t bit_length_us)$/;"	f	typeref:typename:void
twr_rf_ook_set_bitrate	twr/src/twr_rf_ook.c	/^void twr_rf_ook_set_bitrate(uint32_t bitrate)$/;"	f	typeref:typename:void
twr_rtc_datetime_to_timestamp	twr/src/twr_rtc.c	/^uint32_t twr_rtc_datetime_to_timestamp(struct tm *tm)$/;"	f	typeref:typename:uint32_t
twr_rtc_disable_write	twr/inc/twr_rtc.h	/^static inline void twr_rtc_disable_write()$/;"	f	typeref:typename:void
twr_rtc_enable_write	twr/inc/twr_rtc.h	/^static inline void twr_rtc_enable_write()$/;"	f	typeref:typename:void
twr_rtc_get_datetime	twr/src/twr_rtc.c	/^void twr_rtc_get_datetime(struct tm *tm)$/;"	f	typeref:typename:void
twr_rtc_get_timestamp	twr/src/twr_rtc.c	/^void twr_rtc_get_timestamp(struct timespec *tv)$/;"	f	typeref:typename:void
twr_rtc_init	twr/src/twr_rtc.c	/^void twr_rtc_init(void)$/;"	f	typeref:typename:void
twr_rtc_set_datetime	twr/src/twr_rtc.c	/^int twr_rtc_set_datetime(struct tm *tm, int ms)$/;"	f	typeref:typename:int
twr_rtc_set_init	twr/src/twr_rtc.c	/^void twr_rtc_set_init(bool state)$/;"	f	typeref:typename:void
twr_rtc_wait	twr/inc/twr_rtc.h	/^static inline void twr_rtc_wait()$/;"	f	typeref:typename:void
twr_sam_m8q_get_accuracy	twr/src/twr_sam_m8q.c	/^bool twr_sam_m8q_get_accuracy(twr_sam_m8q_t *self, twr_sam_m8q_accuracy_t *accuracy)$/;"	f	typeref:typename:bool
twr_sam_m8q_get_altitude	twr/src/twr_sam_m8q.c	/^bool twr_sam_m8q_get_altitude(twr_sam_m8q_t *self, twr_sam_m8q_altitude_t *altitude)$/;"	f	typeref:typename:bool
twr_sam_m8q_get_position	twr/src/twr_sam_m8q.c	/^bool twr_sam_m8q_get_position(twr_sam_m8q_t *self, twr_sam_m8q_position_t *position)$/;"	f	typeref:typename:bool
twr_sam_m8q_get_quality	twr/src/twr_sam_m8q.c	/^bool twr_sam_m8q_get_quality(twr_sam_m8q_t *self, twr_sam_m8q_quality_t *quality)$/;"	f	typeref:typename:bool
twr_sam_m8q_get_time	twr/src/twr_sam_m8q.c	/^bool twr_sam_m8q_get_time(twr_sam_m8q_t *self, twr_sam_m8q_time_t *time)$/;"	f	typeref:typename:bool
twr_sam_m8q_init	twr/src/twr_sam_m8q.c	/^void twr_sam_m8q_init(twr_sam_m8q_t *self, twr_i2c_channel_t channel, uint8_t i2c_address, const/;"	f	typeref:typename:void
twr_sam_m8q_invalidate	twr/src/twr_sam_m8q.c	/^void twr_sam_m8q_invalidate(twr_sam_m8q_t *self)$/;"	f	typeref:typename:void
twr_sam_m8q_set_event_handler	twr/src/twr_sam_m8q.c	/^void twr_sam_m8q_set_event_handler(twr_sam_m8q_t *self, twr_sam_m8q_event_handler_t event_handle/;"	f	typeref:typename:void
twr_sam_m8q_start	twr/src/twr_sam_m8q.c	/^void twr_sam_m8q_start(twr_sam_m8q_t *self)$/;"	f	typeref:typename:void
twr_sam_m8q_stop	twr/src/twr_sam_m8q.c	/^void twr_sam_m8q_stop(twr_sam_m8q_t *self)$/;"	f	typeref:typename:void
twr_sc16is740_available	twr/src/twr_sc16is740.c	/^bool twr_sc16is740_available(twr_sc16is740_t *self, size_t *available)$/;"	f	typeref:typename:bool
twr_sc16is740_get_spaces_available	twr/src/twr_sc16is740.c	/^bool twr_sc16is740_get_spaces_available(twr_sc16is740_t *self, size_t *spaces_available)$/;"	f	typeref:typename:bool
twr_sc16is740_init	twr/src/twr_sc16is740.c	/^bool twr_sc16is740_init(twr_sc16is740_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_addres/;"	f	typeref:typename:bool
twr_sc16is740_read	twr/src/twr_sc16is740.c	/^size_t twr_sc16is740_read(twr_sc16is740_t *self, uint8_t *buffer, size_t length, twr_tick_t time/;"	f	typeref:typename:size_t
twr_sc16is740_reset_fifo	twr/src/twr_sc16is740.c	/^bool twr_sc16is740_reset_fifo(twr_sc16is740_t *self, twr_sc16is740_fifo_t fifo)$/;"	f	typeref:typename:bool
twr_sc16is740_set_baudrate	twr/src/twr_sc16is740.c	/^bool twr_sc16is740_set_baudrate(twr_sc16is740_t *self, twr_sc16is740_baudrate_t baudrate)$/;"	f	typeref:typename:bool
twr_sc16is740_write	twr/src/twr_sc16is740.c	/^size_t twr_sc16is740_write(twr_sc16is740_t *self, uint8_t *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_scheduler_get_current_task_id	twr/src/twr_scheduler.c	/^twr_scheduler_task_id_t twr_scheduler_get_current_task_id(void)$/;"	f	typeref:typename:twr_scheduler_task_id_t
twr_scheduler_get_spin_tick	twr/src/twr_scheduler.c	/^twr_tick_t twr_scheduler_get_spin_tick(void)$/;"	f	typeref:typename:twr_tick_t
twr_scheduler_init	twr/src/twr_scheduler.c	/^void twr_scheduler_init(void)$/;"	f	typeref:typename:void
twr_scheduler_plan_absolute	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_absolute(twr_scheduler_task_id_t task_id, twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_plan_current_absolute	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_current_absolute(twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_plan_current_from_now	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_current_from_now(twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_plan_current_now	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_current_now(void)$/;"	f	typeref:typename:void
twr_scheduler_plan_current_relative	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_current_relative(twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_plan_from_now	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_from_now(twr_scheduler_task_id_t task_id, twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_plan_now	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_now(twr_scheduler_task_id_t task_id)$/;"	f	typeref:typename:void
twr_scheduler_plan_relative	twr/src/twr_scheduler.c	/^void twr_scheduler_plan_relative(twr_scheduler_task_id_t task_id, twr_tick_t tick)$/;"	f	typeref:typename:void
twr_scheduler_register	twr/src/twr_scheduler.c	/^twr_scheduler_task_id_t twr_scheduler_register(void (*task)(void *), void *param, twr_tick_t tic/;"	f	typeref:typename:twr_scheduler_task_id_t
twr_scheduler_run	twr/src/twr_scheduler.c	/^void twr_scheduler_run(void)$/;"	f	typeref:typename:void
twr_scheduler_unregister	twr/src/twr_scheduler.c	/^void twr_scheduler_unregister(twr_scheduler_task_id_t task_id)$/;"	f	typeref:typename:void
twr_servo_get_angle	twr/src/twr_servo.c	/^uint8_t twr_servo_get_angle(twr_servo_t *self)$/;"	f	typeref:typename:uint8_t
twr_servo_init	twr/src/twr_servo.c	/^void twr_servo_init(twr_servo_t *self, twr_pwm_channel_t channel)$/;"	f	typeref:typename:void
twr_servo_set_angle	twr/src/twr_servo.c	/^void twr_servo_set_angle(twr_servo_t *self, uint8_t angle)$/;"	f	typeref:typename:void
twr_servo_set_microseconds	twr/src/twr_servo.c	/^void twr_servo_set_microseconds(twr_servo_t *self, uint16_t us)$/;"	f	typeref:typename:void
twr_servo_set_pulse_limits	twr/src/twr_servo.c	/^void twr_servo_set_pulse_limits(twr_servo_t *self, uint16_t min_us, uint16_t max_us)$/;"	f	typeref:typename:void
twr_sgp30_deinit	twr/src/twr_sgp30.c	/^void twr_sgp30_deinit(twr_sgp30_t *self)$/;"	f	typeref:typename:void
twr_sgp30_get_co2eq_ppm	twr/src/twr_sgp30.c	/^bool twr_sgp30_get_co2eq_ppm(twr_sgp30_t *self, uint16_t *ppm)$/;"	f	typeref:typename:bool
twr_sgp30_get_tvoc_ppb	twr/src/twr_sgp30.c	/^bool twr_sgp30_get_tvoc_ppb(twr_sgp30_t *self, uint16_t *ppb)$/;"	f	typeref:typename:bool
twr_sgp30_init	twr/src/twr_sgp30.c	/^void twr_sgp30_init(twr_sgp30_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_sgp30_measure	twr/src/twr_sgp30.c	/^bool twr_sgp30_measure(twr_sgp30_t *self)$/;"	f	typeref:typename:bool
twr_sgp30_set_compensation	twr/src/twr_sgp30.c	/^float twr_sgp30_set_compensation(twr_sgp30_t *self, float *t_celsius, float *rh_percentage)$/;"	f	typeref:typename:float
twr_sgp30_set_event_handler	twr/src/twr_sgp30.c	/^void twr_sgp30_set_event_handler(twr_sgp30_t *self, void (*event_handler)(twr_sgp30_t *, twr_sgp/;"	f	typeref:typename:void
twr_sgp30_set_update_interval	twr/src/twr_sgp30.c	/^void twr_sgp30_set_update_interval(twr_sgp30_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_sgpc3_deinit	twr/src/twr_sgpc3.c	/^void twr_sgpc3_deinit(twr_sgpc3_t *self)$/;"	f	typeref:typename:void
twr_sgpc3_get_tvoc_ppb	twr/src/twr_sgpc3.c	/^bool twr_sgpc3_get_tvoc_ppb(twr_sgpc3_t *self, uint16_t *ppb)$/;"	f	typeref:typename:bool
twr_sgpc3_init	twr/src/twr_sgpc3.c	/^void twr_sgpc3_init(twr_sgpc3_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_sgpc3_measure	twr/src/twr_sgpc3.c	/^bool twr_sgpc3_measure(twr_sgpc3_t *self)$/;"	f	typeref:typename:bool
twr_sgpc3_set_compensation	twr/src/twr_sgpc3.c	/^float twr_sgpc3_set_compensation(twr_sgpc3_t *self, float *t_celsius, float *rh_percentage)$/;"	f	typeref:typename:float
twr_sgpc3_set_event_handler	twr/src/twr_sgpc3.c	/^void twr_sgpc3_set_event_handler(twr_sgpc3_t *self, void (*event_handler)(twr_sgpc3_t *, twr_sgp/;"	f	typeref:typename:void
twr_sgpc3_set_update_interval	twr/src/twr_sgpc3.c	/^void twr_sgpc3_set_update_interval(twr_sgpc3_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_sha256_final	twr/src/twr_sha256.c	/^void twr_sha256_final(twr_sha256_t *self, uint8_t *hash, bool little_endian)$/;"	f	typeref:typename:void
twr_sha256_init	twr/src/twr_sha256.c	/^void twr_sha256_init(twr_sha256_t *self)$/;"	f	typeref:typename:void
twr_sha256_update	twr/src/twr_sha256.c	/^void twr_sha256_update(twr_sha256_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:void
twr_sht20_deinit	twr/src/twr_sht20.c	/^void twr_sht20_deinit(twr_sht20_t *self)$/;"	f	typeref:typename:void
twr_sht20_get_humidity_percentage	twr/src/twr_sht20.c	/^bool twr_sht20_get_humidity_percentage(twr_sht20_t *self, float *percentage)$/;"	f	typeref:typename:bool
twr_sht20_get_humidity_raw	twr/src/twr_sht20.c	/^bool twr_sht20_get_humidity_raw(twr_sht20_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_sht20_get_temperature_celsius	twr/src/twr_sht20.c	/^bool twr_sht20_get_temperature_celsius(twr_sht20_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_sht20_get_temperature_fahrenheit	twr/src/twr_sht20.c	/^bool twr_sht20_get_temperature_fahrenheit(twr_sht20_t *self, float *fahrenheit)$/;"	f	typeref:typename:bool
twr_sht20_get_temperature_kelvin	twr/src/twr_sht20.c	/^bool twr_sht20_get_temperature_kelvin(twr_sht20_t *self, float *kelvin)$/;"	f	typeref:typename:bool
twr_sht20_get_temperature_raw	twr/src/twr_sht20.c	/^bool twr_sht20_get_temperature_raw(twr_sht20_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_sht20_init	twr/src/twr_sht20.c	/^void twr_sht20_init(twr_sht20_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_sht20_measure	twr/src/twr_sht20.c	/^bool twr_sht20_measure(twr_sht20_t *self)$/;"	f	typeref:typename:bool
twr_sht20_set_event_handler	twr/src/twr_sht20.c	/^void twr_sht20_set_event_handler(twr_sht20_t *self, void (*event_handler)(twr_sht20_t *, twr_sht/;"	f	typeref:typename:void
twr_sht20_set_update_interval	twr/src/twr_sht20.c	/^void twr_sht20_set_update_interval(twr_sht20_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_sht30_deinit	twr/src/twr_sht30.c	/^void twr_sht30_deinit(twr_sht30_t *self)$/;"	f	typeref:typename:void
twr_sht30_get_humidity_percentage	twr/src/twr_sht30.c	/^bool twr_sht30_get_humidity_percentage(twr_sht30_t *self, float *percentage)$/;"	f	typeref:typename:bool
twr_sht30_get_humidity_raw	twr/src/twr_sht30.c	/^bool twr_sht30_get_humidity_raw(twr_sht30_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_sht30_get_temperature_celsius	twr/src/twr_sht30.c	/^bool twr_sht30_get_temperature_celsius(twr_sht30_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_sht30_get_temperature_fahrenheit	twr/src/twr_sht30.c	/^bool twr_sht30_get_temperature_fahrenheit(twr_sht30_t *self, float *fahrenheit)$/;"	f	typeref:typename:bool
twr_sht30_get_temperature_kelvin	twr/src/twr_sht30.c	/^bool twr_sht30_get_temperature_kelvin(twr_sht30_t *self, float *kelvin)$/;"	f	typeref:typename:bool
twr_sht30_get_temperature_raw	twr/src/twr_sht30.c	/^bool twr_sht30_get_temperature_raw(twr_sht30_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_sht30_init	twr/src/twr_sht30.c	/^void twr_sht30_init(twr_sht30_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_sht30_measure	twr/src/twr_sht30.c	/^bool twr_sht30_measure(twr_sht30_t *self)$/;"	f	typeref:typename:bool
twr_sht30_set_event_handler	twr/src/twr_sht30.c	/^void twr_sht30_set_event_handler(twr_sht30_t *self, void (*event_handler)(twr_sht30_t *, twr_sht/;"	f	typeref:typename:void
twr_sht30_set_update_interval	twr/src/twr_sht30.c	/^void twr_sht30_set_update_interval(twr_sht30_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_sleep	twr/inc/twr_sleep.h	/^static inline void twr_sleep(void)$/;"	f	typeref:typename:void
twr_sleep_disable	twr/src/twr_sleep.c	/^void twr_sleep_disable(void)$/;"	f	typeref:typename:void
twr_sleep_enable	twr/src/twr_sleep.c	/^void twr_sleep_enable(void)$/;"	f	typeref:typename:void
twr_soil_sensor_calibration_set_point	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_calibration_set_point(twr_soil_sensor_t *self, uint64_t device_address, uin/;"	f	typeref:typename:bool
twr_soil_sensor_eeprom_save	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_eeprom_save(twr_soil_sensor_t *self, uint64_t device_address)$/;"	f	typeref:typename:bool
twr_soil_sensor_get_cap_raw	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_cap_raw(twr_soil_sensor_t *self, uint64_t device_address, uint16_t *raw/;"	f	typeref:typename:bool
twr_soil_sensor_get_device_address_by_index	twr/src/twr_soil_sensor.c	/^uint64_t twr_soil_sensor_get_device_address_by_index(twr_soil_sensor_t *self, int index)$/;"	f	typeref:typename:uint64_t
twr_soil_sensor_get_error	twr/src/twr_soil_sensor.c	/^twr_soil_sensor_error_t twr_soil_sensor_get_error(twr_soil_sensor_t *self)$/;"	f	typeref:typename:twr_soil_sensor_error_t
twr_soil_sensor_get_index_by_device_address	twr/src/twr_soil_sensor.c	/^int twr_soil_sensor_get_index_by_device_address(twr_soil_sensor_t *self, uint64_t device_address/;"	f	typeref:typename:int
twr_soil_sensor_get_label	twr/src/twr_soil_sensor.c	/^char *twr_soil_sensor_get_label(twr_soil_sensor_t *self, uint64_t device_address)$/;"	f	typeref:typename:char *
twr_soil_sensor_get_moisture	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_moisture(twr_soil_sensor_t *self, uint64_t device_address, int *moistur/;"	f	typeref:typename:bool
twr_soil_sensor_get_sensor_found	twr/src/twr_soil_sensor.c	/^int twr_soil_sensor_get_sensor_found(twr_soil_sensor_t *self)$/;"	f	typeref:typename:int
twr_soil_sensor_get_temperature_celsius	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_temperature_celsius(twr_soil_sensor_t *self, uint64_t device_address, f/;"	f	typeref:typename:bool
twr_soil_sensor_get_temperature_fahrenheit	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_temperature_fahrenheit(twr_soil_sensor_t *self, uint64_t device_address/;"	f	typeref:typename:bool
twr_soil_sensor_get_temperature_kelvin	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_temperature_kelvin(twr_soil_sensor_t *self, uint64_t device_address, fl/;"	f	typeref:typename:bool
twr_soil_sensor_get_temperature_raw	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_get_temperature_raw(twr_soil_sensor_t *self, uint64_t device_address, int16/;"	f	typeref:typename:bool
twr_soil_sensor_init	twr/src/twr_soil_sensor.c	/^void twr_soil_sensor_init(twr_soil_sensor_t *self)$/;"	f	typeref:typename:void
twr_soil_sensor_init_multiple	twr/src/twr_soil_sensor.c	/^void twr_soil_sensor_init_multiple(twr_soil_sensor_t *self, twr_soil_sensor_sensor_t *sensors, i/;"	f	typeref:typename:void
twr_soil_sensor_measure	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_measure(twr_soil_sensor_t *self)$/;"	f	typeref:typename:bool
twr_soil_sensor_set_event_handler	twr/src/twr_soil_sensor.c	/^void twr_soil_sensor_set_event_handler(twr_soil_sensor_t *self, void (*event_handler)(twr_soil_s/;"	f	typeref:typename:void
twr_soil_sensor_set_label	twr/src/twr_soil_sensor.c	/^bool twr_soil_sensor_set_label(twr_soil_sensor_t *self, uint64_t device_address, const char *lab/;"	f	typeref:typename:bool
twr_soil_sensor_set_update_interval	twr/src/twr_soil_sensor.c	/^void twr_soil_sensor_set_update_interval(twr_soil_sensor_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_spi_async_transfer	twr/src/twr_spi.c	/^bool twr_spi_async_transfer(const void *source, void *destination, size_t length, void (*event_h/;"	f	typeref:typename:bool
twr_spi_get_mode	twr/src/twr_spi.c	/^twr_spi_mode_t twr_spi_get_mode(void)$/;"	f	typeref:typename:twr_spi_mode_t
twr_spi_get_speed	twr/src/twr_spi.c	/^twr_spi_speed_t twr_spi_get_speed(void)$/;"	f	typeref:typename:twr_spi_speed_t
twr_spi_init	twr/src/twr_spi.c	/^void twr_spi_init(twr_spi_speed_t speed, twr_spi_mode_t mode)$/;"	f	typeref:typename:void
twr_spi_is_ready	twr/src/twr_spi.c	/^bool twr_spi_is_ready(void)$/;"	f	typeref:typename:bool
twr_spi_set_manual_cs_control	twr/src/twr_spi.c	/^void twr_spi_set_manual_cs_control(bool manual_cs_control)$/;"	f	typeref:typename:void
twr_spi_set_mode	twr/src/twr_spi.c	/^void twr_spi_set_mode(twr_spi_mode_t mode)$/;"	f	typeref:typename:void
twr_spi_set_speed	twr/src/twr_spi.c	/^void twr_spi_set_speed(twr_spi_speed_t speed)$/;"	f	typeref:typename:void
twr_spi_set_timing	twr/src/twr_spi.c	/^void twr_spi_set_timing(uint16_t cs_delay, uint16_t delay, uint16_t cs_quit)$/;"	f	typeref:typename:void
twr_spi_transfer	twr/src/twr_spi.c	/^bool twr_spi_transfer(const void *source, void *destination, size_t length)$/;"	f	typeref:typename:bool
twr_spirit1_command	twr/src/twr_spirit1.c	/^twr_spirit_status_t twr_spirit1_command(uint8_t command)$/;"	f	typeref:typename:twr_spirit_status_t
twr_spirit1_deinit	twr/src/twr_spirit1.c	/^bool twr_spirit1_deinit(void)$/;"	f	typeref:typename:bool
twr_spirit1_get_rx_buffer	twr/src/twr_spirit1.c	/^void *twr_spirit1_get_rx_buffer(void)$/;"	f	typeref:typename:void *
twr_spirit1_get_rx_length	twr/src/twr_spirit1.c	/^size_t twr_spirit1_get_rx_length(void)$/;"	f	typeref:typename:size_t
twr_spirit1_get_rx_rssi	twr/src/twr_spirit1.c	/^int twr_spirit1_get_rx_rssi(void)$/;"	f	typeref:typename:int
twr_spirit1_get_tx_buffer	twr/src/twr_spirit1.c	/^void *twr_spirit1_get_tx_buffer(void)$/;"	f	typeref:typename:void *
twr_spirit1_get_tx_length	twr/src/twr_spirit1.c	/^size_t twr_spirit1_get_tx_length(void)$/;"	f	typeref:typename:size_t
twr_spirit1_hal_chip_select_high	twr/src/twr_spirit1.c	/^void twr_spirit1_hal_chip_select_high(void)$/;"	f	typeref:typename:void
twr_spirit1_hal_chip_select_low	twr/src/twr_spirit1.c	/^void twr_spirit1_hal_chip_select_low(void)$/;"	f	typeref:typename:void
twr_spirit1_hal_deinit_gpio	twr/src/twr_spirit1.c	/^static void twr_spirit1_hal_deinit_gpio(void)$/;"	f	typeref:typename:void	file:
twr_spirit1_hal_deinit_spi	twr/src/twr_spirit1.c	/^static void twr_spirit1_hal_deinit_spi(void)$/;"	f	typeref:typename:void	file:
twr_spirit1_hal_init	twr/src/twr_spirit1.c	/^void twr_spirit1_hal_init(void)$/;"	f	typeref:typename:void
twr_spirit1_hal_init_gpio	twr/src/twr_spirit1.c	/^static void twr_spirit1_hal_init_gpio(void)$/;"	f	typeref:typename:void	file:
twr_spirit1_hal_init_spi	twr/src/twr_spirit1.c	/^static void twr_spirit1_hal_init_spi(void)$/;"	f	typeref:typename:void	file:
twr_spirit1_hal_shutdown_high	twr/src/twr_spirit1.c	/^void twr_spirit1_hal_shutdown_high(void)$/;"	f	typeref:typename:void
twr_spirit1_hal_shutdown_low	twr/src/twr_spirit1.c	/^void twr_spirit1_hal_shutdown_low(void)$/;"	f	typeref:typename:void
twr_spirit1_hal_transfer_byte	twr/src/twr_spirit1.c	/^uint8_t twr_spirit1_hal_transfer_byte(uint8_t value)$/;"	f	typeref:typename:uint8_t
twr_spirit1_init	twr/src/twr_spirit1.c	/^bool twr_spirit1_init(void)$/;"	f	typeref:typename:bool
twr_spirit1_read	twr/src/twr_spirit1.c	/^twr_spirit_status_t twr_spirit1_read(uint8_t address, void *buffer, size_t length)$/;"	f	typeref:typename:twr_spirit_status_t
twr_spirit1_rx	twr/src/twr_spirit1.c	/^void twr_spirit1_rx(void)$/;"	f	typeref:typename:void
twr_spirit1_set_event_handler	twr/src/twr_spirit1.c	/^void twr_spirit1_set_event_handler(void (*event_handler)(twr_spirit1_event_t, void *), void *eve/;"	f	typeref:typename:void
twr_spirit1_set_rx_timeout	twr/src/twr_spirit1.c	/^void twr_spirit1_set_rx_timeout(twr_tick_t timeout)$/;"	f	typeref:typename:void
twr_spirit1_set_tx_length	twr/src/twr_spirit1.c	/^void twr_spirit1_set_tx_length(size_t length)$/;"	f	typeref:typename:void
twr_spirit1_sleep	twr/src/twr_spirit1.c	/^void twr_spirit1_sleep(void)$/;"	f	typeref:typename:void
twr_spirit1_tx	twr/src/twr_spirit1.c	/^void twr_spirit1_tx(void)$/;"	f	typeref:typename:void
twr_spirit1_write	twr/src/twr_spirit1.c	/^twr_spirit_status_t twr_spirit1_write(uint8_t address, const void *buffer, size_t length)$/;"	f	typeref:typename:twr_spirit_status_t
twr_sps30_get_mass_concentration	twr/src/twr_sps30.c	/^bool twr_sps30_get_mass_concentration(twr_sps30_t *self, twr_sps30_mass_concentration_t *mass_co/;"	f	typeref:typename:bool
twr_sps30_get_number_concentration	twr/src/twr_sps30.c	/^bool twr_sps30_get_number_concentration(twr_sps30_t *self, twr_sps30_number_concentration_t *num/;"	f	typeref:typename:bool
twr_sps30_get_typical_particle_size	twr/src/twr_sps30.c	/^bool twr_sps30_get_typical_particle_size(twr_sps30_t *self, float *typical_particle_size)$/;"	f	typeref:typename:bool
twr_sps30_init	twr/src/twr_sps30.c	/^void twr_sps30_init(twr_sps30_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_sps30_measure	twr/src/twr_sps30.c	/^bool twr_sps30_measure(twr_sps30_t *self)$/;"	f	typeref:typename:bool
twr_sps30_set_event_handler	twr/src/twr_sps30.c	/^void twr_sps30_set_event_handler(twr_sps30_t *self, void (*event_handler)(twr_sps30_t *, twr_sps/;"	f	typeref:typename:void
twr_sps30_set_startup_time	twr/src/twr_sps30.c	/^void twr_sps30_set_startup_time(twr_sps30_t *self, twr_tick_t startup_time)$/;"	f	typeref:typename:void
twr_sps30_set_update_interval	twr/src/twr_sps30.c	/^void twr_sps30_set_update_interval(twr_sps30_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_ssd1306_clear	twr/src/twr_ssd1306.c	/^void twr_ssd1306_clear(twr_ssd1306_t *self)$/;"	f	typeref:typename:void
twr_ssd1306_draw_pixel	twr/src/twr_ssd1306.c	/^void twr_ssd1306_draw_pixel(twr_ssd1306_t *self, int x, int y, uint32_t color)$/;"	f	typeref:typename:void
twr_ssd1306_get_caps	twr/src/twr_ssd1306.c	/^twr_gfx_caps_t twr_ssd1306_get_caps(twr_ssd1306_t *self)$/;"	f	typeref:typename:twr_gfx_caps_t
twr_ssd1306_get_driver	twr/src/twr_ssd1306.c	/^const twr_gfx_driver_t *twr_ssd1306_get_driver(void)$/;"	f	typeref:typename:const twr_gfx_driver_t *
twr_ssd1306_get_pixel	twr/src/twr_ssd1306.c	/^uint32_t twr_ssd1306_get_pixel(twr_ssd1306_t *self, int x, int y)$/;"	f	typeref:typename:uint32_t
twr_ssd1306_init	twr/src/twr_ssd1306.c	/^bool twr_ssd1306_init(twr_ssd1306_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address, c/;"	f	typeref:typename:bool
twr_ssd1306_is_ready	twr/src/twr_ssd1306.c	/^bool twr_ssd1306_is_ready(twr_ssd1306_t *self)$/;"	f	typeref:typename:bool
twr_ssd1306_update	twr/src/twr_ssd1306.c	/^bool twr_ssd1306_update(twr_ssd1306_t *self)$/;"	f	typeref:typename:bool
twr_switch_get_state	twr/src/twr_switch.c	/^bool twr_switch_get_state(twr_switch_t *self)$/;"	f	typeref:typename:bool
twr_switch_init	twr/src/twr_switch.c	/^void twr_switch_init(twr_switch_t *self, twr_gpio_channel_t channel, twr_switch_type_t type, twr/;"	f	typeref:typename:void
twr_switch_set_debounce_time	twr/src/twr_switch.c	/^void twr_switch_set_debounce_time(twr_switch_t *self, twr_tick_t debounce_time)$/;"	f	typeref:typename:void
twr_switch_set_event_handler	twr/src/twr_switch.c	/^void twr_switch_set_event_handler(twr_switch_t *self, void (*event_handler)(twr_switch_t *, twr_/;"	f	typeref:typename:void
twr_switch_set_pull_advance_time	twr/src/twr_switch.c	/^void twr_switch_set_pull_advance_time(twr_switch_t *self, uint16_t pull_advance_time_us)$/;"	f	typeref:typename:void
twr_switch_set_scan_interval	twr/src/twr_switch.c	/^void twr_switch_set_scan_interval(twr_switch_t *self, twr_tick_t scan_interval)$/;"	f	typeref:typename:void
twr_system_clock_get	twr/src/twr_system.c	/^twr_system_clock_t twr_system_clock_get(void)$/;"	f	typeref:typename:twr_system_clock_t
twr_system_deep_sleep_disable	twr/src/twr_system.c	/^void twr_system_deep_sleep_disable(void)$/;"	f	typeref:typename:void
twr_system_deep_sleep_enable	twr/src/twr_system.c	/^void twr_system_deep_sleep_enable(void)$/;"	f	typeref:typename:void
twr_system_enter_standby_mode	twr/src/twr_system.c	/^void twr_system_enter_standby_mode(void)$/;"	f	typeref:typename:void
twr_system_error	twr/src/twr_system.c	/^__attribute__((weak)) void twr_system_error(void)$/;"	f	typeref:typename:void
twr_system_get_clock	twr/src/twr_system.c	/^uint32_t twr_system_get_clock(void)$/;"	f	typeref:typename:uint32_t
twr_system_get_vbus_sense	twr/src/twr_system.c	/^bool twr_system_get_vbus_sense(void)$/;"	f	typeref:typename:bool
twr_system_hsi16_disable	twr/src/twr_system.c	/^void twr_system_hsi16_disable(void)$/;"	f	typeref:typename:void
twr_system_hsi16_enable	twr/src/twr_system.c	/^void twr_system_hsi16_enable(void)$/;"	f	typeref:typename:void
twr_system_init	twr/src/twr_system.c	/^void twr_system_init(void)$/;"	f	typeref:typename:void
twr_system_pll_disable	twr/src/twr_system.c	/^void twr_system_pll_disable(void)$/;"	f	typeref:typename:void
twr_system_pll_enable	twr/src/twr_system.c	/^void twr_system_pll_enable(void)$/;"	f	typeref:typename:void
twr_system_reset	twr/src/twr_system.c	/^void twr_system_reset(void)$/;"	f	typeref:typename:void
twr_system_sleep	twr/inc/twr_system.h	/^static inline void twr_system_sleep(void)$/;"	f	typeref:typename:void
twr_tag_barometer_get_altitude_meter	twr/src/twr_tag_barometer.c	/^bool twr_tag_barometer_get_altitude_meter(twr_tag_barometer_t *self, float *meter)$/;"	f	typeref:typename:bool
twr_tag_barometer_get_pressure_pascal	twr/src/twr_tag_barometer.c	/^bool twr_tag_barometer_get_pressure_pascal(twr_tag_barometer_t *self, float *pascal)$/;"	f	typeref:typename:bool
twr_tag_barometer_init	twr/src/twr_tag_barometer.c	/^void twr_tag_barometer_init(twr_tag_barometer_t *self, twr_i2c_channel_t i2c_channel)$/;"	f	typeref:typename:void
twr_tag_barometer_measure	twr/src/twr_tag_barometer.c	/^bool twr_tag_barometer_measure(twr_tag_barometer_t *self)$/;"	f	typeref:typename:bool
twr_tag_barometer_set_event_handler	twr/src/twr_tag_barometer.c	/^void twr_tag_barometer_set_event_handler(twr_tag_barometer_t *self, void (*event_handler)(twr_ta/;"	f	typeref:typename:void
twr_tag_barometer_set_update_interval	twr/src/twr_tag_barometer.c	/^void twr_tag_barometer_set_update_interval(twr_tag_barometer_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tag_humidity_get_humidity_percentage	twr/src/twr_tag_humidity.c	/^bool twr_tag_humidity_get_humidity_percentage(twr_tag_humidity_t *self, float *percentage)$/;"	f	typeref:typename:bool
twr_tag_humidity_get_humidity_raw	twr/src/twr_tag_humidity.c	/^bool twr_tag_humidity_get_humidity_raw(twr_tag_humidity_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_tag_humidity_get_temperature_celsius	twr/src/twr_tag_humidity.c	/^bool twr_tag_humidity_get_temperature_celsius(twr_tag_humidity_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_tag_humidity_get_temperature_raw	twr/src/twr_tag_humidity.c	/^bool twr_tag_humidity_get_temperature_raw(twr_tag_humidity_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_tag_humidity_init	twr/src/twr_tag_humidity.c	/^void twr_tag_humidity_init(twr_tag_humidity_t *self, twr_tag_humidity_revision_t revision, twr_i/;"	f	typeref:typename:void
twr_tag_humidity_measure	twr/src/twr_tag_humidity.c	/^bool twr_tag_humidity_measure(twr_tag_humidity_t *self)$/;"	f	typeref:typename:bool
twr_tag_humidity_set_event_handler	twr/src/twr_tag_humidity.c	/^void twr_tag_humidity_set_event_handler(twr_tag_humidity_t *self, void (*event_handler)(twr_tag_/;"	f	typeref:typename:void
twr_tag_humidity_set_update_interval	twr/src/twr_tag_humidity.c	/^void twr_tag_humidity_set_update_interval(twr_tag_humidity_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tag_lux_meter_get_illuminance_lux	twr/src/twr_tag_lux_meter.c	/^bool twr_tag_lux_meter_get_illuminance_lux(twr_tag_lux_meter_t *self, float *lux)$/;"	f	typeref:typename:bool
twr_tag_lux_meter_get_illuminance_raw	twr/src/twr_tag_lux_meter.c	/^bool twr_tag_lux_meter_get_illuminance_raw(twr_tag_lux_meter_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_tag_lux_meter_init	twr/src/twr_tag_lux_meter.c	/^void twr_tag_lux_meter_init(twr_tag_lux_meter_t *self, twr_i2c_channel_t i2c_channel, twr_tag_lu/;"	f	typeref:typename:void
twr_tag_lux_meter_measure	twr/src/twr_tag_lux_meter.c	/^bool twr_tag_lux_meter_measure(twr_tag_lux_meter_t *self)$/;"	f	typeref:typename:bool
twr_tag_lux_meter_set_event_handler	twr/src/twr_tag_lux_meter.c	/^void twr_tag_lux_meter_set_event_handler(twr_tag_lux_meter_t *self, void (*event_handler)(twr_ta/;"	f	typeref:typename:void
twr_tag_lux_meter_set_update_interval	twr/src/twr_tag_lux_meter.c	/^void twr_tag_lux_meter_set_update_interval(twr_tag_lux_meter_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tag_nfc_init	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_init(twr_tag_nfc_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:bool
twr_tag_nfc_memory_read	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_memory_read(twr_tag_nfc_t *self, void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_tag_nfc_memory_write	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_memory_write(twr_tag_nfc_t *self, void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_tag_nfc_memory_write_ndef	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_memory_write_ndef(twr_tag_nfc_t *self, twr_tag_nfc_ndef_t *ndef)$/;"	f	typeref:typename:bool
twr_tag_nfc_ndef_add_text	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_ndef_add_text(twr_tag_nfc_ndef_t *self, const char *text, const char *encoding)$/;"	f	typeref:typename:bool
twr_tag_nfc_ndef_add_uri	twr/src/twr_tag_nfc.c	/^bool twr_tag_nfc_ndef_add_uri(twr_tag_nfc_ndef_t *self, const char *uri)$/;"	f	typeref:typename:bool
twr_tag_nfc_ndef_init	twr/src/twr_tag_nfc.c	/^void twr_tag_nfc_ndef_init(twr_tag_nfc_ndef_t *self)$/;"	f	typeref:typename:void
twr_tag_temperature_get_temperature_celsius	twr/src/twr_tag_temperature.c	/^bool twr_tag_temperature_get_temperature_celsius(twr_tag_temperature_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_tag_temperature_get_temperature_fahrenheit	twr/src/twr_tag_temperature.c	/^bool twr_tag_temperature_get_temperature_fahrenheit(twr_tag_temperature_t *self, float *fahrenhe/;"	f	typeref:typename:bool
twr_tag_temperature_get_temperature_kelvin	twr/src/twr_tag_temperature.c	/^bool twr_tag_temperature_get_temperature_kelvin(twr_tag_temperature_t *self, float *kelvin)$/;"	f	typeref:typename:bool
twr_tag_temperature_get_temperature_raw	twr/src/twr_tag_temperature.c	/^bool twr_tag_temperature_get_temperature_raw(twr_tag_temperature_t *self, int16_t *raw)$/;"	f	typeref:typename:bool
twr_tag_temperature_init	twr/src/twr_tag_temperature.c	/^void twr_tag_temperature_init(twr_tag_temperature_t *self, twr_i2c_channel_t i2c_channel, twr_ta/;"	f	typeref:typename:void
twr_tag_temperature_measure	twr/src/twr_tag_temperature.c	/^bool twr_tag_temperature_measure(twr_tag_temperature_t *self)$/;"	f	typeref:typename:bool
twr_tag_temperature_set_event_handler	twr/src/twr_tag_temperature.c	/^void twr_tag_temperature_set_event_handler(twr_tag_temperature_t *self, void (*event_handler)(tw/;"	f	typeref:typename:void
twr_tag_temperature_set_update_interval	twr/src/twr_tag_temperature.c	/^void twr_tag_temperature_set_update_interval(twr_tag_temperature_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tag_voc_get_co2eq_ppm	twr/src/twr_tag_voc.c	/^bool twr_tag_voc_get_co2eq_ppm(twr_tag_voc_t *self, uint16_t *ppm)$/;"	f	typeref:typename:bool
twr_tag_voc_get_tvoc_ppb	twr/src/twr_tag_voc.c	/^bool twr_tag_voc_get_tvoc_ppb(twr_tag_voc_t *self, uint16_t *ppb)$/;"	f	typeref:typename:bool
twr_tag_voc_init	twr/src/twr_tag_voc.c	/^void twr_tag_voc_init(twr_tag_voc_t *self, twr_i2c_channel_t i2c_channel)$/;"	f	typeref:typename:void
twr_tag_voc_lp_get_tvoc_ppb	twr/src/twr_tag_voc_lp.c	/^bool twr_tag_voc_lp_get_tvoc_ppb(twr_tag_voc_lp_t *self, uint16_t *ppb)$/;"	f	typeref:typename:bool
twr_tag_voc_lp_init	twr/src/twr_tag_voc_lp.c	/^void twr_tag_voc_lp_init(twr_tag_voc_lp_t *self, twr_i2c_channel_t i2c_channel)$/;"	f	typeref:typename:void
twr_tag_voc_lp_measure	twr/src/twr_tag_voc_lp.c	/^bool twr_tag_voc_lp_measure(twr_tag_voc_lp_t *self)$/;"	f	typeref:typename:bool
twr_tag_voc_lp_set_compensation	twr/src/twr_tag_voc_lp.c	/^float twr_tag_voc_lp_set_compensation(twr_tag_voc_lp_t *self, float *t_celsius, float *rh_percen/;"	f	typeref:typename:float
twr_tag_voc_lp_set_event_handler	twr/src/twr_tag_voc_lp.c	/^void twr_tag_voc_lp_set_event_handler(twr_tag_voc_lp_t *self, void (*event_handler)(twr_tag_voc_/;"	f	typeref:typename:void
twr_tag_voc_lp_set_update_interval	twr/src/twr_tag_voc_lp.c	/^void twr_tag_voc_lp_set_update_interval(twr_tag_voc_lp_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tag_voc_measure	twr/src/twr_tag_voc.c	/^bool twr_tag_voc_measure(twr_tag_voc_t *self)$/;"	f	typeref:typename:bool
twr_tag_voc_set_compensation	twr/src/twr_tag_voc.c	/^float twr_tag_voc_set_compensation(twr_tag_voc_t *self, float *t_celsius, float *rh_percentage)$/;"	f	typeref:typename:float
twr_tag_voc_set_event_handler	twr/src/twr_tag_voc.c	/^void twr_tag_voc_set_event_handler(twr_tag_voc_t *self, void (*event_handler)(twr_tag_voc_t *, t/;"	f	typeref:typename:void
twr_tag_voc_set_update_interval	twr/src/twr_tag_voc.c	/^void twr_tag_voc_set_update_interval(twr_tag_voc_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_tca9534a_get_pin_direction	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_get_pin_direction(twr_tca9534a_t *self, twr_tca9534a_pin_t pin, twr_tca9534a_p/;"	f	typeref:typename:bool
twr_tca9534a_get_port_direction	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_get_port_direction(twr_tca9534a_t *self, uint8_t *direction)$/;"	f	typeref:typename:bool
twr_tca9534a_init	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_init(twr_tca9534a_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:bool
twr_tca9534a_read_pin	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_read_pin(twr_tca9534a_t *self, twr_tca9534a_pin_t pin, int *value)$/;"	f	typeref:typename:bool
twr_tca9534a_read_port	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_read_port(twr_tca9534a_t *self, uint8_t *value)$/;"	f	typeref:typename:bool
twr_tca9534a_set_pin_direction	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_set_pin_direction(twr_tca9534a_t *self, twr_tca9534a_pin_t pin, twr_tca9534a_p/;"	f	typeref:typename:bool
twr_tca9534a_set_port_direction	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_set_port_direction(twr_tca9534a_t *self, uint8_t direction)$/;"	f	typeref:typename:bool
twr_tca9534a_write_pin	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_write_pin(twr_tca9534a_t *self, twr_tca9534a_pin_t pin, int value)$/;"	f	typeref:typename:bool
twr_tca9534a_write_port	twr/src/twr_tca9534a.c	/^bool twr_tca9534a_write_port(twr_tca9534a_t *self, uint8_t value)$/;"	f	typeref:typename:bool
twr_td1207r_init	twr/src/twr_td1207r.c	/^void twr_td1207r_init(twr_td1207r_t *self, twr_gpio_channel_t reset_signal, twr_uart_channel_t u/;"	f	typeref:typename:void
twr_td1207r_is_ready	twr/src/twr_td1207r.c	/^bool twr_td1207r_is_ready(twr_td1207r_t *self)$/;"	f	typeref:typename:bool
twr_td1207r_send_rf_frame	twr/src/twr_td1207r.c	/^bool twr_td1207r_send_rf_frame(twr_td1207r_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_td1207r_set_event_handler	twr/src/twr_td1207r.c	/^void twr_td1207r_set_event_handler(twr_td1207r_t *self, void (*event_handler)(twr_td1207r_t *, t/;"	f	typeref:typename:void
twr_tick_get	twr/src/twr_tick.c	/^twr_tick_t twr_tick_get(void)$/;"	f	typeref:typename:twr_tick_t
twr_tick_increment_irq	twr/src/twr_tick.c	/^void twr_tick_increment_irq(twr_tick_t delta)$/;"	f	typeref:typename:void
twr_tick_wait	twr/src/twr_tick.c	/^void twr_tick_wait(twr_tick_t delay)$/;"	f	typeref:typename:void
twr_timer_clear	twr/src/twr_timer.c	/^inline void twr_timer_clear(void)$/;"	f	typeref:typename:void
twr_timer_clear_irq_handler	twr/src/twr_timer.c	/^void twr_timer_clear_irq_handler(TIM_TypeDef *tim)$/;"	f	typeref:typename:void
twr_timer_delay	twr/src/twr_timer.c	/^inline void twr_timer_delay(uint16_t microseconds)$/;"	f	typeref:typename:void
twr_timer_get_microseconds	twr/src/twr_timer.c	/^inline uint16_t twr_timer_get_microseconds(void)$/;"	f	typeref:typename:uint16_t
twr_timer_init	twr/src/twr_timer.c	/^inline void twr_timer_init(void)$/;"	f	typeref:typename:void
twr_timer_set_irq_handler	twr/src/twr_timer.c	/^bool twr_timer_set_irq_handler(TIM_TypeDef *tim, void (*irq_handler)(void *), void *irq_param)$/;"	f	typeref:typename:bool
twr_timer_start	twr/src/twr_timer.c	/^inline void twr_timer_start(void)$/;"	f	typeref:typename:void
twr_timer_stop	twr/src/twr_timer.c	/^inline void twr_timer_stop(void)$/;"	f	typeref:typename:void
twr_tmp112_deinit	twr/src/twr_tmp112.c	/^void twr_tmp112_deinit(twr_tmp112_t *self)$/;"	f	typeref:typename:void
twr_tmp112_get_temperature_celsius	twr/src/twr_tmp112.c	/^bool twr_tmp112_get_temperature_celsius(twr_tmp112_t *self, float *celsius)$/;"	f	typeref:typename:bool
twr_tmp112_get_temperature_fahrenheit	twr/src/twr_tmp112.c	/^bool twr_tmp112_get_temperature_fahrenheit(twr_tmp112_t *self, float *fahrenheit)$/;"	f	typeref:typename:bool
twr_tmp112_get_temperature_kelvin	twr/src/twr_tmp112.c	/^bool twr_tmp112_get_temperature_kelvin(twr_tmp112_t *self, float *kelvin)$/;"	f	typeref:typename:bool
twr_tmp112_get_temperature_raw	twr/src/twr_tmp112.c	/^bool twr_tmp112_get_temperature_raw(twr_tmp112_t *self, int16_t *raw)$/;"	f	typeref:typename:bool
twr_tmp112_init	twr/src/twr_tmp112.c	/^void twr_tmp112_init(twr_tmp112_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:void
twr_tmp112_measure	twr/src/twr_tmp112.c	/^bool twr_tmp112_measure(twr_tmp112_t *self)$/;"	f	typeref:typename:bool
twr_tmp112_set_event_handler	twr/src/twr_tmp112.c	/^void twr_tmp112_set_event_handler(twr_tmp112_t *self, void (*event_handler)(twr_tmp112_t *, twr_/;"	f	typeref:typename:void
twr_tmp112_set_update_interval	twr/src/twr_tmp112.c	/^void twr_tmp112_set_update_interval(twr_tmp112_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_uart_async_read	twr/src/twr_uart.c	/^size_t twr_uart_async_read(twr_uart_channel_t channel, void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_uart_async_read_cancel	twr/src/twr_uart.c	/^bool twr_uart_async_read_cancel(twr_uart_channel_t channel)$/;"	f	typeref:typename:bool
twr_uart_async_read_start	twr/src/twr_uart.c	/^bool twr_uart_async_read_start(twr_uart_channel_t channel, twr_tick_t timeout)$/;"	f	typeref:typename:bool
twr_uart_async_write	twr/src/twr_uart.c	/^size_t twr_uart_async_write(twr_uart_channel_t channel, const void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_uart_deinit	twr/src/twr_uart.c	/^void twr_uart_deinit(twr_uart_channel_t channel)$/;"	f	typeref:typename:void
twr_uart_init	twr/src/twr_uart.c	/^void twr_uart_init(twr_uart_channel_t channel, twr_uart_baudrate_t baudrate, twr_uart_setting_t /;"	f	typeref:typename:void
twr_uart_read	twr/src/twr_uart.c	/^size_t twr_uart_read(twr_uart_channel_t channel, void *buffer, size_t length, twr_tick_t timeout/;"	f	typeref:typename:size_t
twr_uart_set_async_fifo	twr/src/twr_uart.c	/^void twr_uart_set_async_fifo(twr_uart_channel_t channel, twr_fifo_t *write_fifo, twr_fifo_t *rea/;"	f	typeref:typename:void
twr_uart_set_event_handler	twr/src/twr_uart.c	/^void twr_uart_set_event_handler(twr_uart_channel_t channel, void (*event_handler)(twr_uart_chann/;"	f	typeref:typename:void
twr_uart_write	twr/src/twr_uart.c	/^size_t twr_uart_write(twr_uart_channel_t channel, const void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_usb_cdc_init	twr/src/twr_usb_cdc.c	/^void twr_usb_cdc_init(void)$/;"	f	typeref:typename:void
twr_usb_cdc_read	twr/src/twr_usb_cdc.c	/^size_t twr_usb_cdc_read(void *buffer, size_t length)$/;"	f	typeref:typename:size_t
twr_usb_cdc_received_data	twr/src/twr_usb_cdc.c	/^void twr_usb_cdc_received_data(const void *buffer, size_t length)$/;"	f	typeref:typename:void
twr_usb_cdc_write	twr/src/twr_usb_cdc.c	/^bool twr_usb_cdc_write(const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_watchdog_init	twr/src/twr_watchdog.c	/^void twr_watchdog_init(twr_watchdog_time_t twr_watchdog_time)$/;"	f	typeref:typename:void
twr_watchdog_refresh	twr/src/twr_watchdog.c	/^void twr_watchdog_refresh()$/;"	f	typeref:typename:void
twr_ws2812b_init	twr/src/twr_ws2812b.c	/^bool twr_ws2812b_init(const twr_led_strip_buffer_t *led_strip)$/;"	f	typeref:typename:bool
twr_ws2812b_is_ready	twr/src/twr_ws2812b.c	/^bool twr_ws2812b_is_ready(void)$/;"	f	typeref:typename:bool
twr_ws2812b_set_event_handler	twr/src/twr_ws2812b.c	/^void twr_ws2812b_set_event_handler(void (*event_handler)(twr_ws2812b_event_t, void *), void *eve/;"	f	typeref:typename:void
twr_ws2812b_set_pixel_from_rgb	twr/src/twr_ws2812b.c	/^void twr_ws2812b_set_pixel_from_rgb(int position, uint8_t red, uint8_t green, uint8_t blue, uint/;"	f	typeref:typename:void
twr_ws2812b_set_pixel_from_rgb_swap_rg	twr/src/twr_ws2812b.c	/^void twr_ws2812b_set_pixel_from_rgb_swap_rg(int position, uint8_t red, uint8_t green, uint8_t bl/;"	f	typeref:typename:void
twr_ws2812b_set_pixel_from_uint32	twr/src/twr_ws2812b.c	/^void twr_ws2812b_set_pixel_from_uint32(int position, uint32_t color)$/;"	f	typeref:typename:void
twr_ws2812b_set_pixel_from_uint32_swap_rg	twr/src/twr_ws2812b.c	/^void twr_ws2812b_set_pixel_from_uint32_swap_rg(int position, uint32_t color)$/;"	f	typeref:typename:void
twr_ws2812b_write	twr/src/twr_ws2812b.c	/^bool twr_ws2812b_write(void)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_continuous_wave	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_continuous_wave(twr_wssfm10r1at_t *self)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_get_device_id	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_get_device_id(twr_wssfm10r1at_t *self, char *buffer, size_t buffer_size)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_get_device_pac	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_get_device_pac(twr_wssfm10r1at_t *self, char *buffer, size_t buffer_size)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_init	twr/src/twr_wssfm10r1at.c	/^void twr_wssfm10r1at_init(twr_wssfm10r1at_t *self, twr_gpio_channel_t reset_signal, twr_uart_cha/;"	f	typeref:typename:void
twr_wssfm10r1at_is_ready	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_is_ready(twr_wssfm10r1at_t *self)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_read_device_id	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_read_device_id(twr_wssfm10r1at_t *self)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_read_device_pac	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_read_device_pac(twr_wssfm10r1at_t *self)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_send_rf_frame	twr/src/twr_wssfm10r1at.c	/^bool twr_wssfm10r1at_send_rf_frame(twr_wssfm10r1at_t *self, const void *buffer, size_t length)$/;"	f	typeref:typename:bool
twr_wssfm10r1at_set_event_handler	twr/src/twr_wssfm10r1at.c	/^void twr_wssfm10r1at_set_event_handler(twr_wssfm10r1at_t *self, void (*event_handler)(twr_wssfm1/;"	f	typeref:typename:void
twr_zssc3123_deinit	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_deinit(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool
twr_zssc3123_eeprom_read	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_eeprom_read(twr_zssc3123_t *self, uint8_t adr, uint16_t *word)$/;"	f	typeref:typename:bool
twr_zssc3123_eeprom_write	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_eeprom_write(twr_zssc3123_t *self, uint8_t address, uint16_t word)$/;"	f	typeref:typename:bool
twr_zssc3123_end_cm	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_end_cm(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool
twr_zssc3123_get_raw_cap_data	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_get_raw_cap_data(twr_zssc3123_t *self, uint16_t *raw)$/;"	f	typeref:typename:bool
twr_zssc3123_init	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_init(twr_zssc3123_t *self, twr_i2c_channel_t i2c_channel, uint8_t i2c_address)$/;"	f	typeref:typename:bool
twr_zssc3123_measure	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_measure(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool
twr_zssc3123_set_data_fetch_delay	twr/src/twr_zssc3123.c	/^void twr_zssc3123_set_data_fetch_delay(twr_zssc3123_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_zssc3123_set_event_handler	twr/src/twr_zssc3123.c	/^void twr_zssc3123_set_event_handler(twr_zssc3123_t *self, void (*event_handler)(twr_zssc3123_t */;"	f	typeref:typename:void
twr_zssc3123_set_update_interval	twr/src/twr_zssc3123.c	/^void twr_zssc3123_set_update_interval(twr_zssc3123_t *self, twr_tick_t interval)$/;"	f	typeref:typename:void
twr_zssc3123_start_cm	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_start_cm(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool
twr_zssc3123_unlock_eeprom	twr/src/twr_zssc3123.c	/^bool twr_zssc3123_unlock_eeprom(twr_zssc3123_t *self)$/;"	f	typeref:typename:bool
