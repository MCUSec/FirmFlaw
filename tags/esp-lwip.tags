ChallengeHash	netif/ppp/chap_ms.c	/^static void ChallengeHash(const u_char PeerChallenge[16], const u_char *rchallenge,$/;"	f	typeref:typename:void	file:
ChallengeResponse	netif/ppp/chap_ms.c	/^static void ChallengeResponse(const u_char *challenge,$/;"	f	typeref:typename:void	file:
ChapMS	netif/ppp/chap_ms.c	/^static void ChapMS(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret_len,$/;"	f	typeref:typename:void	file:
ChapMS2	netif/ppp/chap_ms.c	/^static void ChapMS2(ppp_pcb *pcb, const u_char *rchallenge, const u_char *PeerChallenge,$/;"	f	typeref:typename:void	file:
ChapMS2_NT	netif/ppp/chap_ms.c	/^static void ChapMS2_NT(const u_char *rchallenge, const u_char PeerChallenge[16], const char *use/;"	f	typeref:typename:void	file:
ChapMS_LANMan	netif/ppp/chap_ms.c	/^static void ChapMS_LANMan(u_char *rchallenge, char *secret, int secret_len,$/;"	f	typeref:typename:void	file:
ChapMS_NT	netif/ppp/chap_ms.c	/^static void ChapMS_NT(const u_char *rchallenge, const char *secret, int secret_len,$/;"	f	typeref:typename:void	file:
GenerateAuthenticatorResponse	netif/ppp/chap_ms.c	/^static void GenerateAuthenticatorResponse(const u_char PasswordHashHash[MD4_SIGNATURE_SIZE],$/;"	f	typeref:typename:void	file:
GenerateAuthenticatorResponsePlain	netif/ppp/chap_ms.c	/^static void GenerateAuthenticatorResponsePlain($/;"	f	typeref:typename:void	file:
LcpEchoCheck	netif/ppp/lcp.c	/^static void LcpEchoCheck(fsm *f) {$/;"	f	typeref:typename:void	file:
LcpEchoTimeout	netif/ppp/lcp.c	/^static void LcpEchoTimeout(void *arg) {$/;"	f	typeref:typename:void	file:
LcpLinkFailure	netif/ppp/lcp.c	/^static void LcpLinkFailure(fsm *f) {$/;"	f	typeref:typename:void	file:
LcpSendEchoRequest	netif/ppp/lcp.c	/^static void LcpSendEchoRequest(fsm *f) {$/;"	f	typeref:typename:void	file:
NETIF_DECLARE_EXT_CALLBACK	apps/mdns/mdns.c	/^NETIF_DECLARE_EXT_CALLBACK(netif_callback)$/;"	f	file:
NTPasswordHash	netif/ppp/chap_ms.c	/^static void NTPasswordHash(u_char *secret, int secret_len, u_char hash[MD4_SIGNATURE_SIZE]) {$/;"	f	typeref:typename:void	file:
SetMasterKeys	netif/ppp/chap_ms.c	/^static void SetMasterKeys(ppp_pcb *pcb, const char *secret, int secret_len, u_char NTResponse[24/;"	f	typeref:typename:void	file:
Set_Start_Key	netif/ppp/chap_ms.c	/^static void Set_Start_Key(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret/;"	f	typeref:typename:void	file:
_tinydir_dirent_buf_size	apps/http/makefsdata/tinydir.h	/^size_t _tinydir_dirent_buf_size(_TINYDIR_DIR *dirp)$/;"	f	typeref:typename:_TINYDIR_FUNC size_t
_tinydir_file_cmp	apps/http/makefsdata/tinydir.h	/^int _tinydir_file_cmp(const void *a, const void *b)$/;"	f	typeref:typename:_TINYDIR_FUNC int
_tinydir_get_ext	apps/http/makefsdata/tinydir.h	/^void _tinydir_get_ext(tinydir_file *file)$/;"	f	typeref:typename:_TINYDIR_FUNC void
accept	include/lwip/sockets.h	/^static inline int accept(int s,struct sockaddr *addr,socklen_t *addrlen)$/;"	f	typeref:typename:int
accept_function	api/api_msg.c	/^accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
active_packet	netif/ppp/demand.c	/^active_packet(p, len)$/;"	f	file:
alloc_socket	api/sockets.c	/^alloc_socket(struct netconn *newconn, int accepted)$/;"	f	typeref:typename:int	file:
altcp_abort	core/altcp.c	/^altcp_abort(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_accept	core/altcp.c	/^altcp_accept(struct altcp_pcb *conn, altcp_accept_fn accept)$/;"	f	typeref:typename:void
altcp_alloc	core/altcp.c	/^altcp_alloc(void)$/;"	f	typeref:struct:altcp_pcb *
altcp_arg	core/altcp.c	/^altcp_arg(struct altcp_pcb *conn, void *arg)$/;"	f	typeref:typename:void
altcp_bind	core/altcp.c	/^altcp_bind(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t
altcp_close	core/altcp.c	/^altcp_close(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t
altcp_connect	core/altcp.c	/^altcp_connect(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port, altcp_connected_fn co/;"	f	typeref:typename:err_t
altcp_dbg_get_tcp_state	core/altcp.c	/^altcp_dbg_get_tcp_state(struct altcp_pcb *conn)$/;"	f	typeref:enum:tcp_state
altcp_default_bind	core/altcp.c	/^altcp_default_bind(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t
altcp_default_dbg_get_tcp_state	core/altcp.c	/^altcp_default_dbg_get_tcp_state(struct altcp_pcb *conn)$/;"	f	typeref:enum:tcp_state
altcp_default_dealloc	core/altcp.c	/^altcp_default_dealloc(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_default_get_ip	core/altcp.c	/^altcp_default_get_ip(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:ip_addr_t *
altcp_default_get_port	core/altcp.c	/^altcp_default_get_port(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:u16_t
altcp_default_get_tcp_addrinfo	core/altcp.c	/^altcp_default_get_tcp_addrinfo(struct altcp_pcb *conn, int local, ip_addr_t *addr, u16_t *port)$/;"	f	typeref:typename:err_t
altcp_default_keepalive_disable	core/altcp.c	/^altcp_default_keepalive_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_default_keepalive_enable	core/altcp.c	/^altcp_default_keepalive_enable(struct altcp_pcb *conn, u32_t idle, u32_t intvl, u32_t count)$/;"	f	typeref:typename:void
altcp_default_mss	core/altcp.c	/^altcp_default_mss(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_default_nagle_disable	core/altcp.c	/^altcp_default_nagle_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_default_nagle_disabled	core/altcp.c	/^altcp_default_nagle_disabled(struct altcp_pcb *conn)$/;"	f	typeref:typename:int
altcp_default_nagle_enable	core/altcp.c	/^altcp_default_nagle_enable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_default_output	core/altcp.c	/^altcp_default_output(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t
altcp_default_recved	core/altcp.c	/^altcp_default_recved(struct altcp_pcb *conn, u16_t len)$/;"	f	typeref:typename:void
altcp_default_set_poll	core/altcp.c	/^altcp_default_set_poll(struct altcp_pcb *conn, u8_t interval)$/;"	f	typeref:typename:void
altcp_default_setprio	core/altcp.c	/^altcp_default_setprio(struct altcp_pcb *conn, u8_t prio)$/;"	f	typeref:typename:void
altcp_default_shutdown	core/altcp.c	/^altcp_default_shutdown(struct altcp_pcb *conn, int shut_rx, int shut_tx)$/;"	f	typeref:typename:err_t
altcp_default_sndbuf	core/altcp.c	/^altcp_default_sndbuf(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_default_sndqueuelen	core/altcp.c	/^altcp_default_sndqueuelen(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_default_write	core/altcp.c	/^altcp_default_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t
altcp_err	core/altcp.c	/^altcp_err(struct altcp_pcb *conn, altcp_err_fn err)$/;"	f	typeref:typename:void
altcp_free	core/altcp.c	/^altcp_free(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_get_ip	core/altcp.c	/^altcp_get_ip(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:ip_addr_t *
altcp_get_port	core/altcp.c	/^altcp_get_port(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:u16_t
altcp_get_tcp_addrinfo	core/altcp.c	/^altcp_get_tcp_addrinfo(struct altcp_pcb *conn, int local, ip_addr_t *addr, u16_t *port)$/;"	f	typeref:typename:err_t
altcp_keepalive_disable	core/altcp.c	/^altcp_keepalive_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_keepalive_enable	core/altcp.c	/^altcp_keepalive_enable(struct altcp_pcb *conn, u32_t idle, u32_t intvl, u32_t count)$/;"	f	typeref:typename:void
altcp_listen_with_backlog_and_err	core/altcp.c	/^altcp_listen_with_backlog_and_err(struct altcp_pcb *conn, u8_t backlog, err_t *err)$/;"	f	typeref:struct:altcp_pcb *
altcp_mbedtls_abort	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_abort(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_alloc	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^altcp_mbedtls_alloc(void *conf)$/;"	f	typeref:typename:altcp_mbedtls_state_t *
altcp_mbedtls_alloc_config	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^altcp_mbedtls_alloc_config(size_t size)$/;"	f	typeref:typename:void *
altcp_mbedtls_bio_recv	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_bio_recv(void *ctx, unsigned char *buf, size_t len)$/;"	f	typeref:typename:int	file:
altcp_mbedtls_bio_send	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_bio_send(void *ctx, const unsigned char *dataptr, size_t size)$/;"	f	typeref:typename:int	file:
altcp_mbedtls_close	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_close(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_connect	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_connect(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port, altcp_connect/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_dealloc	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_dealloc(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_debug	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_debug(void *ctx, int level, const char *file, int line, const char *str)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_free	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^altcp_mbedtls_free(void *conf, altcp_mbedtls_state_t *state)$/;"	f	typeref:typename:void
altcp_mbedtls_free_config	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^altcp_mbedtls_free_config(void *item)$/;"	f	typeref:typename:void
altcp_mbedtls_handle_rx_appldata	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_handle_rx_appldata(struct altcp_pcb *conn, altcp_mbedtls_state_t *state)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_listen	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_listen(struct altcp_pcb *conn, u8_t backlog, err_t *err)$/;"	f	typeref:struct:altcp_pcb *	file:
altcp_mbedtls_lower_accept	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_accept(void *arg, struct altcp_pcb *accepted_conn, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_lower_connected	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_connected(void *arg, struct altcp_pcb *inner_conn, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_lower_err	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_lower_poll	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_poll(void *arg, struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_lower_recv	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_recv(void *arg, struct altcp_pcb *inner_conn, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_lower_recv_process	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_recv_process(struct altcp_pcb *conn, altcp_mbedtls_state_t *state)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_lower_recved	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_recved(struct altcp_pcb *inner_conn, int recvd_cnt)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_lower_sent	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_lower_sent(void *arg, struct altcp_pcb *inner_conn, u16_t len)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_mem_init	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^altcp_mbedtls_mem_init(void)$/;"	f	typeref:typename:void
altcp_mbedtls_mss	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_mss(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t	file:
altcp_mbedtls_pass_rx_data	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_pass_rx_data(struct altcp_pcb *conn, altcp_mbedtls_state_t *state)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_recved	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_recved(struct altcp_pcb *conn, u16_t len)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_remove_callbacks	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_remove_callbacks(struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_set_poll	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_set_poll(struct altcp_pcb *conn, u8_t interval)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_setup	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_setup(void *conf, struct altcp_pcb *conn, struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:err_t	file:
altcp_mbedtls_setup_callbacks	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_setup_callbacks(struct altcp_pcb *conn, struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:void	file:
altcp_mbedtls_sndbuf	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_sndbuf(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t	file:
altcp_mbedtls_write	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_mbedtls_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
altcp_mss	core/altcp.c	/^altcp_mss(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_nagle_disable	core/altcp.c	/^altcp_nagle_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_nagle_disabled	core/altcp.c	/^altcp_nagle_disabled(struct altcp_pcb *conn)$/;"	f	typeref:typename:int
altcp_nagle_enable	core/altcp.c	/^altcp_nagle_enable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void
altcp_new	core/altcp.c	/^altcp_new(altcp_allocator_t *allocator)$/;"	f	typeref:struct:altcp_pcb *
altcp_new_ip6	core/altcp.c	/^altcp_new_ip6(altcp_allocator_t *allocator)$/;"	f	typeref:struct:altcp_pcb *
altcp_new_ip_type	core/altcp.c	/^altcp_new_ip_type(altcp_allocator_t *allocator, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_output	core/altcp.c	/^altcp_output(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t
altcp_poll	core/altcp.c	/^altcp_poll(struct altcp_pcb *conn, altcp_poll_fn poll, u8_t interval)$/;"	f	typeref:typename:void
altcp_proxyconnect_abort	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_abort(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_alloc	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_alloc(void *arg, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_proxyconnect_close	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_close(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_connect	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_connect(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port, altcp_co/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_dealloc	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_dealloc(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_format_request	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_format_request(char *buffer, size_t bufsize, const char *host, int port)$/;"	f	typeref:typename:int	file:
altcp_proxyconnect_listen	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_listen(struct altcp_pcb *conn, u8_t backlog, err_t *err)$/;"	f	typeref:struct:altcp_pcb *	file:
altcp_proxyconnect_lower_connected	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_lower_connected(void *arg, struct altcp_pcb *inner_conn, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_lower_err	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_lower_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_lower_poll	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_lower_poll(void *arg, struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_lower_recv	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_lower_recv(void *arg, struct altcp_pcb *inner_conn, struct pbuf *p, err_t err/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_lower_sent	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_lower_sent(void *arg, struct altcp_pcb *inner_conn, u16_t len)$/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_new	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_new(struct altcp_proxyconnect_config *config, struct altcp_pcb *inner_pcb)$/;"	f	typeref:struct:altcp_pcb *
altcp_proxyconnect_new_tcp	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_new_tcp(struct altcp_proxyconnect_config *config, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_proxyconnect_recved	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_recved(struct altcp_pcb *conn, u16_t len)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_send_request	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_send_request(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_set_poll	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_set_poll(struct altcp_pcb *conn, u8_t interval)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_setup	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_setup(struct altcp_proxyconnect_config *config, struct altcp_pcb *conn, struc/;"	f	typeref:typename:err_t	file:
altcp_proxyconnect_setup_callbacks	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_setup_callbacks(struct altcp_pcb *conn, struct altcp_pcb *inner_conn)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_state_alloc	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_state_alloc(void)$/;"	f	typeref:typename:altcp_proxyconnect_state_t *	file:
altcp_proxyconnect_state_free	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_state_free(altcp_proxyconnect_state_t *state)$/;"	f	typeref:typename:void	file:
altcp_proxyconnect_tls_alloc	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_tls_alloc(void *arg, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_proxyconnect_write	apps/http/altcp_proxyconnect.c	/^altcp_proxyconnect_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
altcp_recv	core/altcp.c	/^altcp_recv(struct altcp_pcb *conn, altcp_recv_fn recv)$/;"	f	typeref:typename:void
altcp_recved	core/altcp.c	/^altcp_recved(struct altcp_pcb *conn, u16_t len)$/;"	f	typeref:typename:void
altcp_sent	core/altcp.c	/^altcp_sent(struct altcp_pcb *conn, altcp_sent_fn sent)$/;"	f	typeref:typename:void
altcp_setprio	core/altcp.c	/^altcp_setprio(struct altcp_pcb *conn, u8_t prio)$/;"	f	typeref:typename:void
altcp_shutdown	core/altcp.c	/^altcp_shutdown(struct altcp_pcb *conn, int shut_rx, int shut_tx)$/;"	f	typeref:typename:err_t
altcp_sndbuf	core/altcp.c	/^altcp_sndbuf(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_sndqueuelen	core/altcp.c	/^altcp_sndqueuelen(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t
altcp_tcp_abort	core/altcp_tcp.c	/^altcp_tcp_abort(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_tcp_accept	core/altcp_tcp.c	/^altcp_tcp_accept(void *arg, struct tcp_pcb *new_tpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_alloc	core/altcp_tcp.c	/^altcp_tcp_alloc(void *arg, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_tcp_bind	core/altcp_tcp.c	/^altcp_tcp_bind(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_close	core/altcp_tcp.c	/^altcp_tcp_close(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_connect	core/altcp_tcp.c	/^altcp_tcp_connect(struct altcp_pcb *conn, const ip_addr_t *ipaddr, u16_t port, altcp_connected_f/;"	f	typeref:typename:err_t	file:
altcp_tcp_connected	core/altcp_tcp.c	/^altcp_tcp_connected(void *arg, struct tcp_pcb *tpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_dbg_get_tcp_state	core/altcp_tcp.c	/^altcp_tcp_dbg_get_tcp_state(struct altcp_pcb *conn)$/;"	f	typeref:enum:tcp_state	file:
altcp_tcp_dealloc	core/altcp_tcp.c	/^altcp_tcp_dealloc(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_tcp_err	core/altcp_tcp.c	/^altcp_tcp_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
altcp_tcp_get_ip	core/altcp_tcp.c	/^altcp_tcp_get_ip(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:ip_addr_t *	file:
altcp_tcp_get_port	core/altcp_tcp.c	/^altcp_tcp_get_port(struct altcp_pcb *conn, int local)$/;"	f	typeref:typename:u16_t	file:
altcp_tcp_get_tcp_addrinfo	core/altcp_tcp.c	/^altcp_tcp_get_tcp_addrinfo(struct altcp_pcb *conn, int local, ip_addr_t *addr, u16_t *port)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_keepalive_disable	core/altcp_tcp.c	/^altcp_tcp_keepalive_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_tcp_keepalive_enable	core/altcp_tcp.c	/^altcp_tcp_keepalive_enable(struct altcp_pcb *conn, u32_t idle, u32_t intvl, u32_t cnt)$/;"	f	typeref:typename:void	file:
altcp_tcp_listen	core/altcp_tcp.c	/^altcp_tcp_listen(struct altcp_pcb *conn, u8_t backlog, err_t *err)$/;"	f	typeref:struct:altcp_pcb *	file:
altcp_tcp_mss	core/altcp_tcp.c	/^altcp_tcp_mss(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t	file:
altcp_tcp_nagle_disable	core/altcp_tcp.c	/^altcp_tcp_nagle_disable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_tcp_nagle_disabled	core/altcp_tcp.c	/^altcp_tcp_nagle_disabled(struct altcp_pcb *conn)$/;"	f	typeref:typename:int	file:
altcp_tcp_nagle_enable	core/altcp_tcp.c	/^altcp_tcp_nagle_enable(struct altcp_pcb *conn)$/;"	f	typeref:typename:void	file:
altcp_tcp_new_ip_type	core/altcp_tcp.c	/^altcp_tcp_new_ip_type(u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_tcp_output	core/altcp_tcp.c	/^altcp_tcp_output(struct altcp_pcb *conn)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_poll	core/altcp_tcp.c	/^altcp_tcp_poll(void *arg, struct tcp_pcb *tpcb)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_recv	core/altcp_tcp.c	/^altcp_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_recved	core/altcp_tcp.c	/^altcp_tcp_recved(struct altcp_pcb *conn, u16_t len)$/;"	f	typeref:typename:void	file:
altcp_tcp_remove_callbacks	core/altcp_tcp.c	/^altcp_tcp_remove_callbacks(struct tcp_pcb *tpcb)$/;"	f	typeref:typename:void	file:
altcp_tcp_sent	core/altcp_tcp.c	/^altcp_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_set_poll	core/altcp_tcp.c	/^altcp_tcp_set_poll(struct altcp_pcb *conn, u8_t interval)$/;"	f	typeref:typename:void	file:
altcp_tcp_setprio	core/altcp_tcp.c	/^altcp_tcp_setprio(struct altcp_pcb *conn, u8_t prio)$/;"	f	typeref:typename:void	file:
altcp_tcp_setup	core/altcp_tcp.c	/^altcp_tcp_setup(struct altcp_pcb *conn, struct tcp_pcb *tpcb)$/;"	f	typeref:typename:void	file:
altcp_tcp_setup_callbacks	core/altcp_tcp.c	/^altcp_tcp_setup_callbacks(struct altcp_pcb *conn, struct tcp_pcb *tpcb)$/;"	f	typeref:typename:void	file:
altcp_tcp_shutdown	core/altcp_tcp.c	/^altcp_tcp_shutdown(struct altcp_pcb *conn, int shut_rx, int shut_tx)$/;"	f	typeref:typename:err_t	file:
altcp_tcp_sndbuf	core/altcp_tcp.c	/^altcp_tcp_sndbuf(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t	file:
altcp_tcp_sndqueuelen	core/altcp_tcp.c	/^altcp_tcp_sndqueuelen(struct altcp_pcb *conn)$/;"	f	typeref:typename:u16_t	file:
altcp_tcp_wrap	core/altcp_tcp.c	/^altcp_tcp_wrap(struct tcp_pcb *tpcb)$/;"	f	typeref:struct:altcp_pcb *
altcp_tcp_write	core/altcp_tcp.c	/^altcp_tcp_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
altcp_tls_alloc	core/altcp_alloc.c	/^altcp_tls_alloc(void *arg, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_tls_config_server_add_privkey_cert	apps/altcp_tls/altcp_tls_mbedtls.c	/^err_t altcp_tls_config_server_add_privkey_cert(struct altcp_tls_config *config,$/;"	f	typeref:typename:err_t
altcp_tls_context	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_context(struct altcp_pcb *conn)$/;"	f	typeref:typename:void *
altcp_tls_create_config	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_create_config(int is_server, uint8_t cert_count, uint8_t pkey_count, int have_ca)$/;"	f	typeref:struct:altcp_tls_config *	file:
altcp_tls_create_config_client	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_create_config_client(const u8_t *ca, size_t ca_len)$/;"	f	typeref:struct:altcp_tls_config *
altcp_tls_create_config_client_2wayauth	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_create_config_client_2wayauth(const u8_t *ca, size_t ca_len, const u8_t *privkey, size/;"	f	typeref:struct:altcp_tls_config *
altcp_tls_create_config_client_common	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_create_config_client_common(const u8_t *ca, size_t ca_len, int is_2wayauth)$/;"	f	typeref:struct:altcp_tls_config *	file:
altcp_tls_create_config_server	apps/altcp_tls/altcp_tls_mbedtls.c	/^struct altcp_tls_config *altcp_tls_create_config_server(uint8_t cert_count)$/;"	f	typeref:struct:altcp_tls_config *
altcp_tls_create_config_server_privkey_cert	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_create_config_server_privkey_cert(const u8_t *privkey, size_t privkey_len,$/;"	f	typeref:struct:altcp_tls_config *
altcp_tls_free_config	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_free_config(struct altcp_tls_config *conf)$/;"	f	typeref:typename:void
altcp_tls_free_entropy	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_free_entropy(void)$/;"	f	typeref:typename:void
altcp_tls_new	core/altcp_alloc.c	/^altcp_tls_new(struct altcp_tls_config *config, u8_t ip_type)$/;"	f	typeref:struct:altcp_pcb *
altcp_tls_wrap	apps/altcp_tls/altcp_tls_mbedtls.c	/^altcp_tls_wrap(struct altcp_tls_config *config, struct altcp_pcb *inner_pcb)$/;"	f	typeref:struct:altcp_pcb *
altcp_write	core/altcp.c	/^altcp_write(struct altcp_pcb *conn, const void *dataptr, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t
arc4_crypt	netif/ppp/polarssl/arc4.c	/^void arc4_crypt( arc4_context *ctx, unsigned char *buf, int buflen )$/;"	f	typeref:typename:void
arc4_setup	netif/ppp/polarssl/arc4.c	/^void arc4_setup( arc4_context *ctx, unsigned char *key, int keylen )$/;"	f	typeref:typename:void
ascii2unicode	netif/ppp/chap_ms.c	/^static void ascii2unicode(const char ascii[], int ascii_len, u_char unicode[]) {$/;"	f	typeref:typename:void	file:
auth_check_options	netif/ppp/auth.c	/^auth_check_options()$/;"	f	typeref:typename:void
auth_check_passwd	netif/ppp/auth.c	/^int auth_check_passwd(ppp_pcb *pcb, char *auser, int userlen, char *apasswd, int passwdlen, cons/;"	f	typeref:typename:int
auth_peer_fail	netif/ppp/auth.c	/^void auth_peer_fail(ppp_pcb *pcb, int protocol) {$/;"	f	typeref:typename:void
auth_peer_success	netif/ppp/auth.c	/^void auth_peer_success(ppp_pcb *pcb, int protocol, int prot_flavor, const char *name, int namele/;"	f	typeref:typename:void
auth_withpeer_fail	netif/ppp/auth.c	/^void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {$/;"	f	typeref:typename:void
auth_withpeer_success	netif/ppp/auth.c	/^void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {$/;"	f	typeref:typename:void
autoip_accept_packet	core/ipv4/autoip.c	/^autoip_accept_packet(struct netif *netif, const ip4_addr_t *addr)$/;"	f	typeref:typename:u8_t
autoip_arp_announce	core/ipv4/autoip.c	/^autoip_arp_announce(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
autoip_arp_probe	core/ipv4/autoip.c	/^autoip_arp_probe(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
autoip_arp_reply	core/ipv4/autoip.c	/^autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr)$/;"	f	typeref:typename:void
autoip_bind	core/ipv4/autoip.c	/^autoip_bind(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
autoip_create_addr	core/ipv4/autoip.c	/^autoip_create_addr(struct netif *netif, ip4_addr_t *ipaddr)$/;"	f	typeref:typename:void	file:
autoip_handle_arp_conflict	core/ipv4/autoip.c	/^autoip_handle_arp_conflict(struct netif *netif)$/;"	f	typeref:typename:void	file:
autoip_network_changed	core/ipv4/autoip.c	/^autoip_network_changed(struct netif *netif)$/;"	f	typeref:typename:void
autoip_restart	core/ipv4/autoip.c	/^autoip_restart(struct netif *netif)$/;"	f	typeref:typename:void	file:
autoip_set_struct	core/ipv4/autoip.c	/^autoip_set_struct(struct netif *netif, struct autoip *autoip)$/;"	f	typeref:typename:void
autoip_start	core/ipv4/autoip.c	/^autoip_start(struct netif *netif)$/;"	f	typeref:typename:err_t
autoip_start_probing	core/ipv4/autoip.c	/^autoip_start_probing(struct netif *netif)$/;"	f	typeref:typename:void	file:
autoip_stop	core/ipv4/autoip.c	/^autoip_stop(struct netif *netif)$/;"	f	typeref:typename:err_t
autoip_supplied_address	core/ipv4/autoip.c	/^autoip_supplied_address(const struct netif *netif)$/;"	f	typeref:typename:u8_t
autoip_tmr	core/ipv4/autoip.c	/^autoip_tmr(void)$/;"	f	typeref:typename:void
b64dec	netif/ppp/eap.c	/^b64dec(bs, inp, inlen, outp)$/;"	f	file:
b64enc	netif/ppp/eap.c	/^b64enc(bs, inp, inlen, outp)$/;"	f	file:
b64flush	netif/ppp/eap.c	/^b64flush(bs, outp)$/;"	f	file:
bind	include/lwip/sockets.h	/^static inline int bind(int s,const struct sockaddr *name, socklen_t namelen)$/;"	f	typeref:typename:int
ble_addr_to_eui64	netif/lowpan6_ble.c	/^ble_addr_to_eui64(uint8_t *dst, const uint8_t *src, int public_addr)$/;"	f	typeref:typename:void
bridgeif_add_port	netif/bridgeif.c	/^bridgeif_add_port(struct netif *bridgeif, struct netif *portif)$/;"	f	typeref:typename:err_t
bridgeif_age_tmr	netif/bridgeif_fdb.c	/^bridgeif_age_tmr(void *arg)$/;"	f	typeref:typename:void	file:
bridgeif_fdb_add	netif/bridgeif.c	/^bridgeif_fdb_add(struct netif *bridgeif, const struct eth_addr *addr, bridgeif_portmask_t ports)$/;"	f	typeref:typename:err_t
bridgeif_fdb_age_one_second	netif/bridgeif_fdb.c	/^bridgeif_fdb_age_one_second(void *fdb_ptr)$/;"	f	typeref:typename:void	file:
bridgeif_fdb_get_dst_ports	netif/bridgeif_fdb.c	/^bridgeif_fdb_get_dst_ports(void *fdb_ptr, struct eth_addr *dst_addr)$/;"	f	typeref:typename:bridgeif_portmask_t
bridgeif_fdb_init	netif/bridgeif_fdb.c	/^bridgeif_fdb_init(u16_t max_fdb_entries)$/;"	f	typeref:typename:void *
bridgeif_fdb_remove	netif/bridgeif.c	/^bridgeif_fdb_remove(struct netif *bridgeif, const struct eth_addr *addr)$/;"	f	typeref:typename:err_t
bridgeif_fdb_update_src	netif/bridgeif_fdb.c	/^bridgeif_fdb_update_src(void *fdb_ptr, struct eth_addr *src_addr, u8_t port_idx)$/;"	f	typeref:typename:void
bridgeif_find_dst_ports	netif/bridgeif.c	/^bridgeif_find_dst_ports(bridgeif_private_t *br, struct eth_addr *dst_addr)$/;"	f	typeref:typename:bridgeif_portmask_t	file:
bridgeif_init	netif/bridgeif.c	/^bridgeif_init(struct netif *netif)$/;"	f	typeref:typename:err_t
bridgeif_input	netif/bridgeif.c	/^bridgeif_input(struct pbuf *p, struct netif *netif)$/;"	f	typeref:typename:err_t	file:
bridgeif_is_local_mac	netif/bridgeif.c	/^bridgeif_is_local_mac(bridgeif_private_t *br, struct eth_addr *addr)$/;"	f	typeref:typename:int	file:
bridgeif_output	netif/bridgeif.c	/^bridgeif_output(struct netif *netif, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
bridgeif_send_to_port	netif/bridgeif.c	/^bridgeif_send_to_port(bridgeif_private_t *br, struct pbuf *p, u8_t dstport_idx)$/;"	f	typeref:typename:err_t	file:
bridgeif_send_to_ports	netif/bridgeif.c	/^bridgeif_send_to_ports(bridgeif_private_t *br, struct pbuf *p, bridgeif_portmask_t dstports)$/;"	f	typeref:typename:err_t	file:
bridgeif_tcpip_input	netif/bridgeif.c	/^bridgeif_tcpip_input(struct pbuf *p, struct netif *netif)$/;"	f	typeref:typename:err_t	file:
call_synced_function	apps/snmp/snmp_threadsync.c	/^call_synced_function(struct threadsync_data *call_data, snmp_threadsync_called_fn fn)$/;"	f	typeref:typename:void	file:
ccp_ackci	netif/ppp/ccp.c	/^static int ccp_ackci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
ccp_addci	netif/ppp/ccp.c	/^static void ccp_addci(fsm *f, u_char *p, int *lenp) {$/;"	f	typeref:typename:void	file:
ccp_anycompress	netif/ppp/ccp.c	/^static int ccp_anycompress(ccp_options *opt) {$/;"	f	typeref:typename:int	file:
ccp_cilen	netif/ppp/ccp.c	/^static int ccp_cilen(fsm *f) {$/;"	f	typeref:typename:int	file:
ccp_close	netif/ppp/ccp.c	/^static void ccp_close(ppp_pcb *pcb, const char *reason) {$/;"	f	typeref:typename:void	file:
ccp_datainput	netif/ppp/ccp.c	/^static void ccp_datainput(ppp_pcb *pcb, u_char *pkt, int len) {$/;"	f	typeref:typename:void	file:
ccp_down	netif/ppp/ccp.c	/^static void ccp_down(fsm *f) {$/;"	f	typeref:typename:void	file:
ccp_extcode	netif/ppp/ccp.c	/^static int ccp_extcode(fsm *f, int code, int id, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
ccp_init	netif/ppp/ccp.c	/^static void ccp_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ccp_input	netif/ppp/ccp.c	/^static void ccp_input(ppp_pcb *pcb, u_char *p, int len) {$/;"	f	typeref:typename:void	file:
ccp_lowerdown	netif/ppp/ccp.c	/^static void ccp_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ccp_lowerup	netif/ppp/ccp.c	/^static void ccp_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ccp_nakci	netif/ppp/ccp.c	/^static int ccp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {$/;"	f	typeref:typename:int	file:
ccp_open	netif/ppp/ccp.c	/^static void ccp_open(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ccp_printpkt	netif/ppp/ccp.c	/^static int ccp_printpkt(const u_char *p, int plen, void (*printer) (void *, const char *, ...), /;"	f	typeref:typename:int	file:
ccp_protrej	netif/ppp/ccp.c	/^static void ccp_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ccp_rack_timeout	netif/ppp/ccp.c	/^static void ccp_rack_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
ccp_rejci	netif/ppp/ccp.c	/^static int ccp_rejci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
ccp_reqci	netif/ppp/ccp.c	/^static int ccp_reqci(fsm *f, u_char *p, int *lenp, int dont_nak) {$/;"	f	typeref:typename:int	file:
ccp_reset_comp	netif/ppp/ppp.c	/^ccp_reset_comp(ppp_pcb *pcb)$/;"	f	typeref:typename:void
ccp_reset_decomp	netif/ppp/ppp.c	/^ccp_reset_decomp(ppp_pcb *pcb)$/;"	f	typeref:typename:void
ccp_resetci	netif/ppp/ccp.c	/^static void ccp_resetci(fsm *f) {$/;"	f	typeref:typename:void	file:
ccp_resetrequest	netif/ppp/ccp.c	/^void ccp_resetrequest(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
ccp_set	netif/ppp/ppp.c	/^ccp_set(ppp_pcb *pcb, u8_t isopen, u8_t isup, u8_t receive_method, u8_t transmit_method)$/;"	f	typeref:typename:void
ccp_up	netif/ppp/ccp.c	/^static void ccp_up(fsm *f) {$/;"	f	typeref:typename:void	file:
cdns	netif/ppp/ppp.c	/^int cdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {$/;"	f	typeref:typename:int
chap_auth_peer	netif/ppp/chap-new.c	/^void chap_auth_peer(ppp_pcb *pcb, const char *our_name, int digest_code) {$/;"	f	typeref:typename:void
chap_auth_with_peer	netif/ppp/chap-new.c	/^void chap_auth_with_peer(ppp_pcb *pcb, const char *our_name, int digest_code) {$/;"	f	typeref:typename:void
chap_generate_challenge	netif/ppp/chap-new.c	/^static void chap_generate_challenge(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
chap_handle_response	netif/ppp/chap-new.c	/^static void  chap_handle_response(ppp_pcb *pcb, int id,$/;"	f	typeref:typename:void	file:
chap_handle_status	netif/ppp/chap-new.c	/^static void chap_handle_status(ppp_pcb *pcb, int code, int id,$/;"	f	typeref:typename:void	file:
chap_init	netif/ppp/chap-new.c	/^static void chap_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
chap_input	netif/ppp/chap-new.c	/^static void chap_input(ppp_pcb *pcb, unsigned char *pkt, int pktlen) {$/;"	f	typeref:typename:void	file:
chap_lowerdown	netif/ppp/chap-new.c	/^static void chap_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
chap_lowerup	netif/ppp/chap-new.c	/^static void chap_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
chap_md5_generate_challenge	netif/ppp/chap-md5.c	/^static void chap_md5_generate_challenge(ppp_pcb *pcb, unsigned char *cp) {$/;"	f	typeref:typename:void	file:
chap_md5_make_response	netif/ppp/chap-md5.c	/^static void chap_md5_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *ou/;"	f	typeref:typename:void	file:
chap_md5_verify_response	netif/ppp/chap-md5.c	/^static int chap_md5_verify_response(ppp_pcb *pcb, int id, const char *name,$/;"	f	typeref:typename:int	file:
chap_print_pkt	netif/ppp/chap-new.c	/^static int chap_print_pkt(const unsigned char *p, int plen,$/;"	f	typeref:typename:int	file:
chap_protrej	netif/ppp/chap-new.c	/^static void chap_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
chap_respond	netif/ppp/chap-new.c	/^static void chap_respond(ppp_pcb *pcb, int id,$/;"	f	typeref:typename:void	file:
chap_timeout	netif/ppp/chap-new.c	/^static void chap_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
chap_verify_response	netif/ppp/chap-new.c	/^static int chap_verify_response(ppp_pcb *pcb, const char *name, const char *ourname, int id,$/;"	f	typeref:typename:int	file:
chapms2_check_success	netif/ppp/chap_ms.c	/^static int chapms2_check_success(ppp_pcb *pcb, unsigned char *msg, int len, unsigned char *priva/;"	f	typeref:typename:int	file:
chapms2_generate_challenge	netif/ppp/chap_ms.c	/^static void chapms2_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {$/;"	f	typeref:typename:void	file:
chapms2_make_response	netif/ppp/chap_ms.c	/^static void chapms2_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our/;"	f	typeref:typename:void	file:
chapms2_verify_response	netif/ppp/chap_ms.c	/^static int chapms2_verify_response(ppp_pcb *pcb, int id, const char *name,$/;"	f	typeref:typename:int	file:
chapms_generate_challenge	netif/ppp/chap_ms.c	/^static void chapms_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {$/;"	f	typeref:typename:void	file:
chapms_handle_failure	netif/ppp/chap_ms.c	/^static void chapms_handle_failure(ppp_pcb *pcb, unsigned char *inp, int len) {$/;"	f	typeref:typename:void	file:
chapms_make_response	netif/ppp/chap_ms.c	/^static void chapms_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_/;"	f	typeref:typename:void	file:
chapms_verify_response	netif/ppp/chap_ms.c	/^static int chapms_verify_response(ppp_pcb *pcb, int id, const char *name,$/;"	f	typeref:typename:int	file:
checkSsiByFilelist	apps/http/makefsdata/makefsdata.c	/^static int checkSsiByFilelist(const char* filename_listfile)$/;"	f	typeref:typename:int	file:
check_host	apps/mdns/mdns.c	/^check_host(struct netif *netif, struct mdns_rr_info *rr, u8_t *reverse_v6_reply)$/;"	f	typeref:typename:int	file:
check_idle	netif/ppp/auth.c	/^static void check_idle(void *arg) {$/;"	f	typeref:typename:void	file:
check_maxoctets	netif/ppp/auth.c	/^check_maxoctets(arg)$/;"	f	file:
check_path	apps/http/makefsdata/makefsdata.c	/^int check_path(char *path, size_t size)$/;"	f	typeref:typename:int
check_service	apps/mdns/mdns.c	/^check_service(struct mdns_service *service, struct mdns_rr_info *rr)$/;"	f	typeref:typename:int	file:
checksumadjust	core/ipv4/ip4_napt.c	/^checksumadjust(u8_t *chksum, u8_t *optr, int olen, u8_t *nptr, int nlen)$/;"	f	typeref:typename:void	file:
cif6addr	netif/ppp/ppp.c	/^int cif6addr(ppp_pcb *pcb, eui64_t our_eui64, eui64_t his_eui64) {$/;"	f	typeref:typename:int
cifaddr	netif/ppp/ppp.c	/^int cifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr) {$/;"	f	typeref:typename:int
close	include/lwip/sockets.h	/^static inline int close(int s)$/;"	f	typeref:typename:int
close_handle	apps/tftp/tftp_server.c	/^close_handle(void)$/;"	f	typeref:typename:void	file:
closesocket	include/lwip/sockets.h	/^static inline int closesocket(int s)$/;"	f	typeref:typename:int
concat_files	apps/http/makefsdata/makefsdata.c	/^void concat_files(const char *file1, const char *file2, const char *targetfile)$/;"	f	typeref:typename:void
connect	include/lwip/sockets.h	/^static inline int connect(int s,const struct sockaddr *name,socklen_t namelen)$/;"	f	typeref:typename:int
connect_time_expired	netif/ppp/auth.c	/^static void connect_time_expired(void *arg) {$/;"	f	typeref:typename:void	file:
continue_networks	netif/ppp/auth.c	/^void continue_networks(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
copy_file	apps/http/makefsdata/makefsdata.c	/^static void copy_file(const char *filename_in, FILE *fout)$/;"	f	typeref:typename:void	file:
demand_block	netif/ppp/demand.c	/^demand_block()$/;"	f	typeref:typename:void
demand_conf	netif/ppp/demand.c	/^demand_conf()$/;"	f	typeref:typename:void
demand_discard	netif/ppp/demand.c	/^demand_discard()$/;"	f	typeref:typename:void
demand_unblock	netif/ppp/demand.c	/^demand_unblock()$/;"	f	typeref:typename:void
dequeue_datagram	netif/lowpan6.c	/^dequeue_datagram(struct lowpan6_reass_helper *lrh, struct lowpan6_reass_helper *prev)$/;"	f	typeref:typename:void	file:
des_crypt_ecb	netif/ppp/polarssl/des.c	/^void des_crypt_ecb( des_context *ctx,$/;"	f	typeref:typename:void
des_setkey	netif/ppp/polarssl/des.c	/^static void des_setkey( unsigned long SK[32], unsigned char key[8] )$/;"	f	typeref:typename:void	file:
des_setkey_dec	netif/ppp/polarssl/des.c	/^void des_setkey_dec( des_context *ctx, unsigned char key[8] )$/;"	f	typeref:typename:void
des_setkey_enc	netif/ppp/polarssl/des.c	/^void des_setkey_enc( des_context *ctx, unsigned char key[8] )$/;"	f	typeref:typename:void
dhcp6_abort_config_request	core/ipv6/dhcp6.c	/^dhcp6_abort_config_request(struct dhcp6 *dhcp6)$/;"	f	typeref:typename:void	file:
dhcp6_cleanup	core/ipv6/dhcp6.c	/^void dhcp6_cleanup(struct netif *netif)$/;"	f	typeref:typename:void
dhcp6_create_msg	core/ipv6/dhcp6.c	/^dhcp6_create_msg(struct netif *netif, struct dhcp6 *dhcp6, u8_t message_type,$/;"	f	typeref:struct:pbuf *	file:
dhcp6_dec_pcb_refcount	core/ipv6/dhcp6.c	/^dhcp6_dec_pcb_refcount(void)$/;"	f	typeref:typename:void	file:
dhcp6_disable	core/ipv6/dhcp6.c	/^dhcp6_disable(struct netif *netif)$/;"	f	typeref:typename:void
dhcp6_enable_stateful	core/ipv6/dhcp6.c	/^dhcp6_enable_stateful(struct netif *netif)$/;"	f	typeref:typename:err_t
dhcp6_enable_stateless	core/ipv6/dhcp6.c	/^dhcp6_enable_stateless(struct netif *netif)$/;"	f	typeref:typename:err_t
dhcp6_get_struct	core/ipv6/dhcp6.c	/^dhcp6_get_struct(struct netif *netif, const char *dbg_requester)$/;"	f	typeref:struct:dhcp6 *	file:
dhcp6_handle_config_reply	core/ipv6/dhcp6.c	/^dhcp6_handle_config_reply(struct netif *netif, struct pbuf *p_msg_in)$/;"	f	typeref:typename:void	file:
dhcp6_inc_pcb_refcount	core/ipv6/dhcp6.c	/^dhcp6_inc_pcb_refcount(void)$/;"	f	typeref:typename:err_t	file:
dhcp6_information_request	core/ipv6/dhcp6.c	/^dhcp6_information_request(struct netif *netif, struct dhcp6 *dhcp6)$/;"	f	typeref:typename:void	file:
dhcp6_msg_finalize	core/ipv6/dhcp6.c	/^dhcp6_msg_finalize(u16_t options_out_len, struct pbuf *p_out)$/;"	f	typeref:typename:void	file:
dhcp6_nd6_ra_trigger	core/ipv6/dhcp6.c	/^dhcp6_nd6_ra_trigger(struct netif *netif, u8_t managed_addr_config, u8_t other_config)$/;"	f	typeref:typename:void
dhcp6_option_optionrequest	core/ipv6/dhcp6.c	/^dhcp6_option_optionrequest(u16_t options_out_len, u8_t *options, const u16_t *req_options,$/;"	f	typeref:typename:u16_t	file:
dhcp6_option_short	core/ipv6/dhcp6.c	/^dhcp6_option_short(u16_t options_out_len, u8_t *options, u16_t value)$/;"	f	typeref:typename:u16_t	file:
dhcp6_parse_reply	core/ipv6/dhcp6.c	/^dhcp6_parse_reply(struct pbuf *p, struct dhcp6 *dhcp6)$/;"	f	typeref:typename:err_t	file:
dhcp6_recv	core/ipv6/dhcp6.c	/^dhcp6_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
dhcp6_request_config	core/ipv6/dhcp6.c	/^dhcp6_request_config(struct netif *netif, struct dhcp6 *dhcp6)$/;"	f	typeref:typename:err_t	file:
dhcp6_set_ntp_servers	apps/sntp/sntp.c	/^dhcp6_set_ntp_servers(u8_t num_ntp_servers, ip_addr_t* ntp_server_addrs)$/;"	f	typeref:typename:void
dhcp6_set_state	core/ipv6/dhcp6.c	/^dhcp6_set_state(struct dhcp6 *dhcp6, u8_t new_state, const char *dbg_caller)$/;"	f	typeref:typename:void	file:
dhcp6_set_struct	core/ipv6/dhcp6.c	/^dhcp6_set_struct(struct netif *netif, struct dhcp6 *dhcp6)$/;"	f	typeref:typename:void
dhcp6_stateless_enabled	core/ipv6/dhcp6.c	/^dhcp6_stateless_enabled(struct dhcp6 *dhcp6)$/;"	f	typeref:typename:int	file:
dhcp6_timeout	core/ipv6/dhcp6.c	/^dhcp6_timeout(struct netif *netif, struct dhcp6 *dhcp6)$/;"	f	typeref:typename:void	file:
dhcp6_tmr	core/ipv6/dhcp6.c	/^dhcp6_tmr(void)$/;"	f	typeref:typename:void
dhcp_arp_reply	core/ipv4/dhcp.c	/^dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)$/;"	f	typeref:typename:void
dhcp_bind	core/ipv4/dhcp.c	/^dhcp_bind(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_check	core/ipv4/dhcp.c	/^dhcp_check(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_cleanup	core/ipv4/dhcp.c	/^void dhcp_cleanup(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_coarse_tmr	core/ipv4/dhcp.c	/^dhcp_coarse_tmr(void)$/;"	f	typeref:typename:void
dhcp_create_msg	core/ipv4/dhcp.c	/^dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_le/;"	f	typeref:struct:pbuf *	file:
dhcp_dec_pcb_refcount	core/ipv4/dhcp.c	/^dhcp_dec_pcb_refcount(void)$/;"	f	typeref:typename:void	file:
dhcp_decline	core/ipv4/dhcp.c	/^dhcp_decline(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
dhcp_discover	core/ipv4/dhcp.c	/^dhcp_discover(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
dhcp_fine_timeout_cb	core/ipv4/dhcp.c	/^void dhcp_fine_timeout_cb(void *arg)$/;"	f	typeref:typename:void
dhcp_fine_tmr	core/ipv4/dhcp.c	/^dhcp_fine_tmr(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_get_vendor_specific_information	core/ipv4/dhcp.c	/^dhcp_get_vendor_specific_information(u8_t len, char *str)$/;"	f	typeref:typename:err_t
dhcp_handle_ack	core/ipv4/dhcp.c	/^dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)$/;"	f	typeref:typename:void	file:
dhcp_handle_nak	core/ipv4/dhcp.c	/^dhcp_handle_nak(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_handle_offer	core/ipv4/dhcp.c	/^dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)$/;"	f	typeref:typename:void	file:
dhcp_inc_pcb_refcount	core/ipv4/dhcp.c	/^dhcp_inc_pcb_refcount(void)$/;"	f	typeref:typename:err_t	file:
dhcp_inform	core/ipv4/dhcp.c	/^dhcp_inform(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_network_changed	core/ipv4/dhcp.c	/^dhcp_network_changed(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_option	core/ipv4/dhcp.c	/^dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_byte	core/ipv4/dhcp.c	/^dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_client_id	core/ipv4/dhcp.c	/^dhcp_option_client_id(struct netif *netif, struct dhcp_msg *msg_out, u16_t options_out_len)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_hostname	core/ipv4/dhcp.c	/^dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_long	core/ipv4/dhcp.c	/^dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_short	core/ipv4/dhcp.c	/^dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)$/;"	f	typeref:typename:u16_t	file:
dhcp_option_trailer	core/ipv4/dhcp.c	/^dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)$/;"	f	typeref:typename:void	file:
dhcp_option_vendor_class_identifier	core/ipv4/dhcp.c	/^dhcp_option_vendor_class_identifier(struct netif *netif, struct dhcp_msg *msg_out, u16_t options/;"	f	typeref:typename:u16_t	file:
dhcp_parse_reply	core/ipv4/dhcp.c	/^dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)$/;"	f	typeref:typename:err_t	file:
dhcp_rebind	core/ipv4/dhcp.c	/^dhcp_rebind(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
dhcp_reboot	core/ipv4/dhcp.c	/^dhcp_reboot(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
dhcp_recv	core/ipv4/dhcp.c	/^dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
dhcp_release	core/ipv4/dhcp.c	/^dhcp_release(struct netif *netif)$/;"	f	typeref:typename:err_t
dhcp_release_and_stop	core/ipv4/dhcp.c	/^dhcp_release_and_stop(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_renew	core/ipv4/dhcp.c	/^dhcp_renew(struct netif *netif)$/;"	f	typeref:typename:err_t
dhcp_restart	core/ipv4/dhcp.c	/^dhcp_restart(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_select	core/ipv4/dhcp.c	/^dhcp_select(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
dhcp_set_cb	core/ipv4/dhcp.c	/^void dhcp_set_cb(struct netif *netif, void (*cb)(struct netif*))$/;"	f	typeref:typename:void
dhcp_set_ntp_servers	apps/sntp/sntp.c	/^dhcp_set_ntp_servers(u8_t num, const ip4_addr_t *server)$/;"	f	typeref:typename:void
dhcp_set_state	core/ipv4/dhcp.c	/^dhcp_set_state(struct dhcp *dhcp, u8_t new_state)$/;"	f	typeref:typename:void	file:
dhcp_set_struct	core/ipv4/dhcp.c	/^dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)$/;"	f	typeref:typename:void
dhcp_set_vendor_class_identifier	core/ipv4/dhcp.c	/^dhcp_set_vendor_class_identifier(u8_t len, char *str)$/;"	f	typeref:typename:err_t
dhcp_start	core/ipv4/dhcp.c	/^dhcp_start(struct netif *netif)$/;"	f	typeref:typename:err_t
dhcp_stop	core/ipv4/dhcp.c	/^dhcp_stop(struct netif *netif)$/;"	f	typeref:typename:void
dhcp_supplied_address	core/ipv4/dhcp.c	/^dhcp_supplied_address(const struct netif *netif)$/;"	f	typeref:typename:u8_t
dhcp_t1_timeout	core/ipv4/dhcp.c	/^dhcp_t1_timeout(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_t2_timeout	core/ipv4/dhcp.c	/^dhcp_t2_timeout(struct netif *netif)$/;"	f	typeref:typename:void	file:
dhcp_timeout	core/ipv4/dhcp.c	/^dhcp_timeout(struct netif *netif)$/;"	f	typeref:typename:void	file:
dns_alloc_pcb	core/dns.c	/^dns_alloc_pcb(void)$/;"	f	typeref:typename:u8_t	file:
dns_alloc_random_port	core/dns.c	/^dns_alloc_random_port(void)$/;"	f	typeref:struct:udp_pcb *	file:
dns_backupserver_available	core/dns.c	/^dns_backupserver_available(struct dns_table_entry *pentry)$/;"	f	typeref:typename:u8_t	file:
dns_call_found	core/dns.c	/^dns_call_found(u8_t idx, ip_addr_t *addr)$/;"	f	typeref:typename:void	file:
dns_check_entries	core/dns.c	/^dns_check_entries(void)$/;"	f	typeref:typename:void	file:
dns_check_entry	core/dns.c	/^dns_check_entry(u8_t i)$/;"	f	typeref:typename:void	file:
dns_clear_cache	core/dns.c	/^dns_clear_cache(void)$/;"	f	typeref:typename:void
dns_clear_servers	core/dns.c	/^dns_clear_servers(bool keep_fallback)$/;"	f	typeref:typename:void
dns_compare_name	core/dns.c	/^dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)$/;"	f	typeref:typename:u16_t	file:
dns_correct_response	core/dns.c	/^dns_correct_response(u8_t idx, u32_t ttl)$/;"	f	typeref:typename:void	file:
dns_create_txid	core/dns.c	/^dns_create_txid(void)$/;"	f	typeref:typename:u16_t	file:
dns_enqueue	core/dns.c	/^dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,$/;"	f	typeref:typename:err_t	file:
dns_gethostbyname	core/dns.c	/^dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,$/;"	f	typeref:typename:err_t
dns_gethostbyname_addrtype	core/dns.c	/^dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,$/;"	f	typeref:typename:err_t
dns_getserver	core/dns.c	/^dns_getserver(u8_t numdns)$/;"	f	typeref:typename:const ip_addr_t *
dns_init	core/dns.c	/^dns_init(void)$/;"	f	typeref:typename:void
dns_init_local	core/dns.c	/^dns_init_local(void)$/;"	f	typeref:typename:void	file:
dns_local_addhost	core/dns.c	/^dns_local_addhost(const char *hostname, const ip_addr_t *addr)$/;"	f	typeref:typename:err_t
dns_local_iterate	core/dns.c	/^dns_local_iterate(dns_found_callback iterator_fn, void *iterator_arg)$/;"	f	typeref:typename:size_t
dns_local_lookup	core/dns.c	/^dns_local_lookup(const char *hostname, ip_addr_t *addr, u8_t dns_addrtype)$/;"	f	typeref:typename:err_t
dns_local_removehost	core/dns.c	/^dns_local_removehost(const char *hostname, const ip_addr_t *addr)$/;"	f	typeref:typename:int
dns_lookup	core/dns.c	/^dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))$/;"	f	typeref:typename:err_t	file:
dns_lookup_local	core/dns.c	/^dns_lookup_local(const char *hostname, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))$/;"	f	typeref:typename:err_t	file:
dns_recv	core/dns.c	/^dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
dns_send	core/dns.c	/^dns_send(u8_t idx)$/;"	f	typeref:typename:err_t	file:
dns_server_is_set	core/dns.c	/^static bool dns_server_is_set (void)$/;"	f	typeref:typename:bool	file:
dns_setserver	core/dns.c	/^dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)$/;"	f	typeref:typename:void
dns_skip_name	core/dns.c	/^dns_skip_name(struct pbuf *p, u16_t query_idx)$/;"	f	typeref:typename:u16_t	file:
dns_timeout_cb	core/dns.c	/^static void dns_timeout_cb(void *arg)$/;"	f	typeref:typename:void	file:
dns_tmr	core/dns.c	/^dns_tmr(void)$/;"	f	typeref:typename:void
do_memp_free_pool	core/memp.c	/^do_memp_free_pool(const struct memp_desc *desc, void *mem)$/;"	f	typeref:typename:void	file:
do_memp_malloc_pool	core/memp.c	/^do_memp_malloc_pool(const struct memp_desc *desc)$/;"	f	typeref:typename:void *	file:
do_sync	apps/snmp/snmp_threadsync.c	/^do_sync(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance, snmp_thre/;"	f	typeref:typename:snmp_err_t	file:
done_socket	api/sockets.c	/^done_socket(struct lwip_sock *sock)$/;"	f	typeref:typename:void	file:
eap_authpeer	netif/ppp/eap.c	/^void eap_authpeer(ppp_pcb *pcb, const char *localname) {$/;"	f	typeref:typename:void
eap_authwithpeer	netif/ppp/eap.c	/^void eap_authwithpeer(ppp_pcb *pcb, const char *localname) {$/;"	f	typeref:typename:void
eap_chap_response	netif/ppp/eap.c	/^static void eap_chap_response(ppp_pcb *pcb, u_char id, u_char *hash, const char *name, int namel/;"	f	typeref:typename:void	file:
eap_client_timeout	netif/ppp/eap.c	/^static void eap_client_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
eap_failure	netif/ppp/eap.c	/^static void eap_failure(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
eap_figure_next_state	netif/ppp/eap.c	/^static void eap_figure_next_state(ppp_pcb *pcb, int status) {$/;"	f	typeref:typename:void	file:
eap_init	netif/ppp/eap.c	/^static void eap_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_input	netif/ppp/eap.c	/^static void eap_input(ppp_pcb *pcb, u_char *inp, int inlen) {$/;"	f	typeref:typename:void	file:
eap_lowerdown	netif/ppp/eap.c	/^static void eap_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_lowerup	netif/ppp/eap.c	/^static void eap_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_printpkt	netif/ppp/eap.c	/^static int eap_printpkt(const u_char *inp, int inlen, void (*printer) (void *, const char *, .../;"	f	typeref:typename:int	file:
eap_protrej	netif/ppp/eap.c	/^static void eap_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_rechallenge	netif/ppp/eap.c	/^static void eap_rechallenge(void *arg) {$/;"	f	typeref:typename:void	file:
eap_request	netif/ppp/eap.c	/^static void eap_request(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
eap_response	netif/ppp/eap.c	/^static void eap_response(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
eap_send_failure	netif/ppp/eap.c	/^static void eap_send_failure(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_send_nak	netif/ppp/eap.c	/^static void eap_send_nak(ppp_pcb *pcb, u_char id, u_char type) {$/;"	f	typeref:typename:void	file:
eap_send_request	netif/ppp/eap.c	/^static void eap_send_request(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_send_response	netif/ppp/eap.c	/^static void eap_send_response(ppp_pcb *pcb, u_char id, u_char typenum, const u_char *str, int le/;"	f	typeref:typename:void	file:
eap_send_success	netif/ppp/eap.c	/^static void eap_send_success(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
eap_server_timeout	netif/ppp/eap.c	/^static void eap_server_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
eap_srp_response	netif/ppp/eap.c	/^eap_srp_response(esp, id, subtypenum, str, lenstr)$/;"	f	file:
eap_srpval_response	netif/ppp/eap.c	/^eap_srpval_response(esp, id, flags, str)$/;"	f	file:
eap_state_name	netif/ppp/eap.c	/^static const char * eap_state_name(enum eap_state_code esc)$/;"	f	typeref:typename:const char *	file:
eap_success	netif/ppp/eap.c	/^static void eap_success(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
ecp_init	netif/ppp/ecp.c	/^ecp_init(unit)$/;"	f	file:
ecp_printpkt	netif/ppp/ecp.c	/^ecp_printpkt(p, plen, printer, arg)$/;"	f	file:
err_tcp	api/api_msg.c	/^err_tcp(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
err_to_errno	api/err.c	/^err_to_errno(err_t err)$/;"	f	typeref:typename:int
etharp_add_static_entry	core/ipv4/etharp.c	/^etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)$/;"	f	typeref:typename:err_t
etharp_cleanup_netif	core/ipv4/etharp.c	/^etharp_cleanup_netif(struct netif *netif)$/;"	f	typeref:typename:void
etharp_find_addr	core/ipv4/etharp.c	/^etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,$/;"	f	typeref:typename:ssize_t
etharp_find_entry	core/ipv4/etharp.c	/^etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)$/;"	f	typeref:typename:s16_t	file:
etharp_free_entry	core/ipv4/etharp.c	/^etharp_free_entry(int i)$/;"	f	typeref:typename:void	file:
etharp_get_entry	core/ipv4/etharp.c	/^etharp_get_entry(size_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)$/;"	f	typeref:typename:int
etharp_input	core/ipv4/etharp.c	/^etharp_input(struct pbuf *p, struct netif *netif)$/;"	f	typeref:typename:void
etharp_output	core/ipv4/etharp.c	/^etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
etharp_output_to_arp_index	core/ipv4/etharp.c	/^etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)$/;"	f	typeref:typename:err_t	file:
etharp_query	core/ipv4/etharp.c	/^etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)$/;"	f	typeref:typename:err_t
etharp_raw	core/ipv4/etharp.c	/^etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,$/;"	f	typeref:typename:err_t	file:
etharp_remove_static_entry	core/ipv4/etharp.c	/^etharp_remove_static_entry(const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
etharp_request	core/ipv4/etharp.c	/^etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
etharp_request_dst	core/ipv4/etharp.c	/^etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_/;"	f	typeref:typename:err_t	file:
etharp_tmr	core/ipv4/etharp.c	/^etharp_tmr(void)$/;"	f	typeref:typename:void
etharp_update_arp_entry	core/ipv4/etharp.c	/^etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr,/;"	f	typeref:typename:err_t	file:
ethernet_input	netif/ethernet.c	/^ethernet_input(struct pbuf *p, struct netif *netif)$/;"	f	typeref:typename:err_t
ethernet_output	netif/ethernet.c	/^ethernet_output(struct netif * netif, struct pbuf * p,$/;"	f	typeref:typename:err_t
ethip6_output	core/ipv6/ethip6.c	/^ethip6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:err_t
eui64_ntoa	netif/ppp/eui64.c	/^char *eui64_ntoa(eui64_t e) {$/;"	f	typeref:typename:char *
eui64_to_ble_addr	netif/lowpan6_ble.c	/^eui64_to_ble_addr(uint8_t *dst, const uint8_t *src)$/;"	f	typeref:typename:void
event_callback	api/sockets.c	/^event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)$/;"	f	typeref:typename:void	file:
ext_in_list	apps/http/makefsdata/makefsdata.c	/^static int ext_in_list(const char* filename, const char *ext_list)$/;"	f	typeref:typename:int	file:
extract_uri_parameters	apps/http/httpd.c	/^extract_uri_parameters(struct http_state *hs, char *params)$/;"	f	typeref:typename:int	file:
fcntl	api/sockets.c	/^fcntl(int s, int cmd, ...)$/;"	f	typeref:typename:int
fcntl	include/lwip/sockets.h	/^static inline int fcntl(int s,int cmd,int val)$/;"	f	typeref:typename:int
file_can_be_compressed	apps/http/makefsdata/makefsdata.c	/^static int file_can_be_compressed(const char *filename)$/;"	f	typeref:typename:int	file:
file_put_ascii	apps/http/makefsdata/makefsdata.c	/^int file_put_ascii(FILE *file, const char *ascii_string, int len, int *i)$/;"	f	typeref:typename:int
file_to_exclude	apps/http/makefsdata/makefsdata.c	/^static int file_to_exclude(const char *filename)$/;"	f	typeref:typename:int	file:
file_write_http_header	apps/http/makefsdata/makefsdata.c	/^int file_write_http_header(FILE *data_file, const char *filename, int file_size, u16_t *http_hdr/;"	f	typeref:typename:int
fix_filename_for_c	apps/http/makefsdata/makefsdata.c	/^static void fix_filename_for_c(char *qualifiedName, size_t max_len)$/;"	f	typeref:typename:void	file:
free_etharp_q	core/ipv4/etharp.c	/^free_etharp_q(struct etharp_q_entry *q)$/;"	f	typeref:typename:void	file:
free_reass_datagram	netif/lowpan6.c	/^free_reass_datagram(struct lowpan6_reass_helper *lrh)$/;"	f	typeref:typename:void	file:
free_socket	api/sockets.c	/^free_socket(struct lwip_sock *sock, int is_tcp)$/;"	f	typeref:typename:void	file:
free_socket_free_elements	api/sockets.c	/^free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)$/;"	f	typeref:typename:void	file:
free_socket_locked	api/sockets.c	/^free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,$/;"	f	typeref:typename:int	file:
freeaddrinfo	include/lwip/netdb.h	/^static inline void freeaddrinfo(struct addrinfo *ai)$/;"	f	typeref:typename:void
fs_bytes_left	apps/http/fs.c	/^fs_bytes_left(struct fs_file *file)$/;"	f	typeref:typename:int
fs_close	apps/http/fs.c	/^fs_close(struct fs_file *file)$/;"	f	typeref:typename:void
fs_is_file_ready	apps/http/fs.c	/^fs_is_file_ready(struct fs_file *file, fs_wait_cb callback_fn, void *callback_arg)$/;"	f	typeref:typename:int
fs_open	apps/http/fs.c	/^fs_open(struct fs_file *file, const char *name)$/;"	f	typeref:typename:err_t
fs_read_async	apps/http/fs.c	/^fs_read_async(struct fs_file *file, char *buffer, int count, fs_wait_cb callback_fn, void *callb/;"	f	typeref:typename:int
fsm_close	netif/ppp/fsm.c	/^void fsm_close(fsm *f, const char *reason) {$/;"	f	typeref:typename:void
fsm_init	netif/ppp/fsm.c	/^void fsm_init(fsm *f) {$/;"	f	typeref:typename:void
fsm_input	netif/ppp/fsm.c	/^void fsm_input(fsm *f, u_char *inpacket, int l) {$/;"	f	typeref:typename:void
fsm_lowerdown	netif/ppp/fsm.c	/^void fsm_lowerdown(fsm *f) {$/;"	f	typeref:typename:void
fsm_lowerup	netif/ppp/fsm.c	/^void fsm_lowerup(fsm *f) {$/;"	f	typeref:typename:void
fsm_open	netif/ppp/fsm.c	/^void fsm_open(fsm *f) {$/;"	f	typeref:typename:void
fsm_protreject	netif/ppp/fsm.c	/^void fsm_protreject(fsm *f) {$/;"	f	typeref:typename:void
fsm_rcoderej	netif/ppp/fsm.c	/^static void fsm_rcoderej(fsm *f, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
fsm_rconfack	netif/ppp/fsm.c	/^static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
fsm_rconfnakrej	netif/ppp/fsm.c	/^static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
fsm_rconfreq	netif/ppp/fsm.c	/^static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
fsm_rtermack	netif/ppp/fsm.c	/^static void fsm_rtermack(fsm *f) {$/;"	f	typeref:typename:void	file:
fsm_rtermreq	netif/ppp/fsm.c	/^static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {$/;"	f	typeref:typename:void	file:
fsm_sconfreq	netif/ppp/fsm.c	/^static void fsm_sconfreq(fsm *f, int retransmit) {$/;"	f	typeref:typename:void	file:
fsm_sdata	netif/ppp/fsm.c	/^void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {$/;"	f	typeref:typename:void
fsm_timeout	netif/ppp/fsm.c	/^static void fsm_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
garp_tmr	core/ipv4/etharp.c	/^void garp_tmr(void)$/;"	f	typeref:typename:void
get_default_epdisc	netif/ppp/multilink.c	/^get_default_epdisc(ep)$/;"	f	file:
get_file_data	apps/http/makefsdata/makefsdata.c	/^static u8_t *get_file_data(const char *filename, int *file_size, int can_be_compressed, int *is_/;"	f	typeref:typename:u8_t *	file:
get_http_content_length	apps/http/httpd.c	/^get_http_content_length(struct http_state *hs)$/;"	f	typeref:typename:void	file:
get_http_headers	apps/http/httpd.c	/^get_http_headers(struct http_state *hs, const char *uri)$/;"	f	typeref:typename:void	file:
get_idle_time	netif/ppp/ppp.c	/^int get_idle_time(ppp_pcb *pcb, struct ppp_idle *ip) {$/;"	f	typeref:typename:int
get_instance_synced	apps/snmp/snmp_threadsync.c	/^get_instance_synced(void *ctx)$/;"	f	typeref:typename:void	file:
get_loop_output	netif/ppp/ppp.c	/^int get_loop_output(void) {$/;"	f	typeref:typename:int
get_mask	netif/ppp/ppp.c	/^u32_t get_mask(u32_t addr) {$/;"	f	typeref:typename:u32_t
get_next_instance_synced	apps/snmp/snmp_threadsync.c	/^get_next_instance_synced(void *ctx)$/;"	f	typeref:typename:void	file:
get_secret	netif/ppp/auth.c	/^int get_secret(ppp_pcb *pcb, const char *client, const char *server, char *secret, int *secret_l/;"	f	typeref:typename:int
get_socket	api/sockets.c	/^get_socket(int fd)$/;"	f	typeref:struct:lwip_sock *	file:
get_tag_insert	apps/http/httpd.c	/^get_tag_insert(struct http_state *hs)$/;"	f	typeref:typename:void	file:
getaddrinfo	include/lwip/netdb.h	/^static inline int getaddrinfo(const char *nodename, const char *servname, const struct addrinfo /;"	f	typeref:typename:int
gethostbyname	include/lwip/netdb.h	/^static inline struct hostent *gethostbyname(const char *name)$/;"	f	typeref:struct:hostent *
gethostbyname_r	include/lwip/netdb.h	/^static inline int gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t bufle/;"	f	typeref:typename:int
getpeername	include/lwip/sockets.h	/^static inline int getpeername(int s,struct sockaddr *name,socklen_t *namelen)$/;"	f	typeref:typename:int
getsockname	include/lwip/sockets.h	/^static inline int getsockname(int s,struct sockaddr *name,socklen_t *namelen)$/;"	f	typeref:typename:int
getsockopt	include/lwip/sockets.h	/^static inline int getsockopt(int s,int level,int optname,void *opval,socklen_t *optlen)$/;"	f	typeref:typename:int
hexc_val	netif/ppp/multilink.c	/^static int hexc_val(int c)$/;"	f	typeref:typename:int	file:
http_accept	apps/http/httpd.c	/^http_accept(void *arg, struct altcp_pcb *pcb, err_t err)$/;"	f	typeref:typename:err_t	file:
http_add_connection	apps/http/httpd.c	/^http_add_connection(struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_check_eof	apps/http/httpd.c	/^http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:u8_t	file:
http_close_conn	apps/http/httpd.c	/^http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:err_t	file:
http_close_or_abort_conn	apps/http/httpd.c	/^http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)$/;"	f	typeref:typename:err_t	file:
http_continue	apps/http/httpd.c	/^http_continue(void *connection)$/;"	f	typeref:typename:void	file:
http_eof	apps/http/httpd.c	/^http_eof(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_err	apps/http/httpd.c	/^http_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
http_find_error_file	apps/http/httpd.c	/^http_find_error_file(struct http_state *hs, u16_t error_nr)$/;"	f	typeref:typename:err_t	file:
http_find_file	apps/http/httpd.c	/^http_find_file(struct http_state *hs, const char *uri, int is_09)$/;"	f	typeref:typename:err_t	file:
http_get_404_file	apps/http/httpd.c	/^http_get_404_file(struct http_state *hs, const char **uri)$/;"	f	typeref:struct:fs_file *	file:
http_handle_post_finished	apps/http/httpd.c	/^http_handle_post_finished(struct http_state *hs)$/;"	f	typeref:typename:err_t	file:
http_init_file	apps/http/httpd.c	/^http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,$/;"	f	typeref:typename:err_t	file:
http_kill_oldest_connection	apps/http/httpd.c	/^http_kill_oldest_connection(u8_t ssi_required)$/;"	f	typeref:typename:void	file:
http_parse_request	apps/http/httpd.c	/^http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
http_parse_response_status	apps/http/http_client.c	/^http_parse_response_status(struct pbuf *p, u16_t *http_version, u16_t *http_status, u16_t *http_/;"	f	typeref:typename:err_t	file:
http_poll	apps/http/httpd.c	/^http_poll(void *arg, struct altcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
http_post_request	apps/http/httpd.c	/^http_post_request(struct pbuf *inp, struct http_state *hs,$/;"	f	typeref:typename:err_t	file:
http_post_rxpbuf	apps/http/httpd.c	/^http_post_rxpbuf(struct http_state *hs, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
http_recv	apps/http/httpd.c	/^http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
http_remove_connection	apps/http/httpd.c	/^http_remove_connection(struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_send	apps/http/httpd.c	/^http_send(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:u8_t	file:
http_send_data_nonssi	apps/http/httpd.c	/^http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:u8_t	file:
http_send_data_ssi	apps/http/httpd.c	/^http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:u8_t	file:
http_send_headers	apps/http/httpd.c	/^http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)$/;"	f	typeref:typename:u8_t	file:
http_sent	apps/http/httpd.c	/^http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
http_set_cgi_handlers	apps/http/httpd.c	/^http_set_cgi_handlers(const tCGI *cgis, int num_handlers)$/;"	f	typeref:typename:void
http_set_ssi_handler	apps/http/httpd.c	/^http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)$/;"	f	typeref:typename:void
http_ssi_state_alloc	apps/http/httpd.c	/^http_ssi_state_alloc(void)$/;"	f	typeref:struct:http_ssi_state *	file:
http_ssi_state_free	apps/http/httpd.c	/^http_ssi_state_free(struct http_ssi_state *ssi)$/;"	f	typeref:typename:void	file:
http_state_alloc	apps/http/httpd.c	/^http_state_alloc(void)$/;"	f	typeref:struct:http_state *	file:
http_state_eof	apps/http/httpd.c	/^http_state_eof(struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_state_free	apps/http/httpd.c	/^http_state_free(struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_state_init	apps/http/httpd.c	/^http_state_init(struct http_state *hs)$/;"	f	typeref:typename:void	file:
http_uri_is_ssi	apps/http/httpd.c	/^http_uri_is_ssi(struct fs_file *file, const char *uri)$/;"	f	typeref:typename:u8_t	file:
http_wait_headers	apps/http/http_client.c	/^http_wait_headers(struct pbuf *p, u32_t *content_length, u16_t *total_header_len)$/;"	f	typeref:typename:err_t	file:
http_write	apps/http/httpd.c	/^http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
httpc_close	apps/http/http_client.c	/^httpc_close(httpc_state_t* req, httpc_result_t result, u32_t server_response, err_t err)$/;"	f	typeref:typename:err_t	file:
httpc_create_request_string	apps/http/http_client.c	/^httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int ser/;"	f	typeref:typename:int	file:
httpc_dns_found	apps/http/http_client.c	/^httpc_dns_found(const char* hostname, const ip_addr_t *ipaddr, void *arg)$/;"	f	typeref:typename:void	file:
httpc_free_state	apps/http/http_client.c	/^httpc_free_state(httpc_state_t* req)$/;"	f	typeref:typename:err_t	file:
httpc_fs_free	apps/http/http_client.c	/^httpc_fs_free(httpc_filestate_t *filestate)$/;"	f	typeref:typename:void	file:
httpc_fs_init	apps/http/http_client.c	/^httpc_fs_init(httpc_filestate_t **filestate_out, const char* local_file_name,$/;"	f	typeref:typename:err_t	file:
httpc_fs_result	apps/http/http_client.c	/^httpc_fs_result(void *arg, httpc_result_t httpc_result, u32_t rx_content_len,$/;"	f	typeref:typename:void	file:
httpc_fs_tcp_recv	apps/http/http_client.c	/^httpc_fs_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
httpc_get_file	apps/http/http_client.c	/^httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection/;"	f	typeref:typename:err_t
httpc_get_file_dns	apps/http/http_client.c	/^httpc_get_file_dns(const char* server_name, u16_t port, const char* uri, const httpc_connection_/;"	f	typeref:typename:err_t
httpc_get_file_dns_to_disk	apps/http/http_client.c	/^httpc_get_file_dns_to_disk(const char* server_name, u16_t port, const char* uri, const httpc_con/;"	f	typeref:typename:err_t
httpc_get_file_to_disk	apps/http/http_client.c	/^httpc_get_file_to_disk(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_co/;"	f	typeref:typename:err_t
httpc_get_internal_addr	apps/http/http_client.c	/^httpc_get_internal_addr(httpc_state_t* req, const ip_addr_t *ipaddr)$/;"	f	typeref:typename:err_t	file:
httpc_get_internal_dns	apps/http/http_client.c	/^httpc_get_internal_dns(httpc_state_t* req, const char* server_name)$/;"	f	typeref:typename:err_t	file:
httpc_init_connection	apps/http/http_client.c	/^httpc_init_connection(httpc_state_t **connection, const httpc_connection_t *settings, const char/;"	f	typeref:typename:err_t	file:
httpc_init_connection_addr	apps/http/http_client.c	/^httpc_init_connection_addr(httpc_state_t **connection, const httpc_connection_t *settings,$/;"	f	typeref:typename:err_t	file:
httpc_init_connection_common	apps/http/http_client.c	/^httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, con/;"	f	typeref:typename:err_t	file:
httpc_tcp_connected	apps/http/http_client.c	/^httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err)$/;"	f	typeref:typename:err_t	file:
httpc_tcp_err	apps/http/http_client.c	/^httpc_tcp_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
httpc_tcp_poll	apps/http/http_client.c	/^httpc_tcp_poll(void *arg, struct altcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
httpc_tcp_recv	apps/http/http_client.c	/^httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r)$/;"	f	typeref:typename:err_t	file:
httpc_tcp_sent	apps/http/http_client.c	/^httpc_tcp_sent(void *arg, struct altcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
httpd_init	apps/http/httpd.c	/^httpd_init(void)$/;"	f	typeref:typename:void
httpd_init_pcb	apps/http/httpd.c	/^httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)$/;"	f	typeref:typename:void	file:
httpd_inits	apps/http/httpd.c	/^httpd_inits(struct altcp_tls_config *conf)$/;"	f	typeref:typename:void
httpd_post_data_recved	apps/http/httpd.c	/^void httpd_post_data_recved(void *connection, u16_t recved_len)$/;"	f	typeref:typename:void
icmp6_dest_unreach	core/ipv6/icmp6.c	/^icmp6_dest_unreach(struct pbuf *p, enum icmp6_dur_code c)$/;"	f	typeref:typename:void
icmp6_input	core/ipv6/icmp6.c	/^icmp6_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
icmp6_packet_too_big	core/ipv6/icmp6.c	/^icmp6_packet_too_big(struct pbuf *p, u32_t mtu)$/;"	f	typeref:typename:void
icmp6_param_problem	core/ipv6/icmp6.c	/^icmp6_param_problem(struct pbuf *p, enum icmp6_pp_code c, const void *pointer)$/;"	f	typeref:typename:void
icmp6_send_response	core/ipv6/icmp6.c	/^icmp6_send_response(struct pbuf *p, u8_t code, u32_t data, u8_t type)$/;"	f	typeref:typename:void	file:
icmp6_send_response_with_addrs	core/ipv6/icmp6.c	/^icmp6_send_response_with_addrs(struct pbuf *p, u8_t code, u32_t data, u8_t type,$/;"	f	typeref:typename:void	file:
icmp6_send_response_with_addrs_and_netif	core/ipv6/icmp6.c	/^icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,$/;"	f	typeref:typename:void	file:
icmp6_time_exceeded	core/ipv6/icmp6.c	/^icmp6_time_exceeded(struct pbuf *p, enum icmp6_te_code c)$/;"	f	typeref:typename:void
icmp6_time_exceeded_with_addrs	core/ipv6/icmp6.c	/^icmp6_time_exceeded_with_addrs(struct pbuf *p, enum icmp6_te_code c,$/;"	f	typeref:typename:void
icmp_dest_unreach	core/ipv4/icmp.c	/^icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)$/;"	f	typeref:typename:void
icmp_get_value	apps/snmp/snmp_mib2_icmp.c	/^icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)$/;"	f	typeref:typename:s16_t	file:
icmp_input	core/ipv4/icmp.c	/^icmp_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
icmp_send_response	core/ipv4/icmp.c	/^icmp_send_response(struct pbuf *p, u8_t type, u8_t code)$/;"	f	typeref:typename:void	file:
icmp_time_exceeded	core/ipv4/icmp.c	/^icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)$/;"	f	typeref:typename:void
igmp_delaying_member	core/ipv4/igmp.c	/^igmp_delaying_member(struct igmp_group *group, u8_t maxresp)$/;"	f	typeref:typename:void	file:
igmp_init	core/ipv4/igmp.c	/^igmp_init(void)$/;"	f	typeref:typename:void
igmp_input	core/ipv4/igmp.c	/^igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)$/;"	f	typeref:typename:void
igmp_ip_output_if	core/ipv4/igmp.c	/^igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *n/;"	f	typeref:typename:err_t	file:
igmp_joingroup	core/ipv4/igmp.c	/^igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
igmp_joingroup_netif	core/ipv4/igmp.c	/^igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
igmp_leavegroup	core/ipv4/igmp.c	/^igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
igmp_leavegroup_netif	core/ipv4/igmp.c	/^igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
igmp_lookfor_group	core/ipv4/igmp.c	/^igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)$/;"	f	typeref:struct:igmp_group *
igmp_lookup_group	core/ipv4/igmp.c	/^igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)$/;"	f	typeref:struct:igmp_group *	file:
igmp_remove_group	core/ipv4/igmp.c	/^igmp_remove_group(struct netif *netif, struct igmp_group *group)$/;"	f	typeref:typename:err_t	file:
igmp_report_groups	core/ipv4/igmp.c	/^igmp_report_groups(struct netif *netif)$/;"	f	typeref:typename:void
igmp_send	core/ipv4/igmp.c	/^igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)$/;"	f	typeref:typename:void	file:
igmp_start	core/ipv4/igmp.c	/^igmp_start(struct netif *netif)$/;"	f	typeref:typename:err_t
igmp_start_timer	core/ipv4/igmp.c	/^igmp_start_timer(struct igmp_group *group, u8_t max_time)$/;"	f	typeref:typename:void	file:
igmp_stop	core/ipv4/igmp.c	/^igmp_stop(struct netif *netif)$/;"	f	typeref:typename:err_t
igmp_timeout	core/ipv4/igmp.c	/^igmp_timeout(struct netif *netif, struct igmp_group *group)$/;"	f	typeref:typename:void	file:
igmp_timeout_cb	core/ipv4/igmp.c	/^static void igmp_timeout_cb(void *arg)$/;"	f	typeref:typename:void	file:
igmp_tmr	core/ipv4/igmp.c	/^igmp_tmr(void)$/;"	f	typeref:typename:void
inet_chksum	core/inet_chksum.c	/^inet_chksum(const void *dataptr, u16_t len)$/;"	f	typeref:typename:u16_t
inet_chksum_pbuf	core/inet_chksum.c	/^inet_chksum_pbuf(struct pbuf *p)$/;"	f	typeref:typename:u16_t
inet_chksum_pseudo	core/inet_chksum.c	/^inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
inet_chksum_pseudo_partial	core/inet_chksum.c	/^inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
inet_cksum_pseudo_base	core/inet_chksum.c	/^inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)$/;"	f	typeref:typename:u16_t	file:
inet_cksum_pseudo_partial_base	core/inet_chksum.c	/^inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t	file:
inet_ntop	include/lwip/sockets.h	/^static inline const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f	typeref:typename:const char *
inet_pton	include/lwip/sockets.h	/^static inline int inet_pton(int af, const char *src, void *dst)$/;"	f	typeref:typename:int
interfaces_Table_get_cell_instance	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_Table_get_cell_instance(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, /;"	f	typeref:typename:snmp_err_t	file:
interfaces_Table_get_next_cell_instance	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_Table_get_next_cell_instance(const u32_t *column, struct snmp_obj_id *row_oid, struct/;"	f	typeref:typename:snmp_err_t	file:
interfaces_Table_get_value	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_Table_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
interfaces_Table_set_test	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_Table_set_test(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
interfaces_Table_set_value	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_Table_set_value(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
interfaces_get_value	apps/snmp/snmp_mib2_interfaces.c	/^interfaces_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
ioctl	include/lwip/sockets.h	/^static inline int ioctl(int s,long cmd,void *argp)$/;"	f	typeref:typename:int
ioctlsocket	include/lwip/sockets.h	/^static inline int ioctlsocket(int s,long cmd,void *argp)$/;"	f	typeref:typename:int
ip4_addr_isbroadcast_u32	core/ipv4/ip4_addr.c	/^ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)$/;"	f	typeref:typename:u8_t
ip4_addr_netmask_valid	core/ipv4/ip4_addr.c	/^ip4_addr_netmask_valid(u32_t netmask)$/;"	f	typeref:typename:u8_t
ip4_canforward	core/ipv4/ip4.c	/^ip4_canforward(struct pbuf *p)$/;"	f	typeref:typename:int	file:
ip4_debug_print	core/ipv4/ip4.c	/^ip4_debug_print(struct pbuf *p)$/;"	f	typeref:typename:void
ip4_forward	core/ipv4/ip4.c	/^ip4_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)$/;"	f	typeref:typename:void	file:
ip4_frag	core/ipv4/ip4_frag.c	/^ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)$/;"	f	typeref:typename:err_t
ip4_input	core/ipv4/ip4.c	/^ip4_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
ip4_input_accept	core/ipv4/ip4.c	/^ip4_input_accept(struct netif *netif)$/;"	f	typeref:typename:int	file:
ip4_netif_exist	core/ipv4/ip4.c	/^bool ip4_netif_exist(const ip4_addr_t *src, const ip4_addr_t *dest)$/;"	f	typeref:typename:bool
ip4_output	core/ipv4/ip4.c	/^ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_output_hinted	core/ipv4/ip4.c	/^ip4_output_hinted(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_output_if	core/ipv4/ip4.c	/^ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_output_if_opt	core/ipv4/ip4.c	/^ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_output_if_opt_src	core/ipv4/ip4.c	/^ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_output_if_src	core/ipv4/ip4.c	/^ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,$/;"	f	typeref:typename:err_t
ip4_reass	core/ipv4/ip4_frag.c	/^ip4_reass(struct pbuf *p)$/;"	f	typeref:struct:pbuf *
ip4_route	core/ipv4/ip4.c	/^ip4_route(const ip4_addr_t *dest)$/;"	f	typeref:struct:netif *
ip4_route_src	core/ipv4/ip4.c	/^ip4_route_src(const ip4_addr_t *src, const ip4_addr_t *dest)$/;"	f	typeref:struct:netif *
ip4_route_src_hook	core/ipv4/ip4.c	/^ip4_route_src_hook(const ip4_addr_t *src,const ip4_addr_t *dest)$/;"	f	typeref:struct:netif *
ip4_set_default_multicast_netif	core/ipv4/ip4.c	/^ip4_set_default_multicast_netif(struct netif *default_multicast_netif)$/;"	f	typeref:typename:void
ip4addr_aton	core/ipv4/ip4_addr.c	/^ip4addr_aton(const char *cp, ip4_addr_t *addr)$/;"	f	typeref:typename:int
ip4addr_ntoa	core/ipv4/ip4_addr.c	/^ip4addr_ntoa(const ip4_addr_t *addr)$/;"	f	typeref:typename:char *
ip4addr_ntoa_r	core/ipv4/ip4_addr.c	/^ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)$/;"	f	typeref:typename:char *
ip6_chksum_pseudo	core/inet_chksum.c	/^ip6_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
ip6_chksum_pseudo_partial	core/inet_chksum.c	/^ip6_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
ip6_debug_print	core/ipv6/ip6.c	/^ip6_debug_print(struct pbuf *p)$/;"	f	typeref:typename:void
ip6_forward	core/ipv6/ip6.c	/^ip6_forward(struct pbuf *p, struct ip6_hdr *iphdr, struct netif *inp)$/;"	f	typeref:typename:void	file:
ip6_frag	core/ipv6/ip6_frag.c	/^ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)$/;"	f	typeref:typename:err_t
ip6_frag_alloc_pbuf_custom_ref	core/ipv6/ip6_frag.c	/^ip6_frag_alloc_pbuf_custom_ref(void)$/;"	f	typeref:struct:pbuf_custom_ref *	file:
ip6_frag_free_pbuf_custom	core/ipv6/ip6_frag.c	/^ip6_frag_free_pbuf_custom(struct pbuf *p)$/;"	f	typeref:typename:void	file:
ip6_frag_free_pbuf_custom_ref	core/ipv6/ip6_frag.c	/^ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)$/;"	f	typeref:typename:void	file:
ip6_input	core/ipv6/ip6.c	/^ip6_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
ip6_input_accept	core/ipv6/ip6.c	/^ip6_input_accept(struct netif *netif)$/;"	f	typeref:typename:int	file:
ip6_options_add_hbh_ra	core/ipv6/ip6.c	/^ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)$/;"	f	typeref:typename:err_t
ip6_output	core/ipv6/ip6.c	/^ip6_output(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,$/;"	f	typeref:typename:err_t
ip6_output_hinted	core/ipv6/ip6.c	/^ip6_output_hinted(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,$/;"	f	typeref:typename:err_t
ip6_output_if	core/ipv6/ip6.c	/^ip6_output_if(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,$/;"	f	typeref:typename:err_t
ip6_output_if_src	core/ipv6/ip6.c	/^ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,$/;"	f	typeref:typename:err_t
ip6_reass	core/ipv6/ip6_frag.c	/^ip6_reass(struct pbuf *p)$/;"	f	typeref:struct:pbuf *
ip6_reass_free_complete_datagram	core/ipv6/ip6_frag.c	/^ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)$/;"	f	typeref:typename:void	file:
ip6_reass_remove_oldest_datagram	core/ipv6/ip6_frag.c	/^ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)$/;"	f	typeref:typename:void	file:
ip6_reass_timeout_cb	core/ipv6/ip6_frag.c	/^static void ip6_reass_timeout_cb(void *arg)$/;"	f	typeref:typename:void	file:
ip6_reass_tmr	core/ipv6/ip6_frag.c	/^ip6_reass_tmr(void)$/;"	f	typeref:typename:void
ip6_route	core/ipv6/ip6.c	/^ip6_route(const ip6_addr_t *src, const ip6_addr_t *dest)$/;"	f	typeref:struct:netif *
ip6_select_source_address	core/ipv6/ip6.c	/^ip6_select_source_address(struct netif *netif, const ip6_addr_t *dest)$/;"	f	typeref:typename:const ip_addr_t *
ip6addr_aton	core/ipv6/ip6_addr.c	/^ip6addr_aton(const char *cp, ip6_addr_t *addr)$/;"	f	typeref:typename:int
ip6addr_ntoa	core/ipv6/ip6_addr.c	/^ip6addr_ntoa(const ip6_addr_t *addr)$/;"	f	typeref:typename:char *
ip6addr_ntoa_r	core/ipv6/ip6_addr.c	/^ip6addr_ntoa_r(const ip6_addr_t *addr, char *buf, int buflen)$/;"	f	typeref:typename:char *
ip_AddrTable_get_cell_value	apps/snmp/snmp_mib2_ip.c	/^ip_AddrTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union s/;"	f	typeref:typename:snmp_err_t	file:
ip_AddrTable_get_cell_value_core	apps/snmp/snmp_mib2_ip.c	/^ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t *column, union snmp_variant_va/;"	f	typeref:typename:snmp_err_t	file:
ip_AddrTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_ip.c	/^ip_AddrTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, /;"	f	typeref:typename:snmp_err_t	file:
ip_NetToMediaTable_get_cell_value	apps/snmp/snmp_mib2_ip.c	/^ip_NetToMediaTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, u/;"	f	typeref:typename:snmp_err_t	file:
ip_NetToMediaTable_get_cell_value_core	apps/snmp/snmp_mib2_ip.c	/^ip_NetToMediaTable_get_cell_value_core(size_t arp_table_index, const u32_t *column, union snmp_v/;"	f	typeref:typename:snmp_err_t	file:
ip_NetToMediaTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_ip.c	/^ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row/;"	f	typeref:typename:snmp_err_t	file:
ip_RouteTable_get_cell_value	apps/snmp/snmp_mib2_ip.c	/^ip_RouteTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union /;"	f	typeref:typename:snmp_err_t	file:
ip_RouteTable_get_cell_value_core	apps/snmp/snmp_mib2_ip.c	/^ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t *column, /;"	f	typeref:typename:snmp_err_t	file:
ip_RouteTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_ip.c	/^ip_RouteTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid,/;"	f	typeref:typename:snmp_err_t	file:
ip_active_pkt	netif/ppp/ipcp.c	/^ip_active_pkt(pkt, len)$/;"	f	file:
ip_chksum_pseudo	core/inet_chksum.c	/^ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
ip_chksum_pseudo_partial	core/inet_chksum.c	/^ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,$/;"	f	typeref:typename:u16_t
ip_demand_conf	netif/ppp/ipcp.c	/^ip_demand_conf(u)$/;"	f	file:
ip_frag_alloc_pbuf_custom_ref	core/ipv4/ip4_frag.c	/^ip_frag_alloc_pbuf_custom_ref(void)$/;"	f	typeref:struct:pbuf_custom_ref *	file:
ip_frag_free_pbuf_custom_ref	core/ipv4/ip4_frag.c	/^ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)$/;"	f	typeref:typename:void	file:
ip_get_value	apps/snmp/snmp_mib2_ip.c	/^ip_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
ip_input	core/ip.c	/^ip_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
ip_napt_add	core/ipv4/ip4_napt.c	/^ip_napt_add(u8_t proto, u32_t src, u16_t sport, u32_t dest, u16_t dport, u32_t seqno)$/;"	f	typeref:typename:u16_t	file:
ip_napt_deinit	core/ipv4/ip4_napt.c	/^ip_napt_deinit(void)$/;"	f	typeref:typename:void	file:
ip_napt_enable	core/ipv4/ip4_napt.c	/^ip_napt_enable(u32_t addr, int enable)$/;"	f	typeref:typename:void
ip_napt_enable_no	core/ipv4/ip4_napt.c	/^ip_napt_enable_no(u8_t number, int enable)$/;"	f	typeref:typename:void
ip_napt_find	core/ipv4/ip4_napt.c	/^ip_napt_find(u8_t proto, u32_t addr, u16_t port, u16_t mport, u8_t dest)$/;"	f	typeref:struct:ip_napt_entry *	file:
ip_napt_find_port	core/ipv4/ip4_napt.c	/^ip_napt_find_port(u8_t proto, u16_t port)$/;"	f	typeref:typename:u8_t	file:
ip_napt_forward	core/ipv4/ip4_napt.c	/^ip_napt_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp, struct netif *outp)$/;"	f	typeref:typename:err_t
ip_napt_free	core/ipv4/ip4_napt.c	/^ip_napt_free(struct ip_napt_entry *t)$/;"	f	typeref:typename:void	file:
ip_napt_gc	core/ipv4/ip4_napt.c	/^ip_napt_gc(uint32_t now, bool force)$/;"	f	typeref:typename:void	file:
ip_napt_get_stats	core/ipv4/ip4_napt.c	/^ip_napt_get_stats(struct stats_ip_napt *stats)$/;"	f	typeref:typename:void
ip_napt_init	core/ipv4/ip4_napt.c	/^ip_napt_init(uint16_t max_nat, uint8_t max_portmap)$/;"	f	typeref:typename:void	file:
ip_napt_insert	core/ipv4/ip4_napt.c	/^ip_napt_insert(struct ip_napt_entry *t)$/;"	f	typeref:typename:void	file:
ip_napt_maint	core/ipv4/ip4_napt.c	/^ip_napt_maint(void)$/;"	f	typeref:typename:void	file:
ip_napt_modify_addr	core/ipv4/ip4_napt.c	/^ip_napt_modify_addr(struct ip_hdr *iphdr, ip4_addr_p_t *field, u32_t newval)$/;"	f	typeref:typename:void	file:
ip_napt_modify_addr_tcp	core/ipv4/ip4_napt.c	/^ip_napt_modify_addr_tcp(struct tcp_hdr *tcphdr, ip4_addr_p_t *oldval, u32_t newval)$/;"	f	typeref:typename:void	file:
ip_napt_modify_addr_udp	core/ipv4/ip4_napt.c	/^ip_napt_modify_addr_udp(struct udp_hdr *udphdr, ip4_addr_p_t *oldval, u32_t newval)$/;"	f	typeref:typename:void	file:
ip_napt_modify_port_tcp	core/ipv4/ip4_napt.c	/^ip_napt_modify_port_tcp(struct tcp_hdr *tcphdr, u8_t dest, u16_t newval)$/;"	f	typeref:typename:void	file:
ip_napt_modify_port_udp	core/ipv4/ip4_napt.c	/^ip_napt_modify_port_udp(struct udp_hdr *udphdr, u8_t dest, u16_t newval)$/;"	f	typeref:typename:void	file:
ip_napt_new_port	core/ipv4/ip4_napt.c	/^ip_napt_new_port(u8_t proto, u16_t port)$/;"	f	typeref:typename:u16_t	file:
ip_napt_recv	core/ipv4/ip4_napt.c	/^ip_napt_recv(struct pbuf *p, struct ip_hdr *iphdr)$/;"	f	typeref:typename:void
ip_napt_send_rst	core/ipv4/ip4_napt.c	/^ip_napt_send_rst(u32_t src_be, u16_t sport_be, u32_t dst_be, u16_t dport_be, u32_t seqno_le, u32/;"	f	typeref:typename:void	file:
ip_napt_tmr	core/ipv4/ip4_napt.c	/^ip_napt_tmr(void *arg)$/;"	f	typeref:typename:void	file:
ip_portmap_add	core/ipv4/ip4_napt.c	/^ip_portmap_add(u8_t proto, u32_t maddr, u16_t mport, u32_t daddr, u16_t dport)$/;"	f	typeref:typename:u8_t
ip_portmap_find	core/ipv4/ip4_napt.c	/^ip_portmap_find(u8_t proto, u16_t mport)$/;"	f	typeref:struct:ip_portmap_entry *	file:
ip_portmap_find_dest	core/ipv4/ip4_napt.c	/^ip_portmap_find_dest(u8_t proto, u16_t dport, u32_t daddr)$/;"	f	typeref:struct:ip_portmap_entry *	file:
ip_portmap_get	core/ipv4/ip4_napt.c	/^ip_portmap_get(u8_t proto, u16_t mport, u32_t *maddr, u32_t *daddr, u16_t *dport)$/;"	f	typeref:typename:u8_t
ip_portmap_remove	core/ipv4/ip4_napt.c	/^ip_portmap_remove(u8_t proto, u16_t mport)$/;"	f	typeref:typename:u8_t
ip_reass_chain_frag_into_datagram_and_validate	core/ipv4/ip4_frag.c	/^ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int/;"	f	typeref:typename:int	file:
ip_reass_dequeue_datagram	core/ipv4/ip4_frag.c	/^ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)$/;"	f	typeref:typename:void	file:
ip_reass_enqueue_new_datagram	core/ipv4/ip4_frag.c	/^ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)$/;"	f	typeref:struct:ip_reassdata *	file:
ip_reass_free_complete_datagram	core/ipv4/ip4_frag.c	/^ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)$/;"	f	typeref:typename:int	file:
ip_reass_remove_oldest_datagram	core/ipv4/ip4_frag.c	/^ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)$/;"	f	typeref:typename:int	file:
ip_reass_timeout_cb	core/ipv4/ip4_frag.c	/^static void ip_reass_timeout_cb(void *arg)$/;"	f	typeref:typename:void	file:
ip_reass_tmr	core/ipv4/ip4_frag.c	/^ip_reass_tmr(void)$/;"	f	typeref:typename:void
ip_set_test	apps/snmp/snmp_mib2_ip.c	/^ip_set_test(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
ip_set_value	apps/snmp/snmp_mib2_ip.c	/^ip_set_value(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
ipaddr_addr	core/ipv4/ip4_addr.c	/^ipaddr_addr(const char *cp)$/;"	f	typeref:typename:u32_t
ipaddr_aton	core/ip.c	/^ipaddr_aton(const char *cp, ip_addr_t *addr)$/;"	f	typeref:typename:int
ipaddr_ntoa	core/ip.c	/^char *ipaddr_ntoa(const ip_addr_t *addr)$/;"	f	typeref:typename:char *
ipaddr_ntoa_r	core/ip.c	/^char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)$/;"	f	typeref:typename:char *
ipcp_ackci	netif/ppp/ipcp.c	/^static int ipcp_ackci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
ipcp_addci	netif/ppp/ipcp.c	/^static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {$/;"	f	typeref:typename:void	file:
ipcp_cilen	netif/ppp/ipcp.c	/^static int ipcp_cilen(fsm *f) {$/;"	f	typeref:typename:int	file:
ipcp_clear_addrs	netif/ppp/ipcp.c	/^static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultrout/;"	f	typeref:typename:void	file:
ipcp_close	netif/ppp/ipcp.c	/^static void ipcp_close(ppp_pcb *pcb, const char *reason) {$/;"	f	typeref:typename:void	file:
ipcp_down	netif/ppp/ipcp.c	/^static void ipcp_down(fsm *f) {$/;"	f	typeref:typename:void	file:
ipcp_finished	netif/ppp/ipcp.c	/^static void ipcp_finished(fsm *f) {$/;"	f	typeref:typename:void	file:
ipcp_init	netif/ppp/ipcp.c	/^static void ipcp_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ipcp_input	netif/ppp/ipcp.c	/^static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {$/;"	f	typeref:typename:void	file:
ipcp_lowerdown	netif/ppp/ipcp.c	/^static void ipcp_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ipcp_lowerup	netif/ppp/ipcp.c	/^static void ipcp_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ipcp_nakci	netif/ppp/ipcp.c	/^static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {$/;"	f	typeref:typename:int	file:
ipcp_open	netif/ppp/ipcp.c	/^static void ipcp_open(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ipcp_printpkt	netif/ppp/ipcp.c	/^static int ipcp_printpkt(const u_char *p, int plen,$/;"	f	typeref:typename:int	file:
ipcp_protrej	netif/ppp/ipcp.c	/^static void ipcp_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
ipcp_rejci	netif/ppp/ipcp.c	/^static int ipcp_rejci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
ipcp_reqci	netif/ppp/ipcp.c	/^static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {$/;"	f	typeref:typename:int	file:
ipcp_resetci	netif/ppp/ipcp.c	/^static void ipcp_resetci(fsm *f) {$/;"	f	typeref:typename:void	file:
ipcp_up	netif/ppp/ipcp.c	/^static void ipcp_up(fsm *f) {$/;"	f	typeref:typename:void	file:
ipfrag_free_pbuf_custom	core/ipv4/ip4_frag.c	/^ipfrag_free_pbuf_custom(struct pbuf *p)$/;"	f	typeref:typename:void	file:
is_ssi_file	apps/http/makefsdata/makefsdata.c	/^static int is_ssi_file(const char *filename)$/;"	f	typeref:typename:int	file:
is_valid_char_for_c_var	apps/http/makefsdata/makefsdata.c	/^static int is_valid_char_for_c_var(char x)$/;"	f	typeref:typename:int	file:
iterate_bundle_links	netif/ppp/multilink.c	/^static void iterate_bundle_links(void (*func)(char *))$/;"	f	typeref:typename:void	file:
lcp_ackci	netif/ppp/lcp.c	/^static int lcp_ackci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
lcp_addci	netif/ppp/lcp.c	/^static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {$/;"	f	typeref:typename:void	file:
lcp_cilen	netif/ppp/lcp.c	/^static int lcp_cilen(fsm *f) {$/;"	f	typeref:typename:int	file:
lcp_close	netif/ppp/lcp.c	/^void lcp_close(ppp_pcb *pcb, const char *reason) {$/;"	f	typeref:typename:void
lcp_delayed_up	netif/ppp/lcp.c	/^static void lcp_delayed_up(void *arg) {$/;"	f	typeref:typename:void	file:
lcp_down	netif/ppp/lcp.c	/^static void lcp_down(fsm *f) {$/;"	f	typeref:typename:void	file:
lcp_echo_lowerdown	netif/ppp/lcp.c	/^static void lcp_echo_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
lcp_echo_lowerup	netif/ppp/lcp.c	/^static void lcp_echo_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
lcp_extcode	netif/ppp/lcp.c	/^static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {$/;"	f	typeref:typename:int	file:
lcp_finished	netif/ppp/lcp.c	/^static void lcp_finished(fsm *f) {$/;"	f	typeref:typename:void	file:
lcp_init	netif/ppp/lcp.c	/^static void lcp_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
lcp_input	netif/ppp/lcp.c	/^static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {$/;"	f	typeref:typename:void	file:
lcp_lowerdown	netif/ppp/lcp.c	/^void lcp_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
lcp_lowerup	netif/ppp/lcp.c	/^void lcp_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
lcp_nakci	netif/ppp/lcp.c	/^static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {$/;"	f	typeref:typename:int	file:
lcp_open	netif/ppp/lcp.c	/^void lcp_open(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
lcp_printpkt	netif/ppp/lcp.c	/^static int lcp_printpkt(const u_char *p, int plen,$/;"	f	typeref:typename:int	file:
lcp_protrej	netif/ppp/lcp.c	/^static void lcp_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
lcp_received_echo_reply	netif/ppp/lcp.c	/^static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
lcp_rejci	netif/ppp/lcp.c	/^static int lcp_rejci(fsm *f, u_char *p, int len) {$/;"	f	typeref:typename:int	file:
lcp_reqci	netif/ppp/lcp.c	/^static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {$/;"	f	typeref:typename:int	file:
lcp_resetci	netif/ppp/lcp.c	/^static void lcp_resetci(fsm *f) {$/;"	f	typeref:typename:void	file:
lcp_rprotrej	netif/ppp/lcp.c	/^static void lcp_rprotrej(fsm *f, u_char *inp, int len) {$/;"	f	typeref:typename:void	file:
lcp_sprotrej	netif/ppp/lcp.c	/^void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {$/;"	f	typeref:typename:void
lcp_starting	netif/ppp/lcp.c	/^static void lcp_starting(fsm *f) {$/;"	f	typeref:typename:void	file:
lcp_up	netif/ppp/lcp.c	/^static void lcp_up(fsm *f) {$/;"	f	typeref:typename:void	file:
link_down	netif/ppp/auth.c	/^void link_down(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
link_established	netif/ppp/auth.c	/^void link_established(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
link_required	netif/ppp/auth.c	/^void link_required(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
link_terminated	netif/ppp/auth.c	/^void link_terminated(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
listen	include/lwip/sockets.h	/^static inline int listen(int s,int backlog)$/;"	f	typeref:typename:int
lowpan6_calc_crc	netif/lowpan6.c	/^lowpan6_calc_crc(const void* buf, u16_t len)$/;"	f	typeref:typename:u16_t
lowpan6_compress_headers	netif/lowpan6_common.c	/^lowpan6_compress_headers(struct netif *netif, u8_t *inbuf, size_t inbuf_size, u8_t *outbuf, size/;"	f	typeref:typename:err_t
lowpan6_context_lookup	netif/lowpan6_common.c	/^lowpan6_context_lookup(const ip6_addr_t *lowpan6_contexts, const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:s8_t	file:
lowpan6_decompress	netif/lowpan6_common.c	/^lowpan6_decompress(struct pbuf *p, u16_t datagram_size, ip6_addr_t *lowpan6_contexts,$/;"	f	typeref:struct:pbuf *
lowpan6_decompress_hdr	netif/lowpan6_common.c	/^lowpan6_decompress_hdr(u8_t *lowpan6_buffer, size_t lowpan6_bufsize,$/;"	f	typeref:typename:err_t	file:
lowpan6_frag	netif/lowpan6.c	/^lowpan6_frag(struct netif *netif, struct pbuf *p, const struct lowpan6_link_addr *src, const str/;"	f	typeref:typename:err_t	file:
lowpan6_get_address_mode	netif/lowpan6_common.c	/^lowpan6_get_address_mode(const ip6_addr_t *ip6addr, const struct lowpan6_link_addr *mac_addr)$/;"	f	typeref:typename:s8_t
lowpan6_get_address_mode_mc	netif/lowpan6_common.c	/^lowpan6_get_address_mode_mc(const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:s8_t	file:
lowpan6_hwaddr_to_addr	netif/lowpan6.c	/^lowpan6_hwaddr_to_addr(struct netif *netif, struct lowpan6_link_addr *addr)$/;"	f	typeref:typename:err_t	file:
lowpan6_if_init	netif/lowpan6.c	/^lowpan6_if_init(struct netif *netif)$/;"	f	typeref:typename:err_t
lowpan6_input	netif/lowpan6.c	/^lowpan6_input(struct pbuf *p, struct netif *netif)$/;"	f	typeref:typename:err_t
lowpan6_output	netif/lowpan6.c	/^lowpan6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:err_t
lowpan6_parse_iee802154_header	netif/lowpan6.c	/^lowpan6_parse_iee802154_header(struct pbuf *p, struct lowpan6_link_addr *src,$/;"	f	typeref:typename:err_t	file:
lowpan6_set_context	netif/lowpan6.c	/^lowpan6_set_context(u8_t idx, const ip6_addr_t *context)$/;"	f	typeref:typename:err_t
lowpan6_set_pan_id	netif/lowpan6.c	/^lowpan6_set_pan_id(u16_t pan_id)$/;"	f	typeref:typename:err_t
lowpan6_set_short_addr	netif/lowpan6.c	/^lowpan6_set_short_addr(u8_t addr_high, u8_t addr_low)$/;"	f	typeref:typename:err_t
lowpan6_tmr	netif/lowpan6.c	/^lowpan6_tmr(void)$/;"	f	typeref:typename:void
lowpan6_write_iee802154_header	netif/lowpan6.c	/^lowpan6_write_iee802154_header(struct ieee_802154_hdr *hdr, const struct lowpan6_link_addr *src,$/;"	f	typeref:typename:u8_t	file:
lwip_accept	api/sockets.c	/^lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)$/;"	f	typeref:typename:int
lwip_bind	api/sockets.c	/^lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)$/;"	f	typeref:typename:int
lwip_chksum_copy	core/inet_chksum.c	/^lwip_chksum_copy(void *dst, const void *src, u16_t len)$/;"	f	typeref:typename:u16_t
lwip_close	api/sockets.c	/^lwip_close(int s)$/;"	f	typeref:typename:int
lwip_connect	api/sockets.c	/^lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)$/;"	f	typeref:typename:int
lwip_cyclic_timer	core/timeouts.c	/^lwip_cyclic_timer(void *arg)$/;"	f	typeref:typename:void	file:
lwip_fcntl	api/sockets.c	/^lwip_fcntl(int s, int cmd, int val)$/;"	f	typeref:typename:int
lwip_freeaddrinfo	api/netdb.c	/^lwip_freeaddrinfo(struct addrinfo *ai)$/;"	f	typeref:typename:void
lwip_getaddrinfo	api/netdb.c	/^lwip_getaddrinfo(const char *nodename, const char *servname,$/;"	f	typeref:typename:int
lwip_getaddrname	api/sockets.c	/^lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)$/;"	f	typeref:typename:int	file:
lwip_gethostbyname	api/netdb.c	/^lwip_gethostbyname(const char *name)$/;"	f	typeref:struct:hostent *
lwip_gethostbyname_r	api/netdb.c	/^lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,$/;"	f	typeref:typename:int
lwip_getpeername	api/sockets.c	/^lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)$/;"	f	typeref:typename:int
lwip_getsockname	api/sockets.c	/^lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)$/;"	f	typeref:typename:int
lwip_getsockopt	api/sockets.c	/^lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)$/;"	f	typeref:typename:int
lwip_getsockopt_callback	api/sockets.c	/^lwip_getsockopt_callback(void *arg)$/;"	f	typeref:typename:void	file:
lwip_getsockopt_impl	api/sockets.c	/^lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)$/;"	f	typeref:typename:int	file:
lwip_htonl	core/def.c	/^lwip_htonl(u32_t n)$/;"	f	typeref:typename:u32_t
lwip_htons	core/def.c	/^lwip_htons(u16_t n)$/;"	f	typeref:typename:u16_t
lwip_if_indextoname	api/if_api.c	/^lwip_if_indextoname(unsigned int ifindex, char *ifname)$/;"	f	typeref:typename:char *
lwip_if_nametoindex	api/if_api.c	/^lwip_if_nametoindex(const char *ifname)$/;"	f	typeref:typename:unsigned int
lwip_inet_ntop	api/sockets.c	/^lwip_inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f	typeref:typename:const char *
lwip_inet_pton	api/sockets.c	/^lwip_inet_pton(int af, const char *src, void *dst)$/;"	f	typeref:typename:int
lwip_init	core/init.c	/^lwip_init(void)$/;"	f	typeref:typename:PACK_STRUCT_END void
lwip_ioctl	api/sockets.c	/^lwip_ioctl(int s, long cmd, void *argp)$/;"	f	typeref:typename:int
lwip_itoa	core/def.c	/^lwip_itoa(char *result, size_t bufsize, int number)$/;"	f	typeref:typename:void
lwip_link_select_cb	api/sockets.c	/^lwip_link_select_cb(struct lwip_select_cb *select_cb)$/;"	f	typeref:typename:void	file:
lwip_listen	api/sockets.c	/^lwip_listen(int s, int backlog)$/;"	f	typeref:typename:int
lwip_netconn_do_accepted	api/api_msg.c	/^lwip_netconn_do_accepted(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_bind	api/api_msg.c	/^lwip_netconn_do_bind(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_bind_if	api/api_msg.c	/^lwip_netconn_do_bind_if(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_close	api/api_msg.c	/^lwip_netconn_do_close(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_close_internal	api/api_msg.c	/^lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)$/;"	f	typeref:typename:err_t	file:
lwip_netconn_do_connect	api/api_msg.c	/^lwip_netconn_do_connect(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_connected	api/api_msg.c	/^lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)$/;"	f	typeref:typename:err_t	file:
lwip_netconn_do_delconn	api/api_msg.c	/^lwip_netconn_do_delconn(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_disconnect	api/api_msg.c	/^lwip_netconn_do_disconnect(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_dns_found	api/api_msg.c	/^lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)$/;"	f	typeref:typename:void	file:
lwip_netconn_do_getaddr	api/api_msg.c	/^lwip_netconn_do_getaddr(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_gethostbyname	api/api_msg.c	/^lwip_netconn_do_gethostbyname(void *arg)$/;"	f	typeref:typename:void
lwip_netconn_do_join_leave_group	api/api_msg.c	/^lwip_netconn_do_join_leave_group(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_join_leave_group_netif	api/api_msg.c	/^lwip_netconn_do_join_leave_group_netif(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_listen	api/api_msg.c	/^lwip_netconn_do_listen(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_newconn	api/api_msg.c	/^lwip_netconn_do_newconn(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_recv	api/api_msg.c	/^lwip_netconn_do_recv(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_send	api/api_msg.c	/^lwip_netconn_do_send(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_write	api/api_msg.c	/^lwip_netconn_do_write(void *m)$/;"	f	typeref:typename:void
lwip_netconn_do_writemore	api/api_msg.c	/^lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)$/;"	f	typeref:typename:err_t	file:
lwip_netconn_err_to_msg	api/api_msg.c	/^lwip_netconn_err_to_msg(err_t err)$/;"	f	typeref:typename:void *	file:
lwip_netconn_is_deallocated_msg	api/api_msg.c	/^lwip_netconn_is_deallocated_msg(void *msg)$/;"	f	typeref:typename:int
lwip_netconn_is_err_msg	api/api_msg.c	/^lwip_netconn_is_err_msg(void *msg, err_t *err)$/;"	f	typeref:typename:int
lwip_poll	api/sockets.c	/^lwip_poll(struct pollfd *fds, nfds_t nfds, int timeout)$/;"	f	typeref:typename:int
lwip_poll_dec_sockets_used	api/sockets.c	/^lwip_poll_dec_sockets_used(struct pollfd *fds, nfds_t nfds)$/;"	f	typeref:typename:void	file:
lwip_poll_inc_sockets_used	api/sockets.c	/^lwip_poll_inc_sockets_used(struct pollfd *fds, nfds_t nfds)$/;"	f	typeref:typename:void	file:
lwip_poll_should_wake	api/sockets.c	/^lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sende/;"	f	typeref:typename:int	file:
lwip_pollscan	api/sockets.c	/^lwip_pollscan(struct pollfd *fds, nfds_t nfds, enum lwip_pollscan_opts opts)$/;"	f	typeref:typename:int	file:
lwip_read	api/sockets.c	/^lwip_read(int s, void *mem, size_t len)$/;"	f	typeref:typename:ssize_t
lwip_readv	api/sockets.c	/^lwip_readv(int s, const struct iovec *iov, int iovcnt)$/;"	f	typeref:typename:ssize_t
lwip_recv	api/sockets.c	/^lwip_recv(int s, void *mem, size_t len, int flags)$/;"	f	typeref:typename:ssize_t
lwip_recv_tcp	api/sockets.c	/^lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)$/;"	f	typeref:typename:ssize_t	file:
lwip_recv_tcp_from	api/sockets.c	/^lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char/;"	f	typeref:typename:int	file:
lwip_recvfrom	api/sockets.c	/^lwip_recvfrom(int s, void *mem, size_t len, int flags,$/;"	f	typeref:typename:ssize_t
lwip_recvfrom_udp_raw	api/sockets.c	/^lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len/;"	f	typeref:typename:err_t	file:
lwip_recvmsg	api/sockets.c	/^lwip_recvmsg(int s, struct msghdr *message, int flags)$/;"	f	typeref:typename:ssize_t
lwip_select	api/sockets.c	/^lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,$/;"	f	typeref:typename:int
lwip_select_dec_sockets_used	api/sockets.c	/^lwip_select_dec_sockets_used(int maxfdp, fd_set *used_sockets)$/;"	f	typeref:typename:void	file:
lwip_select_inc_sockets_used	api/sockets.c	/^lwip_select_inc_sockets_used(int maxfdp, fd_set *fdset1, fd_set *fdset2, fd_set *fdset3, fd_set /;"	f	typeref:typename:void	file:
lwip_select_inc_sockets_used_set	api/sockets.c	/^lwip_select_inc_sockets_used_set(int maxfdp, fd_set *fdset, fd_set *used_sockets)$/;"	f	typeref:typename:void	file:
lwip_selscan	api/sockets.c	/^lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,$/;"	f	typeref:typename:int	file:
lwip_send	api/sockets.c	/^lwip_send(int s, const void *data, size_t size, int flags)$/;"	f	typeref:typename:ssize_t
lwip_sendmsg	api/sockets.c	/^lwip_sendmsg(int s, const struct msghdr *msg, int flags)$/;"	f	typeref:typename:ssize_t
lwip_sendto	api/sockets.c	/^lwip_sendto(int s, const void *data, size_t size, int flags,$/;"	f	typeref:typename:ssize_t
lwip_setsockopt	api/sockets.c	/^lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)$/;"	f	typeref:typename:int
lwip_setsockopt_callback	api/sockets.c	/^lwip_setsockopt_callback(void *arg)$/;"	f	typeref:typename:void	file:
lwip_setsockopt_impl	api/sockets.c	/^lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)$/;"	f	typeref:typename:int	file:
lwip_shutdown	api/sockets.c	/^lwip_shutdown(int s, int how)$/;"	f	typeref:typename:int
lwip_sock_make_addr	api/sockets.c	/^lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,$/;"	f	typeref:typename:int	file:
lwip_socket	api/sockets.c	/^lwip_socket(int domain, int type, int protocol)$/;"	f	typeref:typename:int
lwip_socket_dbg_get_socket	api/sockets.c	/^lwip_socket_dbg_get_socket(int fd)$/;"	f	typeref:struct:lwip_sock *
lwip_socket_drop_registered_memberships	api/sockets.c	/^lwip_socket_drop_registered_memberships(int s)$/;"	f	typeref:typename:void	file:
lwip_socket_drop_registered_mld6_memberships	api/sockets.c	/^lwip_socket_drop_registered_mld6_memberships(int s)$/;"	f	typeref:typename:void	file:
lwip_socket_register_membership	api/sockets.c	/^lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)$/;"	f	typeref:typename:int	file:
lwip_socket_register_mld6_membership	api/sockets.c	/^lwip_socket_register_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)$/;"	f	typeref:typename:int	file:
lwip_socket_thread_cleanup	api/sockets.c	/^lwip_socket_thread_cleanup(void)$/;"	f	typeref:typename:void
lwip_socket_thread_init	api/sockets.c	/^lwip_socket_thread_init(void)$/;"	f	typeref:typename:void
lwip_socket_unregister_membership	api/sockets.c	/^lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr/;"	f	typeref:typename:void	file:
lwip_socket_unregister_mld6_membership	api/sockets.c	/^lwip_socket_unregister_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)$/;"	f	typeref:typename:void	file:
lwip_sockopt_to_ipopt	api/sockets.c	/^lwip_sockopt_to_ipopt(int optname)$/;"	f	typeref:typename:int	file:
lwip_standard_chksum	core/inet_chksum.c	/^lwip_standard_chksum(const void *dataptr, int len)$/;"	f	typeref:typename:u16_t
lwip_strerr	api/err.c	/^lwip_strerr(err_t err)$/;"	f	typeref:typename:const char *
lwip_stricmp	core/def.c	/^lwip_stricmp(const char *str1, const char *str2)$/;"	f	typeref:typename:int
lwip_strnicmp	core/def.c	/^lwip_strnicmp(const char *str1, const char *str2, size_t len)$/;"	f	typeref:typename:int
lwip_strnstr	core/def.c	/^lwip_strnstr(const char *buffer, const char *token, size_t n)$/;"	f	typeref:typename:char *
lwip_tcp_conn_report	apps/lwiperf/lwiperf.c	/^lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)$/;"	f	typeref:typename:void	file:
lwip_unlink_select_cb	api/sockets.c	/^lwip_unlink_select_cb(struct lwip_select_cb *select_cb)$/;"	f	typeref:typename:void	file:
lwip_write	api/sockets.c	/^lwip_write(int s, const void *data, size_t size)$/;"	f	typeref:typename:ssize_t
lwip_writev	api/sockets.c	/^lwip_writev(int s, const struct iovec *iov, int iovcnt)$/;"	f	typeref:typename:ssize_t
lwiperf_abort	apps/lwiperf/lwiperf.c	/^lwiperf_abort(void *lwiperf_session)$/;"	f	typeref:typename:void
lwiperf_list_add	apps/lwiperf/lwiperf.c	/^lwiperf_list_add(lwiperf_state_base_t *item)$/;"	f	typeref:typename:void	file:
lwiperf_list_find	apps/lwiperf/lwiperf.c	/^lwiperf_list_find(lwiperf_state_base_t *item)$/;"	f	typeref:typename:lwiperf_state_base_t *	file:
lwiperf_list_remove	apps/lwiperf/lwiperf.c	/^lwiperf_list_remove(lwiperf_state_base_t *item)$/;"	f	typeref:typename:void	file:
lwiperf_start_tcp_client	apps/lwiperf/lwiperf.c	/^void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,$/;"	f	typeref:typename:void *
lwiperf_start_tcp_client_default	apps/lwiperf/lwiperf.c	/^void* lwiperf_start_tcp_client_default(const ip_addr_t* remote_addr,$/;"	f	typeref:typename:void *
lwiperf_start_tcp_server	apps/lwiperf/lwiperf.c	/^lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,$/;"	f	typeref:typename:void *
lwiperf_start_tcp_server_default	apps/lwiperf/lwiperf.c	/^lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)$/;"	f	typeref:typename:void *
lwiperf_start_tcp_server_impl	apps/lwiperf/lwiperf.c	/^static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_accept	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_client_connected	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_client_send_more	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_client_sent	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_close	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)$/;"	f	typeref:typename:void	file:
lwiperf_tcp_err	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
lwiperf_tcp_poll	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)$/;"	f	typeref:typename:err_t	file:
lwiperf_tcp_recv	apps/lwiperf/lwiperf.c	/^lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
lwiperf_tx_start_impl	apps/lwiperf/lwiperf.c	/^lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *setting/;"	f	typeref:typename:err_t	file:
lwiperf_tx_start_passive	apps/lwiperf/lwiperf.c	/^lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)$/;"	f	typeref:typename:err_t	file:
magic	netif/ppp/magic.c	/^u32_t magic(void) {$/;"	f	typeref:typename:u32_t
magic_churnrand	netif/ppp/magic.c	/^static void magic_churnrand(char *rand_data, u32_t rand_len) {$/;"	f	typeref:typename:void	file:
magic_init	netif/ppp/magic.c	/^void magic_init(void) {$/;"	f	typeref:typename:void
magic_pow	netif/ppp/magic.c	/^u32_t magic_pow(u8_t pow) {$/;"	f	typeref:typename:u32_t
magic_random_bytes	netif/ppp/magic.c	/^void magic_random_bytes(unsigned char *buf, u32_t buf_len) {$/;"	f	typeref:typename:void
magic_randomize	netif/ppp/magic.c	/^void magic_randomize(void) {$/;"	f	typeref:typename:void
main	apps/http/makefsdata/makefsdata.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
make_bundle_links	netif/ppp/multilink.c	/^static void make_bundle_links(int append)$/;"	f	typeref:typename:void	file:
md4	netif/ppp/polarssl/md4.c	/^void md4( unsigned char *input, int ilen, unsigned char output[16] )$/;"	f	typeref:typename:void
md4_finish	netif/ppp/polarssl/md4.c	/^void md4_finish( md4_context *ctx, unsigned char output[16] )$/;"	f	typeref:typename:void
md4_process	netif/ppp/polarssl/md4.c	/^static void md4_process( md4_context *ctx, const unsigned char data[64] )$/;"	f	typeref:typename:void	file:
md4_starts	netif/ppp/polarssl/md4.c	/^void md4_starts( md4_context *ctx )$/;"	f	typeref:typename:void
md4_update	netif/ppp/polarssl/md4.c	/^void md4_update( md4_context *ctx, const unsigned char *input, int ilen )$/;"	f	typeref:typename:void
md5	netif/ppp/polarssl/md5.c	/^void md5( unsigned char *input, int ilen, unsigned char output[16] )$/;"	f	typeref:typename:void
md5_finish	netif/ppp/polarssl/md5.c	/^void md5_finish( md5_context *ctx, unsigned char output[16] )$/;"	f	typeref:typename:void
md5_process	netif/ppp/polarssl/md5.c	/^static void md5_process( md5_context *ctx, const unsigned char data[64] )$/;"	f	typeref:typename:void	file:
md5_starts	netif/ppp/polarssl/md5.c	/^void md5_starts( md5_context *ctx )$/;"	f	typeref:typename:void
md5_update	netif/ppp/polarssl/md5.c	/^void md5_update( md5_context *ctx, const unsigned char *input, int ilen )$/;"	f	typeref:typename:void
mdns_add_a_answer	apps/mdns/mdns.c	/^mdns_add_a_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif)$/;"	f	typeref:typename:err_t	file:
mdns_add_aaaa_answer	apps/mdns/mdns.c	/^mdns_add_aaaa_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif, int a/;"	f	typeref:typename:err_t	file:
mdns_add_answer	apps/mdns/mdns.c	/^mdns_add_answer(struct mdns_outpacket *reply, struct mdns_domain *domain, u16_t type, u16_t klas/;"	f	typeref:typename:err_t	file:
mdns_add_dotlocal	apps/mdns/mdns.c	/^mdns_add_dotlocal(struct mdns_domain *domain)$/;"	f	typeref:typename:err_t	file:
mdns_add_hostv4_ptr_answer	apps/mdns/mdns.c	/^mdns_add_hostv4_ptr_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif)$/;"	f	typeref:typename:err_t	file:
mdns_add_hostv6_ptr_answer	apps/mdns/mdns.c	/^mdns_add_hostv6_ptr_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif,/;"	f	typeref:typename:err_t	file:
mdns_add_question	apps/mdns/mdns.c	/^mdns_add_question(struct mdns_outpacket *outpkt, struct mdns_domain *domain, u16_t type, u16_t k/;"	f	typeref:typename:err_t	file:
mdns_add_servicename_ptr_answer	apps/mdns/mdns.c	/^mdns_add_servicename_ptr_answer(struct mdns_outpacket *reply, struct mdns_service *service)$/;"	f	typeref:typename:err_t	file:
mdns_add_servicetype_ptr_answer	apps/mdns/mdns.c	/^mdns_add_servicetype_ptr_answer(struct mdns_outpacket *reply, struct mdns_service *service)$/;"	f	typeref:typename:err_t	file:
mdns_add_srv_answer	apps/mdns/mdns.c	/^mdns_add_srv_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct mdns_host *mdns, str/;"	f	typeref:typename:err_t	file:
mdns_add_txt_answer	apps/mdns/mdns.c	/^mdns_add_txt_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct mdns_service *servic/;"	f	typeref:typename:err_t	file:
mdns_announce	apps/mdns/mdns.c	/^mdns_announce(struct netif *netif, const ip_addr_t *destination)$/;"	f	typeref:typename:void	file:
mdns_build_dnssd_domain	apps/mdns/mdns.c	/^mdns_build_dnssd_domain(struct mdns_domain *domain)$/;"	f	typeref:typename:err_t	file:
mdns_build_host_domain	apps/mdns/mdns.c	/^mdns_build_host_domain(struct mdns_domain *domain, struct mdns_host *mdns)$/;"	f	typeref:typename:err_t	file:
mdns_build_reverse_v4_domain	apps/mdns/mdns.c	/^mdns_build_reverse_v4_domain(struct mdns_domain *domain, const ip4_addr_t *addr)$/;"	f	typeref:typename:err_t	file:
mdns_build_reverse_v6_domain	apps/mdns/mdns.c	/^mdns_build_reverse_v6_domain(struct mdns_domain *domain, const ip6_addr_t *addr)$/;"	f	typeref:typename:err_t	file:
mdns_build_service_domain	apps/mdns/mdns.c	/^mdns_build_service_domain(struct mdns_domain *domain, struct mdns_service *service, int include_/;"	f	typeref:typename:err_t	file:
mdns_compress_domain	apps/mdns/mdns.c	/^mdns_compress_domain(struct pbuf *pbuf, u16_t *offset, struct mdns_domain *domain)$/;"	f	typeref:typename:u16_t
mdns_domain_add_label	apps/mdns/mdns.c	/^mdns_domain_add_label(struct mdns_domain *domain, const char *label, u8_t len)$/;"	f	typeref:typename:err_t
mdns_domain_add_label_base	apps/mdns/mdns.c	/^mdns_domain_add_label_base(struct mdns_domain *domain, u8_t len)$/;"	f	typeref:typename:err_t	file:
mdns_domain_add_label_pbuf	apps/mdns/mdns.c	/^mdns_domain_add_label_pbuf(struct mdns_domain *domain, const struct pbuf *p, u16_t offset, u8_t /;"	f	typeref:typename:err_t	file:
mdns_domain_debug_print	apps/mdns/mdns.c	/^mdns_domain_debug_print(struct mdns_domain *domain)$/;"	f	typeref:typename:void	file:
mdns_domain_eq	apps/mdns/mdns.c	/^mdns_domain_eq(struct mdns_domain *a, struct mdns_domain *b)$/;"	f	typeref:typename:int
mdns_handle_question	apps/mdns/mdns.c	/^mdns_handle_question(struct mdns_packet *pkt)$/;"	f	typeref:typename:void	file:
mdns_handle_response	apps/mdns/mdns.c	/^mdns_handle_response(struct mdns_packet *pkt)$/;"	f	typeref:typename:void	file:
mdns_init_outpacket	apps/mdns/mdns.c	/^mdns_init_outpacket(struct mdns_outpacket *out, struct mdns_packet *in)$/;"	f	typeref:typename:void	file:
mdns_netif_ext_status_callback	apps/mdns/mdns.c	/^mdns_netif_ext_status_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_c/;"	f	typeref:typename:void	file:
mdns_prepare_txtdata	apps/mdns/mdns.c	/^mdns_prepare_txtdata(struct mdns_service *service)$/;"	f	typeref:typename:void	file:
mdns_probe	apps/mdns/mdns.c	/^mdns_probe(void* arg)$/;"	f	typeref:typename:void	file:
mdns_read_answer	apps/mdns/mdns.c	/^mdns_read_answer(struct mdns_packet *pkt, struct mdns_answer *answer)$/;"	f	typeref:typename:err_t	file:
mdns_read_question	apps/mdns/mdns.c	/^mdns_read_question(struct mdns_packet *pkt, struct mdns_question *question)$/;"	f	typeref:typename:err_t	file:
mdns_read_rr_info	apps/mdns/mdns.c	/^mdns_read_rr_info(struct mdns_packet *pkt, struct mdns_rr_info *info)$/;"	f	typeref:typename:err_t	file:
mdns_readname	apps/mdns/mdns.c	/^mdns_readname(struct pbuf *p, u16_t offset, struct mdns_domain *domain)$/;"	f	typeref:typename:u16_t
mdns_readname_loop	apps/mdns/mdns.c	/^mdns_readname_loop(struct pbuf *p, u16_t offset, struct mdns_domain *domain, unsigned depth)$/;"	f	typeref:typename:u16_t	file:
mdns_recv	apps/mdns/mdns.c	/^mdns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
mdns_resp_add_netif	apps/mdns/mdns.c	/^mdns_resp_add_netif(struct netif *netif, const char *hostname, u32_t dns_ttl)$/;"	f	typeref:typename:err_t
mdns_resp_add_service	apps/mdns/mdns.c	/^mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_p/;"	f	typeref:typename:s8_t
mdns_resp_add_service_txtitem	apps/mdns/mdns.c	/^mdns_resp_add_service_txtitem(struct mdns_service *service, const char *txt, u8_t txt_len)$/;"	f	typeref:typename:err_t
mdns_resp_announce	apps/mdns/mdns.c	/^mdns_resp_announce(struct netif *netif)$/;"	f	typeref:typename:void
mdns_resp_del_service	apps/mdns/mdns.c	/^mdns_resp_del_service(struct netif *netif, s8_t slot)$/;"	f	typeref:typename:err_t
mdns_resp_init	apps/mdns/mdns.c	/^mdns_resp_init(void)$/;"	f	typeref:typename:void
mdns_resp_register_name_result_cb	apps/mdns/mdns.c	/^mdns_resp_register_name_result_cb(mdns_name_result_cb_t cb)$/;"	f	typeref:typename:void
mdns_resp_remove_netif	apps/mdns/mdns.c	/^mdns_resp_remove_netif(struct netif *netif)$/;"	f	typeref:typename:err_t
mdns_resp_rename_netif	apps/mdns/mdns.c	/^mdns_resp_rename_netif(struct netif *netif, const char *hostname)$/;"	f	typeref:typename:err_t
mdns_resp_rename_service	apps/mdns/mdns.c	/^mdns_resp_rename_service(struct netif *netif, s8_t slot, const char *name)$/;"	f	typeref:typename:err_t
mdns_resp_restart	apps/mdns/mdns.c	/^mdns_resp_restart(struct netif *netif)$/;"	f	typeref:typename:void
mdns_send_outpacket	apps/mdns/mdns.c	/^mdns_send_outpacket(struct mdns_outpacket *outpkt, u8_t flags)$/;"	f	typeref:typename:err_t	file:
mdns_send_probe	apps/mdns/mdns.c	/^mdns_send_probe(struct netif* netif, const ip_addr_t *destination)$/;"	f	typeref:typename:err_t	file:
mdns_write_domain	apps/mdns/mdns.c	/^mdns_write_domain(struct mdns_outpacket *outpkt, struct mdns_domain *domain)$/;"	f	typeref:typename:err_t	file:
mem_calloc	core/mem.c	/^mem_calloc(mem_size_t count, mem_size_t size)$/;"	f	typeref:typename:void *
mem_free	core/mem.c	/^mem_free(void *rmem)$/;"	f	typeref:typename:void
mem_free_callback	api/tcpip.c	/^mem_free_callback(void *m)$/;"	f	typeref:typename:err_t
mem_init	core/mem.c	/^mem_init(void)$/;"	f	typeref:typename:void
mem_link_valid	core/mem.c	/^mem_link_valid(struct mem *mem)$/;"	f	typeref:typename:int	file:
mem_malloc	core/mem.c	/^mem_malloc(mem_size_t size)$/;"	f	typeref:typename:void *
mem_malloc	core/mem.c	/^mem_malloc(mem_size_t size_in)$/;"	f	typeref:typename:void *
mem_overflow_check_element	core/mem.c	/^mem_overflow_check_element(struct mem *mem)$/;"	f	typeref:typename:void	file:
mem_overflow_check_raw	core/mem.c	/^mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)$/;"	f	typeref:typename:void
mem_overflow_init_element	core/mem.c	/^mem_overflow_init_element(struct mem *mem, mem_size_t user_size)$/;"	f	typeref:typename:void	file:
mem_overflow_init_raw	core/mem.c	/^mem_overflow_init_raw(void *p, size_t size)$/;"	f	typeref:typename:void
mem_sanity	core/mem.c	/^mem_sanity(void)$/;"	f	typeref:typename:void	file:
mem_to_ptr	core/mem.c	/^mem_to_ptr(void *mem)$/;"	f	typeref:typename:mem_size_t	file:
mem_trim	core/mem.c	/^mem_trim(void *mem, mem_size_t size)$/;"	f	typeref:typename:void *
mem_trim	core/mem.c	/^mem_trim(void *rmem, mem_size_t new_size)$/;"	f	typeref:typename:void *
memp_free	core/memp.c	/^memp_free(memp_t type, void *mem)$/;"	f	typeref:typename:void
memp_free_pool	core/memp.c	/^memp_free_pool(const struct memp_desc *desc, void *mem)$/;"	f	typeref:typename:void
memp_init	core/memp.c	/^memp_init(void)$/;"	f	typeref:typename:void
memp_init_pool	core/memp.c	/^memp_init_pool(const struct memp_desc *desc)$/;"	f	typeref:typename:void
memp_malloc	core/memp.c	/^memp_malloc(memp_t type)$/;"	f	typeref:typename:void *
memp_malloc_pool	core/memp.c	/^memp_malloc_pool(const struct memp_desc *desc)$/;"	f	typeref:typename:void *
memp_overflow_check_all	core/memp.c	/^memp_overflow_check_all(void)$/;"	f	typeref:typename:void	file:
memp_overflow_check_element	core/memp.c	/^memp_overflow_check_element(struct memp *p, const struct memp_desc *desc)$/;"	f	typeref:typename:void	file:
memp_overflow_init_element	core/memp.c	/^memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)$/;"	f	typeref:typename:void	file:
memp_sanity	core/memp.c	/^memp_sanity(const struct memp_desc *desc)$/;"	f	typeref:typename:int	file:
method_name	netif/ppp/ccp.c	/^static const char *method_name(ccp_options *opt, ccp_options *opt2) {$/;"	f	typeref:typename:const char *	file:
mld6_delayed_report	core/ipv6/mld6.c	/^mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)$/;"	f	typeref:typename:void	file:
mld6_input	core/ipv6/mld6.c	/^mld6_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
mld6_joingroup	core/ipv6/mld6.c	/^mld6_joingroup(const ip6_addr_t *srcaddr, const ip6_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
mld6_joingroup_netif	core/ipv6/mld6.c	/^mld6_joingroup_netif(struct netif *netif, const ip6_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
mld6_leavegroup	core/ipv6/mld6.c	/^mld6_leavegroup(const ip6_addr_t *srcaddr, const ip6_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
mld6_leavegroup_netif	core/ipv6/mld6.c	/^mld6_leavegroup_netif(struct netif *netif, const ip6_addr_t *groupaddr)$/;"	f	typeref:typename:err_t
mld6_lookfor_group	core/ipv6/mld6.c	/^mld6_lookfor_group(struct netif *ifp, const ip6_addr_t *addr)$/;"	f	typeref:struct:mld_group *
mld6_new_group	core/ipv6/mld6.c	/^mld6_new_group(struct netif *ifp, const ip6_addr_t *addr)$/;"	f	typeref:struct:mld_group *	file:
mld6_remove_group	core/ipv6/mld6.c	/^mld6_remove_group(struct netif *netif, struct mld_group *group)$/;"	f	typeref:typename:err_t	file:
mld6_report_groups	core/ipv6/mld6.c	/^mld6_report_groups(struct netif *netif)$/;"	f	typeref:typename:void
mld6_send	core/ipv6/mld6.c	/^mld6_send(struct netif *netif, struct mld_group *group, u8_t type)$/;"	f	typeref:typename:void	file:
mld6_stop	core/ipv6/mld6.c	/^mld6_stop(struct netif *netif)$/;"	f	typeref:typename:err_t
mld6_timeout_cb	core/ipv6/mld6.c	/^static void mld6_timeout_cb(void *arg)$/;"	f	typeref:typename:void	file:
mld6_tmr	core/ipv6/mld6.c	/^mld6_tmr(void)$/;"	f	typeref:typename:void
mp_bundle_terminated	netif/ppp/multilink.c	/^void mp_bundle_terminated()$/;"	f	typeref:typename:void
mp_check_options	netif/ppp/multilink.c	/^mp_check_options()$/;"	f	typeref:typename:void
mp_exit_bundle	netif/ppp/multilink.c	/^void mp_exit_bundle()$/;"	f	typeref:typename:void
mp_join_bundle	netif/ppp/multilink.c	/^mp_join_bundle()$/;"	f	typeref:typename:int
mppe_comp_reset	netif/ppp/mppe.c	/^void mppe_comp_reset(ppp_pcb *pcb, ppp_mppe_state *state)$/;"	f	typeref:typename:void
mppe_compress	netif/ppp/mppe.c	/^mppe_compress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb, u16_t protocol)$/;"	f	typeref:typename:err_t
mppe_decomp_reset	netif/ppp/mppe.c	/^void mppe_decomp_reset(ppp_pcb *pcb, ppp_mppe_state *state)$/;"	f	typeref:typename:void
mppe_decompress	netif/ppp/mppe.c	/^mppe_decompress(ppp_pcb *pcb, ppp_mppe_state *state, struct pbuf **pb)$/;"	f	typeref:typename:err_t
mppe_init	netif/ppp/mppe.c	/^mppe_init(ppp_pcb *pcb, ppp_mppe_state *state, u8_t options)$/;"	f	typeref:typename:void
mppe_rekey	netif/ppp/mppe.c	/^static void mppe_rekey(ppp_mppe_state * state, int initial_key)$/;"	f	typeref:typename:void	file:
mppe_set_key	netif/ppp/mppe.c	/^void mppe_set_key(ppp_pcb *pcb, ppp_mppe_state *state, u8_t *key) {$/;"	f	typeref:typename:void
mqtt_append_request	apps/mqtt/mqtt.c	/^mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)$/;"	f	typeref:typename:void	file:
mqtt_clear_requests	apps/mqtt/mqtt.c	/^mqtt_clear_requests(struct mqtt_request_t **tail)$/;"	f	typeref:typename:void	file:
mqtt_client_connect	apps/mqtt/mqtt.c	/^mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection/;"	f	typeref:typename:err_t
mqtt_client_free	apps/mqtt/mqtt.c	/^mqtt_client_free(mqtt_client_t *client)$/;"	f	typeref:typename:void
mqtt_client_is_connected	apps/mqtt/mqtt.c	/^mqtt_client_is_connected(mqtt_client_t *client)$/;"	f	typeref:typename:u8_t
mqtt_client_new	apps/mqtt/mqtt.c	/^mqtt_client_new(void)$/;"	f	typeref:typename:mqtt_client_t *
mqtt_close	apps/mqtt/mqtt.c	/^mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)$/;"	f	typeref:typename:void	file:
mqtt_create_request	apps/mqtt/mqtt.c	/^mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request/;"	f	typeref:struct:mqtt_request_t *	file:
mqtt_cyclic_timer	apps/mqtt/mqtt.c	/^mqtt_cyclic_timer(void *arg)$/;"	f	typeref:typename:void	file:
mqtt_delete_request	apps/mqtt/mqtt.c	/^mqtt_delete_request(struct mqtt_request_t *r)$/;"	f	typeref:typename:void	file:
mqtt_disconnect	apps/mqtt/mqtt.c	/^mqtt_disconnect(mqtt_client_t *client)$/;"	f	typeref:typename:void
mqtt_incomming_suback	apps/mqtt/mqtt.c	/^mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)$/;"	f	typeref:typename:void	file:
mqtt_init_requests	apps/mqtt/mqtt.c	/^mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)$/;"	f	typeref:typename:void	file:
mqtt_message_received	apps/mqtt/mqtt.c	/^mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_l/;"	f	typeref:typename:mqtt_connection_status_t	file:
mqtt_msg_type_to_str	apps/mqtt/mqtt.c	/^mqtt_msg_type_to_str(u8_t msg_type)$/;"	f	typeref:typename:const char *	file:
mqtt_output_append_buf	apps/mqtt/mqtt.c	/^mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)$/;"	f	typeref:typename:void	file:
mqtt_output_append_fixed_header	apps/mqtt/mqtt.c	/^mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,$/;"	f	typeref:typename:void	file:
mqtt_output_append_string	apps/mqtt/mqtt.c	/^mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)$/;"	f	typeref:typename:void	file:
mqtt_output_append_u16	apps/mqtt/mqtt.c	/^void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)$/;"	f	typeref:typename:void	file:
mqtt_output_append_u8	apps/mqtt/mqtt.c	/^mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)$/;"	f	typeref:typename:void	file:
mqtt_output_check_space	apps/mqtt/mqtt.c	/^mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)$/;"	f	typeref:typename:u8_t	file:
mqtt_output_send	apps/mqtt/mqtt.c	/^mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)$/;"	f	typeref:typename:void	file:
mqtt_parse_incoming	apps/mqtt/mqtt.c	/^mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)$/;"	f	typeref:typename:mqtt_connection_status_t	file:
mqtt_publish	apps/mqtt/mqtt.c	/^mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length/;"	f	typeref:typename:err_t
mqtt_request_time_elapsed	apps/mqtt/mqtt.c	/^mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)$/;"	f	typeref:typename:void	file:
mqtt_ringbuf_advance_get_idx	apps/mqtt/mqtt.c	/^mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)$/;"	f	typeref:typename:void	file:
mqtt_ringbuf_get_ptr	apps/mqtt/mqtt.c	/^mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)$/;"	f	typeref:typename:u8_t *	file:
mqtt_ringbuf_len	apps/mqtt/mqtt.c	/^mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)$/;"	f	typeref:typename:u16_t	file:
mqtt_ringbuf_put	apps/mqtt/mqtt.c	/^mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)$/;"	f	typeref:typename:void	file:
mqtt_set_inpub_callback	apps/mqtt/mqtt.c	/^mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,$/;"	f	typeref:typename:void
mqtt_sub_unsub	apps/mqtt/mqtt.c	/^mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *a/;"	f	typeref:typename:err_t
mqtt_take_request	apps/mqtt/mqtt.c	/^mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)$/;"	f	typeref:struct:mqtt_request_t *	file:
mqtt_tcp_connect_cb	apps/mqtt/mqtt.c	/^mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)$/;"	f	typeref:typename:err_t	file:
mqtt_tcp_err_cb	apps/mqtt/mqtt.c	/^mqtt_tcp_err_cb(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
mqtt_tcp_poll_cb	apps/mqtt/mqtt.c	/^mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)$/;"	f	typeref:typename:err_t	file:
mqtt_tcp_recv_cb	apps/mqtt/mqtt.c	/^mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
mqtt_tcp_sent_cb	apps/mqtt/mqtt.c	/^mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
msg_generate_packet_id	apps/mqtt/mqtt.c	/^msg_generate_packet_id(mqtt_client_t *client)$/;"	f	typeref:typename:u16_t	file:
name_of_pn_file	netif/ppp/eap.c	/^name_of_pn_file()$/;"	f	typeref:typename:char *	file:
napt_debug_print	core/ipv4/ip4_napt.c	/^napt_debug_print(void)$/;"	f	typeref:typename:void	file:
nd6_adjust_mld_membership	core/ipv6/nd6.c	/^nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)$/;"	f	typeref:typename:void
nd6_cleanup_netif	core/ipv6/nd6.c	/^nd6_cleanup_netif(struct netif *netif)$/;"	f	typeref:typename:void
nd6_clear_destination_cache	core/ipv6/nd6.c	/^nd6_clear_destination_cache(void)$/;"	f	typeref:typename:void
nd6_duplicate_addr_detected	core/ipv6/nd6.c	/^nd6_duplicate_addr_detected(struct netif *netif, s8_t addr_idx)$/;"	f	typeref:typename:void	file:
nd6_find_destination_cache_entry	core/ipv6/nd6.c	/^nd6_find_destination_cache_entry(const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:s16_t	file:
nd6_find_neighbor_cache_entry	core/ipv6/nd6.c	/^nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:s8_t	file:
nd6_find_route	core/ipv6/nd6.c	/^nd6_find_route(const ip6_addr_t *ip6addr)$/;"	f	typeref:struct:netif *
nd6_free_neighbor_cache_entry	core/ipv6/nd6.c	/^nd6_free_neighbor_cache_entry(s8_t i)$/;"	f	typeref:typename:void	file:
nd6_free_q	core/ipv6/nd6.c	/^nd6_free_q(struct nd6_q_entry *q)$/;"	f	typeref:typename:void	file:
nd6_get_destination_mtu	core/ipv6/nd6.c	/^nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)$/;"	f	typeref:typename:u16_t
nd6_get_next_hop_addr_or_queue	core/ipv6/nd6.c	/^nd6_get_next_hop_addr_or_queue(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr, c/;"	f	typeref:typename:err_t
nd6_get_next_hop_entry	core/ipv6/nd6.c	/^nd6_get_next_hop_entry(const ip6_addr_t *ip6addr, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_get_onlink_prefix	core/ipv6/nd6.c	/^nd6_get_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_get_router	core/ipv6/nd6.c	/^nd6_get_router(const ip6_addr_t *router_addr, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_input	core/ipv6/nd6.c	/^nd6_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
nd6_is_prefix_in_netif	core/ipv6/nd6.c	/^nd6_is_prefix_in_netif(const ip6_addr_t *ip6addr, struct netif *netif)$/;"	f	typeref:typename:int	file:
nd6_new_destination_cache_entry	core/ipv6/nd6.c	/^nd6_new_destination_cache_entry(void)$/;"	f	typeref:typename:s16_t	file:
nd6_new_neighbor_cache_entry	core/ipv6/nd6.c	/^nd6_new_neighbor_cache_entry(void)$/;"	f	typeref:typename:s8_t	file:
nd6_new_onlink_prefix	core/ipv6/nd6.c	/^nd6_new_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_new_router	core/ipv6/nd6.c	/^nd6_new_router(const ip6_addr_t *router_addr, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_process_autoconfig_prefix	core/ipv6/nd6.c	/^nd6_process_autoconfig_prefix(struct netif *netif,$/;"	f	typeref:typename:void	file:
nd6_queue_packet	core/ipv6/nd6.c	/^nd6_queue_packet(s8_t neighbor_index, struct pbuf *q)$/;"	f	typeref:typename:err_t	file:
nd6_reachability_hint	core/ipv6/nd6.c	/^nd6_reachability_hint(const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:void
nd6_restart_netif	core/ipv6/nd6.c	/^nd6_restart_netif(struct netif *netif)$/;"	f	typeref:typename:void
nd6_select_router	core/ipv6/nd6.c	/^nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)$/;"	f	typeref:typename:s8_t	file:
nd6_send_na	core/ipv6/nd6.c	/^nd6_send_na(struct netif *netif, const ip6_addr_t *target_addr, u8_t flags)$/;"	f	typeref:typename:void	file:
nd6_send_neighbor_cache_probe	core/ipv6/nd6.c	/^nd6_send_neighbor_cache_probe(struct nd6_neighbor_cache_entry *entry, u8_t flags)$/;"	f	typeref:typename:void	file:
nd6_send_ns	core/ipv6/nd6.c	/^nd6_send_ns(struct netif *netif, const ip6_addr_t *target_addr, u8_t flags)$/;"	f	typeref:typename:void	file:
nd6_send_q	core/ipv6/nd6.c	/^nd6_send_q(s8_t i)$/;"	f	typeref:typename:void	file:
nd6_send_rs	core/ipv6/nd6.c	/^nd6_send_rs(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
nd6_set_cb	core/ipv6/nd6.c	/^void nd6_set_cb(struct netif *netif, void (*cb)(struct netif *netif, u8_t ip_index))$/;"	f	typeref:typename:void
nd6_tmr	core/ipv6/nd6.c	/^nd6_tmr(void)$/;"	f	typeref:typename:void
netbiosns_init	apps/netbiosns/netbiosns.c	/^netbiosns_init(void)$/;"	f	typeref:typename:void
netbiosns_name_decode	apps/netbiosns/netbiosns.c	/^netbiosns_name_decode(const char *name_enc, char *name_dec, int name_dec_len)$/;"	f	typeref:typename:int	file:
netbiosns_recv	apps/netbiosns/netbiosns.c	/^netbiosns_recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t por/;"	f	typeref:typename:void	file:
netbiosns_set_name	apps/netbiosns/netbiosns.c	/^netbiosns_set_name(const char *hostname)$/;"	f	typeref:typename:void
netbiosns_stop	apps/netbiosns/netbiosns.c	/^netbiosns_stop(void)$/;"	f	typeref:typename:void
netbuf_alloc	api/netbuf.c	/^netbuf_alloc(struct netbuf *buf, u16_t size)$/;"	f	typeref:typename:void *
netbuf_chain	api/netbuf.c	/^netbuf_chain(struct netbuf *head, struct netbuf *tail)$/;"	f	typeref:typename:void
netbuf_data	api/netbuf.c	/^netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)$/;"	f	typeref:typename:err_t
netbuf_delete	api/netbuf.c	/^netbuf_delete(struct netbuf *buf)$/;"	f	typeref:typename:void
netbuf_first	api/netbuf.c	/^netbuf_first(struct netbuf *buf)$/;"	f	typeref:typename:void
netbuf_free	api/netbuf.c	/^netbuf_free(struct netbuf *buf)$/;"	f	typeref:typename:void
netbuf_new	api/netbuf.c	/^netbuf *netbuf_new(void)$/;"	f	typeref:struct:netbuf *
netbuf_next	api/netbuf.c	/^netbuf_next(struct netbuf *buf)$/;"	f	typeref:typename:s8_t
netbuf_ref	api/netbuf.c	/^netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)$/;"	f	typeref:typename:err_t
netconn_accept	api/api_lib.c	/^netconn_accept(struct netconn *conn, struct netconn **new_conn)$/;"	f	typeref:typename:err_t
netconn_alloc	api/api_msg.c	/^netconn_alloc(enum netconn_type t, netconn_callback callback)$/;"	f	typeref:struct:netconn *
netconn_apimsg	api/api_lib.c	/^netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)$/;"	f	typeref:typename:err_t	file:
netconn_bind	api/api_lib.c	/^netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:err_t
netconn_bind_if	api/api_lib.c	/^netconn_bind_if(struct netconn *conn, u8_t if_idx)$/;"	f	typeref:typename:err_t
netconn_close	api/api_lib.c	/^netconn_close(struct netconn *conn)$/;"	f	typeref:typename:err_t
netconn_close_shutdown	api/api_lib.c	/^netconn_close_shutdown(struct netconn *conn, u8_t how)$/;"	f	typeref:typename:err_t	file:
netconn_connect	api/api_lib.c	/^netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:err_t
netconn_delete	api/api_lib.c	/^netconn_delete(struct netconn *conn)$/;"	f	typeref:typename:err_t
netconn_disconnect	api/api_lib.c	/^netconn_disconnect(struct netconn *conn)$/;"	f	typeref:typename:err_t
netconn_drain	api/api_msg.c	/^netconn_drain(struct netconn *conn)$/;"	f	typeref:typename:void	file:
netconn_err	api/api_lib.c	/^netconn_err(struct netconn *conn)$/;"	f	typeref:typename:err_t
netconn_free	api/api_msg.c	/^netconn_free(struct netconn *conn)$/;"	f	typeref:typename:void
netconn_getaddr	api/api_lib.c	/^netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)$/;"	f	typeref:typename:err_t
netconn_gethostbyname_addrtype	api/api_lib.c	/^netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)$/;"	f	typeref:typename:err_t
netconn_join_leave_group	api/api_lib.c	/^netconn_join_leave_group(struct netconn *conn,$/;"	f	typeref:typename:err_t
netconn_join_leave_group_netif	api/api_lib.c	/^netconn_join_leave_group_netif(struct netconn *conn,$/;"	f	typeref:typename:err_t
netconn_listen_with_backlog	api/api_lib.c	/^netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)$/;"	f	typeref:typename:err_t
netconn_mark_mbox_invalid	api/api_msg.c	/^netconn_mark_mbox_invalid(struct netconn *conn)$/;"	f	typeref:typename:void	file:
netconn_new_with_proto_and_callback	api/api_lib.c	/^netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)$/;"	f	typeref:struct:netconn *
netconn_prepare_delete	api/api_lib.c	/^netconn_prepare_delete(struct netconn *conn)$/;"	f	typeref:typename:err_t
netconn_recv	api/api_lib.c	/^netconn_recv(struct netconn *conn, struct netbuf **new_buf)$/;"	f	typeref:typename:err_t
netconn_recv_data	api/api_lib.c	/^netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
netconn_recv_data_tcp	api/api_lib.c	/^netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)$/;"	f	typeref:typename:err_t	file:
netconn_recv_tcp_pbuf	api/api_lib.c	/^netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)$/;"	f	typeref:typename:err_t
netconn_recv_tcp_pbuf_flags	api/api_lib.c	/^netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)$/;"	f	typeref:typename:err_t
netconn_recv_udp_raw_netbuf	api/api_lib.c	/^netconn_recv_udp_raw_netbuf(struct netconn *conn, struct netbuf **new_buf)$/;"	f	typeref:typename:err_t
netconn_recv_udp_raw_netbuf_flags	api/api_lib.c	/^netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)$/;"	f	typeref:typename:err_t
netconn_send	api/api_lib.c	/^netconn_send(struct netconn *conn, struct netbuf *buf)$/;"	f	typeref:typename:err_t
netconn_sendto	api/api_lib.c	/^netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:err_t
netconn_shutdown	api/api_lib.c	/^netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)$/;"	f	typeref:typename:err_t
netconn_tcp_recvd	api/api_lib.c	/^netconn_tcp_recvd(struct netconn *conn, size_t len)$/;"	f	typeref:typename:err_t
netconn_tcp_recvd_msg	api/api_lib.c	/^netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)$/;"	f	typeref:typename:err_t	file:
netconn_thread_cleanup	api/api_lib.c	/^netconn_thread_cleanup(void)$/;"	f	typeref:typename:void
netconn_thread_init	api/api_lib.c	/^netconn_thread_init(void)$/;"	f	typeref:typename:void
netconn_write_partly	api/api_lib.c	/^netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,$/;"	f	typeref:typename:err_t
netconn_write_vectors_partly	api/api_lib.c	/^netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,$/;"	f	typeref:typename:err_t
netif_add	core/netif.c	/^netif_add(struct netif *netif,$/;"	f	typeref:struct:netif *
netif_add_ext_callback	core/netif.c	/^netif_add_ext_callback(netif_ext_callback_t *callback, netif_ext_callback_fn fn)$/;"	f	typeref:typename:void
netif_add_ip6_address	core/netif.c	/^netif_add_ip6_address(struct netif *netif, const ip6_addr_t *ip6addr, s8_t *chosen_idx)$/;"	f	typeref:typename:err_t
netif_add_noaddr	core/netif.c	/^netif_add_noaddr(struct netif *netif, void *state, netif_init_fn init, netif_input_fn input)$/;"	f	typeref:struct:netif *
netif_alloc_client_data_id	core/netif.c	/^netif_alloc_client_data_id(void)$/;"	f	typeref:typename:u8_t
netif_create_ip6_linklocal_address	core/netif.c	/^netif_create_ip6_linklocal_address(struct netif *netif, u8_t from_mac_48bit)$/;"	f	typeref:typename:void
netif_do_ip_addr_changed	core/netif.c	/^netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)$/;"	f	typeref:typename:void	file:
netif_do_set_gw	core/netif.c	/^netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)$/;"	f	typeref:typename:int	file:
netif_do_set_ipaddr	core/netif.c	/^netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)$/;"	f	typeref:typename:int	file:
netif_do_set_netmask	core/netif.c	/^netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)$/;"	f	typeref:typename:int	file:
netif_find	core/netif.c	/^netif_find(const char *name)$/;"	f	typeref:struct:netif *
netif_get_by_index	core/netif.c	/^netif_get_by_index(u8_t idx)$/;"	f	typeref:struct:netif *
netif_get_ip6_addr_match	core/netif.c	/^netif_get_ip6_addr_match(struct netif *netif, const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:s8_t
netif_get_mtu	netif/ppp/ppp.c	/^int netif_get_mtu(ppp_pcb *pcb) {$/;"	f	typeref:typename:int
netif_index_to_name	core/netif.c	/^netif_index_to_name(u8_t idx, char *name)$/;"	f	typeref:typename:char *
netif_init	core/netif.c	/^netif_init(void)$/;"	f	typeref:typename:void
netif_input	core/netif.c	/^netif_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
netif_invoke_ext_callback	core/netif.c	/^netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callba/;"	f	typeref:typename:void
netif_ip6_addr_set	core/netif.c	/^netif_ip6_addr_set(struct netif *netif, s8_t addr_idx, const ip6_addr_t *addr6)$/;"	f	typeref:typename:void
netif_ip6_addr_set_parts	core/netif.c	/^netif_ip6_addr_set_parts(struct netif *netif, s8_t addr_idx, u32_t i0, u32_t i1, u32_t i2, u32_t/;"	f	typeref:typename:void
netif_ip6_addr_set_state	core/netif.c	/^netif_ip6_addr_set_state(struct netif *netif, s8_t addr_idx, u8_t state)$/;"	f	typeref:typename:void
netif_issue_reports	core/netif.c	/^netif_issue_reports(struct netif *netif, u8_t report_type)$/;"	f	typeref:typename:void	file:
netif_loop_output	core/netif.c	/^netif_loop_output(struct netif *netif, struct pbuf *p)$/;"	f	typeref:typename:err_t
netif_loop_output_ipv4	core/netif.c	/^netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)$/;"	f	typeref:typename:err_t	file:
netif_loop_output_ipv6	core/netif.c	/^netif_loop_output_ipv6(struct netif *netif, struct pbuf *p, const ip6_addr_t *addr)$/;"	f	typeref:typename:err_t	file:
netif_loopif_init	core/netif.c	/^netif_loopif_init(struct netif *netif)$/;"	f	typeref:typename:err_t	file:
netif_name_to_index	core/netif.c	/^netif_name_to_index(const char *name)$/;"	f	typeref:typename:u8_t
netif_null_output_ip4	core/netif.c	/^netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:err_t	file:
netif_null_output_ip6	core/netif.c	/^netif_null_output_ip6(struct netif *netif, struct pbuf *p, const ip6_addr_t *ipaddr)$/;"	f	typeref:typename:err_t	file:
netif_poll	core/netif.c	/^netif_poll(struct netif *netif)$/;"	f	typeref:typename:void
netif_poll_all	core/netif.c	/^netif_poll_all(void)$/;"	f	typeref:typename:void
netif_remove	core/netif.c	/^netif_remove(struct netif *netif)$/;"	f	typeref:typename:void
netif_remove_ext_callback	core/netif.c	/^netif_remove_ext_callback(netif_ext_callback_t* callback)$/;"	f	typeref:typename:void
netif_set_addr	core/netif.c	/^netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,$/;"	f	typeref:typename:void
netif_set_default	core/netif.c	/^netif_set_default(struct netif *netif)$/;"	f	typeref:typename:void
netif_set_down	core/netif.c	/^netif_set_down(struct netif *netif)$/;"	f	typeref:typename:void
netif_set_garp_flag	core/netif.c	/^void netif_set_garp_flag(struct netif *netif)$/;"	f	typeref:typename:void
netif_set_gw	core/netif.c	/^netif_set_gw(struct netif *netif, const ip4_addr_t *gw)$/;"	f	typeref:typename:void
netif_set_ipaddr	core/netif.c	/^netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:void
netif_set_link_callback	core/netif.c	/^netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)$/;"	f	typeref:typename:void
netif_set_link_down	core/netif.c	/^netif_set_link_down(struct netif *netif)$/;"	f	typeref:typename:void
netif_set_link_up	core/netif.c	/^netif_set_link_up(struct netif *netif)$/;"	f	typeref:typename:void
netif_set_mtu	netif/ppp/ppp.c	/^void netif_set_mtu(ppp_pcb *pcb, int mtu) {$/;"	f	typeref:typename:void
netif_set_netmask	core/netif.c	/^netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)$/;"	f	typeref:typename:void
netif_set_remove_callback	core/netif.c	/^netif_set_remove_callback(struct netif *netif, netif_status_callback_fn remove_callback)$/;"	f	typeref:typename:void
netif_set_status_callback	core/netif.c	/^netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)$/;"	f	typeref:typename:void
netif_set_up	core/netif.c	/^netif_set_up(struct netif *netif)$/;"	f	typeref:typename:void
netif_to_num	apps/snmp/snmp_core.c	/^netif_to_num(const struct netif *netif)$/;"	f	typeref:typename:u8_t
netifapi_arp_add	api/netifapi.c	/^netifapi_arp_add(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, enum netifapi_arp_entry typ/;"	f	typeref:typename:err_t
netifapi_arp_remove	api/netifapi.c	/^netifapi_arp_remove(const ip4_addr_t *ipaddr, enum netifapi_arp_entry type)$/;"	f	typeref:typename:err_t
netifapi_do_index_to_name	api/netifapi.c	/^netifapi_do_index_to_name(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
netifapi_do_name_to_index	api/netifapi.c	/^netifapi_do_name_to_index(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
netifapi_do_netif_add	api/netifapi.c	/^netifapi_do_netif_add(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
netifapi_do_netif_common	api/netifapi.c	/^netifapi_do_netif_common(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
netifapi_do_netif_set_addr	api/netifapi.c	/^netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
netifapi_netif_add	api/netifapi.c	/^netifapi_netif_add(struct netif *netif,$/;"	f	typeref:typename:err_t
netifapi_netif_common	api/netifapi.c	/^netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,$/;"	f	typeref:typename:err_t
netifapi_netif_index_to_name	api/netifapi.c	/^netifapi_netif_index_to_name(u8_t idx, char *name)$/;"	f	typeref:typename:err_t
netifapi_netif_name_to_index	api/netifapi.c	/^netifapi_netif_name_to_index(const char *name, u8_t *idx)$/;"	f	typeref:typename:err_t
netifapi_netif_set_addr	api/netifapi.c	/^netifapi_netif_set_addr(struct netif *netif,$/;"	f	typeref:typename:err_t
network_phase	netif/ppp/auth.c	/^static void network_phase(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
new_phase	netif/ppp/ppp.c	/^void new_phase(ppp_pcb *pcb, int p) {$/;"	f	typeref:typename:void
noopt	netif/ppp/lcp.c	/^noopt(argv)$/;"	f	file:
np_down	netif/ppp/auth.c	/^void np_down(ppp_pcb *pcb, int proto) {$/;"	f	typeref:typename:void
np_finished	netif/ppp/auth.c	/^void np_finished(ppp_pcb *pcb, int proto) {$/;"	f	typeref:typename:void
np_up	netif/ppp/auth.c	/^void np_up(ppp_pcb *pcb, int proto) {$/;"	f	typeref:typename:void
open_pn_file	netif/ppp/eap.c	/^open_pn_file(modebits)$/;"	f	file:
owns_unit	netif/ppp/multilink.c	/^owns_unit(key, unit)$/;"	f	file:
parse_num	netif/ppp/multilink.c	/^parse_num(str, key, valp)$/;"	f	file:
pbuf_add_header	core/pbuf.c	/^pbuf_add_header(struct pbuf *p, size_t header_size_increment)$/;"	f	typeref:typename:u8_t
pbuf_add_header_force	core/pbuf.c	/^pbuf_add_header_force(struct pbuf *p, size_t header_size_increment)$/;"	f	typeref:typename:u8_t
pbuf_add_header_impl	core/pbuf.c	/^pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)$/;"	f	typeref:typename:u8_t	file:
pbuf_alloc	core/pbuf.c	/^pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)$/;"	f	typeref:struct:pbuf *
pbuf_alloc_reference	core/pbuf.c	/^pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)$/;"	f	typeref:struct:pbuf *
pbuf_alloced_custom	core/pbuf.c	/^pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,$/;"	f	typeref:struct:pbuf *
pbuf_cat	core/pbuf.c	/^pbuf_cat(struct pbuf *h, struct pbuf *t)$/;"	f	typeref:typename:void
pbuf_chain	core/pbuf.c	/^pbuf_chain(struct pbuf *h, struct pbuf *t)$/;"	f	typeref:typename:void
pbuf_clen	core/pbuf.c	/^pbuf_clen(const struct pbuf *p)$/;"	f	typeref:typename:u16_t
pbuf_clone	core/pbuf.c	/^pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)$/;"	f	typeref:struct:pbuf *
pbuf_coalesce	core/pbuf.c	/^pbuf_coalesce(struct pbuf *p, pbuf_layer layer)$/;"	f	typeref:struct:pbuf *
pbuf_copy	core/pbuf.c	/^pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)$/;"	f	typeref:typename:err_t
pbuf_copy_partial	core/pbuf.c	/^pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)$/;"	f	typeref:typename:u16_t
pbuf_copy_partial_pbuf	core/pbuf.c	/^pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offse/;"	f	typeref:typename:err_t
pbuf_dechain	core/pbuf.c	/^pbuf_dechain(struct pbuf *p)$/;"	f	typeref:struct:pbuf *
pbuf_fill_chksum	core/pbuf.c	/^pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,$/;"	f	typeref:typename:err_t
pbuf_free	core/pbuf.c	/^pbuf_free(struct pbuf *p)$/;"	f	typeref:typename:u8_t
pbuf_free_callback	api/tcpip.c	/^pbuf_free_callback(struct pbuf *p)$/;"	f	typeref:typename:err_t
pbuf_free_header	core/pbuf.c	/^pbuf_free_header(struct pbuf *q, u16_t size)$/;"	f	typeref:struct:pbuf *
pbuf_free_int	api/tcpip.c	/^pbuf_free_int(void *p)$/;"	f	typeref:typename:void	file:
pbuf_free_ooseq	core/pbuf.c	/^pbuf_free_ooseq(void)$/;"	f	typeref:typename:void	file:
pbuf_free_ooseq_callback	core/pbuf.c	/^pbuf_free_ooseq_callback(void *arg)$/;"	f	typeref:typename:void	file:
pbuf_get_at	core/pbuf.c	/^pbuf_get_at(const struct pbuf *p, u16_t offset)$/;"	f	typeref:typename:u8_t
pbuf_get_contiguous	core/pbuf.c	/^pbuf_get_contiguous(const struct pbuf *p, void *buffer, size_t bufsize, u16_t len, u16_t offset)$/;"	f	typeref:typename:void *
pbuf_header	core/pbuf.c	/^pbuf_header(struct pbuf *p, s16_t header_size_increment)$/;"	f	typeref:typename:u8_t
pbuf_header_force	core/pbuf.c	/^pbuf_header_force(struct pbuf *p, s16_t header_size_increment)$/;"	f	typeref:typename:u8_t
pbuf_header_impl	core/pbuf.c	/^pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)$/;"	f	typeref:typename:u8_t	file:
pbuf_init_alloced_pbuf	core/pbuf.c	/^pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, /;"	f	typeref:typename:void	file:
pbuf_memcmp	core/pbuf.c	/^pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)$/;"	f	typeref:typename:u16_t
pbuf_memfind	core/pbuf.c	/^pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)$/;"	f	typeref:typename:u16_t
pbuf_pool_is_empty	core/pbuf.c	/^pbuf_pool_is_empty(void)$/;"	f	typeref:typename:void	file:
pbuf_put_at	core/pbuf.c	/^pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)$/;"	f	typeref:typename:void
pbuf_realloc	core/pbuf.c	/^pbuf_realloc(struct pbuf *p, u16_t new_len)$/;"	f	typeref:typename:void
pbuf_ref	core/pbuf.c	/^pbuf_ref(struct pbuf *p)$/;"	f	typeref:typename:void
pbuf_remove_header	core/pbuf.c	/^pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)$/;"	f	typeref:typename:u8_t
pbuf_skip	core/pbuf.c	/^pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)$/;"	f	typeref:struct:pbuf *
pbuf_skip_const	core/pbuf.c	/^pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)$/;"	f	typeref:typename:const struct pbuf *	file:
pbuf_split_64k	core/pbuf.c	/^void pbuf_split_64k(struct pbuf *p, struct pbuf **rest)$/;"	f	typeref:typename:void
pbuf_strstr	core/pbuf.c	/^pbuf_strstr(const struct pbuf *p, const char *substr)$/;"	f	typeref:typename:u16_t
pbuf_take	core/pbuf.c	/^pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)$/;"	f	typeref:typename:err_t
pbuf_take_at	core/pbuf.c	/^pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)$/;"	f	typeref:typename:err_t
pbuf_try_get_at	core/pbuf.c	/^pbuf_try_get_at(const struct pbuf *p, u16_t offset)$/;"	f	typeref:typename:int
pcb_new	api/api_msg.c	/^pcb_new(struct api_msg *msg)$/;"	f	typeref:typename:void	file:
plug_holes	core/mem.c	/^plug_holes(struct mem *mem)$/;"	f	typeref:typename:void	file:
pncrypt_setkey	netif/ppp/eap.c	/^pncrypt_setkey(int timeoffs)$/;"	f	typeref:typename:bool	file:
poll_tcp	api/api_msg.c	/^poll_tcp(void *arg, struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
ppp_close	netif/ppp/ppp.c	/^ppp_close(ppp_pcb *pcb, u8_t nocarrier)$/;"	f	typeref:typename:err_t
ppp_connect	netif/ppp/ppp.c	/^err_t ppp_connect(ppp_pcb *pcb, u16_t holdoff) {$/;"	f	typeref:typename:err_t
ppp_dbglog	netif/ppp/utils.c	/^void ppp_dbglog(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_do_connect	netif/ppp/ppp.c	/^static void ppp_do_connect(void *arg) {$/;"	f	typeref:typename:void	file:
ppp_dump_packet	netif/ppp/utils.c	/^void ppp_dump_packet(ppp_pcb *pcb, const char *tag, unsigned char *p, int len) {$/;"	f	typeref:typename:void
ppp_error	netif/ppp/utils.c	/^void ppp_error(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_fatal	netif/ppp/utils.c	/^void ppp_fatal(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_format_packet	netif/ppp/utils.c	/^static void ppp_format_packet(const u_char *p, int len,$/;"	f	typeref:typename:void	file:
ppp_free	netif/ppp/ppp.c	/^err_t ppp_free(ppp_pcb *pcb) {$/;"	f	typeref:typename:err_t
ppp_get_fcs	netif/ppp/pppos.c	/^ppp_get_fcs(u8_t byte)$/;"	f	typeref:typename:u16_t	file:
ppp_info	netif/ppp/utils.c	/^void ppp_info(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_init	netif/ppp/ppp.c	/^int ppp_init(void)$/;"	f	typeref:typename:int
ppp_input	netif/ppp/ppp.c	/^void ppp_input(ppp_pcb *pcb, struct pbuf *pb) {$/;"	f	typeref:typename:void
ppp_ioctl	netif/ppp/ppp.c	/^ppp_ioctl(ppp_pcb *pcb, u8_t cmd, void *arg)$/;"	f	typeref:typename:err_t
ppp_link_end	netif/ppp/ppp.c	/^void ppp_link_end(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
ppp_link_failed	netif/ppp/ppp.c	/^void ppp_link_failed(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
ppp_link_terminated	netif/ppp/ppp.c	/^void ppp_link_terminated(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
ppp_listen	netif/ppp/ppp.c	/^err_t ppp_listen(ppp_pcb *pcb) {$/;"	f	typeref:typename:err_t
ppp_log_write	netif/ppp/utils.c	/^static void ppp_log_write(int level, char *buf) {$/;"	f	typeref:typename:void	file:
ppp_logit	netif/ppp/utils.c	/^static void ppp_logit(int level, const char *fmt, va_list args) {$/;"	f	typeref:typename:void	file:
ppp_netif_init_cb	netif/ppp/ppp.c	/^static err_t ppp_netif_init_cb(struct netif *netif) {$/;"	f	typeref:typename:err_t	file:
ppp_netif_output	netif/ppp/ppp.c	/^static err_t ppp_netif_output(struct netif *netif, struct pbuf *pb, u16_t protocol) {$/;"	f	typeref:typename:err_t	file:
ppp_netif_output_ip4	netif/ppp/ppp.c	/^static err_t ppp_netif_output_ip4(struct netif *netif, struct pbuf *pb, const ip4_addr_t *ipaddr/;"	f	typeref:typename:err_t	file:
ppp_netif_output_ip6	netif/ppp/ppp.c	/^static err_t ppp_netif_output_ip6(struct netif *netif, struct pbuf *pb, const ip6_addr_t *ipaddr/;"	f	typeref:typename:err_t	file:
ppp_new	netif/ppp/ppp.c	/^ppp_pcb *ppp_new(struct netif *pppif, const struct link_callbacks *callbacks, void *link_ctx_cb,/;"	f	typeref:typename:ppp_pcb *
ppp_notice	netif/ppp/utils.c	/^void ppp_notice(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_print_string	netif/ppp/utils.c	/^void ppp_print_string(const u_char *p, int len, void (*printer) (void *, const char *, ...), voi/;"	f	typeref:typename:void
ppp_recv_config	netif/ppp/ppp.c	/^int ppp_recv_config(ppp_pcb *pcb, int mru, u32_t accm, int pcomp, int accomp) {$/;"	f	typeref:typename:int
ppp_send_config	netif/ppp/ppp.c	/^int ppp_send_config(ppp_pcb *pcb, int mtu, u32_t accm, int pcomp, int accomp) {$/;"	f	typeref:typename:int
ppp_set_auth	netif/ppp/ppp.c	/^void ppp_set_auth(ppp_pcb *pcb, u8_t authtype, const char *user, const char *passwd) {$/;"	f	typeref:typename:void
ppp_set_mppe	netif/ppp/ppp.c	/^void ppp_set_mppe(ppp_pcb *pcb, u8_t flags) {$/;"	f	typeref:typename:void
ppp_set_notify_phase_callback	netif/ppp/ppp.c	/^void ppp_set_notify_phase_callback(ppp_pcb *pcb, ppp_notify_phase_cb_fn notify_phase_cb) {$/;"	f	typeref:typename:void
ppp_slprintf	netif/ppp/utils.c	/^int ppp_slprintf(char *buf, int buflen, const char *fmt, ...) {$/;"	f	typeref:typename:int
ppp_start	netif/ppp/ppp.c	/^void ppp_start(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
ppp_strlcat	netif/ppp/utils.c	/^size_t ppp_strlcat(char *dest, const char *src, size_t len) {$/;"	f	typeref:typename:size_t
ppp_strlcpy	netif/ppp/utils.c	/^size_t ppp_strlcpy(char *dest, const char *src, size_t len) {$/;"	f	typeref:typename:size_t
ppp_vslp_printer	netif/ppp/utils.c	/^static void ppp_vslp_printer(void *arg, const char *fmt, ...) {$/;"	f	typeref:typename:void	file:
ppp_vslprintf	netif/ppp/utils.c	/^int ppp_vslprintf(char *buf, int buflen, const char *fmt, va_list args) {$/;"	f	typeref:typename:int
ppp_warn	netif/ppp/utils.c	/^void ppp_warn(const char *fmt, ...) {$/;"	f	typeref:typename:void
ppp_write	netif/ppp/ppp.c	/^err_t ppp_write(ppp_pcb *pcb, struct pbuf *p) {$/;"	f	typeref:typename:err_t
pppapi_close	netif/ppp/pppapi.c	/^pppapi_close(ppp_pcb *pcb, u8_t nocarrier)$/;"	f	typeref:typename:err_t
pppapi_connect	netif/ppp/pppapi.c	/^pppapi_connect(ppp_pcb *pcb, u16_t holdoff)$/;"	f	typeref:typename:err_t
pppapi_do_ppp_close	netif/ppp/pppapi.c	/^pppapi_do_ppp_close(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_connect	netif/ppp/pppapi.c	/^pppapi_do_ppp_connect(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_free	netif/ppp/pppapi.c	/^pppapi_do_ppp_free(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_ioctl	netif/ppp/pppapi.c	/^pppapi_do_ppp_ioctl(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_listen	netif/ppp/pppapi.c	/^pppapi_do_ppp_listen(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_set_auth	netif/ppp/pppapi.c	/^pppapi_do_ppp_set_auth(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_ppp_set_default	netif/ppp/pppapi.c	/^pppapi_do_ppp_set_default(struct tcpip_api_call_data *m)$/;"	f	file:
pppapi_do_ppp_set_notify_phase_callback	netif/ppp/pppapi.c	/^pppapi_do_ppp_set_notify_phase_callback(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_pppoe_create	netif/ppp/pppapi.c	/^pppapi_do_pppoe_create(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_pppol2tp_create	netif/ppp/pppapi.c	/^pppapi_do_pppol2tp_create(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_do_pppos_create	netif/ppp/pppapi.c	/^pppapi_do_pppos_create(struct tcpip_api_call_data *m)$/;"	f	typeref:typename:err_t	file:
pppapi_free	netif/ppp/pppapi.c	/^pppapi_free(ppp_pcb *pcb)$/;"	f	typeref:typename:err_t
pppapi_ioctl	netif/ppp/pppapi.c	/^pppapi_ioctl(ppp_pcb *pcb, u8_t cmd, void *arg)$/;"	f	typeref:typename:err_t
pppapi_listen	netif/ppp/pppapi.c	/^pppapi_listen(ppp_pcb *pcb)$/;"	f	typeref:typename:err_t
pppapi_pppoe_create	netif/ppp/pppapi.c	/^pppapi_pppoe_create(struct netif *pppif, struct netif *ethif, const char *service_name,$/;"	f	typeref:typename:ppp_pcb *
pppapi_pppol2tp_create	netif/ppp/pppapi.c	/^pppapi_pppol2tp_create(struct netif *pppif, struct netif *netif, ip_addr_t *ipaddr, u16_t port,$/;"	f	typeref:typename:ppp_pcb *
pppapi_pppos_create	netif/ppp/pppapi.c	/^pppapi_pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,$/;"	f	typeref:typename:ppp_pcb *
pppapi_set_auth	netif/ppp/pppapi.c	/^pppapi_set_auth(ppp_pcb *pcb, u8_t authtype, const char *user, const char *passwd)$/;"	f	typeref:typename:void
pppapi_set_default	netif/ppp/pppapi.c	/^pppapi_set_default(ppp_pcb *pcb)$/;"	f	typeref:typename:err_t
pppapi_set_notify_phase_callback	netif/ppp/pppapi.c	/^pppapi_set_notify_phase_callback(ppp_pcb *pcb, ppp_notify_phase_cb_fn notify_phase_cb)$/;"	f	typeref:typename:err_t
pppcrypt_56_to_64_bit_key	netif/ppp/pppcrypt.c	/^void pppcrypt_56_to_64_bit_key(u_char *key, u_char * des_key) {$/;"	f	typeref:typename:void
pppcrypt_get_7bits	netif/ppp/pppcrypt.c	/^static u_char pppcrypt_get_7bits(u_char *input, int startBit) {$/;"	f	typeref:typename:u_char	file:
pppoe_abort_connect	netif/ppp/pppoe.c	/^pppoe_abort_connect(struct pppoe_softc *sc)$/;"	f	typeref:typename:void	file:
pppoe_connect	netif/ppp/pppoe.c	/^pppoe_connect(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:void	file:
pppoe_create	netif/ppp/pppoe.c	/^ppp_pcb *pppoe_create(struct netif *pppif,$/;"	f	typeref:typename:ppp_pcb *
pppoe_data_input	netif/ppp/pppoe.c	/^pppoe_data_input(struct netif *netif, struct pbuf *pb)$/;"	f	typeref:typename:void
pppoe_destroy	netif/ppp/pppoe.c	/^pppoe_destroy(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:err_t	file:
pppoe_disc_input	netif/ppp/pppoe.c	/^pppoe_disc_input(struct netif *netif, struct pbuf *pb)$/;"	f	typeref:typename:void
pppoe_disconnect	netif/ppp/pppoe.c	/^pppoe_disconnect(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:void	file:
pppoe_find_softc_by_hunique	netif/ppp/pppoe.c	/^static struct pppoe_softc* pppoe_find_softc_by_hunique(u8_t *token, size_t len, struct netif *rc/;"	f	typeref:struct:pppoe_softc *	file:
pppoe_find_softc_by_session	netif/ppp/pppoe.c	/^static struct pppoe_softc* pppoe_find_softc_by_session(u_int session, struct netif *rcvif) {$/;"	f	typeref:struct:pppoe_softc *	file:
pppoe_netif_output	netif/ppp/pppoe.c	/^static err_t pppoe_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol) {$/;"	f	typeref:typename:err_t	file:
pppoe_output	netif/ppp/pppoe.c	/^pppoe_output(struct pppoe_softc *sc, struct pbuf *pb)$/;"	f	typeref:typename:err_t	file:
pppoe_send_padi	netif/ppp/pppoe.c	/^pppoe_send_padi(struct pppoe_softc *sc)$/;"	f	typeref:typename:err_t	file:
pppoe_send_pado	netif/ppp/pppoe.c	/^pppoe_send_pado(struct pppoe_softc *sc)$/;"	f	typeref:typename:err_t	file:
pppoe_send_padr	netif/ppp/pppoe.c	/^pppoe_send_padr(struct pppoe_softc *sc)$/;"	f	typeref:typename:err_t	file:
pppoe_send_pads	netif/ppp/pppoe.c	/^pppoe_send_pads(struct pppoe_softc *sc)$/;"	f	typeref:typename:err_t	file:
pppoe_send_padt	netif/ppp/pppoe.c	/^pppoe_send_padt(struct netif *outgoing_if, u_int session, const u8_t *dest)$/;"	f	typeref:typename:err_t	file:
pppoe_timeout	netif/ppp/pppoe.c	/^pppoe_timeout(void *arg)$/;"	f	typeref:typename:void	file:
pppoe_write	netif/ppp/pppoe.c	/^static err_t pppoe_write(ppp_pcb *ppp, void *ctx, struct pbuf *p) {$/;"	f	typeref:typename:err_t	file:
pppoe_xmit	netif/ppp/pppoe.c	/^pppoe_xmit(struct pppoe_softc *sc, struct pbuf *pb)$/;"	f	typeref:typename:err_t	file:
pppol2tp_abort_connect	netif/ppp/pppol2tp.c	/^static void pppol2tp_abort_connect(pppol2tp_pcb *l2tp) {$/;"	f	typeref:typename:void	file:
pppol2tp_connect	netif/ppp/pppol2tp.c	/^static void pppol2tp_connect(ppp_pcb *ppp, void *ctx) {$/;"	f	typeref:typename:void	file:
pppol2tp_create	netif/ppp/pppol2tp.c	/^ppp_pcb *pppol2tp_create(struct netif *pppif,$/;"	f	typeref:typename:ppp_pcb *
pppol2tp_destroy	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_destroy(ppp_pcb *ppp, void *ctx) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_disconnect	netif/ppp/pppol2tp.c	/^static void pppol2tp_disconnect(ppp_pcb *ppp, void *ctx) {$/;"	f	typeref:typename:void	file:
pppol2tp_dispatch_control_packet	netif/ppp/pppol2tp.c	/^static void pppol2tp_dispatch_control_packet(pppol2tp_pcb *l2tp, u16_t port, struct pbuf *p, u16/;"	f	typeref:typename:void	file:
pppol2tp_input	netif/ppp/pppol2tp.c	/^static void pppol2tp_input(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr/;"	f	typeref:typename:void	file:
pppol2tp_netif_output	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_iccn	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_iccn(pppol2tp_pcb *l2tp, u16_t ns) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_icrq	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_icrq(pppol2tp_pcb *l2tp, u16_t ns) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_scccn	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_scccn(pppol2tp_pcb *l2tp, u16_t ns) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_sccrq	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_sccrq(pppol2tp_pcb *l2tp) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_stopccn	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_stopccn(pppol2tp_pcb *l2tp, u16_t ns) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_send_zlb	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_send_zlb(pppol2tp_pcb *l2tp, u16_t ns, u16_t nr) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_timeout	netif/ppp/pppol2tp.c	/^static void pppol2tp_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
pppol2tp_udp_send	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_udp_send(pppol2tp_pcb *l2tp, struct pbuf *pb) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_write	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_write(ppp_pcb *ppp, void *ctx, struct pbuf *p) {$/;"	f	typeref:typename:err_t	file:
pppol2tp_xmit	netif/ppp/pppol2tp.c	/^static err_t pppol2tp_xmit(pppol2tp_pcb *l2tp, struct pbuf *pb) {$/;"	f	typeref:typename:err_t	file:
pppos_connect	netif/ppp/pppos.c	/^pppos_connect(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:void	file:
pppos_create	netif/ppp/pppos.c	/^ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,$/;"	f	typeref:typename:ppp_pcb *
pppos_destroy	netif/ppp/pppos.c	/^pppos_destroy(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:err_t	file:
pppos_disconnect	netif/ppp/pppos.c	/^pppos_disconnect(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:void	file:
pppos_input	netif/ppp/pppos.c	/^pppos_input(ppp_pcb *ppp, u8_t *s, int l)$/;"	f	typeref:typename:PACK_STRUCT_END void
pppos_input_callback	netif/ppp/pppos.c	/^static void pppos_input_callback(void *arg) {$/;"	f	typeref:typename:void	file:
pppos_input_drop	netif/ppp/pppos.c	/^pppos_input_drop(pppos_pcb *pppos)$/;"	f	typeref:typename:void	file:
pppos_input_free_current_packet	netif/ppp/pppos.c	/^pppos_input_free_current_packet(pppos_pcb *pppos)$/;"	f	typeref:typename:void	file:
pppos_input_sys	netif/ppp/pppos.c	/^err_t pppos_input_sys(struct pbuf *p, struct netif *inp) {$/;"	f	typeref:typename:err_t
pppos_input_tcpip	netif/ppp/pppos.c	/^pppos_input_tcpip(ppp_pcb *ppp, u8_t *s, int l)$/;"	f	typeref:typename:err_t
pppos_listen	netif/ppp/pppos.c	/^pppos_listen(ppp_pcb *ppp, void *ctx)$/;"	f	typeref:typename:void	file:
pppos_netif_output	netif/ppp/pppos.c	/^pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)$/;"	f	typeref:typename:err_t	file:
pppos_output_append	netif/ppp/pppos.c	/^pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)$/;"	f	typeref:typename:err_t	file:
pppos_output_last	netif/ppp/pppos.c	/^pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)$/;"	f	typeref:typename:err_t	file:
pppos_recv_config	netif/ppp/pppos.c	/^pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)$/;"	f	typeref:typename:void	file:
pppos_send_config	netif/ppp/pppos.c	/^pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)$/;"	f	typeref:typename:void	file:
pppos_write	netif/ppp/pppos.c	/^pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
print_link_stats	netif/ppp/ppp.c	/^void print_link_stats() {$/;"	f	typeref:typename:void
print_usage	apps/http/makefsdata/makefsdata.c	/^static void print_usage(void)$/;"	f	typeref:typename:void	file:
printendpoint	netif/ppp/lcp.c	/^printendpoint(opt, printer, arg)$/;"	f	file:
printipaddr	netif/ppp/ipcp.c	/^printipaddr(opt, printer, arg)$/;"	f	file:
process_file	apps/http/makefsdata/makefsdata.c	/^int process_file(FILE *data_file, FILE *struct_file, const char *filename)$/;"	f	typeref:typename:int
process_file_data	apps/http/makefsdata/makefsdata.c	/^static void process_file_data(FILE *data_file, u8_t *file_data, size_t file_size)$/;"	f	typeref:typename:void	file:
process_sub	apps/http/makefsdata/makefsdata.c	/^int process_sub(FILE *data_file, FILE *struct_file)$/;"	f	typeref:typename:int
protocol_name	netif/ppp/ppp.c	/^const char * protocol_name(int proto) {$/;"	f	typeref:typename:const char *
ptr_to_mem	core/mem.c	/^ptr_to_mem(mem_size_t ptr)$/;"	f	typeref:struct:mem *	file:
pub_ack_rec_rel_response	apps/mqtt/mqtt.c	/^pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)$/;"	f	typeref:typename:err_t	file:
raw_bind	core/raw.c	/^raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
raw_bind_netif	core/raw.c	/^raw_bind_netif(struct raw_pcb *pcb, const struct netif *netif)$/;"	f	typeref:typename:void
raw_connect	core/raw.c	/^raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
raw_disconnect	core/raw.c	/^raw_disconnect(struct raw_pcb *pcb)$/;"	f	typeref:typename:void
raw_input	core/raw.c	/^raw_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:raw_input_state_t
raw_input_local_match	core/raw.c	/^raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)$/;"	f	typeref:typename:u8_t	file:
raw_netif_ip_addr_changed	core/raw.c	/^void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)$/;"	f	typeref:typename:void
raw_new	core/raw.c	/^raw_new(u8_t proto)$/;"	f	typeref:struct:raw_pcb *
raw_new_ip_type	core/raw.c	/^raw_new_ip_type(u8_t type, u8_t proto)$/;"	f	typeref:struct:raw_pcb *
raw_recv	core/raw.c	/^raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)$/;"	f	typeref:typename:void
raw_remove	core/raw.c	/^raw_remove(struct raw_pcb *pcb)$/;"	f	typeref:typename:void
raw_send	core/raw.c	/^raw_send(struct raw_pcb *pcb, struct pbuf *p)$/;"	f	typeref:typename:err_t
raw_sendto	core/raw.c	/^raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)$/;"	f	typeref:typename:err_t
raw_sendto_if_src	core/raw.c	/^raw_sendto_if_src(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,$/;"	f	typeref:typename:err_t
read	include/lwip/sockets.h	/^static inline ssize_t read(int s,void *mem,size_t len)$/;"	f	typeref:typename:ssize_t
recv	apps/tftp/tftp_server.c	/^recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
recv	include/lwip/sockets.h	/^static inline ssize_t recv(int s,void *mem,size_t len,int flags)$/;"	f	typeref:typename:ssize_t
recv_raw	api/api_msg.c	/^recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:u8_t	file:
recv_tcp	api/api_msg.c	/^recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
recv_udp	api/api_msg.c	/^recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:void	file:
recvfrom	include/lwip/sockets.h	/^static inline ssize_t recvfrom(int s,void *mem,size_t len,int flags,struct sockaddr *from,sockle/;"	f	typeref:typename:ssize_t
recvmsg	include/lwip/sockets.h	/^static inline ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags)$/;"	f	typeref:typename:ssize_t
register_filename	apps/http/makefsdata/makefsdata.c	/^static void register_filename(const char *qualifiedName)$/;"	f	typeref:typename:void	file:
remove_bundle_link	netif/ppp/multilink.c	/^static void remove_bundle_link()$/;"	f	typeref:typename:void	file:
remove_pn_file	netif/ppp/eap.c	/^remove_pn_file()$/;"	f	typeref:typename:void	file:
resend_data	apps/tftp/tftp_server.c	/^resend_data(void)$/;"	f	typeref:typename:void	file:
reset_link_stats	netif/ppp/ppp.c	/^void reset_link_stats(int u) {$/;"	f	typeref:typename:void
rfc7668_compress	netif/lowpan6_ble.c	/^rfc7668_compress(struct netif *netif, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
rfc7668_if_init	netif/lowpan6_ble.c	/^rfc7668_if_init(struct netif *netif)$/;"	f	typeref:typename:err_t
rfc7668_input	netif/lowpan6_ble.c	/^rfc7668_input(struct pbuf * p, struct netif *netif)$/;"	f	typeref:typename:err_t
rfc7668_output	netif/lowpan6_ble.c	/^rfc7668_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)$/;"	f	typeref:typename:err_t
rfc7668_set_addr	netif/lowpan6_ble.c	/^rfc7668_set_addr(struct lowpan6_link_addr *addr, const u8_t *in_addr, size_t in_addr_len, int is/;"	f	typeref:typename:err_t	file:
rfc7668_set_context	netif/lowpan6_ble.c	/^rfc7668_set_context(u8_t idx, const ip6_addr_t *context)$/;"	f	typeref:typename:err_t
rfc7668_set_local_addr_eui64	netif/lowpan6_ble.c	/^rfc7668_set_local_addr_eui64(struct netif *netif, const u8_t *local_addr, size_t local_addr_len)$/;"	f	typeref:typename:err_t
rfc7668_set_local_addr_mac48	netif/lowpan6_ble.c	/^rfc7668_set_local_addr_mac48(struct netif *netif, const u8_t *local_addr, size_t local_addr_len,/;"	f	typeref:typename:err_t
rfc7668_set_peer_addr_eui64	netif/lowpan6_ble.c	/^rfc7668_set_peer_addr_eui64(struct netif *netif, const u8_t *peer_addr, size_t peer_addr_len)$/;"	f	typeref:typename:err_t
rfc7668_set_peer_addr_mac48	netif/lowpan6_ble.c	/^rfc7668_set_peer_addr_mac48(struct netif *netif, const u8_t *peer_addr, size_t peer_addr_len, in/;"	f	typeref:typename:err_t
s_put_ascii	apps/http/makefsdata/makefsdata.c	/^int s_put_ascii(char *buf, const char *ascii_string, int len, int *i)$/;"	f	typeref:typename:int
sdns	netif/ppp/ppp.c	/^int sdns(ppp_pcb *pcb, u32_t ns1, u32_t ns2) {$/;"	f	typeref:typename:int
select	include/lwip/sockets.h	/^static inline int select(int maxfdp1,fd_set *readset,fd_set *writeset,fd_set *exceptset,struct t/;"	f	typeref:typename:int
select_check_waiters	api/sockets.c	/^static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent, /;"	f	typeref:typename:void	file:
send	include/lwip/sockets.h	/^static inline ssize_t send(int s,const void *dataptr,size_t size,int flags)$/;"	f	typeref:typename:ssize_t
send_ack	apps/tftp/tftp_server.c	/^send_ack(u16_t blknum)$/;"	f	typeref:typename:void	file:
send_data	apps/tftp/tftp_server.c	/^send_data(void)$/;"	f	typeref:typename:void	file:
send_error	apps/tftp/tftp_server.c	/^send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)$/;"	f	typeref:typename:void	file:
sendhup	netif/ppp/multilink.c	/^static void sendhup(char *str)$/;"	f	typeref:typename:void	file:
sendmsg	include/lwip/sockets.h	/^static inline ssize_t sendmsg(int s,const struct msghdr *message,int flags)$/;"	f	typeref:typename:ssize_t
sendto	include/lwip/sockets.h	/^static inline ssize_t sendto(int s,const void *dataptr,size_t size,int flags,const struct sockad/;"	f	typeref:typename:ssize_t
sent_tcp	api/api_msg.c	/^sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
setbsdcomp	netif/ppp/ccp.c	/^setbsdcomp(argv)$/;"	f	file:
setdeflate	netif/ppp/ccp.c	/^setdeflate(argv)$/;"	f	file:
setdnsaddr	netif/ppp/ipcp.c	/^setdnsaddr(argv)$/;"	f	file:
setendpoint	netif/ppp/lcp.c	/^setendpoint(argv)$/;"	f	file:
setifaceid	netif/ppp/ipv6cp.c	/^setifaceid(argv)$/;"	f	file:
setnetmask	netif/ppp/ipcp.c	/^setnetmask(argv)$/;"	f	file:
setsockopt	include/lwip/sockets.h	/^static inline int setsockopt(int s,int level,int optname,const void *opval,socklen_t optlen)$/;"	f	typeref:typename:int
setup_tcp	api/api_msg.c	/^setup_tcp(struct netconn *conn)$/;"	f	typeref:typename:void	file:
setvjslots	netif/ppp/ipcp.c	/^setvjslots(argv)$/;"	f	file:
setwinsaddr	netif/ppp/ipcp.c	/^setwinsaddr(argv)$/;"	f	file:
sha1	netif/ppp/polarssl/sha1.c	/^void sha1( unsigned char *input, int ilen, unsigned char output[20] )$/;"	f	typeref:typename:void
sha1_finish	netif/ppp/polarssl/sha1.c	/^void sha1_finish( sha1_context *ctx, unsigned char output[20] )$/;"	f	typeref:typename:void
sha1_process	netif/ppp/polarssl/sha1.c	/^static void sha1_process( sha1_context *ctx, const unsigned char data[64] )$/;"	f	typeref:typename:void	file:
sha1_starts	netif/ppp/polarssl/sha1.c	/^void sha1_starts( sha1_context *ctx )$/;"	f	typeref:typename:void
sha1_update	netif/ppp/polarssl/sha1.c	/^void sha1_update( sha1_context *ctx, const unsigned char *input, int ilen )$/;"	f	typeref:typename:void
shutdown	include/lwip/sockets.h	/^static inline int shutdown(int s,int how)$/;"	f	typeref:typename:int
sif6addr	netif/ppp/ppp.c	/^int sif6addr(ppp_pcb *pcb, eui64_t our_eui64, eui64_t his_eui64) {$/;"	f	typeref:typename:int
sif6down	netif/ppp/ppp.c	/^int sif6down(ppp_pcb *pcb) {$/;"	f	typeref:typename:int
sif6up	netif/ppp/ppp.c	/^int sif6up(ppp_pcb *pcb) {$/;"	f	typeref:typename:int
sifaddr	netif/ppp/ppp.c	/^int sifaddr(ppp_pcb *pcb, u32_t our_adr, u32_t his_adr, u32_t netmask) {$/;"	f	typeref:typename:int
sifdown	netif/ppp/ppp.c	/^int sifdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:int
sifnpmode	netif/ppp/ppp.c	/^int sifnpmode(ppp_pcb *pcb, int proto, enum NPmode mode) {$/;"	f	typeref:typename:int
sifup	netif/ppp/ppp.c	/^int sifup(ppp_pcb *pcb) {$/;"	f	typeref:typename:int
sifvjcomp	netif/ppp/ppp.c	/^int sifvjcomp(ppp_pcb *pcb, int vjcomp, int cidcomp, int maxcid) {$/;"	f	typeref:typename:int
slipif_init	netif/slipif.c	/^slipif_init(struct netif *netif)$/;"	f	typeref:typename:err_t
slipif_loop_thread	netif/slipif.c	/^slipif_loop_thread(void *nf)$/;"	f	typeref:typename:void	file:
slipif_output	netif/slipif.c	/^slipif_output(struct netif *netif, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
slipif_output_v4	netif/slipif.c	/^slipif_output_v4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)$/;"	f	typeref:typename:err_t	file:
slipif_output_v6	netif/slipif.c	/^slipif_output_v6(struct netif *netif, struct pbuf *p, const ip6_addr_t *ipaddr)$/;"	f	typeref:typename:err_t	file:
slipif_poll	netif/slipif.c	/^slipif_poll(struct netif *netif)$/;"	f	typeref:typename:void
slipif_process_rxqueue	netif/slipif.c	/^slipif_process_rxqueue(struct netif *netif)$/;"	f	typeref:typename:void
slipif_received_byte	netif/slipif.c	/^slipif_received_byte(struct netif *netif, u8_t data)$/;"	f	typeref:typename:void
slipif_received_bytes	netif/slipif.c	/^slipif_received_bytes(struct netif *netif, u8_t *data, u8_t len)$/;"	f	typeref:typename:void
slipif_rxbyte	netif/slipif.c	/^slipif_rxbyte(struct netif *netif, u8_t c)$/;"	f	typeref:struct:pbuf *	file:
slipif_rxbyte_enqueue	netif/slipif.c	/^slipif_rxbyte_enqueue(struct netif *netif, u8_t data)$/;"	f	typeref:typename:void	file:
slipif_rxbyte_input	netif/slipif.c	/^slipif_rxbyte_input(struct netif *netif, u8_t c)$/;"	f	typeref:typename:void	file:
smtp_base64_encode	apps/smtp/smtp.c	/^smtp_base64_encode(char* target, size_t target_len, const char* source, size_t source_len)$/;"	f	typeref:typename:size_t	file:
smtp_close	apps/smtp/smtp.c	/^smtp_close(struct smtp_session *s, struct altcp_pcb *pcb, u8_t result,$/;"	f	typeref:typename:void	file:
smtp_dns_found	apps/smtp/smtp.c	/^smtp_dns_found(const char* hostname, const ip_addr_t *ipaddr, void *arg)$/;"	f	typeref:typename:void	file:
smtp_free	apps/smtp/smtp.c	/^smtp_free(struct smtp_session *s, u8_t result, u16_t srv_err, err_t err)$/;"	f	typeref:typename:void	file:
smtp_free_struct	apps/smtp/smtp.c	/^static void smtp_free_struct(struct smtp_session *s)$/;"	f	typeref:typename:void	file:
smtp_is_response	apps/smtp/smtp.c	/^smtp_is_response(struct smtp_session *s)$/;"	f	typeref:typename:u16_t	file:
smtp_is_response_finished	apps/smtp/smtp.c	/^smtp_is_response_finished(struct smtp_session *s)$/;"	f	typeref:typename:err_t	file:
smtp_pbuf_str	apps/smtp/smtp.c	/^smtp_pbuf_str(struct pbuf* p)$/;"	f	typeref:typename:const char *	file:
smtp_prepare_auth_login_pass	apps/smtp/smtp.c	/^smtp_prepare_auth_login_pass(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_auth_login_uname	apps/smtp/smtp.c	/^smtp_prepare_auth_login_uname(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_auth_or_mail	apps/smtp/smtp.c	/^smtp_prepare_auth_or_mail(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_header	apps/smtp/smtp.c	/^smtp_prepare_header(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_helo	apps/smtp/smtp.c	/^smtp_prepare_helo(struct smtp_session *s, u16_t *tx_buf_len, struct altcp_pcb *pcb)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_mail	apps/smtp/smtp.c	/^smtp_prepare_mail(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_quit	apps/smtp/smtp.c	/^smtp_prepare_quit(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_prepare_rcpt	apps/smtp/smtp.c	/^smtp_prepare_rcpt(struct smtp_session *s, u16_t *tx_buf_len)$/;"	f	typeref:enum:smtp_session_state	file:
smtp_process	apps/smtp/smtp.c	/^smtp_process(void *arg, struct altcp_pcb *pcb, struct pbuf *p)$/;"	f	typeref:typename:void	file:
smtp_result_str	apps/smtp/smtp.c	/^smtp_result_str(u8_t smtp_result)$/;"	f	typeref:typename:const char *
smtp_send_body	apps/smtp/smtp.c	/^smtp_send_body(struct smtp_session *s, struct altcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
smtp_send_body_data_handler	apps/smtp/smtp.c	/^smtp_send_body_data_handler(struct smtp_session *s, struct altcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
smtp_send_bodyh_data	apps/smtp/smtp.c	/^smtp_send_bodyh_data(struct altcp_pcb *pcb, const char **from, u16_t *howmany)$/;"	f	typeref:typename:int	file:
smtp_send_mail	apps/smtp/smtp.c	/^smtp_send_mail(const char* from, const char* to, const char* subject, const char* body,$/;"	f	typeref:typename:err_t
smtp_send_mail_alloced	apps/smtp/smtp.c	/^smtp_send_mail_alloced(struct smtp_session *s)$/;"	f	typeref:typename:err_t	file:
smtp_send_mail_bodycback	apps/smtp/smtp.c	/^smtp_send_mail_bodycback(const char *from, const char* to, const char* subject,$/;"	f	typeref:typename:err_t
smtp_send_mail_int	apps/smtp/smtp.c	/^smtp_send_mail_int(void *arg)$/;"	f	typeref:typename:void
smtp_send_mail_static	apps/smtp/smtp.c	/^smtp_send_mail_static(const char *from, const char* to, const char* subject,$/;"	f	typeref:typename:err_t
smtp_set_auth	apps/smtp/smtp.c	/^smtp_set_auth(const char* username, const char* pass)$/;"	f	typeref:typename:err_t
smtp_set_server_addr	apps/smtp/smtp.c	/^smtp_set_server_addr(const char* server)$/;"	f	typeref:typename:err_t
smtp_set_server_port	apps/smtp/smtp.c	/^smtp_set_server_port(u16_t port)$/;"	f	typeref:typename:void
smtp_set_tls_config	apps/smtp/smtp.c	/^smtp_set_tls_config(struct altcp_tls_config *tls_config)$/;"	f	typeref:typename:void
smtp_setup_pcb	apps/smtp/smtp.c	/^smtp_setup_pcb(struct smtp_session *s, const ip_addr_t* remote_ip)$/;"	f	typeref:struct:altcp_pcb *	file:
smtp_tcp_connected	apps/smtp/smtp.c	/^smtp_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err)$/;"	f	typeref:typename:err_t	file:
smtp_tcp_err	apps/smtp/smtp.c	/^smtp_tcp_err(void *arg, err_t err)$/;"	f	typeref:typename:void	file:
smtp_tcp_poll	apps/smtp/smtp.c	/^smtp_tcp_poll(void *arg, struct altcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
smtp_tcp_recv	apps/smtp/smtp.c	/^smtp_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t	file:
smtp_tcp_sent	apps/smtp/smtp.c	/^smtp_tcp_sent(void *arg, struct altcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
smtp_verify	apps/smtp/smtp.c	/^smtp_verify(const char *data, size_t data_len, u8_t linebreaks_allowed)$/;"	f	typeref:typename:err_t	file:
snmp_ans1_enc_tlv	apps/snmp/snmp_asn1.c	/^snmp_ans1_enc_tlv(struct snmp_pbuf_stream *pbuf_stream, struct snmp_asn1_tlv *tlv)$/;"	f	typeref:typename:err_t
snmp_append_outbound_varbind	apps/snmp/snmp_msg.c	/^snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbind)$/;"	f	typeref:typename:err_t
snmp_asn1_dec_oid	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *oid, u8_t *oid_len, u8/;"	f	typeref:typename:err_t
snmp_asn1_dec_raw	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t *buf_len, u1/;"	f	typeref:typename:err_t
snmp_asn1_dec_s32t	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)$/;"	f	typeref:typename:err_t
snmp_asn1_dec_tlv	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_tlv(struct snmp_pbuf_stream *pbuf_stream, struct snmp_asn1_tlv *tlv)$/;"	f	typeref:typename:err_t
snmp_asn1_dec_u32t	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)$/;"	f	typeref:typename:err_t
snmp_asn1_dec_u64t	apps/snmp/snmp_asn1.c	/^snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u64_t *value)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_length_cnt	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)$/;"	f	typeref:typename:void
snmp_asn1_enc_oid	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_oid(struct snmp_pbuf_stream *pbuf_stream, const u32_t *oid, u16_t oid_len)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_oid_cnt	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)$/;"	f	typeref:typename:void
snmp_asn1_enc_raw	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_raw(struct snmp_pbuf_stream *pbuf_stream, const u8_t *raw, u16_t raw_len)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_s32t	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, s32_t value)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_s32t_cnt	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)$/;"	f	typeref:typename:void
snmp_asn1_enc_u32t	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, u32_t value)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_u32t_cnt	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)$/;"	f	typeref:typename:void
snmp_asn1_enc_u64t	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, u64_t value)$/;"	f	typeref:typename:err_t
snmp_asn1_enc_u64t_cnt	apps/snmp/snmp_asn1.c	/^snmp_asn1_enc_u64t_cnt(u64_t value, u16_t *octets_needed)$/;"	f	typeref:typename:void
snmp_auth_algo_to_oid	apps/snmp/snmp_snmpv2_usm.c	/^static const struct snmp_obj_id *snmp_auth_algo_to_oid(snmpv3_auth_algo_t algo)$/;"	f	typeref:typename:const struct snmp_obj_id *	file:
snmp_authfail_trap	apps/snmp/snmp_traps.c	/^snmp_authfail_trap(void)$/;"	f	typeref:typename:void
snmp_coldstart_trap	apps/snmp/snmp_traps.c	/^snmp_coldstart_trap(void)$/;"	f	typeref:typename:void
snmp_complete_outbound_frame	apps/snmp/snmp_msg.c	/^snmp_complete_outbound_frame(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_decode_bits	apps/snmp/snmp_core.c	/^snmp_decode_bits(const u8_t *buf, u32_t buf_len, u32_t *bit_value)$/;"	f	typeref:typename:err_t
snmp_decode_truthvalue	apps/snmp/snmp_core.c	/^snmp_decode_truthvalue(const s32_t *asn1_value, u8_t *bool_value)$/;"	f	typeref:typename:err_t
snmp_encode_bits	apps/snmp/snmp_core.c	/^snmp_encode_bits(u8_t *buf, u32_t buf_len, u32_t bit_value, u8_t bit_count)$/;"	f	typeref:typename:u8_t
snmp_encode_truthvalue	apps/snmp/snmp_core.c	/^snmp_encode_truthvalue(s32_t *asn1_value, u32_t bool_value)$/;"	f	typeref:typename:u8_t
snmp_engineid_to_oid	apps/snmp/snmp_snmpv2_usm.c	/^static void snmp_engineid_to_oid(const char *engineid, u32_t *oid, u32_t len)$/;"	f	typeref:typename:void	file:
snmp_execute_write_callbacks	apps/snmp/snmp_msg.c	/^snmp_execute_write_callbacks(struct snmp_request *request)$/;"	f	typeref:typename:void	file:
snmp_get_auth_traps_enabled	apps/snmp/snmp_traps.c	/^snmp_get_auth_traps_enabled(void)$/;"	f	typeref:typename:u8_t
snmp_get_community	apps/snmp/snmp_msg.c	/^snmp_get_community(void)$/;"	f	typeref:typename:const char *
snmp_get_community_trap	apps/snmp/snmp_msg.c	/^snmp_get_community_trap(void)$/;"	f	typeref:typename:const char *
snmp_get_community_write	apps/snmp/snmp_msg.c	/^snmp_get_community_write(void)$/;"	f	typeref:typename:const char *
snmp_get_device_enterprise_oid	apps/snmp/snmp_core.c	/^const struct snmp_obj_id *snmp_get_device_enterprise_oid(void)$/;"	f	typeref:typename:const struct snmp_obj_id *
snmp_get_local_ip_for_dst	apps/snmp/snmp_netconn.c	/^snmp_get_local_ip_for_dst(void *handle, const ip_addr_t *dst, ip_addr_t *result)$/;"	f	typeref:typename:u8_t
snmp_get_local_ip_for_dst	apps/snmp/snmp_raw.c	/^snmp_get_local_ip_for_dst(void *handle, const ip_addr_t *dst, ip_addr_t *result)$/;"	f	typeref:typename:u8_t
snmp_get_mib_between	apps/snmp/snmp_core.c	/^snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)$/;"	f	typeref:typename:const struct snmp_mib *	file:
snmp_get_mib_from_oid	apps/snmp/snmp_core.c	/^snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:const struct snmp_mib *	file:
snmp_get_next_mib	apps/snmp/snmp_core.c	/^snmp_get_next_mib(const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:const struct snmp_mib *	file:
snmp_get_next_node_instance_from_oid	apps/snmp/snmp_core.c	/^snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance/;"	f	typeref:typename:u8_t
snmp_get_node_instance_from_oid	apps/snmp/snmp_core.c	/^snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance *node_/;"	f	typeref:typename:u8_t
snmp_get_value	apps/snmp/snmp_mib2_snmp.c	/^snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)$/;"	f	typeref:typename:s16_t	file:
snmp_init	apps/snmp/snmp_netconn.c	/^snmp_init(void)$/;"	f	typeref:typename:void
snmp_init	apps/snmp/snmp_raw.c	/^snmp_init(void)$/;"	f	typeref:typename:void
snmp_ip4_to_oid	apps/snmp/snmp_core.c	/^snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)$/;"	f	typeref:typename:void
snmp_ip6_to_oid	apps/snmp/snmp_core.c	/^snmp_ip6_to_oid(const ip6_addr_t *ip, u32_t *oid)$/;"	f	typeref:typename:void
snmp_ip_port_to_oid	apps/snmp/snmp_core.c	/^snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)$/;"	f	typeref:typename:u8_t
snmp_ip_to_oid	apps/snmp/snmp_core.c	/^snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)$/;"	f	typeref:typename:u8_t
snmp_mib2_lwip_synchronizer	apps/snmp/snmp_mib2.c	/^snmp_mib2_lwip_synchronizer(snmp_threadsync_called_fn fn, void *arg)$/;"	f	typeref:typename:void
snmp_mib2_set_syscontact	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_syscontact(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)$/;"	f	typeref:typename:void
snmp_mib2_set_syscontact_readonly	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_syscontact_readonly(const u8_t *ocstr, const u16_t *ocstrlen)$/;"	f	typeref:typename:void
snmp_mib2_set_sysdescr	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_sysdescr(const u8_t *str, const u16_t *len)$/;"	f	typeref:typename:void
snmp_mib2_set_syslocation	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_syslocation(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)$/;"	f	typeref:typename:void
snmp_mib2_set_syslocation_readonly	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_syslocation_readonly(const u8_t *ocstr, const u16_t *ocstrlen)$/;"	f	typeref:typename:void
snmp_mib2_set_sysname	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_sysname(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)$/;"	f	typeref:typename:void
snmp_mib2_set_sysname_readonly	apps/snmp/snmp_mib2_system.c	/^snmp_mib2_set_sysname_readonly(const u8_t *ocstr, const u16_t *ocstrlen)$/;"	f	typeref:typename:void
snmp_mib_tree_resolve_exact	apps/snmp/snmp_core.c	/^snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t *oi/;"	f	typeref:typename:const struct snmp_node *
snmp_mib_tree_resolve_next	apps/snmp/snmp_core.c	/^snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct sn/;"	f	typeref:typename:const struct snmp_node *
snmp_msg_getnext_validate_node_inst	apps/snmp/snmp_msg.c	/^snmp_msg_getnext_validate_node_inst(struct snmp_node_instance *node_instance, void *validate_arg/;"	f	typeref:typename:u8_t	file:
snmp_name_to_oid	apps/snmp/snmp_snmpv2_usm.c	/^static void snmp_name_to_oid(const char *name, u32_t *oid, size_t len)$/;"	f	typeref:typename:void	file:
snmp_netconn_thread	apps/snmp/snmp_netconn.c	/^snmp_netconn_thread(void *arg)$/;"	f	typeref:typename:void	file:
snmp_next_oid_check	apps/snmp/snmp_core.c	/^snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, u8_t oid_len, void *ref/;"	f	typeref:typename:u8_t
snmp_next_oid_init	apps/snmp/snmp_core.c	/^snmp_next_oid_init(struct snmp_next_oid_state *state,$/;"	f	typeref:typename:void
snmp_next_oid_precheck	apps/snmp/snmp_core.c	/^snmp_next_oid_precheck(struct snmp_next_oid_state *state, const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:u8_t
snmp_oid_append	apps/snmp/snmp_core.c	/^snmp_oid_append(struct snmp_obj_id *target, const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:void
snmp_oid_assign	apps/snmp/snmp_core.c	/^snmp_oid_assign(struct snmp_obj_id *target, const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:void
snmp_oid_combine	apps/snmp/snmp_core.c	/^snmp_oid_combine(struct snmp_obj_id *target, const u32_t *oid1, u8_t oid1_len, const u32_t *oid2/;"	f	typeref:typename:void
snmp_oid_compare	apps/snmp/snmp_core.c	/^snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)$/;"	f	typeref:typename:s8_t
snmp_oid_equal	apps/snmp/snmp_core.c	/^snmp_oid_equal(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)$/;"	f	typeref:typename:u8_t
snmp_oid_in_range	apps/snmp/snmp_core.c	/^snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8/;"	f	typeref:typename:u8_t
snmp_oid_prefix	apps/snmp/snmp_core.c	/^snmp_oid_prefix(struct snmp_obj_id *target, const u32_t *oid, u8_t oid_len)$/;"	f	typeref:typename:void
snmp_oid_to_ip	apps/snmp/snmp_core.c	/^snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)$/;"	f	typeref:typename:u8_t
snmp_oid_to_ip4	apps/snmp/snmp_core.c	/^snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)$/;"	f	typeref:typename:u8_t
snmp_oid_to_ip6	apps/snmp/snmp_core.c	/^snmp_oid_to_ip6(const u32_t *oid, ip6_addr_t *ip)$/;"	f	typeref:typename:u8_t
snmp_oid_to_ip_port	apps/snmp/snmp_core.c	/^snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)$/;"	f	typeref:typename:u8_t
snmp_oid_to_name	apps/snmp/snmp_snmpv2_usm.c	/^static void snmp_oid_to_name(char *name, const u32_t *oid, size_t len)$/;"	f	typeref:typename:void	file:
snmp_parse_inbound_frame	apps/snmp/snmp_msg.c	/^snmp_parse_inbound_frame(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_pbuf_stream_init	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_init(struct snmp_pbuf_stream *pbuf_stream, struct pbuf *p, u16_t offset, u16_t /;"	f	typeref:typename:err_t
snmp_pbuf_stream_read	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_read(struct snmp_pbuf_stream *pbuf_stream, u8_t *data)$/;"	f	typeref:typename:err_t
snmp_pbuf_stream_seek	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_seek(struct snmp_pbuf_stream *pbuf_stream, s32_t offset)$/;"	f	typeref:typename:err_t
snmp_pbuf_stream_seek_abs	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream *pbuf_stream, u32_t offset)$/;"	f	typeref:typename:err_t
snmp_pbuf_stream_write	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_write(struct snmp_pbuf_stream *pbuf_stream, u8_t data)$/;"	f	typeref:typename:err_t
snmp_pbuf_stream_writebuf	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream *pbuf_stream, const void *buf, u16_t buf_len)$/;"	f	typeref:typename:err_t
snmp_pbuf_stream_writeto	apps/snmp/snmp_pbuf_stream.c	/^snmp_pbuf_stream_writeto(struct snmp_pbuf_stream *pbuf_stream, struct snmp_pbuf_stream *target_p/;"	f	typeref:typename:err_t
snmp_prepare_outbound_frame	apps/snmp/snmp_msg.c	/^snmp_prepare_outbound_frame(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_priv_algo_to_oid	apps/snmp/snmp_snmpv2_usm.c	/^static const struct snmp_obj_id *snmp_priv_algo_to_oid(snmpv3_priv_algo_t algo)$/;"	f	typeref:typename:const struct snmp_obj_id *	file:
snmp_process_get_request	apps/snmp/snmp_msg.c	/^snmp_process_get_request(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_process_getbulk_request	apps/snmp/snmp_msg.c	/^snmp_process_getbulk_request(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_process_getnext_request	apps/snmp/snmp_msg.c	/^snmp_process_getnext_request(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_process_set_request	apps/snmp/snmp_msg.c	/^snmp_process_set_request(struct snmp_request *request)$/;"	f	typeref:typename:err_t	file:
snmp_process_varbind	apps/snmp/snmp_msg.c	/^snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)$/;"	f	typeref:typename:void	file:
snmp_receive	apps/snmp/snmp_msg.c	/^snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)$/;"	f	typeref:typename:void
snmp_recv	apps/snmp/snmp_raw.c	/^snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
snmp_scalar_array_get_instance	apps/snmp/snmp_scalar.c	/^snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instan/;"	f	typeref:typename:snmp_err_t
snmp_scalar_array_get_next_instance	apps/snmp/snmp_scalar.c	/^snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_i/;"	f	typeref:typename:snmp_err_t
snmp_scalar_array_get_value	apps/snmp/snmp_scalar.c	/^snmp_scalar_array_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
snmp_scalar_array_set_test	apps/snmp/snmp_scalar.c	/^snmp_scalar_array_set_test(struct snmp_node_instance *instance, u16_t value_len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
snmp_scalar_array_set_value	apps/snmp/snmp_scalar.c	/^snmp_scalar_array_set_value(struct snmp_node_instance *instance, u16_t value_len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
snmp_scalar_get_instance	apps/snmp/snmp_scalar.c	/^snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *in/;"	f	typeref:typename:snmp_err_t
snmp_scalar_get_next_instance	apps/snmp/snmp_scalar.c	/^snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instanc/;"	f	typeref:typename:snmp_err_t
snmp_send_trap	apps/snmp/snmp_traps.c	/^snmp_send_trap(const struct snmp_obj_id *eoid, s32_t generic_trap, s32_t specific_trap, struct s/;"	f	typeref:typename:err_t
snmp_send_trap_generic	apps/snmp/snmp_traps.c	/^snmp_send_trap_generic(s32_t generic_trap)$/;"	f	typeref:typename:err_t
snmp_send_trap_specific	apps/snmp/snmp_traps.c	/^snmp_send_trap_specific(s32_t specific_trap, struct snmp_varbind *varbinds)$/;"	f	typeref:typename:err_t
snmp_sendto	apps/snmp/snmp_netconn.c	/^snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)$/;"	f	typeref:typename:err_t
snmp_sendto	apps/snmp/snmp_raw.c	/^snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)$/;"	f	typeref:typename:err_t
snmp_set_auth_traps_enabled	apps/snmp/snmp_traps.c	/^snmp_set_auth_traps_enabled(u8_t enable)$/;"	f	typeref:typename:void
snmp_set_community	apps/snmp/snmp_msg.c	/^snmp_set_community(const char *const community)$/;"	f	typeref:typename:void
snmp_set_community_trap	apps/snmp/snmp_msg.c	/^snmp_set_community_trap(const char *const community)$/;"	f	typeref:typename:void
snmp_set_community_write	apps/snmp/snmp_msg.c	/^snmp_set_community_write(const char *const community)$/;"	f	typeref:typename:void
snmp_set_device_enterprise_oid	apps/snmp/snmp_core.c	/^void snmp_set_device_enterprise_oid(const struct snmp_obj_id *device_enterprise_oid)$/;"	f	typeref:typename:void
snmp_set_mibs	apps/snmp/snmp_core.c	/^snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)$/;"	f	typeref:typename:void
snmp_set_test	apps/snmp/snmp_mib2_snmp.c	/^snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
snmp_set_test_ok	apps/snmp/snmp_core.c	/^snmp_set_test_ok(struct snmp_node_instance *instance, u16_t value_len, void *value)$/;"	f	typeref:typename:snmp_err_t
snmp_set_value	apps/snmp/snmp_mib2_snmp.c	/^snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
snmp_set_write_callback	apps/snmp/snmp_msg.c	/^snmp_set_write_callback(snmp_write_callback_fct write_callback, void *callback_arg)$/;"	f	typeref:typename:void
snmp_table_extract_value_from_refconstptr	apps/snmp/snmp_table.c	/^snmp_table_extract_value_from_refconstptr(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t
snmp_table_extract_value_from_s32ref	apps/snmp/snmp_table.c	/^snmp_table_extract_value_from_s32ref(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t
snmp_table_extract_value_from_u32ref	apps/snmp/snmp_table.c	/^snmp_table_extract_value_from_u32ref(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t
snmp_table_get_instance	apps/snmp/snmp_table.c	/^snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_in/;"	f	typeref:typename:snmp_err_t
snmp_table_get_next_instance	apps/snmp/snmp_table.c	/^snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_no/;"	f	typeref:typename:snmp_err_t
snmp_table_simple_get_instance	apps/snmp/snmp_table.c	/^snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_/;"	f	typeref:typename:snmp_err_t
snmp_table_simple_get_next_instance	apps/snmp/snmp_table.c	/^snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct /;"	f	typeref:typename:snmp_err_t
snmp_threadsync_get_instance	apps/snmp/snmp_threadsync.c	/^snmp_threadsync_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance/;"	f	typeref:typename:snmp_err_t
snmp_threadsync_get_next_instance	apps/snmp/snmp_threadsync.c	/^snmp_threadsync_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_ins/;"	f	typeref:typename:snmp_err_t
snmp_threadsync_init	apps/snmp/snmp_threadsync.c	/^void snmp_threadsync_init(struct snmp_threadsync_instance *instance, snmp_threadsync_synchronize/;"	f	typeref:typename:void
snmp_trap_dst_enable	apps/snmp/snmp_traps.c	/^snmp_trap_dst_enable(u8_t dst_idx, u8_t enable)$/;"	f	typeref:typename:void
snmp_trap_dst_ip_set	apps/snmp/snmp_traps.c	/^snmp_trap_dst_ip_set(u8_t dst_idx, const ip_addr_t *dst)$/;"	f	typeref:typename:void
snmp_trap_header_enc	apps/snmp/snmp_traps.c	/^snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)$/;"	f	typeref:typename:err_t	file:
snmp_trap_header_sum	apps/snmp/snmp_traps.c	/^snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)$/;"	f	typeref:typename:u16_t	file:
snmp_trap_varbind_enc	apps/snmp/snmp_traps.c	/^snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct s/;"	f	typeref:typename:err_t	file:
snmp_trap_varbind_sum	apps/snmp/snmp_traps.c	/^snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)$/;"	f	typeref:typename:u16_t	file:
snmp_v1_enable	apps/snmp/snmp_msg.c	/^snmp_v1_enable(u8_t enable)$/;"	f	typeref:typename:void
snmp_v1_enabled	apps/snmp/snmp_msg.c	/^snmp_v1_enabled(void)$/;"	f	typeref:typename:u8_t
snmp_v2c_enable	apps/snmp/snmp_msg.c	/^snmp_v2c_enable(u8_t enable)$/;"	f	typeref:typename:void
snmp_v2c_enabled	apps/snmp/snmp_msg.c	/^snmp_v2c_enabled(void)$/;"	f	typeref:typename:u8_t
snmp_v3_enable	apps/snmp/snmp_msg.c	/^snmp_v3_enable(u8_t enable)$/;"	f	typeref:typename:void
snmp_v3_enabled	apps/snmp/snmp_msg.c	/^snmp_v3_enabled(void)$/;"	f	typeref:typename:u8_t
snmp_varbind_length	apps/snmp/snmp_msg.c	/^snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)$/;"	f	typeref:typename:err_t
snmp_vb_enumerator_get_next	apps/snmp/snmp_msg.c	/^snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator *enumerator, struct snmp_varbind *var/;"	f	typeref:typename:snmp_vb_enumerator_err_t
snmp_vb_enumerator_init	apps/snmp/snmp_msg.c	/^snmp_vb_enumerator_init(struct snmp_varbind_enumerator *enumerator, struct pbuf *p, u16_t offset/;"	f	typeref:typename:void
snmp_version_enable	apps/snmp/snmp_msg.c	/^snmp_version_enable(u8_t version, u8_t enable)$/;"	f	typeref:typename:void	file:
snmp_version_enabled	apps/snmp/snmp_msg.c	/^snmp_version_enabled(u8_t version)$/;"	f	typeref:typename:u8_t	file:
snmpengine_scalars_get_value	apps/snmp/snmp_snmpv2_framework.c	/^static s16_t snmpengine_scalars_get_value(const struct snmp_scalar_array_node_def *node, void *v/;"	f	typeref:typename:s16_t	file:
snmpv3_auth	apps/snmp/snmpv3_mbedtls.c	/^snmpv3_auth(struct snmp_pbuf_stream *stream, u16_t length,$/;"	f	typeref:typename:err_t
snmpv3_build_priv_param	apps/snmp/snmpv3.c	/^snmpv3_build_priv_param(u8_t *priv_param)$/;"	f	typeref:typename:err_t
snmpv3_crypt	apps/snmp/snmpv3_mbedtls.c	/^snmpv3_crypt(struct snmp_pbuf_stream *stream, u16_t length,$/;"	f	typeref:typename:err_t
snmpv3_engine_id_changed	apps/snmp/snmpv3.c	/^snmpv3_engine_id_changed(void)$/;"	f	typeref:typename:void
snmpv3_get_engine_boots_internal	apps/snmp/snmpv3.c	/^snmpv3_get_engine_boots_internal(void)$/;"	f	typeref:typename:s32_t
snmpv3_get_engine_time_internal	apps/snmp/snmpv3.c	/^snmpv3_get_engine_time_internal(void)$/;"	f	typeref:typename:s32_t
snmpv3_password_to_key_md5	apps/snmp/snmpv3_mbedtls.c	/^snmpv3_password_to_key_md5($/;"	f	typeref:typename:void
snmpv3_password_to_key_sha	apps/snmp/snmpv3_mbedtls.c	/^snmpv3_password_to_key_sha($/;"	f	typeref:typename:void
sntp_dns_found	apps/sntp/sntp.c	/^sntp_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg)$/;"	f	typeref:typename:void	file:
sntp_enabled	apps/sntp/sntp.c	/^u8_t sntp_enabled(void)$/;"	f	typeref:typename:u8_t
sntp_format_time	apps/sntp/sntp.c	/^sntp_format_time(s32_t sec)$/;"	f	typeref:typename:const char *	file:
sntp_getoperatingmode	apps/sntp/sntp.c	/^sntp_getoperatingmode(void)$/;"	f	typeref:typename:u8_t
sntp_getreachability	apps/sntp/sntp.c	/^sntp_getreachability(u8_t idx)$/;"	f	typeref:typename:u8_t
sntp_getserver	apps/sntp/sntp.c	/^sntp_getserver(u8_t idx)$/;"	f	typeref:typename:const ip_addr_t *
sntp_getservername	apps/sntp/sntp.c	/^sntp_getservername(u8_t idx)$/;"	f	typeref:typename:const char *
sntp_init	apps/sntp/sntp.c	/^sntp_init(void)$/;"	f	typeref:typename:void
sntp_initialize_request	apps/sntp/sntp.c	/^sntp_initialize_request(struct sntp_msg *req)$/;"	f	typeref:typename:void	file:
sntp_process	apps/sntp/sntp.c	/^sntp_process(const struct sntp_timestamps *timestamps)$/;"	f	typeref:typename:void	file:
sntp_recv	apps/sntp/sntp.c	/^sntp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)$/;"	f	typeref:typename:void	file:
sntp_request	apps/sntp/sntp.c	/^sntp_request(void *arg)$/;"	f	typeref:typename:void	file:
sntp_retry	apps/sntp/sntp.c	/^sntp_retry(void *arg)$/;"	f	typeref:typename:void	file:
sntp_send_request	apps/sntp/sntp.c	/^sntp_send_request(const ip_addr_t *server_addr)$/;"	f	typeref:typename:void	file:
sntp_servermode_dhcp	apps/sntp/sntp.c	/^sntp_servermode_dhcp(int set_servers_from_dhcp)$/;"	f	typeref:typename:void
sntp_setoperatingmode	apps/sntp/sntp.c	/^sntp_setoperatingmode(u8_t operating_mode)$/;"	f	typeref:typename:void
sntp_setserver	apps/sntp/sntp.c	/^sntp_setserver(u8_t idx, const ip_addr_t *server)$/;"	f	typeref:typename:void
sntp_setservername	apps/sntp/sntp.c	/^sntp_setservername(u8_t idx, const char *server)$/;"	f	typeref:typename:void
sntp_stop	apps/sntp/sntp.c	/^sntp_stop(void)$/;"	f	typeref:typename:void
sntp_try_next_server	apps/sntp/sntp.c	/^sntp_try_next_server(void *arg)$/;"	f	typeref:typename:void	file:
sock_inc_used	api/sockets.c	/^sock_inc_used(struct lwip_sock *sock)$/;"	f	typeref:typename:int	file:
sock_inc_used_locked	api/sockets.c	/^sock_inc_used_locked(struct lwip_sock *sock)$/;"	f	typeref:typename:int	file:
sockaddr_to_ipaddr_port	api/sockets.c	/^sockaddr_to_ipaddr_port(const struct sockaddr *sockaddr, ip_addr_t *ipaddr, u16_t *port)$/;"	f	typeref:typename:void	file:
socket	include/lwip/sockets.h	/^static inline int socket(int domain,int type,int protocol)$/;"	f	typeref:typename:int
srp_lwrechallenge	netif/ppp/eap.c	/^static void srp_lwrechallenge(void *arg) {$/;"	f	typeref:typename:void	file:
start_networks	netif/ppp/auth.c	/^void start_networks(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
stats_display	core/stats.c	/^stats_display(void)$/;"	f	typeref:typename:void
stats_display_igmp	core/stats.c	/^stats_display_igmp(struct stats_igmp *igmp, const char *name)$/;"	f	typeref:typename:void
stats_display_ip_napt	core/stats.c	/^void stats_display_ip_napt(struct stats_ip_napt *napt)$/;"	f	typeref:typename:void
stats_display_mem	core/stats.c	/^stats_display_mem(struct stats_mem *mem, const char *name)$/;"	f	typeref:typename:void
stats_display_memp	core/stats.c	/^stats_display_memp(struct stats_mem *mem, int idx)$/;"	f	typeref:typename:void
stats_display_proto	core/stats.c	/^stats_display_proto(struct stats_proto *proto, const char *name)$/;"	f	typeref:typename:void
stats_display_sys	core/stats.c	/^stats_display_sys(struct stats_sys *sys)$/;"	f	typeref:typename:void
stats_init	core/stats.c	/^stats_init(void)$/;"	f	typeref:typename:void
sys_check_timeouts	core/timeouts.c	/^sys_check_timeouts(void)$/;"	f	typeref:typename:void
sys_msleep	core/sys.c	/^sys_msleep(u32_t ms)$/;"	f	typeref:typename:void
sys_restart_timeouts	core/timeouts.c	/^sys_restart_timeouts(void)$/;"	f	typeref:typename:void
sys_timeout_abs	core/timeouts.c	/^sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name/;"	f	typeref:typename:void	file:
sys_timeout_debug	core/timeouts.c	/^sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)$/;"	f	typeref:typename:void
sys_timeouts_deinit	core/timeouts.c	/^void sys_timeouts_deinit(void)$/;"	f	typeref:typename:void
sys_timeouts_get_next_timeout	core/timeouts.c	/^sys_timeouts_get_next_timeout(void)$/;"	f	typeref:struct:sys_timeo **
sys_timeouts_init	core/timeouts.c	/^void sys_timeouts_init(void)$/;"	f	typeref:typename:void
sys_timeouts_sleeptime	core/timeouts.c	/^sys_timeouts_sleeptime(void)$/;"	f	typeref:typename:u32_t
sys_untimeout	core/timeouts.c	/^sys_untimeout(sys_timeout_handler handler, void *arg)$/;"	f	typeref:typename:void
system_get_value	apps/snmp/snmp_mib2_system.c	/^system_get_value(const struct snmp_scalar_array_node_def *node, void *value)$/;"	f	typeref:typename:s16_t	file:
system_set_test	apps/snmp/snmp_mib2_system.c	/^system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
system_set_value	apps/snmp/snmp_mib2_system.c	/^system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnTable_get_cell_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union /;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnTable_get_cell_value_core	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t *column, union snmp_variant_v/;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid,/;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnectionTable_get_cell_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnectionTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, /;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnectionTable_get_cell_value_core	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnectionTable_get_cell_value_core(const u32_t *column, struct tcp_pcb *pcb, union snmp_var/;"	f	typeref:typename:snmp_err_t	file:
tcp_ConnectionTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *ro/;"	f	typeref:typename:snmp_err_t	file:
tcp_ListenerTable_get_cell_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ListenerTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, un/;"	f	typeref:typename:snmp_err_t	file:
tcp_ListenerTable_get_cell_value_core	apps/snmp/snmp_mib2_tcp.c	/^tcp_ListenerTable_get_cell_value_core(const u32_t *column, union snmp_variant_value *value)$/;"	f	typeref:typename:snmp_err_t	file:
tcp_ListenerTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_/;"	f	typeref:typename:snmp_err_t	file:
tcp_abandon	core/tcp.c	/^tcp_abandon(struct tcp_pcb *pcb, int reset)$/;"	f	typeref:typename:void
tcp_abort	core/tcp.c	/^tcp_abort(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_accept	core/tcp.c	/^tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)$/;"	f	typeref:typename:void
tcp_accept_null	core/tcp.c	/^tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)$/;"	f	typeref:typename:err_t	file:
tcp_add_sack	core/tcp_in.c	/^tcp_add_sack(struct tcp_pcb *pcb, u32_t left, u32_t right)$/;"	f	typeref:typename:void	file:
tcp_alloc	core/tcp.c	/^tcp_alloc(u8_t prio)$/;"	f	typeref:struct:tcp_pcb *
tcp_arg	core/tcp.c	/^tcp_arg(struct tcp_pcb *pcb, void *arg)$/;"	f	typeref:typename:void
tcp_backlog_accepted	core/tcp.c	/^tcp_backlog_accepted(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_backlog_delayed	core/tcp.c	/^tcp_backlog_delayed(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_bind	core/tcp.c	/^tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t
tcp_bind_netif	core/tcp.c	/^tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)$/;"	f	typeref:typename:void
tcp_build_sack_option	core/tcp_out.c	/^tcp_build_sack_option(const struct tcp_pcb *pcb, u32_t *opts, u8_t num_sacks)$/;"	f	typeref:typename:void	file:
tcp_build_timestamp_option	core/tcp_out.c	/^tcp_build_timestamp_option(const struct tcp_pcb *pcb, u32_t *opts)$/;"	f	typeref:typename:void	file:
tcp_build_wnd_scale_option	core/tcp_out.c	/^tcp_build_wnd_scale_option(u32_t *opts)$/;"	f	typeref:typename:void	file:
tcp_close	core/tcp.c	/^tcp_close(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_close_shutdown	core/tcp.c	/^tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)$/;"	f	typeref:typename:err_t	file:
tcp_close_shutdown_fin	core/tcp.c	/^tcp_close_shutdown_fin(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
tcp_connect	core/tcp.c	/^tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,$/;"	f	typeref:typename:err_t
tcp_create_segment	core/tcp_out.c	/^tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t o/;"	f	typeref:struct:tcp_seg *	file:
tcp_debug_print	core/tcp.c	/^tcp_debug_print(struct tcp_hdr *tcphdr)$/;"	f	typeref:typename:void
tcp_debug_print_flags	core/tcp.c	/^tcp_debug_print_flags(u8_t flags)$/;"	f	typeref:typename:void
tcp_debug_print_pcbs	core/tcp.c	/^tcp_debug_print_pcbs(void)$/;"	f	typeref:typename:void
tcp_debug_print_state	core/tcp.c	/^tcp_debug_print_state(enum tcp_state s)$/;"	f	typeref:typename:void
tcp_debug_state_str	core/tcp.c	/^tcp_debug_state_str(enum tcp_state s)$/;"	f	typeref:typename:const char *
tcp_do_abort	api/api_msg.c	/^static err_t tcp_do_abort(struct tcpip_api_call_data *msg)$/;"	f	typeref:typename:err_t	file:
tcp_eff_send_mss_netif	core/tcp.c	/^tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)$/;"	f	typeref:typename:u16_t
tcp_enqueue_flags	core/tcp_out.c	/^tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)$/;"	f	typeref:typename:err_t
tcp_err	core/tcp.c	/^tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)$/;"	f	typeref:typename:void
tcp_ext_arg_alloc_id	core/tcp.c	/^tcp_ext_arg_alloc_id(void)$/;"	f	typeref:typename:u8_t
tcp_ext_arg_get	core/tcp.c	/^void *tcp_ext_arg_get(const struct tcp_pcb *pcb, uint8_t id)$/;"	f	typeref:typename:void *
tcp_ext_arg_invoke_callbacks_destroyed	core/tcp.c	/^tcp_ext_arg_invoke_callbacks_destroyed(struct tcp_pcb_ext_args *ext_args)$/;"	f	typeref:typename:void	file:
tcp_ext_arg_invoke_callbacks_passive_open	core/tcp.c	/^tcp_ext_arg_invoke_callbacks_passive_open(struct tcp_pcb_listen *lpcb, struct tcp_pcb *cpcb)$/;"	f	typeref:typename:err_t
tcp_ext_arg_set	core/tcp.c	/^void tcp_ext_arg_set(struct tcp_pcb *pcb, uint8_t id, void *arg)$/;"	f	typeref:typename:void
tcp_ext_arg_set_callbacks	core/tcp.c	/^tcp_ext_arg_set_callbacks(struct tcp_pcb *pcb, uint8_t id, const struct tcp_ext_arg_callbacks * /;"	f	typeref:typename:void
tcp_fasttmr	core/tcp.c	/^tcp_fasttmr(void)$/;"	f	typeref:typename:void
tcp_free	core/tcp.c	/^tcp_free(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_free_acked_segments	core/tcp_in.c	/^tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name/;"	f	typeref:struct:tcp_seg *	file:
tcp_free_listen	core/tcp.c	/^tcp_free_listen(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
tcp_free_ooseq	core/tcp.c	/^tcp_free_ooseq(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_get_next_optbyte	core/tcp_in.c	/^tcp_get_next_optbyte(void)$/;"	f	typeref:typename:u8_t	file:
tcp_get_num_sacks	core/tcp_out.c	/^tcp_get_num_sacks(const struct tcp_pcb *pcb, u8_t optlen)$/;"	f	typeref:typename:u8_t	file:
tcp_get_value	apps/snmp/snmp_mib2_tcp.c	/^tcp_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
tcp_handle_closepend	core/tcp.c	/^tcp_handle_closepend(void)$/;"	f	typeref:typename:void	file:
tcp_init	core/tcp.c	/^tcp_init(void)$/;"	f	typeref:typename:void
tcp_input	core/tcp_in.c	/^tcp_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
tcp_input_delayed_close	core/tcp_in.c	/^tcp_input_delayed_close(struct tcp_pcb *pcb)$/;"	f	typeref:typename:int	file:
tcp_keepalive	core/tcp_out.c	/^tcp_keepalive(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_kill_prio	core/tcp.c	/^tcp_kill_prio(u8_t prio)$/;"	f	typeref:typename:void	file:
tcp_kill_state	core/tcp.c	/^tcp_kill_state(enum tcp_state state)$/;"	f	typeref:typename:void	file:
tcp_kill_timewait	core/tcp.c	/^tcp_kill_timewait(void)$/;"	f	typeref:typename:void	file:
tcp_listen_closed	core/tcp.c	/^tcp_listen_closed(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
tcp_listen_input	core/tcp_in.c	/^tcp_listen_input(struct tcp_pcb_listen *pcb)$/;"	f	typeref:typename:void	file:
tcp_listen_with_backlog	core/tcp.c	/^tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)$/;"	f	typeref:struct:tcp_pcb *
tcp_listen_with_backlog_and_err	core/tcp.c	/^tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)$/;"	f	typeref:struct:tcp_pcb *
tcp_listening	core/ipv4/ip4_napt.c	/^tcp_listening(u16_t port)$/;"	f	typeref:typename:u8_t	file:
tcp_netif_ip_addr_changed	core/tcp.c	/^tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)$/;"	f	typeref:typename:void
tcp_netif_ip_addr_changed_pcblist	core/tcp.c	/^tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)$/;"	f	typeref:typename:void	file:
tcp_new	core/tcp.c	/^tcp_new(void)$/;"	f	typeref:struct:tcp_pcb *
tcp_new_ip_type	core/tcp.c	/^tcp_new_ip_type(u8_t type)$/;"	f	typeref:struct:tcp_pcb *
tcp_new_port	core/tcp.c	/^tcp_new_port(void)$/;"	f	typeref:typename:u16_t	file:
tcp_next_iss	core/tcp.c	/^tcp_next_iss(struct tcp_pcb *pcb)$/;"	f	typeref:typename:u32_t
tcp_oos_insert_segment	core/tcp_in.c	/^tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)$/;"	f	typeref:typename:void	file:
tcp_output	core/tcp_out.c	/^tcp_output(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_output_alloc_header	core/tcp_out.c	/^tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,$/;"	f	typeref:struct:pbuf *	file:
tcp_output_alloc_header_common	core/tcp_out.c	/^tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,$/;"	f	typeref:struct:pbuf *	file:
tcp_output_control_segment	core/tcp_out.c	/^tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:err_t	file:
tcp_output_fill_options	core/tcp_out.c	/^tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks/;"	f	typeref:typename:void	file:
tcp_output_segment	core/tcp_out.c	/^tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)$/;"	f	typeref:typename:err_t	file:
tcp_output_segment_busy	core/tcp_out.c	/^tcp_output_segment_busy(const struct tcp_seg *seg)$/;"	f	typeref:typename:int	file:
tcp_parseopt	core/tcp_in.c	/^tcp_parseopt(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
tcp_pbuf_prealloc	core/tcp_out.c	/^tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,$/;"	f	typeref:struct:pbuf *	file:
tcp_pcb_num_cal	core/tcp.c	/^void tcp_pcb_num_cal(tcp_pcb_num_t *tcp_pcb_num)$/;"	f	typeref:typename:void
tcp_pcb_purge	core/tcp.c	/^tcp_pcb_purge(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_pcb_remove	core/tcp.c	/^tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_pcbs_sane	core/tcp.c	/^tcp_pcbs_sane(void)$/;"	f	typeref:typename:s16_t
tcp_poll	core/tcp.c	/^tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)$/;"	f	typeref:typename:void
tcp_process	core/tcp_in.c	/^tcp_process(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t	file:
tcp_process_refused_data	core/tcp.c	/^tcp_process_refused_data(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_receive	core/tcp_in.c	/^tcp_receive(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
tcp_recv	core/tcp.c	/^tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)$/;"	f	typeref:typename:void
tcp_recv_null	core/tcp.c	/^tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)$/;"	f	typeref:typename:err_t
tcp_recved	core/tcp.c	/^tcp_recved(struct tcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:void
tcp_remove_listener	core/tcp.c	/^tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)$/;"	f	typeref:typename:void	file:
tcp_remove_sacks_gt	core/tcp_in.c	/^tcp_remove_sacks_gt(struct tcp_pcb *pcb, u32_t seq)$/;"	f	typeref:typename:void	file:
tcp_remove_sacks_lt	core/tcp_in.c	/^tcp_remove_sacks_lt(struct tcp_pcb *pcb, u32_t seq)$/;"	f	typeref:typename:void	file:
tcp_rexmit	core/tcp_out.c	/^tcp_rexmit(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_rexmit_fast	core/tcp_out.c	/^tcp_rexmit_fast(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_rexmit_rto	core/tcp_out.c	/^tcp_rexmit_rto(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_rexmit_rto_commit	core/tcp_out.c	/^tcp_rexmit_rto_commit(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void
tcp_rexmit_rto_prepare	core/tcp_out.c	/^tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_route	core/tcp_out.c	/^tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)$/;"	f	typeref:struct:netif *	file:
tcp_rst	core/tcp_out.c	/^tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,$/;"	f	typeref:typename:void
tcp_seg_add_chksum	core/tcp_out.c	/^tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,$/;"	f	typeref:typename:void	file:
tcp_seg_copy	core/tcp.c	/^tcp_seg_copy(struct tcp_seg *seg)$/;"	f	typeref:struct:tcp_seg *
tcp_seg_free	core/tcp.c	/^tcp_seg_free(struct tcp_seg *seg)$/;"	f	typeref:typename:void
tcp_segs_free	core/tcp.c	/^tcp_segs_free(struct tcp_seg *seg)$/;"	f	typeref:typename:void
tcp_send_empty_ack	core/tcp_out.c	/^tcp_send_empty_ack(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_send_fin	core/tcp_out.c	/^tcp_send_fin(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcp_sent	core/tcp.c	/^tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)$/;"	f	typeref:typename:void
tcp_setprio	core/tcp.c	/^tcp_setprio(struct tcp_pcb *pcb, u8_t prio)$/;"	f	typeref:typename:void
tcp_shutdown	core/tcp.c	/^tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)$/;"	f	typeref:typename:err_t
tcp_slowtmr	core/tcp.c	/^tcp_slowtmr(void)$/;"	f	typeref:typename:void
tcp_split_unsent_seg	core/tcp_out.c	/^tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)$/;"	f	typeref:typename:err_t
tcp_tcp_get_tcp_addrinfo	core/tcp.c	/^tcp_tcp_get_tcp_addrinfo(struct tcp_pcb *pcb, int local, ip_addr_t *addr, u16_t *port)$/;"	f	typeref:typename:err_t
tcp_timer_needed	core/timeouts.c	/^tcp_timer_needed(void)$/;"	f	typeref:typename:void
tcp_timewait_input	core/tcp_in.c	/^tcp_timewait_input(struct tcp_pcb *pcb)$/;"	f	typeref:typename:void	file:
tcp_tmr	core/tcp.c	/^tcp_tmr(void)$/;"	f	typeref:typename:void
tcp_trigger_input_pcb_close	core/tcp_in.c	/^tcp_trigger_input_pcb_close(void)$/;"	f	typeref:typename:void
tcp_txnow	core/tcp.c	/^tcp_txnow(void)$/;"	f	typeref:typename:void
tcp_update_rcv_ann_wnd	core/tcp.c	/^tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)$/;"	f	typeref:typename:u32_t
tcp_write	core/tcp_out.c	/^tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)$/;"	f	typeref:typename:err_t
tcp_write_checks	core/tcp_out.c	/^tcp_write_checks(struct tcp_pcb *pcb, u16_t len)$/;"	f	typeref:typename:err_t	file:
tcp_zero_window_probe	core/tcp_out.c	/^tcp_zero_window_probe(struct tcp_pcb *pcb)$/;"	f	typeref:typename:err_t
tcpip_6lowpan_input	netif/lowpan6.c	/^tcpip_6lowpan_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
tcpip_api_call	api/tcpip.c	/^tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)$/;"	f	typeref:typename:err_t
tcpip_callback	api/tcpip.c	/^tcpip_callback(tcpip_callback_fn function, void *ctx)$/;"	f	typeref:typename:err_t
tcpip_callbackmsg_delete	api/tcpip.c	/^tcpip_callbackmsg_delete(struct tcpip_callback_msg *msg)$/;"	f	typeref:typename:void
tcpip_callbackmsg_new	api/tcpip.c	/^tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)$/;"	f	typeref:struct:tcpip_callback_msg *
tcpip_callbackmsg_trycallback	api/tcpip.c	/^tcpip_callbackmsg_trycallback(struct tcpip_callback_msg *msg)$/;"	f	typeref:typename:err_t
tcpip_callbackmsg_trycallback_fromisr	api/tcpip.c	/^tcpip_callbackmsg_trycallback_fromisr(struct tcpip_callback_msg *msg)$/;"	f	typeref:typename:err_t
tcpip_init	api/tcpip.c	/^tcpip_init(tcpip_init_done_fn initfunc, void *arg)$/;"	f	typeref:typename:void
tcpip_inpkt	api/tcpip.c	/^tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)$/;"	f	typeref:typename:err_t
tcpip_input	api/tcpip.c	/^tcpip_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
tcpip_rfc7668_input	netif/lowpan6_ble.c	/^tcpip_rfc7668_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:err_t
tcpip_send_msg_wait_sem	api/tcpip.c	/^tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)$/;"	f	typeref:typename:err_t
tcpip_tcp_timer	core/timeouts.c	/^tcpip_tcp_timer(void *arg)$/;"	f	typeref:typename:void	file:
tcpip_thread	api/tcpip.c	/^tcpip_thread(void *arg)$/;"	f	typeref:typename:void	file:
tcpip_thread_handle_msg	api/tcpip.c	/^tcpip_thread_handle_msg(struct tcpip_msg *msg)$/;"	f	typeref:typename:void	file:
tcpip_thread_poll_one	api/tcpip.c	/^tcpip_thread_poll_one(void)$/;"	f	typeref:typename:int
tcpip_timeout	api/tcpip.c	/^tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)$/;"	f	typeref:typename:err_t
tcpip_timeouts_mbox_fetch	api/tcpip.c	/^tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)$/;"	f	typeref:typename:void	file:
tcpip_try_callback	api/tcpip.c	/^tcpip_try_callback(tcpip_callback_fn function, void *ctx)$/;"	f	typeref:typename:err_t
tcpip_untimeout	api/tcpip.c	/^tcpip_untimeout(sys_timeout_handler h, void *arg)$/;"	f	typeref:typename:err_t
terminate_layer	netif/ppp/fsm.c	/^static void terminate_layer(fsm *f, int nextstate) {$/;"	f	typeref:typename:void	file:
tftp_cleanup	apps/tftp/tftp_server.c	/^void tftp_cleanup(void)$/;"	f	typeref:typename:void
tftp_init	apps/tftp/tftp_server.c	/^tftp_init(const struct tftp_context *ctx)$/;"	f	typeref:typename:err_t
tftp_tmr	apps/tftp/tftp_server.c	/^tftp_tmr(void *arg)$/;"	f	typeref:typename:void	file:
threadsync_get_value	apps/snmp/snmp_threadsync.c	/^threadsync_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
threadsync_get_value_synced	apps/snmp/snmp_threadsync.c	/^threadsync_get_value_synced(void *ctx)$/;"	f	typeref:typename:void	file:
threadsync_release_instance	apps/snmp/snmp_threadsync.c	/^threadsync_release_instance(struct snmp_node_instance *instance)$/;"	f	typeref:typename:void	file:
threadsync_release_instance_synced	apps/snmp/snmp_threadsync.c	/^threadsync_release_instance_synced(void *ctx)$/;"	f	typeref:typename:void	file:
threadsync_set_test	apps/snmp/snmp_threadsync.c	/^threadsync_set_test(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
threadsync_set_test_synced	apps/snmp/snmp_threadsync.c	/^threadsync_set_test_synced(void *ctx)$/;"	f	typeref:typename:void	file:
threadsync_set_value	apps/snmp/snmp_threadsync.c	/^threadsync_set_value(struct snmp_node_instance *instance, u16_t len, void *value)$/;"	f	typeref:typename:snmp_err_t	file:
threadsync_set_value_synced	apps/snmp/snmp_threadsync.c	/^threadsync_set_value_synced(void *ctx)$/;"	f	typeref:typename:void	file:
timeout_from_offered	core/ipv4/dhcp.c	/^static inline u32_t timeout_from_offered(u32_t lease, u32_t min, u32_t max)$/;"	f	typeref:typename:u32_t	file:
tinydir_close	apps/http/makefsdata/tinydir.h	/^void tinydir_close(tinydir_dir *dir)$/;"	f	typeref:typename:_TINYDIR_FUNC void
tinydir_file_open	apps/http/makefsdata/tinydir.h	/^int tinydir_file_open(tinydir_file *file, const _tinydir_char_t *path)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_next	apps/http/makefsdata/tinydir.h	/^int tinydir_next(tinydir_dir *dir)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_open	apps/http/makefsdata/tinydir.h	/^int tinydir_open(tinydir_dir *dir, const _tinydir_char_t *path)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_open_sorted	apps/http/makefsdata/tinydir.h	/^int tinydir_open_sorted(tinydir_dir *dir, const _tinydir_char_t *path)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_open_subdir_n	apps/http/makefsdata/tinydir.h	/^int tinydir_open_subdir_n(tinydir_dir *dir, size_t i)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_readfile	apps/http/makefsdata/tinydir.h	/^int tinydir_readfile(const tinydir_dir *dir, tinydir_file *file)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tinydir_readfile_n	apps/http/makefsdata/tinydir.h	/^int tinydir_readfile_n(const tinydir_dir *dir, tinydir_file *file, size_t i)$/;"	f	typeref:typename:_TINYDIR_FUNC int
tls_free	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^tls_free(void *ptr)$/;"	f	typeref:typename:void	file:
tls_malloc	apps/altcp_tls/altcp_tls_mbedtls_mem.c	/^tls_malloc(size_t c, size_t len)$/;"	f	typeref:typename:void *	file:
tryget_socket	api/sockets.c	/^tryget_socket(int fd)$/;"	f	typeref:struct:lwip_sock *	file:
tryget_socket_unconn	api/sockets.c	/^tryget_socket_unconn(int fd)$/;"	f	typeref:struct:lwip_sock *	file:
tryget_socket_unconn_locked	api/sockets.c	/^tryget_socket_unconn_locked(int fd)$/;"	f	typeref:struct:lwip_sock *	file:
tryget_socket_unconn_nouse	api/sockets.c	/^tryget_socket_unconn_nouse(int fd)$/;"	f	typeref:struct:lwip_sock *	file:
udp_Table_get_cell_value	apps/snmp/snmp_mib2_udp.c	/^udp_Table_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp/;"	f	typeref:typename:snmp_err_t	file:
udp_Table_get_cell_value_core	apps/snmp/snmp_mib2_udp.c	/^udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t *column, union snmp_variant_value/;"	f	typeref:typename:snmp_err_t	file:
udp_Table_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_udp.c	/^udp_Table_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, uni/;"	f	typeref:typename:snmp_err_t	file:
udp_bind	core/udp.c	/^udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t
udp_bind_netif	core/udp.c	/^udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)$/;"	f	typeref:typename:void
udp_connect	core/udp.c	/^udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)$/;"	f	typeref:typename:err_t
udp_debug_print	core/udp.c	/^udp_debug_print(struct udp_hdr *udphdr)$/;"	f	typeref:typename:void
udp_disconnect	core/udp.c	/^udp_disconnect(struct udp_pcb *pcb)$/;"	f	typeref:typename:void
udp_endpointTable_get_cell_value	apps/snmp/snmp_mib2_udp.c	/^udp_endpointTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, un/;"	f	typeref:typename:snmp_err_t	file:
udp_endpointTable_get_cell_value_core	apps/snmp/snmp_mib2_udp.c	/^udp_endpointTable_get_cell_value_core(const u32_t *column, union snmp_variant_value *value)$/;"	f	typeref:typename:snmp_err_t	file:
udp_endpointTable_get_next_cell_instance_and_value	apps/snmp/snmp_mib2_udp.c	/^udp_endpointTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_/;"	f	typeref:typename:snmp_err_t	file:
udp_get_value	apps/snmp/snmp_mib2_udp.c	/^udp_get_value(struct snmp_node_instance *instance, void *value)$/;"	f	typeref:typename:s16_t	file:
udp_init	core/udp.c	/^udp_init(void)$/;"	f	typeref:typename:void
udp_input	core/udp.c	/^udp_input(struct pbuf *p, struct netif *inp)$/;"	f	typeref:typename:void
udp_input_local_match	core/udp.c	/^udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)$/;"	f	typeref:typename:u8_t	file:
udp_listening	core/ipv4/ip4_napt.c	/^udp_listening(u16_t port)$/;"	f	typeref:typename:u8_t	file:
udp_netif_ip_addr_changed	core/udp.c	/^void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)$/;"	f	typeref:typename:void
udp_new	core/udp.c	/^udp_new(void)$/;"	f	typeref:struct:udp_pcb *
udp_new_ip_type	core/udp.c	/^udp_new_ip_type(u8_t type)$/;"	f	typeref:struct:udp_pcb *
udp_new_port	core/udp.c	/^udp_new_port(void)$/;"	f	typeref:typename:u16_t	file:
udp_recv	core/udp.c	/^udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)$/;"	f	typeref:typename:void
udp_remove	core/udp.c	/^udp_remove(struct udp_pcb *pcb)$/;"	f	typeref:typename:void
udp_send	core/udp.c	/^udp_send(struct udp_pcb *pcb, struct pbuf *p)$/;"	f	typeref:typename:err_t
udp_send_chksum	core/udp.c	/^udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:err_t
udp_sendto	core/udp.c	/^udp_sendto(struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:err_t
udp_sendto_chksum	core/udp.c	/^udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,$/;"	f	typeref:typename:err_t
udp_sendto_if	core/udp.c	/^udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:err_t
udp_sendto_if_chksum	core/udp.c	/^udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,$/;"	f	typeref:typename:err_t
udp_sendto_if_src	core/udp.c	/^udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:err_t
udp_sendto_if_src_chksum	core/udp.c	/^udp_sendto_if_src_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,$/;"	f	typeref:typename:err_t
upap_authpeer	netif/ppp/upap.c	/^void upap_authpeer(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
upap_authwithpeer	netif/ppp/upap.c	/^void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {$/;"	f	typeref:typename:void
upap_init	netif/ppp/upap.c	/^static void upap_init(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
upap_input	netif/ppp/upap.c	/^static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {$/;"	f	typeref:typename:void	file:
upap_lowerdown	netif/ppp/upap.c	/^static void upap_lowerdown(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
upap_lowerup	netif/ppp/upap.c	/^static void upap_lowerup(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
upap_printpkt	netif/ppp/upap.c	/^static int upap_printpkt(const u_char *p, int plen, void (*printer) (void *, const char *, ...),/;"	f	typeref:typename:int	file:
upap_protrej	netif/ppp/upap.c	/^static void upap_protrej(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
upap_rauthack	netif/ppp/upap.c	/^static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
upap_rauthnak	netif/ppp/upap.c	/^static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
upap_rauthreq	netif/ppp/upap.c	/^static void upap_rauthreq(ppp_pcb *pcb, u_char *inp, int id, int len) {$/;"	f	typeref:typename:void	file:
upap_reqtimeout	netif/ppp/upap.c	/^static void upap_reqtimeout(void *arg) {$/;"	f	typeref:typename:void	file:
upap_sauthreq	netif/ppp/upap.c	/^static void upap_sauthreq(ppp_pcb *pcb) {$/;"	f	typeref:typename:void	file:
upap_sresp	netif/ppp/upap.c	/^static void upap_sresp(ppp_pcb *pcb, u_char code, u_char id, const char *msg, int msglen) {$/;"	f	typeref:typename:void	file:
upap_timeout	netif/ppp/upap.c	/^static void upap_timeout(void *arg) {$/;"	f	typeref:typename:void	file:
update_link_stats	netif/ppp/ppp.c	/^void update_link_stats(int u) {$/;"	f	typeref:typename:void
upper_layers_down	netif/ppp/auth.c	/^void upper_layers_down(ppp_pcb *pcb) {$/;"	f	typeref:typename:void
usmstats_scalars_get_value	apps/snmp/snmp_snmpv2_usm.c	/^static s16_t usmstats_scalars_get_value(const struct snmp_scalar_array_node_def *node, void *val/;"	f	typeref:typename:s16_t	file:
usmusertable_get_instance	apps/snmp/snmp_snmpv2_usm.c	/^static snmp_err_t usmusertable_get_instance(const u32_t *column, const u32_t *row_oid, u8_t row_/;"	f	typeref:typename:snmp_err_t	file:
usmusertable_get_next_instance	apps/snmp/snmp_snmpv2_usm.c	/^static snmp_err_t usmusertable_get_next_instance(const u32_t *column, struct snmp_obj_id *row_oi/;"	f	typeref:typename:snmp_err_t	file:
usmusertable_get_value	apps/snmp/snmp_snmpv2_usm.c	/^static s16_t usmusertable_get_value(struct snmp_node_instance *cell_instance, void *value)$/;"	f	typeref:typename:s16_t	file:
vj_compress_init	netif/ppp/vj.c	/^vj_compress_init(struct vjcompress *comp)$/;"	f	typeref:typename:void
vj_compress_tcp	netif/ppp/vj.c	/^vj_compress_tcp(struct vjcompress *comp, struct pbuf **pb)$/;"	f	typeref:typename:PACK_STRUCT_END u8_t
vj_uncompress_err	netif/ppp/vj.c	/^vj_uncompress_err(struct vjcompress *comp)$/;"	f	typeref:typename:void
vj_uncompress_tcp	netif/ppp/vj.c	/^vj_uncompress_tcp(struct pbuf **nb, struct vjcompress *comp)$/;"	f	typeref:typename:int
vj_uncompress_uncomp	netif/ppp/vj.c	/^vj_uncompress_uncomp(struct pbuf *nb, struct vjcompress *comp)$/;"	f	typeref:typename:int
write	include/lwip/sockets.h	/^static inline ssize_t write(int s,const void *dataptr,size_t len)$/;"	f	typeref:typename:ssize_t
write_checksums	apps/http/makefsdata/makefsdata.c	/^static int write_checksums(FILE *struct_file, const char *varname,$/;"	f	typeref:typename:int	file:
write_pseudonym	netif/ppp/eap.c	/^write_pseudonym(esp, inp, len, id)$/;"	f	file:
writev	include/lwip/sockets.h	/^static inline ssize_t writev(int s,const struct iovec *iov,int iovcnt)$/;"	f	typeref:typename:ssize_t
zep_lowpan_timer	netif/zepif.c	/^zep_lowpan_timer(void *arg)$/;"	f	typeref:typename:void	file:
zepif_init	netif/zepif.c	/^zepif_init(struct netif *netif)$/;"	f	typeref:typename:err_t
zepif_linkoutput	netif/zepif.c	/^zepif_linkoutput(struct netif *netif, struct pbuf *p)$/;"	f	typeref:typename:err_t	file:
zepif_udp_recv	netif/zepif.c	/^zepif_udp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p,$/;"	f	typeref:typename:void	file:
