Abort	core/net/tcp6.cpp	/^Error Tcp::Endpoint::Abort(void)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
AbortTransaction	core/coap/coap.cpp	/^Error CoapBase::AbortTransaction(ResponseHandler aHandler, void *aContext)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
Accept	core/net/dns_dso.cpp	/^void Dso::Connection::Accept(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
Accept	core/net/ip6_filter.cpp	/^bool Filter::Accept(Message &aMessage) const$/;"	f	class:ot::Ip6::Filter	typeref:typename:bool
AcceptConnection	core/net/dns_dso.cpp	/^Dso::Connection *Dso::AcceptConnection(const Ip6::SockAddr &aPeerSockAddr)$/;"	f	class:ot::Dns::Dso	typeref:typename:Dso::Connection *
ActionToString	core/backbone_router/bbr_local.cpp	/^const char *Local::ActionToString(Action aAction)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:const char *
ActionToString	core/common/settings.cpp	/^const char *SettingsBase::ActionToString(Action aAction)$/;"	f	class:ot::SettingsBase	typeref:typename:const char *
ActiveDatasetManager	core/meshcop/dataset_manager.cpp	/^ActiveDatasetManager::ActiveDatasetManager(Instance &aInstance)$/;"	f	class:ot::MeshCoP::ActiveDatasetManager
ActiveScan	core/mac/mac.cpp	/^Error Mac::ActiveScan(uint32_t aScanChannels, uint16_t aScanDuration, ActiveScanHandler aHandler/;"	f	class:ot::Mac::Mac	typeref:typename:Error
Add	core/backbone_router/multicast_listeners_table.cpp	/^Error MulticastListenersTable::Add(const Ip6::Address &aAddress, Time aExpireTime)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:Error
Add	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::RioPrefixArray::Add(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser::RioPrefixArray	typeref:typename:void
Add	core/common/linked_list.hpp	/^    Error Add(Type &aEntry)$/;"	f	class:ot::LinkedList	typeref:typename:Error
Add	core/common/notifier.hpp	/^    void Add(Event aEvent) { mEventFlags |= aEvent; }$/;"	f	class:ot::Events	typeref:typename:void
Add	core/common/settings_driver.hpp	/^    Error Add(uint16_t aKey, const void *aValue, uint16_t aValueLength)$/;"	f	class:ot::SettingsDriver	typeref:typename:Error
Add	core/common/timer.cpp	/^void Timer::Scheduler::Add(Timer &aTimer, const AlarmApi &aAlarmApi)$/;"	f	class:ot::Timer::Scheduler	typeref:typename:void
Add	core/common/timer.hpp	/^        void Add(TimerMicro &aTimer) { Timer::Scheduler::Add(aTimer, sAlarmMicroApi); }$/;"	f	class:ot::TimerMicro::Scheduler	typeref:typename:void
Add	core/common/timer.hpp	/^        void Add(TimerMilli &aTimer) { Timer::Scheduler::Add(aTimer, sAlarmMilliApi); }$/;"	f	class:ot::TimerMilli::Scheduler	typeref:typename:void
Add	core/mac/mac_types.hpp	/^    void Add(RadioType aType) { mBitMask |= BitFlag(aType); }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:void
Add	core/mac/mac_types.hpp	/^    void Add(RadioTypes aTypes) { mBitMask |= aTypes.mBitMask; }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:void
Add	core/meshcop/dataset_manager.cpp	/^void DatasetManager::TlvList::Add(uint8_t aTlvType)$/;"	f	class:ot::MeshCoP::DatasetManager::TlvList	typeref:typename:void
Add	core/net/dns_dso.cpp	/^Error Dso::Connection::PendingRequests::Add(MessageId aMessageId, Tlv::Type aPrimaryTlvType, Tim/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:Error
Add	core/net/dnssd.cpp	/^void Dnssd::RequestIdRange::Add(RequestId aId)$/;"	f	class:ot::Dnssd::RequestIdRange	typeref:typename:void
Add	core/net/mdns.cpp	/^Error Core::AddrCache::Add(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:Error
Add	core/net/mdns.cpp	/^Error Core::BrowseCache::Add(const Browser &aBrowser) { return CacheEntry::Add(ResultCallback(aB/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:Error
Add	core/net/mdns.cpp	/^Error Core::CacheEntry::Add(const ResultCallback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:Error
Add	core/net/mdns.cpp	/^Error Core::SrvCache::Add(const SrvResolver &aResolver) { return CacheEntry::Add(ResultCallback(/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:Error
Add	core/net/mdns.cpp	/^Error Core::TxtCache::Add(const TxtResolver &aResolver) { return CacheEntry::Add(ResultCallback(/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:Error
Add	core/net/mdns.cpp	/^void Core::MultiPacketRxMessages::RxMsgEntry::Add(OwnedPtr<RxMessage> &aRxMessagePtr)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages::RxMsgEntry	typeref:typename:void
Add	core/net/mdns.cpp	/^void Core::TxMessageHistory::Add(const Message &aMessage)$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory	typeref:typename:void
Add	core/net/mdns.hpp	/^            void Add(uint16_t aType) { SuccessOrAssert(PushBack(aType)); }$/;"	f	struct:ot::Dns::Multicast::Core::Entry::TypeArray	typeref:typename:void
Add	core/thread/link_quality.cpp	/^Error RssAverager::Add(int8_t aRss)$/;"	f	class:ot::RssAverager	typeref:typename:Error
Add	core/thread/link_quality.cpp	/^void LqiAverager::Add(uint8_t aLqi)$/;"	f	class:ot::LqiAverager	typeref:typename:void
Add	core/thread/mle.cpp	/^void Mle::TlvList::Add(uint8_t aTlvType)$/;"	f	class:ot::Mle::Mle::TlvList	typeref:typename:void
Add	core/thread/mle_types.hpp	/^    void Add(uint8_t aRouterId) { mRouterIdSet[aRouterId \/ 8] |= MaskFor(aRouterId); }$/;"	f	class:ot::Mle::RouterIdSet	typeref:typename:void
Add	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Add(void)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Add	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::Add(void)$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
Add	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Add(void)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Add	core/thread/network_data_service.hpp	/^    Error Add(const typename ServiceType::ServerData &aServerData, bool aServerStable = true)$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
Add	core/thread/network_data_service.hpp	/^    Error Add(const typename ServiceType::ServiceData &aServiceData, bool aServerStable = true)$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
Add	core/utils/flash.cpp	/^Error Flash::Add(uint16_t aKey, bool aFirst, const uint8_t *aValue, uint16_t aValueLength)$/;"	f	class:ot::Flash	typeref:typename:Error
Add	core/utils/flash.cpp	/^Error Flash::Add(uint16_t aKey, const uint8_t *aValue, uint16_t aValueLength)$/;"	f	class:ot::Flash	typeref:typename:Error
Add	core/utils/history_tracker.cpp	/^uint16_t HistoryTracker::List::Add(uint16_t aMaxSize, Timestamp aTimestamps[])$/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:uint16_t
Add	ncp/changed_props_set.cpp	/^void ChangedPropsSet::Add(spinel_prop_key_t aPropKey, spinel_status_t aStatus)$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
Add	posix/platform/config_file.cpp	/^otError ConfigFile::Add(const char *aKey, const char *aValue)$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:otError
Add	posix/platform/mainloop.cpp	/^void Manager::Add(Source &aSource)$/;"	f	class:ot::Posix::Mainloop::Manager	typeref:typename:void
Add	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Add(const Ip6::Address &aAddress)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
AddAddress	core/mac/mac_filter.cpp	/^Error Filter::AddAddress(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Filter	typeref:typename:Error
AddAddress	core/thread/src_match_controller.cpp	/^Error SourceMatchController::AddAddress(const Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:Error
AddAddressFor	core/utils/slaac_address.cpp	/^void Slaac::AddAddressFor(const NetworkData::OnMeshPrefixConfig &aConfig)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
AddAddresses	core/utils/slaac_address.cpp	/^void Slaac::AddAddresses(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
AddAll	core/mac/mac_types.cpp	/^void RadioTypes::AddAll(void)$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:void
AddBlockWiseResource	core/coap/coap.cpp	/^void CoapBase::AddBlockWiseResource(ResourceBlockWise &aResource) { IgnoreError(mBlockWiseResour/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
AddBorderRouter	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AddBorderRouter(const BorderRouterTlv &aBorderRouter, PrefixTlv &aDstPrefix, Chang/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AddBufferedMessage	core/net/ip6_mpl.cpp	/^void Mpl::AddBufferedMessage(Message &aMessage, uint16_t aSeedId, uint8_t aSequence)$/;"	f	class:ot::Ip6::Mpl	typeref:typename:void
AddCalibratedPower	core/utils/power_calibration.cpp	/^Error PowerCalibration::AddCalibratedPower(uint8_t        aChannel,$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:Error
AddCalibratedPower	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::AddCalibratedPower(uint8_t        aChannel,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
AddChannel	core/mac/channel_mask.hpp	/^    void AddChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:void
AddChildInfo	core/common/settings.cpp	/^Error Settings::AddChildInfo(const ChildInfo &aChildInfo)$/;"	f	class:ot::Settings	typeref:typename:Error
AddData	core/net/checksum.cpp	/^void Checksum::AddData(const uint8_t *aBuffer, uint16_t aLength)$/;"	f	class:ot::Checksum	typeref:typename:void
AddDomainPrefixToNetworkData	core/backbone_router/bbr_local.cpp	/^void Local::AddDomainPrefixToNetworkData(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
AddDomainUnicastAddress	core/thread/dua_manager.cpp	/^void DuaManager::AddDomainUnicastAddress(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
AddElementsFrom	core/thread/mle.cpp	/^void Mle::TlvList::AddElementsFrom(const TlvList &aTlvList)$/;"	f	class:ot::Mle::Mle::TlvList	typeref:typename:void
AddEntry	core/thread/src_match_controller.cpp	/^void SourceMatchController::AddEntry(Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
AddExternalRoute	core/thread/network_data_publisher.cpp	/^Error Publisher::PrefixEntry::AddExternalRoute(void)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:Error
AddExternalRoute	posix/platform/netif.cpp	/^static otError AddExternalRoute(const otIp6Prefix &aPrefix)$/;"	f	typeref:typename:otError	file:
AddExternalUnicastAddress	core/net/netif.cpp	/^Error Netif::AddExternalUnicastAddress(const UnicastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:Error
AddForwardTrackingSeriesInfo	core/thread/neighbor.cpp	/^void Neighbor::AddForwardTrackingSeriesInfo(LinkMetrics::SeriesInfo &aSeriesInfo)$/;"	f	class:ot::Neighbor	typeref:typename:void
AddFrameTxStatus	core/thread/link_quality.hpp	/^    void AddFrameTxStatus(bool aTxStatus)$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
AddHasRoute	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AddHasRoute(const HasRouteTlv &aHasRoute, PrefixTlv &aDstPrefix, ChangedFlags &aCh/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AddHasRoutePrefix	core/thread/network_data_local.cpp	/^Error Local::AddHasRoutePrefix(const ExternalRouteConfig &aConfig)$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
AddIaAddress	core/net/dhcp6_server.cpp	/^Error Server::AddIaAddress(Message &aMessage, const Ip6::Address &aPrefix, ClientIdentifier &aCl/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AddIp4Route	posix/platform/netif.cpp	/^static otError AddIp4Route(const otIp4Cidr &aIp4Cidr, uint32_t aPriority)$/;"	f	typeref:typename:otError	file:
AddIp6Address	core/net/srp_server.cpp	/^Error Server::Host::AddIp6Address(const Ip6::Address &aIp6Address)$/;"	f	class:ot::Srp::Server::Host	typeref:typename:Error
AddIp6Address	core/thread/child.cpp	/^Error Child::AddIp6Address(const Ip6::Address &aAddress)$/;"	f	class:ot::Child	typeref:typename:Error
AddJitter	core/common/random.cpp	/^uint32_t AddJitter(uint32_t aValue, uint16_t aJitter)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint32_t
AddJoiner	core/meshcop/commissioner.cpp	/^Error Commissioner::AddJoiner(const Mac::ExtAddress *aEui64,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
AddJoiner	core/meshcop/commissioner.hpp	/^    Error AddJoiner(const JoinerDiscerner &aDiscerner, const char *aPskd, uint32_t aTimeout)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
AddJoiner	core/meshcop/commissioner.hpp	/^    Error AddJoiner(const Mac::ExtAddress &aEui64, const char *aPskd, uint32_t aTimeout)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
AddJoinerAny	core/meshcop/commissioner.hpp	/^    Error AddJoinerAny(const char *aPskd, uint32_t aTimeout) { return AddJoiner(nullptr, nullptr/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
AddLastStatus	ncp/changed_props_set.hpp	/^    void AddLastStatus(spinel_status_t aStatus) { Add(SPINEL_PROP_LAST_STATUS, aStatus); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
AddLocalToNetData	core/border_router/routing_manager.cpp	/^Error RoutingManager::OmrPrefixManager::AddLocalToNetData(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:Error
AddLqi	core/common/message.hpp	/^    void AddLqi(uint8_t aLqi) { GetMetadata().mLqiAverager.Add(aLqi); }$/;"	f	class:ot::Message	typeref:typename:void
AddMessageForSleepyChild	core/thread/indirect_sender.cpp	/^void IndirectSender::AddMessageForSleepyChild(Message &aMessage, Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:void
AddMessageTxStatus	core/thread/link_quality.hpp	/^    void AddMessageTxStatus(bool aTxStatus)$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
AddMplOption	core/net/ip6.cpp	/^Error Ip6::AddMplOption(Message &aMessage, Header &aHeader)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
AddMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^otError MulticastRoutingManager::AddMulticastForwardingCache(const Ip6::Address &aSrcAddr,$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:otError
AddNew	core/net/mdns.cpp	/^void Core::MultiPacketRxMessages::AddNew(OwnedPtr<RxMessage> &aRxMessagePtr)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages	typeref:typename:void
AddNewEntry	core/utils/history_tracker.hpp	/^        Entry       *AddNewEntry(void) { return nullptr; }$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:Entry *
AddNewEntry	core/utils/history_tracker.hpp	/^        Entry *AddNewEntry(void) { return &mEntries[Add(kMaxSize, mTimestamps)]; }$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:Entry *
AddNewEntry	core/utils/history_tracker.hpp	/^        void         AddNewEntry(const Entry &) {}$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:void
AddNewEntry	core/utils/history_tracker.hpp	/^        void   AddNewEntry(const Entry &aEntry) { mEntries[Add(kMaxSize, mTimestamps)] = aEntry;/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:void
AddNewResponseAddress	core/net/mdns.cpp	/^void Core::AddrCache::AddNewResponseAddress(const Ip6::Address &aAddress, uint32_t aTtl, bool aC/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
AddNewService	core/net/srp_server.cpp	/^Server::Service *Server::Host::AddNewService(const char *aInstanceName,$/;"	f	class:ot::Srp::Server::Host	typeref:typename:Server::Service *
AddOmrRoute	posix/platform/netif.cpp	/^static otError AddOmrRoute(const otIp6Prefix &aPrefix)$/;"	f	typeref:typename:otError	file:
AddOnMeshPrefix	core/thread/network_data_local.cpp	/^Error Local::AddOnMeshPrefix(const OnMeshPrefixConfig &aConfig)$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
AddOnMeshPrefix	core/thread/network_data_publisher.cpp	/^Error Publisher::PrefixEntry::AddOnMeshPrefix(void)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:Error
AddOrUpdateBrOnLinkPrefix	core/common/settings.cpp	/^Error Settings::AddOrUpdateBrOnLinkPrefix(const BrOnLinkPrefix &aBrOnLinkPrefix)$/;"	f	class:ot::Settings	typeref:typename:Error
AddOrUpdateLocalInNetData	core/border_router/routing_manager.cpp	/^Error RoutingManager::OmrPrefixManager::AddOrUpdateLocalInNetData(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:Error
AddPassiveIp6AddrCache	core/net/mdns.cpp	/^void Core::AddPassiveIp6AddrCache(const char *aHostName)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
AddPassiveSrvTxtCache	core/net/mdns.cpp	/^void Core::AddPassiveSrvTxtCache(const char *aServiceInstance, const char *aServiceType)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
AddPendingEntries	core/thread/src_match_controller.cpp	/^Error SourceMatchController::AddPendingEntries(void)$/;"	f	class:ot::SourceMatchController	typeref:typename:Error
AddPrefix	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AddPrefix(const PrefixTlv &aPrefix, ChangedFlags &aChangedFlags)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AddPrefix	core/thread/network_data_local.cpp	/^Error Local::AddPrefix(const Ip6::Prefix &aPrefix, NetworkDataTlv::Type aSubTlvType, uint16_t aF/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
AddPrefixAgent	core/net/dhcp6_server.cpp	/^void Server::AddPrefixAgent(const Ip6::Prefix &aIp6Prefix, const Lowpan::Context &aContext)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
AddProperty	ncp/changed_props_set.hpp	/^    void AddProperty(spinel_prop_key_t aPropKey) { Add(aPropKey, SPINEL_STATUS_OK); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
AddQuestionsFrom	core/net/dnssd_server.cpp	/^Server::ResponseCode Server::Response::AddQuestionsFrom(const Request &aRequest)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Server::ResponseCode
AddReceiver	core/net/udp6.cpp	/^Error Udp::AddReceiver(Receiver &aReceiver) { return mReceivers.Add(aReceiver); }$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
AddResource	core/coap/coap.cpp	/^void CoapBase::AddResource(Resource &aResource) { IgnoreError(mResources.Add(aResource)); }$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
AddRloc16ToRlocs	core/thread/network_data.cpp	/^void NetworkData::AddRloc16ToRlocs(uint16_t aRloc16, Rlocs &aRlocs, RoleFilter aRoleFilter)$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:void
AddRoute	posix/platform/netif.cpp	/^static otError AddRoute(const otIp6Prefix &aPrefix, uint32_t aPriority)$/;"	f	typeref:typename:otError	file:
AddRoute	posix/platform/netif.cpp	/^template <size_t N> otError AddRoute(const uint8_t (&aAddress)[N], uint8_t aPrefixLen, uint32_t /;"	f	typeref:typename:otError
AddRouter	core/thread/router_table.cpp	/^Router *RouterTable::AddRouter(uint8_t aRouterId)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
AddRss	core/common/message.hpp	/^    void AddRss(int8_t aRss) { IgnoreError(GetMetadata().mRssAverager.Add(aRss)); }$/;"	f	class:ot::Message	typeref:typename:void
AddRss	core/thread/link_quality.cpp	/^void LinkQualityInfo::AddRss(int8_t aRss)$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
AddRssIn	core/mac/mac_filter.cpp	/^Error Filter::AddRssIn(const ExtAddress &aExtAddress, int8_t aRss)$/;"	f	class:ot::Mac::Filter	typeref:typename:Error
AddRtAttr	posix/platform/netif.cpp	/^static struct rtattr *AddRtAttr(struct nlmsghdr *aHeader,$/;"	f	typeref:struct:rtattr *	file:
AddRtAttrUint32	posix/platform/netif.cpp	/^void AddRtAttrUint32(struct nlmsghdr *aHeader, uint32_t aMaxLen, uint8_t aType, uint32_t aData)$/;"	f	typeref:typename:void
AddSample	core/thread/link_quality.cpp	/^void SuccessRateTracker::AddSample(bool aSuccess, uint16_t aWeight)$/;"	f	class:ot::SuccessRateTracker	typeref:typename:void
AddServer	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AddServer(const ServerTlv &aServer, ServiceTlv &aDstService, ChangedFlags &aChange/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AddService	core/backbone_router/bbr_local.cpp	/^Error Local::AddService(RegisterMode aMode)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:Error
AddService	core/net/srp_client.cpp	/^Error Client::AddService(Service &aService)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AddService	core/net/srp_server.cpp	/^void Server::Host::AddService(Service &aService)$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
AddService	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AddService(const ServiceTlv &aService, ChangedFlags &aChangedFlags)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AddService	core/thread/network_data_local.cpp	/^Error Local::AddService(uint32_t           aEnterpriseNumber,$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
AddService	core/thread/network_data_service.cpp	/^Error Manager::AddService(const void *aServiceData,$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
AddSocket	core/net/udp6.cpp	/^void Udp::AddSocket(SocketHandle &aSocket)$/;"	f	class:ot::Ip6::Udp	typeref:typename:void
AddSrcMatchExtEntry	core/radio/radio.hpp	/^inline Error Radio::AddSrcMatchExtEntry(const Mac::ExtAddress &) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
AddSrcMatchExtEntry	core/radio/radio.hpp	/^inline Error Radio::AddSrcMatchExtEntry(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Radio	typeref:typename:Error
AddSrcMatchExtEntry	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::AddSrcMatchExtEntry(const otExtAddress &aExtAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
AddSrcMatchShortEntry	core/radio/radio.hpp	/^inline Error Radio::AddSrcMatchShortEntry(Mac::ShortAddress aShortAddress)$/;"	f	class:ot::Radio	typeref:typename:Error
AddSrcMatchShortEntry	core/radio/radio.hpp	/^inline Error Radio::AddSrcMatchShortEntry(Mac::ShortAddress) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
AddSrcMatchShortEntry	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::AddSrcMatchShortEntry(uint16_t aShortAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
AddSupportedRadioType	core/thread/radio_selector.hpp	/^        void AddSupportedRadioType(Mac::RadioType aType) { mSupportedRadioTypes.Add(aType); }$/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:void
AddToExisting	core/net/mdns.cpp	/^void Core::MultiPacketRxMessages::AddToExisting(OwnedPtr<RxMessage> &aRxMessagePtr)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages	typeref:typename:void
AddToIpSet	posix/platform/firewall.cpp	/^inline otError IpSetManager::AddToIpSet(const char *aSetName, const char *aAddress)$/;"	f	class:ot::Posix::IpSetManager	typeref:typename:otError
AddType	core/net/dns_types.cpp	/^void NsecRecord::TypeBitMap::AddType(uint16_t aType)$/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:void
AddUint16	core/net/checksum.cpp	/^void Checksum::AddUint16(uint16_t aUint16)$/;"	f	class:ot::Checksum	typeref:typename:void
AddUint8	core/net/checksum.cpp	/^void Checksum::AddUint8(uint8_t aUint8)$/;"	f	class:ot::Checksum	typeref:typename:void
AddUnicastAddress	core/net/netif.cpp	/^void Netif::AddUnicastAddress(UnicastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
AddUnique	core/thread/mlr_manager.cpp	/^void MlrManager::AddressArray::AddUnique(const Ip6::Address &aAddress)$/;"	f	class:ot::MlrManager::AddressArray	typeref:typename:void
AddUnsecurePort	core/net/ip6_filter.hpp	/^    Error AddUnsecurePort(uint16_t aPort) { return UpdateUnsecurePorts(kAdd, aPort); }$/;"	f	class:ot::Ip6::Filter	typeref:typename:Error
AddrEntry	core/net/mdns.cpp	/^Core::AddrCache::AddrEntry::AddrEntry(const Ip6::Address &aAddress)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache::AddrEntry
Address	core/mac/mac_types.hpp	/^    Address(void)$/;"	f	class:ot::Mac::Address
AddressInfo	core/net/mdns.hpp	/^        AddressInfo(void) { Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::AddressInfo
AddressIterator	core/thread/child.hpp	/^        AddressIterator(const Child &aChild, Index aIndex, Ip6::Address::TypeFilter aFilter = Ip/;"	f	class:ot::Child::AddressIterator
AddressIterator	core/thread/child.hpp	/^        AddressIterator(const Child &aChild, IteratorType)$/;"	f	class:ot::Child::AddressIterator
AddressIterator	core/thread/child.hpp	/^        explicit AddressIterator(const Child &aChild, Ip6::Address::TypeFilter aFilter = Ip6::Ad/;"	f	class:ot::Child::AddressIterator
AddressIteratorBuilder	core/thread/child.hpp	/^        AddressIteratorBuilder(const Child &aChild, Ip6::Address::TypeFilter aFilter)$/;"	f	class:ot::Child::AddressIteratorBuilder
AddressMatcher	core/thread/neighbor.hpp	/^        AddressMatcher(Mac::ShortAddress aShortAddress, StateFilter aStateFilter)$/;"	f	class:ot::Neighbor::AddressMatcher
AddressMatcher	core/thread/neighbor.hpp	/^        AddressMatcher(StateFilter aStateFilter, Mac::ShortAddress aShortAddress, const Mac::Ext/;"	f	class:ot::Neighbor::AddressMatcher
AddressMatcher	core/thread/neighbor.hpp	/^        AddressMatcher(const Mac::Address &aMacAddress, StateFilter aStateFilter)$/;"	f	class:ot::Neighbor::AddressMatcher
AddressMatcher	core/thread/neighbor.hpp	/^        AddressMatcher(const Mac::ExtAddress &aExtAddress, StateFilter aStateFilter)$/;"	f	class:ot::Neighbor::AddressMatcher
AddressMatcher	core/thread/neighbor.hpp	/^        explicit AddressMatcher(StateFilter aStateFilter)$/;"	f	class:ot::Neighbor::AddressMatcher
AddressModeToString	cli/cli_mac_filter.cpp	/^const char *MacFilter::AddressModeToString(otMacFilterAddressMode aMode)$/;"	f	class:ot::Cli::MacFilter	typeref:typename:const char *
AddressModeToString	core/net/srp_server.cpp	/^const char *Server::AddressModeToString(AddressMode aMode)$/;"	f	class:ot::Srp::Server	typeref:typename:const char *
AddressOriginToString	cli/cli_utils.cpp	/^const char *Utils::AddressOriginToString(uint8_t aOrigin)$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
AddressResolver	core/thread/address_resolver.cpp	/^AddressResolver::AddressResolver(Instance &aInstance)$/;"	f	class:ot::AddressResolver
AdjustInactivityTimeout	core/net/dns_dso.cpp	/^void Dso::Connection::AdjustInactivityTimeout(uint32_t aNewTimeout)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
AdoptValidAndPreferredLifetimesFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefix::AdoptValidAndPreferredLifetimesFrom(const OnLinkPrefix &aPref/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:void
AdvInfo	core/net/srp_advertising_proxy.cpp	/^AdvertisingProxy::AdvInfo::AdvInfo(Host &aHost, const Server::MessageMetadata &aMetadata, uint32/;"	f	class:ot::Srp::AdvertisingProxy::AdvInfo
Advance	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::Iterator::Advance(void)$/;"	f	class:ot::BackboneRouter::NdProxyTable::Iterator	typeref:typename:void
Advance	core/coap/coap_message.cpp	/^Error Option::Iterator::Advance(void)$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
Advance	core/coap/coap_message.hpp	/^        Error Advance(uint16_t aNumber) { return InitOrAdvance(nullptr, aNumber); }$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
Advance	core/common/linked_list.hpp	/^        void Advance(void) { mItem = mItem->GetNext(); }$/;"	f	class:ot::LinkedList::ConstIterator	typeref:typename:void
Advance	core/common/linked_list.hpp	/^        void Advance(void) { mItem = mItem->GetNext(); }$/;"	f	class:ot::LinkedList::Iterator	typeref:typename:void
Advance	core/common/message.cpp	/^void Message::Iterator::Advance(void)$/;"	f	class:ot::Message::Iterator	typeref:typename:void
Advance	core/common/message.hpp	/^        void Advance(void) { mItem = mItem->GetNext(); }$/;"	f	class:ot::Message::ConstIterator	typeref:typename:void
Advance	core/common/settings.cpp	/^void Settings::ChildInfoIterator::Advance(void)$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:void
Advance	core/net/nd6.cpp	/^void Option::Iterator::Advance(void) { mOption = (mOption != nullptr) ? Validate(Next(mOption)) /;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:void
Advance	core/net/netif.hpp	/^            void Advance(void) { AdvanceFrom(mItem->GetNext()); }$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator	typeref:typename:void
Advance	core/thread/child_table.cpp	/^void ChildTable::Iterator::Advance(void)$/;"	f	class:ot::ChildTable::Iterator	typeref:typename:void
AdvanceFrom	core/net/netif.cpp	/^void Netif::ExternalMulticastAddress::Iterator::AdvanceFrom(const MulticastAddress *aAddr)$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator	typeref:typename:void
AdvanceRandomTicks	core/meshcop/timestamp.cpp	/^void Timestamp::AdvanceRandomTicks(void)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
AdvanceSubTlv	core/thread/network_data.hpp	/^        void AdvanceSubTlv(const NetworkDataTlv *aSubTlvs)$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
AdvanceTlv	core/thread/network_data.hpp	/^        void AdvanceTlv(const uint8_t *aTlvs)$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
AdvanceToNextEntry	core/border_router/routing_manager.cpp	/^Error RoutingManager::RxRaTracker::Iterator::AdvanceToNextEntry(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:Error
AdvanceToNextRouter	core/border_router/routing_manager.cpp	/^Error RoutingManager::RxRaTracker::Iterator::AdvanceToNextRouter(Type aType)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:Error
Advertise	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::Advertise(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
Advertise	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::Advertise(Host &aHost, const Server::MessageMetadata &aMetadata)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
AdvertiseRemovalOf	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::AdvertiseRemovalOf(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
AdvertiseRemovalOf	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::AdvertiseRemovalOf(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
AdvertisingProxy	core/net/srp_advertising_proxy.cpp	/^AdvertisingProxy::AdvertisingProxy(Instance &aInstance)$/;"	f	class:ot::Srp::AdvertisingProxy
AesEcb	core/crypto/aes_ecb.cpp	/^AesEcb::AesEcb(void)$/;"	f	class:ot::Crypto::AesEcb
AfterInit	core/instance/instance.cpp	/^void Instance::AfterInit(void)$/;"	f	class:ot::Instance	typeref:typename:void
AfterInit	core/radio/trel_link.cpp	/^void Link::AfterInit(void) { mInterface.Init(); }$/;"	f	class:ot::Trel::Link	typeref:typename:void
Agent	core/net/nd_agent.hpp	/^    explicit Agent(Instance &aInstance)$/;"	f	class:ot::NeighborDiscovery::Agent
Agent	core/thread/tmf.cpp	/^Agent::Agent(Instance &aInstance)$/;"	f	class:ot::Tmf::Agent
AggregateLinkMetrics	core/thread/link_metrics_types.cpp	/^void SeriesInfo::AggregateLinkMetrics(uint8_t aFrameType, uint8_t aLqi, int8_t aRss)$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:void
AggregateLinkMetrics	core/thread/neighbor.cpp	/^void Neighbor::AggregateLinkMetrics(uint8_t aSeriesId, uint8_t aFrameType, uint8_t aLqi, int8_t /;"	f	class:ot::Neighbor	typeref:typename:void
Allocate	core/common/heap_allocatable.hpp	/^    template <typename... Args> static Type *Allocate(Args &&...aArgs)$/;"	f	class:ot::Heap::Allocatable	typeref:typename:Type *
Allocate	core/common/heap_array.hpp	/^    Error Allocate(IndexType aCapacity)$/;"	f	class:ot::Heap::Array	typeref:typename:Error
Allocate	core/common/message.cpp	/^Message *MessagePool::Allocate(Message::Type aType) { return Allocate(aType, 0, Message::Setting/;"	f	class:ot::MessagePool	typeref:typename:Message *
Allocate	core/common/message.cpp	/^Message *MessagePool::Allocate(Message::Type aType, uint16_t aReserveHeader)$/;"	f	class:ot::MessagePool	typeref:typename:Message *
Allocate	core/common/message.cpp	/^Message *MessagePool::Allocate(Message::Type aType, uint16_t aReserveHeader, const Message::Sett/;"	f	class:ot::MessagePool	typeref:typename:Message *
Allocate	core/common/pool.hpp	/^    Type *Allocate(void) { return mFreeList.Pop(); }$/;"	f	class:ot::Pool	typeref:typename:Type *
Allocate	core/thread/router_table.cpp	/^Router *RouterTable::Allocate(uint8_t aRouterId)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
Allocate	core/thread/router_table.cpp	/^Router *RouterTable::Allocate(void)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
AllocateAndInit	core/common/heap_allocatable.hpp	/^    template <typename... Args> static Type *AllocateAndInit(Args &&...aArgs)$/;"	f	class:ot::Heap::Allocatable	typeref:typename:Type *
AllocateAndInitFrom	core/net/dnssd_server.cpp	/^Error Server::Response::AllocateAndInitFrom(const Request &aRequest)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AllocateAnswer	core/thread/network_diagnostic.cpp	/^Error Server::AllocateAnswer(Coap::Message *&aAnswer, AnswerInfo &aInfo)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AllocateEntry	core/border_router/routing_manager.cpp	/^RoutingManager::RxRaTracker::Entry<PrefixType> *RoutingManager::RxRaTracker::AllocateEntry(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:RoutingManager::RxRaTracker::Entry<PrefixType> *
AllocateEntry	core/border_router/routing_manager.cpp	/^RoutingManager::RxRaTracker::Entry<RoutingManager::RxRaTracker::Router> *RoutingManager::RxRaTra/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:RoutingManager::RxRaTracker::Entry<RoutingManager::RxRaTracker::Router> *
AllocateEntry	core/border_router/routing_manager.hpp	/^        template <class Type> Entry<Type> *AllocateEntry(void) { return Entry<Type>::Allocate();/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:Entry<Type> *
AllocateEntry	core/thread/mesh_forwarder_ftd.cpp	/^MeshForwarder::FragmentPriorityList::Entry *MeshForwarder::FragmentPriorityList::AllocateEntry($/;"	f	class:ot::MeshForwarder::FragmentPriorityList	typeref:typename:MeshForwarder::FragmentPriorityList::Entry *
AllocateIterator	core/net/mdns.cpp	/^Core::Iterator *Core::AllocateIterator(void) { return EntryIterator::Allocate(GetInstance()); }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Core::Iterator *
AllocateMapping	core/net/nat64_translator.cpp	/^Translator::AddressMapping *Translator::AllocateMapping(const Ip6::Address &aIp6Addr)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Translator::AddressMapping *
AllocateNextRequestId	core/net/srp_advertising_proxy.cpp	/^AdvertisingProxy::RequestId AdvertisingProxy::AllocateNextRequestId(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:AdvertisingProxy::RequestId
AllocateQuery	core/net/dns_client.cpp	/^Error Client::AllocateQuery(const QueryInfo &aInfo, const char *aLabel, const char *aName, Query/;"	f	class:ot::Dns::Client	typeref:typename:Error
AllocateService	core/utils/srp_client_buffers.cpp	/^SrpClientBuffers::ServiceEntry *SrpClientBuffers::AllocateService(void)$/;"	f	class:ot::Utils::SrpClientBuffers	typeref:typename:SrpClientBuffers::ServiceEntry *
AllocateServiceId	core/thread/network_data_leader_ftd.cpp	/^Error Leader::AllocateServiceId(uint8_t &aServiceId) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
AllocateServiceUpdateId	core/net/srp_server.hpp	/^    ServiceUpdateId AllocateServiceUpdateId(void) { return mServiceUpdateId++; }$/;"	f	class:ot::Srp::Server	typeref:typename:ServiceUpdateId
AllocateTransaction	posix/platform/resolver.cpp	/^Resolver::Transaction *Resolver::AllocateTransaction(otPlatDnsUpstreamQuery *aThreadTxn)$/;"	f	class:ot::Posix::Resolver	typeref:typename:Resolver::Transaction *
AllocateUpstreamQueryTransaction	core/net/dnssd_server.cpp	/^Server::UpstreamQueryTransaction *Server::AllocateUpstreamQueryTransaction(const Ip6::MessageInf/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:Server::UpstreamQueryTransaction *
AllowAllGuard	posix/platform/daemon.cpp	/^        AllowAllGuard(void)$/;"	f	class:ot::Posix::Daemon::createListenSocketOrDie::AllowAllGuard	file:
AnnounceBeginClient	core/meshcop/announce_begin_client.cpp	/^AnnounceBeginClient::AnnounceBeginClient(Instance &aInstance)$/;"	f	class:ot::AnnounceBeginClient
AnnounceBeginServer	core/thread/announce_begin_server.cpp	/^AnnounceBeginServer::AnnounceBeginServer(Instance &aInstance)$/;"	f	class:ot::AnnounceBeginServer
AnnounceSender	core/thread/announce_sender.cpp	/^AnnounceSender::AnnounceSender(Instance &aInstance)$/;"	f	class:ot::AnnounceSender
AnnounceSenderBase	core/thread/announce_sender.cpp	/^AnnounceSenderBase::AnnounceSenderBase(Instance &aInstance, Timer::Handler aHandler)$/;"	f	class:ot::AnnounceSenderBase
Answer	core/net/dnssd_server.cpp	/^void Server::Response::Answer(const HostInfo &aHostInfo, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
Answer	core/net/dnssd_server.cpp	/^void Server::Response::Answer(const ServiceInstanceInfo &aInstanceInfo, const Ip6::MessageInfo &/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
AnswerAllServicesQuestion	core/net/mdns.cpp	/^void Core::RxMessage::AnswerAllServicesQuestion(const Question &aQuestion, const AnswerInfo &aIn/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
AnswerInfo	core/thread/network_diagnostic.hpp	/^        AnswerInfo(void)$/;"	f	struct:ot::NetworkDiagnostic::Server::AnswerInfo
AnswerNonProbe	core/net/mdns.cpp	/^void Core::Entry::AnswerNonProbe(const AnswerInfo &aInfo, RecordAndType *aRecords, uint16_t aRec/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
AnswerProbe	core/net/mdns.cpp	/^void Core::Entry::AnswerProbe(const AnswerInfo &aInfo, RecordAndType *aRecords, uint16_t aRecord/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
AnswerQuestion	core/net/mdns.cpp	/^void Core::HostEntry::AnswerQuestion(const AnswerInfo &aInfo)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AnswerQuestion	core/net/mdns.cpp	/^void Core::RxMessage::AnswerQuestion(const Question &aQuestion, TimeMilli aAnswerTime)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
AnswerQuestion	core/net/mdns.cpp	/^void Core::ServiceType::AnswerQuestion(const AnswerInfo &aInfo)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
AnswerServiceNameQuestion	core/net/mdns.cpp	/^void Core::ServiceEntry::AnswerServiceNameQuestion(const AnswerInfo &aInfo)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AnswerServiceTypeQuestion	core/net/mdns.cpp	/^void Core::RxMessage::AnswerServiceTypeQuestion(const Question   &aQuestion,$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
AnswerServiceTypeQuestion	core/net/mdns.cpp	/^void Core::ServiceEntry::AnswerServiceTypeQuestion(const AnswerInfo &aInfo, const char *aSubLabe/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AnycastLocator	core/thread/anycast_locator.cpp	/^AnycastLocator::AnycastLocator(Instance &aInstance)$/;"	f	class:ot::AnycastLocator
AnycastRouteLookup	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::AnycastRouteLookup(uint8_t aServiceId, AnycastType aType, uint16_t &aMeshDe/;"	f	class:ot::MeshForwarder	typeref:typename:Error
Append	core/common/appender.hpp	/^    template <typename ObjectType> Error Append(const ObjectType &aObject)$/;"	f	class:ot::Appender	typeref:typename:Error
Append	core/common/frame_builder.hpp	/^    template <typename ObjectType> Error Append(const ObjectType &aObject)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
Append	core/common/message.hpp	/^    template <typename ObjectType> Error Append(const ObjectType &aObject)$/;"	f	class:ot::Message	typeref:typename:Error
Append	core/common/string.cpp	/^StringWriter &StringWriter::Append(const char *aFormat, ...)$/;"	f	class:ot::StringWriter	typeref:typename:StringWriter &
Append	core/common/tlvs.hpp	/^    static Error Append(Message &aMessage, const typename SimpleTlvType::ValueType &aValue)$/;"	f	class:ot::Tlv	typeref:typename:Error
Append	core/common/tlvs.hpp	/^    template <typename StringTlvType> static Error Append(Message &aMessage, const char *aValue)$/;"	f	class:ot::Tlv	typeref:typename:Error
Append	core/common/tlvs.hpp	/^    template <typename TlvType> static Error Append(Message &aMessage, const void *aValue, uint8/;"	f	class:ot::Tlv	typeref:typename:Error
Append	core/common/tlvs.hpp	/^    template <typename UintTlvType> static Error Append(Message &aMessage, typename UintTlvType:/;"	f	class:ot::Tlv	typeref:typename:Error
AppendAaaaRecord	core/net/srp_client.cpp	/^Error Client::AppendAaaaRecord(const Ip6::Address &aAddress, Message &aMessage, Info &aInfo) con/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendActiveDatasetTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendActiveDatasetTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendActiveTimestampTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendActiveTimestampTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendAddress16Tlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendAddress16Tlv(uint16_t aRloc16) { return Tlv::Append<Address16Tlv>(*t/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendAddressEntry	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendAddressEntry(const Ip6::Address &aAddress)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendAddressRecordsTo	core/net/mdns.cpp	/^void Core::HostEntry::AppendAddressRecordsTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AppendAddressRegistrationTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendAddressRegistrationTlv(AddressRegistrationMode aMode)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendAddressRegistrationTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendAddressRegistrationTlv(Child &aChild)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendAsPiosTo	core/border_router/routing_manager.cpp	/^Error RoutingManager::OnLinkPrefixManager::AppendAsPiosTo(RouterAdvert::TxMessage &aRaMessage)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:Error
AppendBigEndianUint16	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendBigEndianUint16(uint16_t aUint16) { return Append<uint16_t>(BigEndian:/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendBigEndianUint32	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendBigEndianUint32(uint32_t aUint32) { return Append<uint32_t>(BigEndian:/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendBlockOption	core/coap/coap_message.cpp	/^Error Message::AppendBlockOption(Message::BlockType aType, uint32_t aNum, bool aMore, otCoapBloc/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendBytes	core/common/appender.cpp	/^Error Appender::AppendBytes(const void *aBuffer, uint16_t aLength)$/;"	f	class:ot::Appender	typeref:typename:Error
AppendBytes	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendBytes(const void *aBuffer, uint16_t aLength)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendBytes	core/common/message.cpp	/^Error Message::AppendBytes(const void *aBuf, uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:Error
AppendBytes	core/net/nd6.cpp	/^Error RouterAdvert::TxMessage::AppendBytes(const uint8_t *aBytes, uint16_t aLength)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Error
AppendBytesFromMessage	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendBytesFromMessage(const Message &aMessage, uint16_t aOffset, uint16_t a/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendBytesFromMessage	core/common/message.cpp	/^Error Message::AppendBytesFromMessage(const Message &aMessage, uint16_t aOffset, uint16_t aLengt/;"	f	class:ot::Message	typeref:typename:Error
AppendChallengeTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendChallengeTlv(const TxChallenge &aChallenge)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendCharMultipleTimes	core/common/string.cpp	/^StringWriter &StringWriter::AppendCharMultipleTimes(char aChar, uint16_t aCount)$/;"	f	class:ot::StringWriter	typeref:typename:StringWriter &
AppendChildIp6AddressListTlv	core/thread/network_diagnostic.cpp	/^Error Server::AppendChildIp6AddressListTlv(Coap::Message &aAnswer, const Child &aChild)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendChildTable	core/thread/network_diagnostic.cpp	/^Error Server::AppendChildTable(Message &aMessage)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendChildTableAsChildTlvs	core/thread/network_diagnostic.cpp	/^Error Server::AppendChildTableAsChildTlvs(Coap::Message *&aAnswer, AnswerInfo &aInfo)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendChildTableIp6AddressList	core/thread/network_diagnostic.cpp	/^Error Server::AppendChildTableIp6AddressList(Coap::Message *&aAnswer, AnswerInfo &aInfo)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendClientIdentifier	core/net/dhcp6_client.cpp	/^Error Client::AppendClientIdentifier(Message &aMessage)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendClientIdentifier	core/net/dhcp6_server.cpp	/^Error Server::AppendClientIdentifier(Message &aMessage, ClientIdentifier &aClientId)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendCompressedAddressEntry	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendCompressedAddressEntry(uint8_t aContextId, const Ip6::Address &aAddr/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendConnectivityTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendConnectivityTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendContentFormatOption	core/coap/coap_message.hpp	/^    Error AppendContentFormatOption(otCoapOptionContentFormat aContentFormat)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendCslChannelTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendCslChannelTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendCslClockAccuracyTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendCslClockAccuracyTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendCslTimeoutTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendCslTimeoutTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendCurPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::OnLinkPrefixManager::AppendCurPrefix(RouterAdvert::TxMessage &aRaMessage)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:Error
AppendData	core/common/message.hpp	/^    template <DataLengthType kDataLengthType> Error AppendData(const Data<kDataLengthType> &aDat/;"	f	class:ot::Message	typeref:typename:Error
AppendDeleteAllRrsets	core/net/srp_client.cpp	/^Error Client::AppendDeleteAllRrsets(Message &aMessage) const$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendDiagTlv	core/thread/network_diagnostic.cpp	/^Error Server::AppendDiagTlv(uint8_t aTlvType, Message &aMessage)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendDomainName	core/net/mdns.cpp	/^void Core::TxMessage::AppendDomainName(Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
AppendElapsedTime	core/net/dhcp6_client.cpp	/^Error Client::AppendElapsedTime(Message &aMessage)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendEntries	core/net/dns_types.cpp	/^Error TxtEntry::AppendEntries(const TxtEntry *aEntries, uint16_t aNumEntries, Appender &aAppende/;"	f	class:ot::Dns::TxtEntry	typeref:typename:Error
AppendEntries	core/net/dns_types.cpp	/^Error TxtEntry::AppendEntries(const TxtEntry *aEntries, uint16_t aNumEntries, Message &aMessage)$/;"	f	class:ot::Dns::TxtEntry	typeref:typename:Error
AppendEntries	core/net/dns_types.cpp	/^Error TxtEntry::AppendEntries(const TxtEntry *aEntries, uint16_t aNumEntries, MutableData<kWithU/;"	f	class:ot::Dns::TxtEntry	typeref:typename:Error
AppendEntryName	core/net/mdns.cpp	/^void Core::HostEntry::AppendEntryName(Entry &aEntry, TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AppendEntryName	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendEntryName(Entry &aEntry, TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendErrorResult	core/diags/factory_diags.cpp	/^void Diags::AppendErrorResult(Error aError, char *aOutput, size_t aOutputMaxLen)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:void
AppendFlagsExtensionOption	core/net/nd6.cpp	/^Error RouterAdvert::TxMessage::AppendFlagsExtensionOption(bool aStubRouterFlag)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Error
AppendHeader	core/net/dhcp6_client.cpp	/^Error Client::AppendHeader(Message &aMessage)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendHeader	core/net/dhcp6_server.cpp	/^Error Server::AppendHeader(Message &aMessage, const TransactionId &aTransactionId)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendHeader	core/net/nd6.cpp	/^Error RouterAdvert::TxMessage::AppendHeader(const Header &aHeader)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Error
AppendHeaderIe	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::AppendHeaderIe(const Message *aMessage, Mac::TxFrame &aFrame)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
AppendHeaderIeAt	core/mac/mac_frame.cpp	/^template <typename IeType> Error Frame::AppendHeaderIeAt(uint8_t &aIndex)$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
AppendHexBytes	core/common/string.cpp	/^StringWriter &StringWriter::AppendHexBytes(const uint8_t *aBytes, uint16_t aLength)$/;"	f	class:ot::StringWriter	typeref:typename:StringWriter &
AppendHexWords	core/net/ip6_address.cpp	/^void Address::AppendHexWords(StringWriter &aWriter, uint8_t aLength) const$/;"	f	class:ot::Ip6::Address	typeref:typename:void
AppendHostAddresses	core/net/dnssd_server.cpp	/^Error Server::Response::AppendHostAddresses(const HostInfo &aHostInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendHostAddresses	core/net/dnssd_server.cpp	/^Error Server::Response::AppendHostAddresses(const Ip6::Address *aAddrs, uint16_t aAddrsLength, u/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendHostAddresses	core/net/dnssd_server.cpp	/^Error Server::Response::AppendHostAddresses(const ServiceInstanceInfo &aInstanceInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendHostAddresses	core/net/dnssd_server.cpp	/^Error Server::Response::AppendHostAddresses(const Srp::Server::Host &aHost)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendHostDescriptionInstruction	core/net/srp_client.cpp	/^Error Client::AppendHostDescriptionInstruction(Message &aMessage, Info &aInfo)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendHostName	core/net/srp_client.cpp	/^Error Client::AppendHostName(Message &aMessage, Info &aInfo, bool aDoNotCompress) const$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendHostNameTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendHostNameTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendIaAddress	core/net/dhcp6_client.cpp	/^Error Client::AppendIaAddress(Message &aMessage, uint16_t aRloc16)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendIaAddress	core/net/dhcp6_server.cpp	/^Error Server::AppendIaAddress(Message &aMessage, ClientIdentifier &aClientId)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendIaNa	core/net/dhcp6_client.cpp	/^Error Client::AppendIaNa(Message &aMessage, uint16_t aRloc16)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendIaNa	core/net/dhcp6_server.cpp	/^Error Server::AppendIaNa(Message &aMessage, IaNa &aIaNa)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendIp6AddressList	core/thread/network_diagnostic.cpp	/^Error Server::AppendIp6AddressList(Message &aMessage)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendKeyRecord	core/net/srp_client.cpp	/^Error Client::AppendKeyRecord(Message &aMessage, Info &aInfo) const$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendKeyRecordTo	core/net/mdns.cpp	/^void Core::Entry::AppendKeyRecordTo(TxMessage &aTxMessage, Section aSection, NameAppender aNameA/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
AppendKeyRecordTo	core/net/mdns.cpp	/^void Core::HostEntry::AppendKeyRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AppendKeyRecordTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendKeyRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendKnownAnswer	core/net/mdns.cpp	/^void Core::BrowseCache::AppendKnownAnswer(TxMessage &aTxMessage, const PtrEntry &aPtrEntry, Time/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
AppendLabel	core/net/dns_types.cpp	/^Error Name::AppendLabel(const char *aLabel, Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendLabel	core/net/dns_types.cpp	/^Error Name::AppendLabel(const char *aLabel, uint8_t aLength, Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendLabel	core/net/dns_types.cpp	/^Error Name::LabelIterator::AppendLabel(Message &aMessage) const$/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:Error
AppendLabel	core/net/mdns.cpp	/^Core::AppendOutcome Core::TxMessage::AppendLabel(Section aSection, const char *aLabel, uint16_t /;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:Core::AppendOutcome
AppendLabels	core/net/mdns.cpp	/^Core::AppendOutcome Core::TxMessage::AppendLabels(Section     aSection,$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:Core::AppendOutcome
AppendLeaderDataTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendLeaderDataTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendLinkFrameCounterTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendLinkFrameCounterTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendLinkMarginTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendLinkMarginTlv(uint8_t aLinkMargin)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendLinkMetricsQueryTlv	core/thread/link_metrics.cpp	/^Error Initiator::AppendLinkMetricsQueryTlv(Message &aMessage, const QueryInfo &aInfo)$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
AppendLittleEndianUint16	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendLittleEndianUint16(uint16_t aUint16)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendLittleEndianUint32	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendLittleEndianUint32(uint32_t aUint32)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendMacAddress	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendMacAddress(const Mac::Address &aMacAddress)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendMacCounters	core/thread/network_diagnostic.cpp	/^Error Server::AppendMacCounters(Message &aMessage)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendMaxAgeOption	core/coap/coap_message.hpp	/^    Error AppendMaxAgeOption(uint32_t aMaxAge) { return AppendUintOption(kOptionMaxAge, aMaxAge)/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendMleDatasetTlv	core/meshcop/dataset_manager_ftd.cpp	/^Error DatasetManager::AppendMleDatasetTlv(Message &aMessage) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
AppendMleFrameCounterTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendMleFrameCounterTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendModeTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendModeTlv(DeviceMode aMode) { return Tlv::Append<ModeTlv>(*this, aMode/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendMultipleLabels	core/net/dns_types.cpp	/^Error Name::AppendMultipleLabels(const char *aLabels, Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendMultipleLabels	core/net/mdns.cpp	/^Core::AppendOutcome Core::TxMessage::AppendMultipleLabels(Section     aSection,$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:Core::AppendOutcome
AppendName	core/net/dns_types.cpp	/^Error Name::AppendName(const char *aName, Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendNameFromQuery	core/net/dns_client.cpp	/^Error Client::AppendNameFromQuery(const Query &aQuery, Message &aMessage)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
AppendNameTo	core/net/mdns.cpp	/^void Core::AddrCache::AppendNameTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
AppendNameTo	core/net/mdns.cpp	/^void Core::HostEntry::AppendNameTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AppendNetworkDataTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendNetworkDataTlv(NetworkData::Type aType)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendNsecRecordTo	core/net/mdns.cpp	/^void Core::Entry::AppendNsecRecordTo(TxMessage       &aTxMessage,$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
AppendNsecRecordTo	core/net/mdns.cpp	/^void Core::HostEntry::AppendNsecRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
AppendNsecRecordTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendNsecRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendObserveOption	core/coap/coap_message.hpp	/^    Error AppendObserveOption(uint32_t aObserve) { return AppendUintOption(kOptionObserve, aObse/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendOldPrefixes	core/border_router/routing_manager.cpp	/^Error RoutingManager::OnLinkPrefixManager::AppendOldPrefixes(RouterAdvert::TxMessage &aRaMessage/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:Error
AppendOption	core/coap/coap_message.cpp	/^Error Message::AppendOption(uint16_t aNumber, uint16_t aLength, const void *aValue)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendOption	core/net/nd6.cpp	/^Option *RouterAdvert::TxMessage::AppendOption(uint16_t aOptionSize)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Option *
AppendOptionFromMessage	core/coap/coap_message.cpp	/^Error Message::AppendOptionFromMessage(uint16_t aNumber, uint16_t aLength, const Message &aMessa/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendOptionHeader	core/coap/coap_message.cpp	/^Error Message::AppendOptionHeader(uint16_t aNumber, uint16_t aLength)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendPadding	core/net/dns_dso.cpp	/^Error Dso::Connection::AppendPadding(Message &aMessage)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
AppendPendingDatasetTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendPendingDatasetTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendPendingTimestampTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendPendingTimestampTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendPointerLabel	core/net/dns_types.cpp	/^Error Name::AppendPointerLabel(uint16_t aOffset, Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendPrefixInfoOption	core/net/nd6.cpp	/^Error RouterAdvert::TxMessage::AppendPrefixInfoOption(const Prefix &aPrefix,$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Error
AppendProxyUriOption	core/coap/coap_message.hpp	/^    Error AppendProxyUriOption(const char *aProxyUri) { return AppendStringOption(kOptionProxyUr/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendPtrRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendPtrRecord(const char *aInstanceLabel, uint32_t aTtl)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendPtrRecordTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendPtrRecordTo(TxMessage &aTxMessage, Section aSection, SubType *aSu/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendPtrRecordTo	core/net/mdns.cpp	/^void Core::ServiceType::AppendPtrRecordTo(TxMessage &aResponse, uint16_t aServiceTypeOffset)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
AppendQueryName	core/net/dnssd_server.cpp	/^Error Server::Response::AppendQueryName(void) { return Name::AppendPointerLabel(sizeof(Header), /;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendQuestionTo	core/net/mdns.cpp	/^void Core::Entry::AppendQuestionTo(TxMessage &aTxMessage) const$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
AppendRapidCommit	core/net/dhcp6_client.cpp	/^Error Client::AppendRapidCommit(Message &aMessage)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
AppendRapidCommit	core/net/dhcp6_server.cpp	/^Error Server::AppendRapidCommit(Message &aMessage)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendReport	core/thread/link_metrics.cpp	/^Error Subject::AppendReport(Message &aMessage, const Message &aRequestMessage, Neighbor &aNeighb/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Error
AppendReportSubTlvToMessage	core/thread/link_metrics.cpp	/^Error Subject::AppendReportSubTlvToMessage(Message &aMessage, const MetricsValues &aValues)$/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Error
AppendRequestedTlvs	core/thread/network_diagnostic.cpp	/^Error Server::AppendRequestedTlvs(const Message &aRequest, Message &aResponse)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendResponseTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendResponseTlv(const RxChallenge &aResponse)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendRio	core/border_router/routing_manager.cpp	/^Error RoutingManager::RioAdvertiser::AppendRio(const Ip6::Prefix       &aPrefix,$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:Error
AppendRios	core/border_router/routing_manager.cpp	/^Error RoutingManager::RioAdvertiser::AppendRios(RouterAdvert::TxMessage &aRaMessage)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:Error
AppendRouteInfoOption	core/net/nd6.cpp	/^Error RouterAdvert::TxMessage::AppendRouteInfoOption(const Prefix   &aPrefix,$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:Error
AppendRouteTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendRouteTlv(Neighbor *aNeighbor)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendRouterNeighborTlvs	core/thread/network_diagnostic.cpp	/^Error Server::AppendRouterNeighborTlvs(Coap::Message *&aAnswer, AnswerInfo &aInfo)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
AppendScanMaskTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendScanMaskTlv(uint8_t aScanMask) { return Tlv::Append<ScanMaskTlv>(*th/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendServerIdentifier	core/net/dhcp6_server.cpp	/^Error Server::AppendServerIdentifier(Message &aMessage)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendServiceInstruction	core/net/srp_client.cpp	/^Error Client::AppendServiceInstruction(Service &aService, Message &aMessage, Info &aInfo)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendServiceInstructions	core/net/srp_client.cpp	/^Error Client::AppendServiceInstructions(Message &aMessage, Info &aInfo)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendServiceNameTo	core/net/mdns.cpp	/^void Core::ServiceCache::AppendServiceNameTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:void
AppendServiceNameTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendServiceNameTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendServiceType	core/net/mdns.cpp	/^void Core::TxMessage::AppendServiceType(Section aSection, const char *aServiceType, uint16_t &aC/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
AppendServiceTypeOrSubTypeTo	core/net/mdns.cpp	/^void Core::BrowseCache::AppendServiceTypeOrSubTypeTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
AppendServiceTypeTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendServiceTypeTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendServicesDnssdName	core/net/mdns.cpp	/^void Core::TxMessage::AppendServicesDnssdName(Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
AppendSignature	core/net/srp_client.cpp	/^Error Client::AppendSignature(Message &aMessage, Info &aInfo)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendSourceAddressTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendSourceAddressTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendSrvRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendSrvRecord(const ServiceInstanceInfo &aInstanceInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendSrvRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendSrvRecord(const Srp::Server::Service &aService)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendSrvRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendSrvRecord(const char *aHostName,$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendSrvRecordTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendSrvRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendStatusCode	core/net/dhcp6_server.cpp	/^Error Server::AppendStatusCode(Message &aMessage, Status aStatusCode)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
AppendStatusTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendStatusTlv(StatusTlv::Status aStatus) { return Tlv::Append<StatusTlv>/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendSteeringDataTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendSteeringDataTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendStringOption	core/coap/coap_message.cpp	/^Error Message::AppendStringOption(uint16_t aNumber, const char *aValue)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendStringTlv	core/common/tlvs.cpp	/^Error Tlv::AppendStringTlv(Message &aMessage, uint8_t aType, uint8_t aMaxStringLength, const cha/;"	f	class:ot::Tlv	typeref:typename:Error
AppendSubServiceNameTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendSubServiceNameTo(TxMessage &aTxMessage, Section aSection, SubType/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendSubServiceTypeTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendSubServiceTypeTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendSupervisionIntervalTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendSupervisionIntervalTlv(uint16_t aInterval)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTerminator	core/net/dns_types.cpp	/^Error Name::AppendTerminator(Message &aMessage)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendTimeParameterTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendTimeParameterTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTimeRequestTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendTimeRequestTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTimeoutTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendTimeoutTlv(uint32_t aTimeout) { return Tlv::Append<TimeoutTlv>(*this/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTlv	core/common/tlvs.cpp	/^Error Tlv::AppendTlv(Message &aMessage, uint8_t aType, const void *aValue, uint8_t aLength)$/;"	f	class:ot::Tlv	typeref:typename:Error
AppendTlv	core/thread/network_data.cpp	/^NetworkDataTlv *MutableNetworkData::AppendTlv(uint16_t aTlvSize)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:NetworkDataTlv *
AppendTlvRequestTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendTlvRequestTlv(const uint8_t *aTlvs, uint8_t aTlvsLength)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTlvRequestTlv	core/thread/mle.hpp	/^        template <uint8_t kArrayLength> Error AppendTlvRequestTlv(const uint8_t (&aTlvArray)[kAr/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendTlvsFrom	core/meshcop/dataset.cpp	/^Error Dataset::AppendTlvsFrom(const uint8_t *aTlvs, uint8_t aLength)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
AppendTo	core/coap/coap.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	struct:ot::Coap::CoapBase::Metadata	typeref:typename:Error
AppendTo	core/coap/coap.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	struct:ot::Coap::ResponsesQueue::ResponseMetadata	typeref:typename:Error
AppendTo	core/common/tlvs.cpp	/^Error Tlv::AppendTo(Message &aMessage) const { return aMessage.AppendBytes(this, static_cast<uin/;"	f	class:ot::Tlv	typeref:typename:Error
AppendTo	core/meshcop/joiner_router.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	struct:ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata	typeref:typename:Error
AppendTo	core/meshcop/meshcop_tlvs.cpp	/^Error ChannelMaskTlv::AppendTo(Message &aMessage, uint32_t aChannelMask)$/;"	f	class:ot::MeshCoP::ChannelMaskTlv	typeref:typename:Error
AppendTo	core/net/dns_types.cpp	/^Error Name::AppendTo(Message &aMessage) const$/;"	f	class:ot::Dns::Name	typeref:typename:Error
AppendTo	core/net/dns_types.cpp	/^Error TxtEntry::AppendTo(Appender &aAppender) const$/;"	f	class:ot::Dns::TxtEntry	typeref:typename:Error
AppendTo	core/net/dns_types.cpp	/^Error TxtEntry::AppendTo(Message &aMessage) const$/;"	f	class:ot::Dns::TxtEntry	typeref:typename:Error
AppendTo	core/net/ip6_mpl.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	struct:ot::Ip6::Mpl::Metadata	typeref:typename:Error
AppendTo	core/net/sntp_client.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	class:ot::Sntp::Client::QueryMetadata	typeref:typename:Error
AppendTo	core/thread/lowpan.cpp	/^Error MeshHeader::AppendTo(FrameBuilder &aFrameBuilder) const$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
AppendTo	core/thread/lowpan.cpp	/^Error MeshHeader::AppendTo(Message &aMessage) const$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
AppendTo	core/thread/mle.hpp	/^        Error AppendTo(Message &aMessage) const { return aMessage.Append(*this); }$/;"	f	struct:ot::Mle::Mle::DelayedResponseMetadata	typeref:typename:Error
AppendTxtRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendTxtRecord(const ServiceInstanceInfo &aInstanceInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendTxtRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendTxtRecord(const Srp::Server::Service &aService)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendTxtRecord	core/net/dnssd_server.cpp	/^Error Server::Response::AppendTxtRecord(const void *aTxtData, uint16_t aTxtLength, uint32_t aTtl/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
AppendTxtRecordTo	core/net/mdns.cpp	/^void Core::ServiceEntry::AppendTxtRecordTo(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
AppendUint8	core/common/frame_builder.cpp	/^Error FrameBuilder::AppendUint8(uint8_t aUint8) { return Append<uint8_t>(aUint8); }$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
AppendUintOption	core/coap/coap_message.cpp	/^Error Message::AppendUintOption(uint16_t aNumber, uint32_t aValue)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendUintTlv	core/common/tlvs.cpp	/^template <typename UintType> Error Tlv::AppendUintTlv(Message &aMessage, uint8_t aType, UintType/;"	f	class:ot::Tlv	typeref:typename:Error
AppendUpdateLeaseOptRecord	core/net/srp_client.cpp	/^Error Client::AppendUpdateLeaseOptRecord(Message &aMessage)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
AppendUriPathOptions	core/coap/coap_message.cpp	/^Error Message::AppendUriPathOptions(const char *aUriPath)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendUriQueryOption	core/coap/coap_message.hpp	/^    Error AppendUriQueryOption(const char *aUriQuery) { return AppendStringOption(kOptionUriQuer/;"	f	class:ot::Coap::Message	typeref:typename:Error
AppendVarArgs	core/common/string.cpp	/^StringWriter &StringWriter::AppendVarArgs(const char *aFormat, va_list aArgs)$/;"	f	class:ot::StringWriter	typeref:typename:StringWriter &
AppendVersionTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendVersionTlv(void) { return Tlv::Append<VersionTlv>(*this, kThreadVers/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
AppendXtalAccuracyTlv	core/thread/mle.cpp	/^Error Mle::TxMessage::AppendXtalAccuracyTlv(void)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
Appender	core/common/appender.cpp	/^Appender::Appender(Message &aMessage)$/;"	f	class:ot::Appender
Appender	core/common/appender.cpp	/^Appender::Appender(uint8_t *aBuffer, uint16_t aSize)$/;"	f	class:ot::Appender
Apply	core/mac/mac_filter.cpp	/^Error Filter::Apply(const ExtAddress &aExtAddress, int8_t &aRss) const$/;"	f	class:ot::Mac::Filter	typeref:typename:Error
ApplyActiveDataset	core/meshcop/dataset_manager_ftd.cpp	/^void PendingDatasetManager::ApplyActiveDataset(Dataset &aDataset)$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
ApplyConfiguration	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::ApplyConfiguration(const Dataset &aDataset) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
ApplyConfiguration	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::ApplyConfiguration(void) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
ApplyDirectTxQueueLimit	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::ApplyDirectTxQueueLimit(Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
ApplyNewMeshLocalPrefix	core/backbone_router/bbr_local.cpp	/^void Local::ApplyNewMeshLocalPrefix(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
ApplyNewMeshLocalPrefix	core/net/netif.cpp	/^void Netif::ApplyNewMeshLocalPrefix(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
ApplyPrefix	core/net/ip6_address.cpp	/^void InterfaceIdentifier::ApplyPrefix(const Prefix &aPrefix)$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
ApplyToRxFrame	core/mac/mac_filter.cpp	/^Error Filter::ApplyToRxFrame(RxFrame &aRxFrame, const ExtAddress &aExtAddress, Neighbor *aNeighb/;"	f	class:ot::Mac::Filter	typeref:typename:Error
AreHandlerEntriesSorted	ncp/ncp_base_dispatcher.cpp	/^constexpr bool NcpBase::AreHandlerEntriesSorted(const HandlerEntry *aHandlerEntries, size_t aSiz/;"	f	class:ot::Ncp::NcpBase	typeref:typename:bool
AreInOrder	cli/cli_dataset.hpp	/^        constexpr static bool AreInOrder(const ComponentMapper &aFirst, const ComponentMapper &a/;"	f	struct:ot::Cli::Dataset::ComponentMapper	typeref:typename:bool
AreInOrder	cli/cli_utils.hpp	/^        constexpr static bool AreInOrder(const CommandEntry &aFirst, const CommandEntry &aSecond/;"	f	struct:ot::Cli::Utils::CommandEntry	typeref:typename:bool
AreInOrder	core/common/string.hpp	/^        constexpr static bool AreInOrder(const Entry &aFirst, const Entry &aSecond)$/;"	f	class:ot::Stringify::Entry	typeref:typename:bool
AreInOrder	core/thread/uri_paths.cpp	/^    constexpr static bool AreInOrder(const Entry &aFirst, const Entry &aSecond)$/;"	f	struct:ot::UriList::Entry	typeref:typename:bool	file:
AreStringsInOrder	core/common/string.hpp	/^inline constexpr bool AreStringsInOrder(const char *aFirst, const char *aSecond)$/;"	f	namespace:ot	typeref:typename:bool
AreTaskletsPending	core/common/tasklet.hpp	/^        bool AreTaskletsPending(void) const { return mTail != nullptr; }$/;"	f	class:ot::Tasklet::Scheduler	typeref:typename:bool
Array	core/common/array.hpp	/^    Array(const Array &aOtherArray) { *this = aOtherArray; }$/;"	f	class:ot::Array
Array	core/common/array.hpp	/^    Array(void)$/;"	f	class:ot::Array
Array	core/common/array.hpp	/^    explicit Array(Instance &aInstance)$/;"	f	class:ot::Array
Array	core/common/heap_array.hpp	/^    Array(void)$/;"	f	class:ot::Heap::Array
Array	lib/spinel/spinel_driver.hpp	/^        Array(void)$/;"	f	class:ot::Spinel::SpinelDriver::Array
As	core/common/tlvs.hpp	/^template <class TlvType> TlvType &As(Tlv &aTlv) { return static_cast<TlvType &>(aTlv); }$/;"	f	namespace:ot	typeref:typename:TlvType &
As	core/common/tlvs.hpp	/^template <class TlvType> TlvType *As(Tlv *aTlv) { return static_cast<TlvType *>(aTlv); }$/;"	f	namespace:ot	typeref:typename:TlvType *
As	core/common/tlvs.hpp	/^template <class TlvType> const TlvType &As(const Tlv &aTlv) { return static_cast<const TlvType &/;"	f	namespace:ot	typeref:typename:const TlvType &
As	core/common/tlvs.hpp	/^template <class TlvType> const TlvType *As(const Tlv *aTlv) { return static_cast<const TlvType */;"	f	namespace:ot	typeref:typename:const TlvType *
As	core/net/mdns.hpp	/^        template <typename CacheType> CacheType       &As(void) { return *static_cast<CacheType /;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:CacheType &
As	core/net/mdns.hpp	/^        template <typename CacheType> const CacheType &As(void) const { return *static_cast<cons/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:const CacheType &
As	core/thread/network_data_tlvs.hpp	/^template <class TlvType> TlvType &As(NetworkDataTlv &aTlv) { return static_cast<TlvType &>(aTlv)/;"	f	namespace:ot::NetworkData	typeref:typename:TlvType &
As	core/thread/network_data_tlvs.hpp	/^template <class TlvType> TlvType *As(NetworkDataTlv *aTlv) { return static_cast<TlvType *>(aTlv)/;"	f	namespace:ot::NetworkData	typeref:typename:TlvType *
As	core/thread/network_data_tlvs.hpp	/^template <class TlvType> const TlvType &As(const NetworkDataTlv &aTlv) { return static_cast<cons/;"	f	namespace:ot::NetworkData	typeref:typename:const TlvType &
As	core/thread/network_data_tlvs.hpp	/^template <class TlvType> const TlvType *As(const NetworkDataTlv *aTlv) { return static_cast<cons/;"	f	namespace:ot::NetworkData	typeref:typename:const TlvType *
AsCArray	core/common/heap_array.hpp	/^    const Type *AsCArray(void) const { return (mLength != 0) ? mArray : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
AsCString	core/common/heap_string.hpp	/^    const char *AsCString(void) const { return mStringBuffer; }$/;"	f	class:ot::Heap::String	typeref:typename:const char *
AsCString	core/common/string.hpp	/^    const char *AsCString(void) const { return mBuffer; }$/;"	f	class:ot::String	typeref:typename:const char *
AsCString	posix/platform/ip6_utils.hpp	/^    const char *AsCString(void) const { return mBuffer; }$/;"	f	class:ot::Posix::Ip6Utils::Ip6AddressString	typeref:typename:const char *
AsCString	posix/platform/power.hpp	/^    const char *AsCString(void) const { return m8; }$/;"	f	class:ot::Power::Domain	typeref:typename:const char *
AsCoapMessage	core/coap/coap_message.hpp	/^inline Coap::Message &AsCoapMessage(otMessage *aMessage) { return *static_cast<Coap::Message *>(/;"	f	namespace:ot	typeref:typename:Coap::Message &
AsCoapMessage	core/coap/coap_message.hpp	/^inline const Coap::Message &AsCoapMessage(const otMessage *aMessage)$/;"	f	namespace:ot	typeref:typename:const Coap::Message &
AsCoapMessagePtr	core/coap/coap_message.hpp	/^inline Coap::Message *AsCoapMessagePtr(otMessage *aMessage) { return static_cast<Coap::Message */;"	f	namespace:ot	typeref:typename:Coap::Message *
AsCoapMessagePtr	core/coap/coap_message.hpp	/^inline const Coap::Message *AsCoapMessagePtr(const otMessage *aMessage)$/;"	f	namespace:ot	typeref:typename:const Coap::Message *
AsConst	core/common/const_cast.hpp	/^template <typename Type> const Type &AsConst(Type &aObject) { return const_cast<const Type &>(aO/;"	f	namespace:ot	typeref:typename:const Type &
AsConst	core/common/const_cast.hpp	/^template <typename Type> const Type *AsConst(Type *aPointer) { return const_cast<const Type *>(a/;"	f	namespace:ot	typeref:typename:const Type *
AsCoreType	core/common/as_core_type.hpp	/^template <typename Type> const typename CoreType<Type>::Type &AsCoreType(const Type *aObject)$/;"	f	namespace:ot	typeref:typename:const typename CoreType<Type>::Type &
AsCoreType	core/common/as_core_type.hpp	/^template <typename Type> typename CoreType<Type>::Type &AsCoreType(Type *aObject)$/;"	f	namespace:ot	typeref:typename:CoreType<Type>::Type &
AsCoreTypePtr	core/common/as_core_type.hpp	/^template <typename Type> const typename CoreType<Type>::Type *AsCoreTypePtr(const Type *aObject)$/;"	f	namespace:ot	typeref:typename:const typename CoreType<Type>::Type *
AsCoreTypePtr	core/common/as_core_type.hpp	/^template <typename Type> typename CoreType<Type>::Type *AsCoreTypePtr(Type *aObject)$/;"	f	namespace:ot	typeref:typename:CoreType<Type>::Type *
AsNonConst	core/common/const_cast.hpp	/^template <typename Type> Type &AsNonConst(const Type &aObject) { return const_cast<Type &>(aObje/;"	f	namespace:ot	typeref:typename:Type &
AsNonConst	core/common/const_cast.hpp	/^template <typename Type> Type *AsNonConst(const Type *aPointer) { return const_cast<Type *>(aPoi/;"	f	namespace:ot	typeref:typename:Type *
At	core/common/array.hpp	/^    Type *At(IndexType aIndex) { return (aIndex < mLength) ? &mElements[aIndex] : nullptr; }$/;"	f	class:ot::Array	typeref:typename:Type *
At	core/common/array.hpp	/^    const Type *At(IndexType aIndex) const { return (aIndex < mLength) ? &mElements[aIndex] : nu/;"	f	class:ot::Array	typeref:typename:const Type *
At	core/common/heap_array.hpp	/^    Type *At(IndexType aIndex) { return (aIndex < mLength) ? &mArray[aIndex] : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
At	core/common/heap_array.hpp	/^    const Type *At(IndexType aIndex) const { return (aIndex < mLength) ? &mArray[aIndex] : nullp/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
Attach	core/thread/mle.cpp	/^void Mle::Attach(AttachMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
AttachModeToString	core/thread/mle.cpp	/^const char *Mle::AttachModeToString(AttachMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
AttachStateToString	core/thread/mle.cpp	/^const char *Mle::AttachStateToString(AttachState aState)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
AutoBind	core/net/tcp6.cpp	/^bool Tcp::AutoBind(const SockAddr &aPeer, SockAddr &aToBind, bool aBindAddress, bool aBindPort)$/;"	f	class:ot::Ip6::Tcp	typeref:typename:bool
AutoStart	core/net/srp_client.cpp	/^Client::AutoStart::AutoStart(void)$/;"	f	class:ot::Srp::Client::AutoStart
Back	core/common/array.hpp	/^    Type *Back(void) { return At(mLength - 1); }$/;"	f	class:ot::Array	typeref:typename:Type *
Back	core/common/array.hpp	/^    const Type *Back(void) const { return At(mLength - 1); }$/;"	f	class:ot::Array	typeref:typename:const Type *
Back	core/common/heap_array.hpp	/^    Type *Back(void) { return (mLength > 0) ? &mArray[mLength - 1] : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
Back	core/common/heap_array.hpp	/^    const Type *Back(void) const { return (mLength > 0) ? &mArray[mLength - 1] : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
BackboneTmfAgent	core/backbone_router/backbone_tmf.cpp	/^BackboneTmfAgent::BackboneTmfAgent(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent
Bbr	cli/cli_bbr.hpp	/^    Bbr(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Bbr
BecomeChild	core/thread/mle.cpp	/^Error Mle::BecomeChild(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
BecomeDetached	core/thread/mle.cpp	/^Error Mle::BecomeDetached(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
BecomeLeader	core/thread/mle_router.cpp	/^Error MleRouter::BecomeLeader(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
BecomeRouter	core/thread/mle_router.cpp	/^Error MleRouter::BecomeRouter(ThreadStatusTlv::Status aStatus)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
BeginFrame	lib/hdlc/hdlc.cpp	/^otError Encoder::BeginFrame(void)$/;"	f	class:ot::Hdlc::Encoder	typeref:typename:otError
BeginFrame	lib/spinel/spinel_encoder.cpp	/^otError Encoder::BeginFrame(Spinel::Buffer::Priority aPriority)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
BeginFrame	lib/spinel/spinel_encoder.cpp	/^otError Encoder::BeginFrame(uint8_t aHeader, unsigned int aCommand)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
BeginFrame	lib/spinel/spinel_encoder.cpp	/^otError Encoder::BeginFrame(uint8_t aHeader, unsigned int aCommand, spinel_prop_key_t aKey)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
BeginTransmit	core/mac/mac.cpp	/^void Mac::BeginTransmit(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
BeginTransmit	core/mac/sub_mac.cpp	/^void SubMac::BeginTransmit(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
BeginTransmit	core/radio/trel_link.cpp	/^void Link::BeginTransmit(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
Bind	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Bind(TransportCallback aCallback, void *aContext)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
Bind	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Bind(uint16_t aPort)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
Bind	core/net/tcp6.cpp	/^Error Tcp::Endpoint::Bind(const SockAddr &aSockName)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
Bind	core/net/udp6.cpp	/^Error Udp::Bind(SocketHandle &aSocket, const SockAddr &aSockAddr, NetifIdentifier aNetifIdentifi/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
Bind	core/net/udp6.cpp	/^Error Udp::Socket::Bind(const SockAddr &aSockAddr, NetifIdentifier aNetifIdentifier)$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
Bind	core/net/udp6.cpp	/^Error Udp::Socket::Bind(uint16_t aPort, NetifIdentifier aNetifIdentifier)$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
Bind	core/net/udp6.hpp	/^        Error Bind(void) { return Bind(0); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
BitFlag	core/mac/mac_types.hpp	/^    static uint8_t BitFlag(RadioType aType) { return static_cast<uint8_t>(1U << static_cast<uint/;"	f	class:ot::Mac::RadioTypes	typeref:typename:uint8_t
BitFlag	core/meshcop/meshcop.hpp	/^    uint8_t BitFlag(uint8_t aBit) const { return static_cast<uint8_t>(1U << (aBit % kBitsPerByte/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:uint8_t
BitIndex	core/meshcop/meshcop.hpp	/^    uint8_t BitIndex(uint8_t aBit) const { return (mLength - 1 - (aBit \/ kBitsPerByte)); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:uint8_t
BleSecure	core/radio/ble_secure.cpp	/^BleSecure::BleSecure(Instance &aInstance)$/;"	f	class:ot::Ble::BleSecure
BlockAt	core/utils/heap.hpp	/^    Block &BlockAt(uint16_t aOffset) { return *reinterpret_cast<Block *>(&mMemory.m16[aOffset \//;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockInsert	core/utils/heap.cpp	/^void Heap::BlockInsert(Block &aPrev, Block &aBlock)$/;"	f	class:ot::Utils::Heap	typeref:typename:void
BlockNext	core/utils/heap.hpp	/^    Block &BlockNext(const Block &aBlock) { return BlockAt(aBlock.GetNext()); }$/;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockOf	core/utils/heap.hpp	/^    Block &BlockOf(void *aPointer)$/;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockOffset	core/utils/heap.hpp	/^    uint16_t BlockOffset(const Block &aBlock)$/;"	f	class:ot::Utils::Heap	typeref:typename:uint16_t
BlockPrev	core/utils/heap.cpp	/^Block &Heap::BlockPrev(const Block &aBlock)$/;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockRight	core/utils/heap.hpp	/^    Block &BlockRight(const Block &aBlock) { return BlockAt(BlockOffset(aBlock) + sizeof(Block) /;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockSuper	core/utils/heap.hpp	/^    Block &BlockSuper(void) { return BlockAt(kSuperBlockOffset); }$/;"	f	class:ot::Utils::Heap	typeref:typename:Block &
BlockwiseReceiveHook	cli/cli_coap.cpp	/^otError Coap::BlockwiseReceiveHook(const uint8_t *aBlock,$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
BlockwiseReceiveHook	cli/cli_coap.cpp	/^otError Coap::BlockwiseReceiveHook(void          *aContext,$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
BlockwiseReceiveHook	cli/cli_coap_secure.cpp	/^otError CoapSecure::BlockwiseReceiveHook(const uint8_t *aBlock,$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
BlockwiseReceiveHook	cli/cli_coap_secure.cpp	/^otError CoapSecure::BlockwiseReceiveHook(void          *aContext,$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
BlockwiseTransmitHook	cli/cli_coap.cpp	/^otError Coap::BlockwiseTransmitHook(uint8_t *aBlock, uint32_t aPosition, uint16_t *aBlockLength,/;"	f	class:ot::Cli::Coap	typeref:typename:otError
BlockwiseTransmitHook	cli/cli_coap.cpp	/^otError Coap::BlockwiseTransmitHook(void     *aContext,$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
BlockwiseTransmitHook	cli/cli_coap_secure.cpp	/^otError CoapSecure::BlockwiseTransmitHook(uint8_t *aBlock, uint32_t aPosition, uint16_t *aBlockL/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
BlockwiseTransmitHook	cli/cli_coap_secure.cpp	/^otError CoapSecure::BlockwiseTransmitHook(void     *aContext,$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
BorderAgent	core/meshcop/border_agent.cpp	/^BorderAgent::BorderAgent(Instance &aInstance)$/;"	f	class:ot::MeshCoP::BorderAgent
BorderRouterConfigToFlagByte	ncp/ncp_base_mtd.cpp	/^static uint8_t BorderRouterConfigToFlagByte(const otBorderRouterConfig &aConfig)$/;"	f	namespace:ot::Ncp	typeref:typename:uint8_t	file:
BorderRouterConfigToFlagByteExtended	ncp/ncp_base_mtd.cpp	/^static uint8_t BorderRouterConfigToFlagByteExtended(const otBorderRouterConfig &aConfig)$/;"	f	namespace:ot::Ncp	typeref:typename:uint8_t	file:
Br	cli/cli_br.hpp	/^    Br(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Br
Browse	core/net/dns_client.cpp	/^Error Client::Browse(const char *aServiceName, BrowseCallback aCallback, void *aContext, const Q/;"	f	class:ot::Dns::Client	typeref:typename:Error
BsdErrorToOtError	core/net/tcp6.cpp	/^Error Tcp::BsdErrorToOtError(int aBsdError)$/;"	f	class:ot::Ip6::Tcp	typeref:typename:Error
Buffer	lib/spinel/spinel_buffer.cpp	/^Buffer::Buffer(uint8_t *aBuffer, uint16_t aBufferLength)$/;"	f	class:ot::Spinel::Buffer
BufferEncrypterReader	ncp/ncp_hdlc.cpp	/^NcpHdlc::BufferEncrypterReader::BufferEncrypterReader(Spinel::Buffer &aTxFrameBuffer)$/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader
BufferToString	posix/platform/trel.cpp	/^static const char *BufferToString(const uint8_t *aBuffer, uint16_t aLength)$/;"	f	typeref:typename:const char *	file:
Builder	core/net/netif.hpp	/^                Builder(const Netif &aNetif, Address::TypeFilter aFilter)$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder
BytesToFragmentOffset	core/net/ip6_headers.hpp	/^    static inline uint16_t BytesToFragmentOffset(uint16_t aOffset) { return aOffset >> 3; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint16_t
CAlloc	core/common/heap.cpp	/^void *CAlloc(size_t aCount, size_t aSize) { return otPlatCAlloc(aCount, aSize); }$/;"	f	namespace:ot::Heap	typeref:typename:void *
CAlloc	core/utils/heap.cpp	/^void *Heap::CAlloc(size_t aCount, size_t aSize)$/;"	f	class:ot::Utils::Heap	typeref:typename:void *
CacheLastBlockResponse	core/coap/coap.cpp	/^Error CoapBase::CacheLastBlockResponse(Message *aResponse)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
CacheRecordInfo	core/net/mdns.cpp	/^Core::CacheRecordInfo::CacheRecordInfo(void)$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo
CacheTimerContext	core/net/mdns.cpp	/^Core::CacheTimerContext::CacheTimerContext(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::CacheTimerContext
CalcFrameVersion	core/thread/mesh_forwarder.cpp	/^Mac::Frame::Version MeshForwarder::CalcFrameVersion(const Neighbor *aNeighbor, bool aIePresent) /;"	f	class:ot::MeshForwarder	typeref:typename:Mac::Frame::Version
CalcIePresent	core/thread/mesh_forwarder.cpp	/^bool MeshForwarder::CalcIePresent(const Message *aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:bool
CalcParentCslMetric	core/thread/mle.cpp	/^uint64_t Mle::CalcParentCslMetric(const Mac::CslAccuracy &aCslAccuracy) const$/;"	f	class:ot::Mle::Mle	typeref:typename:uint64_t
CalcRcpTimeOffset	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::CalcRcpTimeOffset(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
Calculate	core/net/checksum.cpp	/^void Checksum::Calculate(const Ip4::Address &aSource,$/;"	f	class:ot::Checksum	typeref:typename:void
Calculate	core/net/checksum.cpp	/^void Checksum::Calculate(const Ip6::Address &aSource,$/;"	f	class:ot::Checksum	typeref:typename:void
Calculate	core/utils/verhoeff_checksum.cpp	/^Error VerhoeffChecksum::Calculate(const char *aDecimalString, char &aChecksum)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:Error
CalculateAddrFieldSize	core/mac/mac_frame.cpp	/^uint8_t Frame::CalculateAddrFieldSize(uint16_t aFcf)$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
CalculateExchangeLifetime	core/coap/coap.cpp	/^uint32_t TxParameters::CalculateExchangeLifetime(void) const$/;"	f	class:ot::Coap::TxParameters	typeref:typename:uint32_t
CalculateExpirationTime	core/border_router/routing_manager.cpp	/^TimeMilli RoutingManager::LifetimedPrefix::CalculateExpirationTime(uint32_t aLifetime) const$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:TimeMilli
CalculateHash	core/border_router/routing_manager.cpp	/^void RoutingManager::TxRaInfo::CalculateHash(const RouterAdvert::RxMessage &aRaMessage, Hash &aH/;"	f	class:ot::BorderRouter::RoutingManager::TxRaInfo	typeref:typename:void
CalculateHash	core/net/mdns.cpp	/^void Core::TxMessageHistory::CalculateHash(const Message &aMessage, Hash &aHash)$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory	typeref:typename:void
CalculateHashBitIndexes	core/meshcop/meshcop.cpp	/^void SteeringData::CalculateHashBitIndexes(const JoinerDiscerner &aDiscerner, HashBitIndexes &aI/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
CalculateHashBitIndexes	core/meshcop/meshcop.cpp	/^void SteeringData::CalculateHashBitIndexes(const Mac::ExtAddress &aJoinerId, HashBitIndexes &aIn/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
CalculateInitialRetransmissionTimeout	core/coap/coap.cpp	/^uint32_t TxParameters::CalculateInitialRetransmissionTimeout(void) const$/;"	f	class:ot::Coap::TxParameters	typeref:typename:uint32_t
CalculateLeaderWeight	core/thread/mle_types.cpp	/^uint8_t DeviceProperties::CalculateLeaderWeight(void) const$/;"	f	class:ot::Mle::DeviceProperties	typeref:typename:uint8_t
CalculateLinkQuality	core/thread/link_quality.cpp	/^LinkQuality LinkQualityInfo::CalculateLinkQuality(uint8_t aLinkMargin, uint8_t aLastLinkQuality)$/;"	f	class:ot::LinkQualityInfo	typeref:typename:LinkQuality
CalculateMaxTransmitWait	core/coap/coap.cpp	/^uint32_t TxParameters::CalculateMaxTransmitWait(void) const { return CalculateSpan(mMaxRetransmi/;"	f	class:ot::Coap::TxParameters	typeref:typename:uint32_t
CalculateMicSize	core/mac/mac_frame.cpp	/^uint8_t Frame::CalculateMicSize(uint8_t aSecurityControl)$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
CalculatePollPeriod	core/mac/data_poll_sender.cpp	/^uint32_t DataPollSender::CalculatePollPeriod(void) const$/;"	f	class:ot::DataPollSender	typeref:typename:uint32_t
CalculatePriority	core/meshcop/joiner.cpp	/^uint8_t Joiner::CalculatePriority(int8_t aRssi, bool aSteeringDataAllowsAny)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:uint8_t
CalculateRemainingDelay	core/meshcop/meshcop_tlvs.cpp	/^uint32_t DelayTimerTlv::CalculateRemainingDelay(const Tlv &aDelayTimerTlv, TimeMilli aUpdateTime/;"	f	class:ot::MeshCoP::DelayTimerTlv	typeref:typename:uint32_t
CalculateSecurityHeaderSize	core/mac/mac_frame.cpp	/^uint8_t Frame::CalculateSecurityHeaderSize(uint8_t aSecurityControl)$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
CalculateServerInactivityWaitTime	core/net/dns_dso.cpp	/^uint32_t Dso::Connection::CalculateServerInactivityWaitTime(void) const$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:uint32_t
CalculateSize	core/thread/network_data_tlvs.hpp	/^    static uint16_t CalculateSize(uint32_t aEnterpriseNumber, uint8_t aServiceDataLength)$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint16_t
CalculateSize	core/thread/network_data_tlvs.hpp	/^    static uint16_t CalculateSize(uint8_t aPrefixLength)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:uint16_t
CalculateSize	core/thread/network_data_tlvs.hpp	/^    static uint16_t CalculateSize(uint8_t aServerDataLength) { return sizeof(ServerTlv) + aServe/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:uint16_t
CalculateSpan	core/coap/coap.cpp	/^uint32_t TxParameters::CalculateSpan(uint8_t aMaxRetx) const$/;"	f	class:ot::Coap::TxParameters	typeref:typename:uint32_t
CalibratedPowerEntry	core/utils/power_calibration.hpp	/^        CalibratedPowerEntry(void)$/;"	f	class:ot::Utils::PowerCalibration::CalibratedPowerEntry
Callback	core/net/mdns.cpp	/^Core::Callback::Callback(RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dns::Multicast::Core::Callback
Callback	core/net/mdns.hpp	/^        Callback(void) { Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::Callback
CallbackBase	core/common/callback.hpp	/^    CallbackBase(void)$/;"	f	class:ot::CallbackBase
Callbacks	core/mac/data_poll_handler.cpp	/^DataPollHandler::Callbacks::Callbacks(Instance &aInstance)$/;"	f	class:ot::DataPollHandler::Callbacks
Callbacks	core/mac/sub_mac_callbacks.cpp	/^SubMac::Callbacks::Callbacks(Instance &aInstance)$/;"	f	class:ot::Mac::SubMac::Callbacks
Callbacks	core/net/dns_dso.hpp	/^            Callbacks(HandleConnected              aHandleConnected,$/;"	f	class:ot::Dns::Dso::Connection::Callbacks
Callbacks	core/radio/radio.hpp	/^        explicit Callbacks(Instance &aInstance)$/;"	f	class:ot::Radio::Callbacks
Callbacks	core/thread/csl_tx_scheduler.cpp	/^CslTxScheduler::Callbacks::Callbacks(Instance &aInstance)$/;"	f	class:ot::CslTxScheduler::Callbacks
CanAllocate	core/thread/router_table.hpp	/^        bool    CanAllocate(uint8_t aRouterId) const { return (mIndexes[aRouterId] == 0); }$/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:bool
CanAnswer	core/net/mdns.cpp	/^bool Core::RecordInfo::CanAnswer(void) const { return (mIsPresent && (mTtl > 0)); }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
CanAnswerSubType	core/net/mdns.cpp	/^bool Core::ServiceEntry::CanAnswerSubType(const char *aSubLabel) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
CanAppend	core/common/frame_builder.hpp	/^    bool CanAppend(uint16_t aLength) const { return (static_cast<uint32_t>(mLength) + aLength) </;"	f	class:ot::FrameBuilder	typeref:typename:bool
CanAppend	core/net/mdns.cpp	/^bool Core::RecordInfo::CanAppend(void) const { return mIsPresent && !IsAppended(); }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
CanAppendService	core/net/srp_client.cpp	/^bool Client::CanAppendService(const Service &aService)$/;"	f	class:ot::Srp::Client	typeref:typename:bool
CanBind	core/net/tcp6.cpp	/^bool Tcp::CanBind(const SockAddr &aSockName)$/;"	f	class:ot::Ip6::Tcp	typeref:typename:bool
CanEvict	core/thread/address_resolver.hpp	/^        bool CanEvict(void) const { return mInfo.mOther.mCanEvict; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:bool
CanFinalizeQuery	core/net/dns_client.cpp	/^bool Client::CanFinalizeQuery(Query &aQuery)$/;"	f	class:ot::Dns::Client	typeref:typename:bool
CanFreeMessage	posix/platform/mdns_socket.hpp	/^        bool CanFreeMessage(void) const { return (mIp6Port == 0) && (mIp4Port == 0); }$/;"	f	struct:ot::Posix::MdnsSocket::Metadata	typeref:typename:bool
CanInsert	core/thread/network_data.hpp	/^    bool CanInsert(uint16_t aSize) const { return (mLength + aSize <= mSize); }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:bool
CanProcessTlv	core/meshcop/tcat_agent.cpp	/^bool TcatAgent::CanProcessTlv(uint8_t aTlvType) const$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:bool
CanRead	core/common/frame_data.hpp	/^    bool CanRead(uint16_t aLength) const { return GetLength() >= aLength; }$/;"	f	class:ot::FrameData	typeref:typename:bool
CanWrite	lib/spinel/multi_frame_buffer.hpp	/^    bool CanWrite(uint16_t aWriteLength) const { return (mRemainingLength >= aWriteLength); }$/;"	f	class:ot::Spinel::FrameWritePointer	typeref:typename:bool
Cancel	core/utils/mesh_diag.cpp	/^void MeshDiag::Cancel(void)$/;"	f	class:ot::Utils::MeshDiag	typeref:typename:void
Cancel	posix/platform/resolver.cpp	/^void Resolver::Cancel(otPlatDnsUpstreamQuery *aTxn)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
CancelResourceSubscription	cli/cli_coap.cpp	/^otError Coap::CancelResourceSubscription(void)$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
CancelSubscriber	cli/cli_coap.cpp	/^void Coap::CancelSubscriber(void)$/;"	f	class:ot::Cli::Coap	typeref:typename:void
CancelTimer	core/net/tcp6.cpp	/^void Tcp::Endpoint::CancelTimer(uint8_t aTimerFlag)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:void
CancelUpdate	core/meshcop/dataset_updater.cpp	/^void DatasetUpdater::CancelUpdate(void)$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:void
CaseInsensitiveMatch	core/net/dns_types.cpp	/^bool Name::LabelIterator::CaseInsensitiveMatch(uint8_t aFirst, uint8_t aSecond)$/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:bool
ChangeCslChannel	core/utils/channel_manager.cpp	/^void ChannelManager::ChangeCslChannel(uint8_t aChannel)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
ChangeHostAndServiceStates	core/net/srp_client.cpp	/^void Client::ChangeHostAndServiceStates(const ItemState *aNewStates, ServiceStateChangeMode aMod/;"	f	class:ot::Srp::Client	typeref:typename:void
ChangedFlags	core/thread/network_data_leader.hpp	/^        ChangedFlags(void)$/;"	f	class:ot::NetworkData::Leader::ChangedFlags
ChangedPropsSet	ncp/changed_props_set.hpp	/^    ChangedPropsSet(void)$/;"	f	class:ot::Ncp::ChangedPropsSet
ChannelManager	core/utils/channel_manager.cpp	/^ChannelManager::ChannelManager(Instance &aInstance)$/;"	f	class:ot::Utils::ChannelManager
ChannelMask	core/mac/channel_mask.hpp	/^    ChannelMask(void)$/;"	f	class:ot::Mac::ChannelMask
ChannelMask	core/mac/channel_mask.hpp	/^    explicit ChannelMask(uint32_t aMask)$/;"	f	class:ot::Mac::ChannelMask
ChannelMaskForPage	core/radio/radio.hpp	/^    static uint32_t ChannelMaskForPage(uint8_t aChannelPage)$/;"	f	class:ot::Radio	typeref:typename:uint32_t
ChannelMonitor	core/utils/channel_monitor.cpp	/^ChannelMonitor::ChannelMonitor(Instance &aInstance)$/;"	f	class:ot::Utils::ChannelMonitor
ChannelTlvValue	core/thread/mle_tlvs.hpp	/^    ChannelTlvValue(uint16_t aChannel)$/;"	f	class:ot::Mle::ChannelTlvValue
ChannelTlvValue	core/thread/mle_tlvs.hpp	/^    ChannelTlvValue(uint8_t aChannelPage, uint16_t aChannel)$/;"	f	class:ot::Mle::ChannelTlvValue
CheckAndHandleChanges	core/thread/time_sync_service.cpp	/^void TimeSync::CheckAndHandleChanges(bool aTimeUpdated)$/;"	f	class:ot::TimeSync	typeref:typename:void
CheckAnswerLength	core/thread/network_diagnostic.cpp	/^Error Server::CheckAnswerLength(Coap::Message *&aAnswer, AnswerInfo &aInfo)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
CheckCommandClassAuthorizationFlags	core/meshcop/tcat_agent.cpp	/^bool TcatAgent::CheckCommandClassAuthorizationFlags(CommandClassFlags aCommissionerCommandClassF/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:bool
CheckForHostNameAlias	core/net/dns_client.cpp	/^Error Client::Response::CheckForHostNameAlias(Section aSection, Name &aHostName) const$/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
CheckForKeyRotation	core/thread/key_manager.cpp	/^void KeyManager::CheckForKeyRotation(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
CheckForNetDataGettingFull	core/thread/network_data_leader_ftd.cpp	/^void Leader::CheckForNetDataGettingFull(const NetworkData &aNetworkData, uint16_t aOldRloc16)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
CheckInterrupt	posix/platform/spi_interface.cpp	/^bool SpiInterface::CheckInterrupt(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:bool
CheckInvariants	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::CheckInvariants(void) const$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
CheckInvariants	core/thread/mlr_manager.cpp	/^void MlrManager::CheckInvariants(void) const$/;"	f	class:ot::MlrManager	typeref:typename:void
CheckRadioCapabilities	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::CheckRadioCapabilities(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
CheckRcpApiVersion	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::CheckRcpApiVersion(bool aSupportsRcpApiVersion, bool aSupportsRcpMinHostApi/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
CheckReachability	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::CheckReachability(const FrameData &aFrameData, const Mac::Addresses &aMeshA/;"	f	class:ot::MeshForwarder	typeref:typename:Error
CheckReachability	core/thread/mle_router.cpp	/^Error MleRouter::CheckReachability(uint16_t aMeshDest, const Ip6::Header &aIp6Header)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
CheckRecord	core/net/dns_types.cpp	/^Error ResourceRecord::CheckRecord(const Message &aMessage, uint16_t aOffset) const$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
CheckSizeLimitToPrepareAgain	core/net/mdns.cpp	/^void Core::TxMessage::CheckSizeLimitToPrepareAgain(bool &aPrepareAgain)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
CheckSpinelVersion	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::CheckSpinelVersion(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
CheckSpinelVersion	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::CheckSpinelVersion(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
CheckState	core/thread/child_supervision.cpp	/^void ChildSupervisor::CheckState(void)$/;"	f	class:ot::ChildSupervisor	typeref:typename:void
CheckState	core/utils/jam_detector.cpp	/^void JamDetector::CheckState(void)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
Checksum	core/net/checksum.hpp	/^    Checksum(void)$/;"	f	class:ot::Checksum
ChildIdFromRloc16	core/thread/mle_types.hpp	/^inline uint16_t ChildIdFromRloc16(uint16_t aRloc16) { return aRloc16 & kMaxChildId; }$/;"	f	namespace:ot::Mle	typeref:typename:uint16_t
ChildInfoIterator	core/common/settings.cpp	/^Settings::ChildInfoIterator::ChildInfoIterator(Instance &aInstance)$/;"	f	class:ot::Settings::ChildInfoIterator
ChildInfoIterator	core/common/settings.hpp	/^        ChildInfoIterator(Instance &aInstance, IteratorType)$/;"	f	class:ot::Settings::ChildInfoIterator
ChildInfoIteratorBuilder	core/common/settings.hpp	/^        explicit ChildInfoIteratorBuilder(Instance &aInstance)$/;"	f	class:ot::Settings::ChildInfoIteratorBuilder
ChildSupervisor	core/thread/child_supervision.cpp	/^ChildSupervisor::ChildSupervisor(Instance &aInstance)$/;"	f	class:ot::ChildSupervisor
ChildTable	core/thread/child_table.cpp	/^ChildTable::ChildTable(Instance &aInstance)$/;"	f	class:ot::ChildTable
ChooseRandomChannel	core/mac/channel_mask.cpp	/^uint8_t ChannelMask::ChooseRandomChannel(void) const$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:uint8_t
Clamp	core/common/num_utils.hpp	/^template <typename Type> Type Clamp(Type aValue, Type aMin, Type aMax)$/;"	f	namespace:ot	typeref:typename:Type
ClampToInt8	core/common/num_utils.hpp	/^template <typename IntType> int8_t ClampToInt8(IntType aValue)$/;"	f	namespace:ot	typeref:typename:int8_t
ClampToUint16	core/common/num_utils.hpp	/^template <typename UintType> uint16_t ClampToUint16(UintType aValue)$/;"	f	namespace:ot	typeref:typename:uint16_t
ClampToUint8	core/common/num_utils.hpp	/^template <typename UintType> uint8_t ClampToUint8(UintType aValue)$/;"	f	namespace:ot	typeref:typename:uint8_t
ClampWeightAdjustment	core/thread/mle_types.cpp	/^void DeviceProperties::ClampWeightAdjustment(void)$/;"	f	class:ot::Mle::DeviceProperties	typeref:typename:void
CleanupFragmentationBuffer	core/net/ip6.cpp	/^void Ip6::CleanupFragmentationBuffer(void) { mReassemblyList.DequeueAndFreeAll(); }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
Clear	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::Clear(void)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
Clear	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::Clear(void)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
Clear	core/common/array.hpp	/^    void Clear(void) { mLength = 0; }$/;"	f	class:ot::Array	typeref:typename:void
Clear	core/common/callback.hpp	/^    void Clear(void) { mHandler = nullptr; }$/;"	f	class:ot::CallbackBase	typeref:typename:void
Clear	core/common/clearable.hpp	/^    void Clear(void) { ClearAllBytes<Type>(*static_cast<Type *>(this)); }$/;"	f	class:ot::Clearable	typeref:typename:void
Clear	core/common/heap_array.hpp	/^    void Clear(void)$/;"	f	class:ot::Heap::Array	typeref:typename:void
Clear	core/common/linked_list.hpp	/^    void Clear(void) { mHead = nullptr; }$/;"	f	class:ot::LinkedList	typeref:typename:void
Clear	core/common/notifier.hpp	/^    void Clear(void) { mEventFlags = 0; }$/;"	f	class:ot::Events	typeref:typename:void
Clear	core/common/owning_list.hpp	/^    void Clear(void) { Free(); }$/;"	f	class:ot::OwningList	typeref:typename:void
Clear	core/common/string.cpp	/^StringWriter &StringWriter::Clear(void)$/;"	f	class:ot::StringWriter	typeref:typename:StringWriter &
Clear	core/mac/channel_mask.hpp	/^    void Clear(void) { mMask = 0; }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:void
Clear	core/mac/data_poll_handler.cpp	/^void DataPollHandler::Clear(void)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
Clear	core/mac/mac_links.hpp	/^    void Clear(void)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
Clear	core/mac/mac_types.cpp	/^void KeyMaterial::Clear(void)$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
Clear	core/mac/mac_types.hpp	/^    void Clear(void) { mBitMask = 0; }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:void
Clear	core/meshcop/dataset.hpp	/^    void Clear(void) { mLength = 0; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
Clear	core/meshcop/dataset_manager.cpp	/^void DatasetManager::Clear(void)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
Clear	core/meshcop/meshcop.hpp	/^    void Clear(void) { Init(1); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
Clear	core/meshcop/meshcop.hpp	/^    void Clear(void) { mLength = 0; }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:void
Clear	core/meshcop/meshcop_tlvs.hpp	/^    void Clear(void) { memset(mSteeringData, 0, GetSteeringDataLength()); }$/;"	f	class:ot::MeshCoP::SteeringDataTlv	typeref:typename:void
Clear	core/net/dhcp6_server.hpp	/^        void Clear(void) { mAloc.mValid = false; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:void
Clear	core/net/dns_dso.hpp	/^            void      Clear(void) { mRequests.Clear(); }$/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:void
Clear	core/net/mdns.cpp	/^void Core::MultiPacketRxMessages::Clear(void)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages	typeref:typename:void
Clear	core/net/mdns.cpp	/^void Core::TxMessageHistory::Clear(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory	typeref:typename:void
Clear	core/net/mdns.hpp	/^            void Clear(void) { mBrowse = nullptr; }$/;"	f	union:ot::Dns::Multicast::Core::ResultCallback::SharedCallback	typeref:typename:void
Clear	core/net/srp_client.cpp	/^void Client::HostInfo::Clear(void)$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
Clear	core/thread/address_resolver.cpp	/^void AddressResolver::Clear(void)$/;"	f	class:ot::AddressResolver	typeref:typename:void
Clear	core/thread/child.cpp	/^void Child::Clear(void)$/;"	f	class:ot::Child	typeref:typename:void
Clear	core/thread/child_table.cpp	/^void ChildTable::Clear(void)$/;"	f	class:ot::ChildTable	typeref:typename:void
Clear	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::Clear(void)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
Clear	core/thread/link_quality.cpp	/^void LinkQualityInfo::Clear(void)$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
Clear	core/thread/mle.cpp	/^void Mle::ParentCandidate::Clear(void)$/;"	f	class:ot::Mle::Mle::ParentCandidate	typeref:typename:void
Clear	core/thread/mle_types.hpp	/^    void Clear(void) { mArray.Clear(); }$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:void
Clear	core/thread/network_data.hpp	/^    void Clear(void) { mLength = 0; }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
Clear	core/thread/network_data_leader_ftd.cpp	/^void Leader::ContextIds::Clear(void)$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
Clear	core/thread/router.cpp	/^void Parent::Clear(void)$/;"	f	class:ot::Parent	typeref:typename:void
Clear	core/thread/router.cpp	/^void Router::Clear(void)$/;"	f	class:ot::Router	typeref:typename:void
Clear	core/thread/router_table.cpp	/^void RouterTable::Clear(void)$/;"	f	class:ot::RouterTable	typeref:typename:void
Clear	core/utils/channel_monitor.cpp	/^void ChannelMonitor::Clear(void)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:void
Clear	core/utils/history_tracker.cpp	/^void HistoryTracker::List::Clear(void)$/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:void
Clear	core/utils/history_tracker.hpp	/^        void         Clear(void) {}$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:void
Clear	core/utils/parse_cmdline.hpp	/^    void Clear(void) { mString = nullptr; }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:void
Clear	core/utils/ping_sender.hpp	/^        void Clear(void)$/;"	f	struct:ot::Utils::PingSender::Statistics	typeref:typename:void
Clear	lib/spinel/multi_frame_buffer.hpp	/^    void Clear(void)$/;"	f	class:ot::Spinel::FrameBuffer	typeref:typename:void
Clear	lib/spinel/multi_frame_buffer.hpp	/^    void Clear(void)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:void
Clear	lib/spinel/spinel_buffer.cpp	/^void Buffer::Clear(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
Clear	ncp/changed_props_set.hpp	/^    void Clear(void) { mChangedSet = 0; }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
Clear	posix/platform/config_file.cpp	/^otError ConfigFile::Clear(const char *aKey)$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:otError
ClearAddresses	core/mac/mac_filter.cpp	/^void Filter::ClearAddresses(void)$/;"	f	class:ot::Mac::Filter	typeref:typename:void
ClearAllBytes	cli/cli_utils.hpp	/^    template <typename ObjectType> static void ClearAllBytes(ObjectType &aObject)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
ClearAllBytes	core/common/clearable.hpp	/^template <typename ObjectType> void ClearAllBytes(ObjectType &aObject)$/;"	f	namespace:ot	typeref:typename:void
ClearAllMessagesForSleepyChild	core/thread/indirect_sender.cpp	/^void IndirectSender::ClearAllMessagesForSleepyChild(Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:void
ClearAllRssIn	core/mac/mac_filter.cpp	/^void Filter::ClearAllRssIn(void)$/;"	f	class:ot::Mac::Filter	typeref:typename:void
ClearAppendState	core/net/mdns.cpp	/^void Core::Entry::ClearAppendState(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ClearAppendState	core/net/mdns.cpp	/^void Core::HostEntry::ClearAppendState(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
ClearAppendState	core/net/mdns.cpp	/^void Core::ServiceEntry::ClearAppendState(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
ClearAppendState	core/net/mdns.cpp	/^void Core::ServiceType::ClearAppendState(void) { mServicesPtr.MarkAsNotAppended(); }$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
ClearAppendedInMessageFlag	core/net/srp_client.hpp	/^        void      ClearAppendedInMessageFlag(void) { mLease &= ~kAppendedInMsgFlag; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:void
ClearAuthoritativeAnswerFlag	core/net/dns_types.hpp	/^    void ClearAuthoritativeAnswerFlag(void) { mFlags[0] &= ~kAaFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
ClearAutoAddrConfigFlag	core/net/nd6.hpp	/^    void ClearAutoAddrConfigFlag(void) { mFlags &= ~kAutoConfigFlagMask; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
ClearAverageRss	core/thread/link_quality.hpp	/^    void ClearAverageRss(void) { mRssAverager.Clear(); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
ClearBit	core/meshcop/meshcop.hpp	/^    void ClearBit(uint8_t aBit) { m8[BitIndex(aBit)] &= ~BitFlag(aBit); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
ClearBit	ncp/changed_props_set.hpp	/^    static void ClearBit(uint64_t &aBitset, uint8_t aBitIndex) { aBitset &= ~(1ULL << aBitIndex)/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
ClearBytes	core/common/data.hpp	/^    void ClearBytes(void) { memset(GetBytes(), 0, mLength); }$/;"	f	class:ot::MutableData	typeref:typename:void
ClearCalibratedPowers	core/utils/power_calibration.cpp	/^void PowerCalibration::ClearCalibratedPowers(void)$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:void
ClearCalibratedPowers	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ClearCalibratedPowers(void) { return Set(SPINEL_PROP_PHY_CALIBRATED_POWER, /;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ClearCallback	core/net/mdns.hpp	/^        void ClearCallback(void) { mCallback.Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ClearCallback	core/net/mdns.hpp	/^        void ClearCallback(void) { mSharedCallback.Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:void
ClearChildMask	core/common/message.cpp	/^void Message::ClearChildMask(uint16_t aChildIndex) { GetMetadata().mChildMask.Set(aChildIndex, f/;"	f	class:ot::Message	typeref:typename:void
ClearCompress	core/thread/network_data_tlvs.hpp	/^    void ClearCompress(void) { mFlags &= ~kCompressFlag; }$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:void
ClearCompressOffsets	core/net/mdns.cpp	/^void Core::BrowseCache::ClearCompressOffsets(void)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
ClearCompressOffsets	core/net/mdns.cpp	/^void Core::ServiceCache::ClearCompressOffsets(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:void
ClearDefaultRssIn	core/mac/mac_filter.hpp	/^    void ClearDefaultRssIn(void) { mDefaultRssIn = kFixedRssDisabled; }$/;"	f	class:ot::Mac::Filter	typeref:typename:void
ClearDirectTransmission	core/common/message.hpp	/^    void ClearDirectTransmission(void) { GetMetadata().mDirectTx = false; }$/;"	f	class:ot::Message	typeref:typename:void
ClearDiscerner	core/meshcop/joiner.cpp	/^Error Joiner::ClearDiscerner(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:Error
ClearDnsSecurityFlag	core/net/dns_types.hpp	/^    void ClearDnsSecurityFlag(void) { GetTtlByteAt(kFlagByteIndex) &= ~kDnsSecFlag; }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
ClearEmptyCallbacks	core/net/mdns.cpp	/^void Core::CacheEntry::ClearEmptyCallbacks(void)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
ClearEntry	core/thread/src_match_controller.cpp	/^void SourceMatchController::ClearEntry(Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
ClearEphemeralKey	core/meshcop/border_agent.cpp	/^void BorderAgent::ClearEphemeralKey(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
ClearFilter	ncp/changed_props_set.hpp	/^    void ClearFilter(void) { mFilterSet = 0; }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
ClearFireTime	core/net/mdns.hpp	/^        void      ClearFireTime(void) { mHasFireTime = false; }$/;"	f	class:ot::Dns::Multicast::Core::FireTime	typeref:typename:void
ClearFixedDuaInterfaceIdentifier	core/thread/dua_manager.cpp	/^void DuaManager::ClearFixedDuaInterfaceIdentifier(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
ClearHost	core/net/mdns.cpp	/^void Core::HostEntry::ClearHost(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
ClearHostAndServices	core/net/srp_client.cpp	/^void Client::ClearHostAndServices(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
ClearIp6Addresses	core/thread/child.cpp	/^void Child::ClearIp6Addresses(void)$/;"	f	class:ot::Child	typeref:typename:void
ClearJoiners	core/meshcop/commissioner.cpp	/^void Commissioner::ClearJoiners(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
ClearJoiningPermitted	core/mac/mac_frame.hpp	/^    void ClearJoiningPermitted(void) { mFlags &= ~kJoiningFlag; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
ClearKey	core/net/mdns.cpp	/^void Core::Entry::ClearKey(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ClearLastRxFragmentTag	core/thread/neighbor.hpp	/^    void ClearLastRxFragmentTag(void) { mLastRxFragmentTag = 0; }$/;"	f	class:ot::Neighbor	typeref:typename:void
ClearMacKeys	core/mac/sub_mac.hpp	/^    void ClearMacKeys(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
ClearMaxFlag	core/net/ip6_mpl.hpp	/^    void ClearMaxFlag(void) { mControl &= ~kMaxFlag; }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:void
ClearMessagesForRemovedChildren	core/thread/indirect_sender.cpp	/^void IndirectSender::ClearMessagesForRemovedChildren(void)$/;"	f	class:ot::IndirectSender	typeref:typename:void
ClearMode2Key	core/mac/mac.hpp	/^    void ClearMode2Key(void) { mMode2KeyMaterial.Clear(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ClearMoreFlag	core/net/ip6_headers.hpp	/^    void ClearMoreFlag(void) { mOffsetMore = BigEndian::HostSwap16(BigEndian::HostSwap16(mOffset/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
ClearNat64Prefix	core/net/nat64_translator.cpp	/^void Translator::ClearNat64Prefix(void)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
ClearNative	core/mac/mac_frame.hpp	/^    void ClearNative(void) { mFlags &= ~kNativeFlag; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
ClearNcpBuffer	lib/spinel/spinel_encoder.cpp	/^void Encoder::ClearNcpBuffer(void) { mNcpBuffer.Clear(); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:void
ClearNeighbors	core/thread/router_table.cpp	/^void RouterTable::ClearNeighbors(void)$/;"	f	class:ot::RouterTable	typeref:typename:void
ClearOnLinkFlag	core/net/nd6.hpp	/^    void ClearOnLinkFlag(void) { mFlags &= ~kOnLinkFlagMask; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
ClearParentCandidate	core/thread/mle.hpp	/^    void       ClearParentCandidate(void) { mParentCandidate.Clear(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ClearPending	core/mac/mac.hpp	/^    void     ClearPending(Operation aOperation) { mPendingOperations &= ~(1U << aOperation); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ClearPreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::ClearPreference(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
ClearPreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::ClearPreference(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
ClearPreferredLifetime	core/border_router/routing_manager.hpp	/^        void      ClearPreferredLifetime(void) { mPreferredLifetime = 0; }$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:void
ClearProcessState	core/net/mdns.cpp	/^void Core::RxMessage::ClearProcessState(void)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ClearProcessState	core/net/mdns.cpp	/^void Core::RxMessage::Question::ClearProcessState(void)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage::Question	typeref:typename:void
ClearRadioType	core/common/message.hpp	/^    void ClearRadioType(void) { GetMetadata().mIsRadioTypeSet = false; }$/;"	f	class:ot::Message	typeref:typename:void
ClearReassemblyList	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::ClearReassemblyList(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
ClearRecursionAvailableFlag	core/net/dns_types.hpp	/^    void ClearRecursionAvailableFlag(void) { mFlags[1] &= ~kRaFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
ClearRecursionDesiredFlag	core/net/dns_types.hpp	/^    void ClearRecursionDesiredFlag(void) { mFlags[0] &= ~kRdFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
ClearRequestTlvs	core/thread/child.hpp	/^    void ClearRequestTlvs(void) { memset(mRequestTlvs, Mle::Tlv::kInvalid, sizeof(mRequestTlvs))/;"	f	class:ot::Child	typeref:typename:void
ClearRequests	core/coap/coap.cpp	/^void CoapBase::ClearRequests(const Ip6::Address &aAddress) { ClearRequests(&aAddress); }$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
ClearRequests	core/coap/coap.cpp	/^void CoapBase::ClearRequests(const Ip6::Address *aAddress)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
ClearRequestsAndResponses	core/coap/coap.cpp	/^void CoapBase::ClearRequestsAndResponses(void)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
ClearResources	core/net/srp_server.cpp	/^void Server::Host::ClearResources(void) { mAddresses.Free(); }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
ClearRouteInfoOptionPreference	core/border_router/routing_manager.hpp	/^    void ClearRouteInfoOptionPreference(void) { mRioAdvertiser.ClearPreference(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
ClearRoutePreference	core/border_router/routing_manager.hpp	/^    void ClearRoutePreference(void) { mRoutePublisher.ClearPreference(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
ClearRxBuffer	lib/spinel/spinel_driver.hpp	/^    void ClearRxBuffer(void) { mRxFrameBuffer.Clear(); }$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
ClearSavedFrames	lib/spinel/multi_frame_buffer.hpp	/^    void ClearSavedFrames(void)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:void
ClearSavedPosition	lib/spinel/spinel_decoder.hpp	/^    void    ClearSavedPosition(void) { mSavedIndex = mLength; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:void
ClearService	core/net/mdns.cpp	/^void Core::ServiceEntry::ClearService(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
ClearService	core/net/srp_client.cpp	/^Error Client::ClearService(Service &aService)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
ClearSrcMatchExtEntries	core/radio/radio.hpp	/^inline void Radio::ClearSrcMatchExtEntries(void) { otPlatRadioClearSrcMatchExtEntries(GetInstanc/;"	f	class:ot::Radio	typeref:typename:void
ClearSrcMatchExtEntries	core/radio/radio.hpp	/^inline void Radio::ClearSrcMatchExtEntries(void) {}$/;"	f	class:ot::Radio	typeref:typename:void
ClearSrcMatchExtEntries	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ClearSrcMatchExtEntries(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ClearSrcMatchExtEntry	core/radio/radio.hpp	/^inline Error Radio::ClearSrcMatchExtEntry(const Mac::ExtAddress &) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
ClearSrcMatchExtEntry	core/radio/radio.hpp	/^inline Error Radio::ClearSrcMatchExtEntry(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Radio	typeref:typename:Error
ClearSrcMatchExtEntry	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ClearSrcMatchExtEntry(const otExtAddress &aExtAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ClearSrcMatchShortEntries	core/radio/radio.hpp	/^inline void Radio::ClearSrcMatchShortEntries(void) { otPlatRadioClearSrcMatchShortEntries(GetIns/;"	f	class:ot::Radio	typeref:typename:void
ClearSrcMatchShortEntries	core/radio/radio.hpp	/^inline void Radio::ClearSrcMatchShortEntries(void) {}$/;"	f	class:ot::Radio	typeref:typename:void
ClearSrcMatchShortEntries	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ClearSrcMatchShortEntries(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ClearSrcMatchShortEntry	core/radio/radio.hpp	/^inline Error Radio::ClearSrcMatchShortEntry(Mac::ShortAddress aShortAddress)$/;"	f	class:ot::Radio	typeref:typename:Error
ClearSrcMatchShortEntry	core/radio/radio.hpp	/^inline Error Radio::ClearSrcMatchShortEntry(Mac::ShortAddress) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
ClearSrcMatchShortEntry	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ClearSrcMatchShortEntry(uint16_t aShortAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ClearStable	core/thread/network_data_tlvs.hpp	/^    void ClearStable(void) { mType &= ~kStableMask; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
ClearSupportedRadioType	core/thread/radio_selector.hpp	/^        void ClearSupportedRadioType(void) { mSupportedRadioTypes.Clear(); }$/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:void
ClearTable	core/thread/src_match_controller.cpp	/^void SourceMatchController::ClearTable(void)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
ClearTemporaryChannel	core/mac/mac.cpp	/^void Mac::ClearTemporaryChannel(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ClearTruncationFlag	core/net/dns_types.hpp	/^    void ClearTruncationFlag(void) { mFlags[0] &= ~kTcFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
ClearTxQueue	posix/platform/mdns_socket.cpp	/^void MdnsSocket::ClearTxQueue(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
ClearValidLifetime	core/border_router/routing_manager.hpp	/^        void            ClearValidLifetime(void) { mValidLifetime = 0; }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:void
Client	core/net/dhcp6_client.cpp	/^Client::Client(Instance &aInstance)$/;"	f	class:ot::Dhcp6::Client
Client	core/net/dns_client.cpp	/^Client::Client(Instance &aInstance)$/;"	f	class:ot::Dns::Client
Client	core/net/sntp_client.cpp	/^Client::Client(Instance &aInstance)$/;"	f	class:ot::Sntp::Client
Client	core/net/srp_client.cpp	/^Client::Client(Instance &aInstance)$/;"	f	class:ot::Srp::Client
Client	core/thread/network_diagnostic.cpp	/^Client::Client(Instance &aInstance)$/;"	f	class:ot::NetworkDiagnostic::Client
Clone	core/coap/coap_message.cpp	/^Message *Message::Clone(uint16_t aLength) const$/;"	f	class:ot::Coap::Message	typeref:typename:Message *
Clone	core/coap/coap_message.hpp	/^    Message *Clone(void) const { return Clone(GetLength()); }$/;"	f	class:ot::Coap::Message	typeref:typename:Message *
Clone	core/common/message.cpp	/^Message *Message::Clone(uint16_t aLength) const$/;"	f	class:ot::Message	typeref:typename:Message *
Clone	core/common/message.hpp	/^    Message *Clone(void) const { return Clone(GetLength()); }$/;"	f	class:ot::Message	typeref:typename:Message *
Close	core/meshcop/secure_transport.cpp	/^void SecureTransport::Close(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
Close	core/net/udp6.cpp	/^Error Udp::Close(SocketHandle &aSocket)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
Close	core/net/udp6.cpp	/^Error Udp::Socket::Close(void) { return Get<Udp>().Close(*this); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
CloseFile	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::CloseFile(void)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
CloseIp4Socket	posix/platform/mdns_socket.cpp	/^void MdnsSocket::CloseIp4Socket(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
CloseIp6Socket	posix/platform/mdns_socket.cpp	/^void MdnsSocket::CloseIp6Socket(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
CloseStruct	lib/spinel/spinel_decoder.cpp	/^otError Decoder::CloseStruct(void)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
CloseStruct	lib/spinel/spinel_encoder.cpp	/^otError Encoder::CloseStruct(void)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
CloseTransaction	posix/platform/resolver.cpp	/^void Resolver::CloseTransaction(Transaction *aTxn)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
Cmd	cli/cli_utils.hpp	/^constexpr static CommandId Cmd(const char *aString)$/;"	f	namespace:ot::Cli	typeref:typename:CommandId
Coap	cli/cli_coap.cpp	/^Coap::Coap(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Coap
Coap	core/coap/coap.cpp	/^Coap::Coap(Instance &aInstance)$/;"	f	class:ot::Coap::Coap
CoapBase	core/coap/coap.cpp	/^CoapBase::CoapBase(Instance &aInstance, Sender aSender)$/;"	f	class:ot::Coap::CoapBase
CoapCodeFromError	core/meshcop/border_agent.cpp	/^Coap::Message::Code BorderAgent::CoapCodeFromError(Error aError)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Coap::Message::Code
CoapSecure	cli/cli_coap_secure.cpp	/^CoapSecure::CoapSecure(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::CoapSecure
CoapSecure	core/coap/coap_secure.cpp	/^CoapSecure::CoapSecure(Instance &aInstance, bool aLayerTwoSecurity)$/;"	f	class:ot::Coap::CoapSecure
CodeToString	core/coap/coap_message.cpp	/^const char *Message::CodeToString(void) const$/;"	f	class:ot::Coap::Message	typeref:typename:const char *
CommandHandler_NET_CLEAR	ncp/ncp_base_mtd.cpp	/^otError NcpBase::CommandHandler_NET_CLEAR(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
CommandHandler_NOOP	ncp/ncp_base.cpp	/^otError NcpBase::CommandHandler_NOOP(uint8_t aHeader) { return PrepareLastStatusResponse(aHeader/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
CommandHandler_PEEK	ncp/ncp_base.cpp	/^otError NcpBase::CommandHandler_PEEK(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
CommandHandler_POKE	ncp/ncp_base.cpp	/^otError NcpBase::CommandHandler_POKE(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
CommandHandler_PROP_VALUE_update	ncp/ncp_base.cpp	/^otError NcpBase::CommandHandler_PROP_VALUE_update(uint8_t aHeader, unsigned int aCommand)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
CommandHandler_RESET	ncp/ncp_base.cpp	/^otError NcpBase::CommandHandler_RESET(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
Commissioner	cli/cli_commissioner.hpp	/^    Commissioner(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Commissioner
Commissioner	core/meshcop/commissioner.cpp	/^Commissioner::Commissioner(Instance &aInstance)$/;"	f	class:ot::MeshCoP::Commissioner
CommissionerAloc16FromId	core/thread/mle_types.hpp	/^inline uint16_t CommissionerAloc16FromId(uint16_t aSessionId)$/;"	f	namespace:ot::Mle	typeref:typename:uint16_t
CommitNewResponseEntries	core/net/mdns.cpp	/^void Core::AddrCache::CommitNewResponseEntries(void)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
CommitReceive	core/net/tcp6.cpp	/^Error Tcp::Endpoint::CommitReceive(size_t aNumBytes, uint32_t aFlags)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
CommitSrpUpdate	core/net/srp_server.cpp	/^void Server::CommitSrpUpdate(Error                    aError,$/;"	f	class:ot::Srp::Server	typeref:typename:void
CommitSrpUpdate	core/net/srp_server.cpp	/^void Server::CommitSrpUpdate(Error aError, Host &aHost, const MessageMetadata &aMessageMetadata)$/;"	f	class:ot::Srp::Server	typeref:typename:void
CommitSrpUpdate	core/net/srp_server.cpp	/^void Server::CommitSrpUpdate(UpdateMetadata &aUpdateMetadata)$/;"	f	class:ot::Srp::Server	typeref:typename:void
Compare	cli/cli_dataset.hpp	/^        int Compare(const char *aName) const { return strcmp(aName, mName); }$/;"	f	struct:ot::Cli::Dataset::ComponentMapper	typeref:typename:int
Compare	cli/cli_utils.hpp	/^        int Compare(const char *aName) const { return strcmp(aName, mName); }$/;"	f	struct:ot::Cli::Utils::CommandEntry	typeref:typename:int
Compare	core/common/binary_search.hpp	/^    template <typename Key, typename Entry> static int Compare(const void *aKey, const void *aEn/;"	f	class:ot::BinarySearch	typeref:typename:int
Compare	core/common/message.hpp	/^    template <typename ObjectType> bool Compare(uint16_t aOffset, const ObjectType &aObject) con/;"	f	class:ot::Message	typeref:typename:bool
Compare	core/common/string.hpp	/^        int Compare(uint16_t aKey) const { return ThreeWayCompare(aKey, mKey); }$/;"	f	class:ot::Stringify::Entry	typeref:typename:int
Compare	core/meshcop/timestamp.cpp	/^int Timestamp::Compare(const Timestamp &aFirst, const Timestamp &aSecond)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:int
Compare	core/meshcop/timestamp.cpp	/^int Timestamp::Compare(const Timestamp *aFirst, const Timestamp *aSecond)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:int
Compare	core/thread/uri_paths.cpp	/^    int Compare(const char *aPath) const { return strcmp(aPath, mPath); }$/;"	f	struct:ot::UriList::Entry	typeref:typename:int	file:
CompareAndSkipLabels	core/net/dns_types.cpp	/^bool Name::CompareAndSkipLabels(const char *&aNamePtr, const char *aLabels, char aExpectedNextCh/;"	f	class:ot::Dns::Name	typeref:typename:bool
CompareAndUpdate	core/net/srp_advertising_proxy.cpp	/^template <typename Entry> bool AdvertisingProxy::CompareAndUpdate(Entry &aEntry, Entry &aExistin/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
CompareAndUpdateHost	core/net/srp_advertising_proxy.cpp	/^bool AdvertisingProxy::CompareAndUpdateHost(Host &aHost, Host &aExistingHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
CompareAndUpdateHostAndServices	core/net/srp_advertising_proxy.cpp	/^bool AdvertisingProxy::CompareAndUpdateHostAndServices(Host &aHost, Host &aExistingHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
CompareAndUpdateService	core/net/srp_advertising_proxy.cpp	/^bool AdvertisingProxy::CompareAndUpdateService(Service &aService, Service &aExistingService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
CompareBytes	core/common/message.cpp	/^bool Message::CompareBytes(uint16_t       aOffset,$/;"	f	class:ot::Message	typeref:typename:bool
CompareBytes	core/common/message.cpp	/^bool Message::CompareBytes(uint16_t aOffset, const void *aBuf, uint16_t aLength, ByteMatcher aMa/;"	f	class:ot::Message	typeref:typename:bool
CompareLabel	core/net/dns_types.cpp	/^Error Name::CompareLabel(const Message &aMessage, uint16_t &aOffset, const char *aLabel)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
CompareLabel	core/net/dns_types.cpp	/^bool Name::LabelIterator::CompareLabel(const LabelIterator &aOtherIterator) const$/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:bool
CompareLabel	core/net/dns_types.cpp	/^bool Name::LabelIterator::CompareLabel(const char *&aName, bool aIsSingleLabel) const$/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:bool
CompareMultipleLabels	core/net/dns_types.cpp	/^Error Name::CompareMultipleLabels(const Message &aMessage, uint16_t &aOffset, const char *aLabel/;"	f	class:ot::Dns::Name	typeref:typename:Error
CompareName	core/net/dns_types.cpp	/^Error Name::CompareName(const Message &aMessage, uint16_t &aOffset, const Message &aMessage2, ui/;"	f	class:ot::Dns::Name	typeref:typename:Error
CompareName	core/net/dns_types.cpp	/^Error Name::CompareName(const Message &aMessage, uint16_t &aOffset, const Name &aName)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
CompareName	core/net/dns_types.cpp	/^Error Name::CompareName(const Message &aMessage, uint16_t &aOffset, const char *aName)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
ComparePartitions	core/thread/mle_router.cpp	/^int MleRouter::ComparePartitions(bool              aSingletonA,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:int
CompareRouteEntries	core/thread/network_data_leader.cpp	/^int Leader::CompareRouteEntries(int8_t   aFirstPreference,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:int
CompareRouteEntries	core/thread/network_data_leader.cpp	/^template <typename EntryType> int Leader::CompareRouteEntries(const EntryType &aFirst, const Ent/;"	f	class:ot::NetworkData::Leader	typeref:typename:int
CompleteBenchmark	cli/cli_tcp.cpp	/^void TcpExample::CompleteBenchmark(void)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
Compress	core/thread/lowpan.cpp	/^Error Lowpan::Compress(Message              &aMessage,$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
Compress	core/thread/lowpan.cpp	/^Error Lowpan::Compress(Message &aMessage, const Mac::Addresses &aMacAddrs, FrameBuilder &aFrameB/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
CompressDestinationIid	core/thread/lowpan.cpp	/^Error Lowpan::CompressDestinationIid(const Mac::Address &aMacAddr,$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
CompressExtensionHeader	core/thread/lowpan.cpp	/^Error Lowpan::CompressExtensionHeader(Message &aMessage, FrameBuilder &aFrameBuilder, uint8_t &a/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
CompressMulticast	core/thread/lowpan.cpp	/^Error Lowpan::CompressMulticast(const Ip6::Address &aIpAddr, uint16_t &aHcCtl, FrameBuilder &aFr/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
CompressSourceIid	core/thread/lowpan.cpp	/^Error Lowpan::CompressSourceIid(const Mac::Address &aMacAddr,$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
CompressUdp	core/thread/lowpan.cpp	/^Error Lowpan::CompressUdp(Message &aMessage, FrameBuilder &aFrameBuilder)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
ComputeBloomFilter	core/meshcop/commissioner.cpp	/^void Commissioner::ComputeBloomFilter(SteeringData &aSteeringData) const$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
ComputeCode	core/utils/verhoeff_checksum.cpp	/^Error VerhoeffChecksum::ComputeCode(const char *aDecimalString, uint8_t &aCode, bool aValidate)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:Error
ComputeIid	core/thread/lowpan.cpp	/^Error Lowpan::ComputeIid(const Mac::Address &aMacAddr, const Context &aContext, Ip6::InterfaceId/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
ComputeJoinerId	core/meshcop/meshcop.cpp	/^void ComputeJoinerId(const Mac::ExtAddress &aEui64, Mac::ExtAddress &aJoinerId)$/;"	f	namespace:ot::MeshCoP	typeref:typename:void
ComputeKeys	core/thread/key_manager.cpp	/^void KeyManager::ComputeKeys(uint32_t aKeySequence, HashKeys &aHashKeys) const$/;"	f	class:ot::KeyManager	typeref:typename:void
ComputeLinkMargin	core/mac/mac.cpp	/^uint8_t Mac::ComputeLinkMargin(int8_t aRss) const { return ot::ComputeLinkMargin(GetNoiseFloor()/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
ComputeLinkMargin	core/thread/link_quality.cpp	/^uint8_t ComputeLinkMargin(int8_t aNoiseFloor, int8_t aRss)$/;"	f	namespace:ot	typeref:typename:uint8_t
ComputeNetworkTimeOffset	core/mac/mac_frame.hpp	/^    int64_t ComputeNetworkTimeOffset(void) const$/;"	f	class:ot::Mac::RxFrame	typeref:typename:int64_t
ComputeTrelKey	core/thread/key_manager.cpp	/^void KeyManager::ComputeTrelKey(uint32_t aKeySequence, Mac::Key &aKey) const$/;"	f	class:ot::KeyManager	typeref:typename:void
ConfigFile	posix/platform/config_file.cpp	/^ConfigFile::ConfigFile(const char *aFilePath)$/;"	f	class:ot::Posix::ConfigFile
ConfigNextDuaRegistrationResponse	core/backbone_router/bbr_manager.cpp	/^void Manager::ConfigNextDuaRegistrationResponse(const Ip6::InterfaceIdentifier *aMlIid, uint8_t /;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
ConfigNextMulticastListenerRegistrationResponse	core/backbone_router/bbr_manager.cpp	/^void Manager::ConfigNextMulticastListenerRegistrationResponse(ThreadStatusTlv::MlrStatus aStatus/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
Configuration	posix/platform/configuration.hpp	/^    Configuration(void)$/;"	f	class:ot::Posix::Configuration
ConfigureEap	core/utils/link_metrics_manager.cpp	/^Error LinkMetricsManager::Subject::ConfigureEap(Instance &aInstance)$/;"	f	class:ot::Utils::LinkMetricsManager::Subject	typeref:typename:Error
ConfigureEnhAckProbing	core/radio/radio.hpp	/^    Error ConfigureEnhAckProbing(otLinkMetrics            aLinkMetrics,$/;"	f	class:ot::Radio	typeref:typename:Error
ConfigureEnhAckProbing	core/thread/link_metrics.cpp	/^Status Subject::ConfigureEnhAckProbing(uint8_t aEnhAckFlags, const Metrics &aMetrics, Neighbor &/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Status
ConfigureEnhAckProbing	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ConfigureEnhAckProbing(otLinkMetrics         aLinkMetrics,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ConfigureForwardTrackingSeries	core/thread/link_metrics.cpp	/^Status Subject::ConfigureForwardTrackingSeries(uint8_t        aSeriesId,$/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Status
Connect	core/coap/coap_secure.cpp	/^Error CoapSecure::Connect(const Ip6::SockAddr &aSockAddr, ConnectedCallback aCallback, void *aCo/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Connect	core/meshcop/joiner.cpp	/^Error Joiner::Connect(JoinerRouter &aRouter)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:Error
Connect	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Connect(const Ip6::SockAddr &aSockAddr)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
Connect	core/net/dns_dso.cpp	/^void Dso::Connection::Connect(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
Connect	core/net/tcp6.cpp	/^Error Tcp::Endpoint::Connect(const SockAddr &aSockName, uint32_t aFlags)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
Connect	core/net/udp6.cpp	/^Error Udp::Connect(SocketHandle &aSocket, const SockAddr &aSockAddr)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
Connect	core/net/udp6.cpp	/^Error Udp::Socket::Connect(const SockAddr &aSockAddr) { return Get<Udp>().Connect(*this, aSockAd/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
Connect	core/net/udp6.cpp	/^Error Udp::Socket::Connect(uint16_t aPort) { return Connect(SockAddr(aPort)); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
Connect	core/net/udp6.hpp	/^        Error Connect(void) { return Connect(0); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
Connect	core/radio/ble_secure.cpp	/^Error BleSecure::Connect(void)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
ConnectSession	posix/client.cpp	/^int ConnectSession(const Config &aConfig)$/;"	f	namespace:__anon7e280f770111	typeref:typename:int
Connected	core/meshcop/tcat_agent.cpp	/^Error TcatAgent::Connected(MeshCoP::SecureTransport &aTlsContext)$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:Error
Connection	core/net/dns_dso.cpp	/^Dso::Connection::Connection(Instance            &aInstance,$/;"	f	class:ot::Dns::Dso::Connection
ConstIterator	core/common/linked_list.hpp	/^        explicit ConstIterator(const Type *aItem)$/;"	f	class:ot::LinkedList::ConstIterator
ConstIterator	core/common/message.hpp	/^        explicit ConstIterator(const Message *aMessage)$/;"	f	class:ot::Message::ConstIterator
ConstructResult	core/net/mdns.cpp	/^void Core::AddrCache::ConstructResult(AddressResult &aResult, Heap::Array<AddressAndTtl> &aAddrA/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
Contains	core/common/array.hpp	/^    bool Contains(const Type &aEntry) const { return Find(aEntry) != nullptr; }$/;"	f	class:ot::Array	typeref:typename:bool
Contains	core/common/heap_array.hpp	/^    bool Contains(const Type &aEntry) const { return Find(aEntry) != nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:bool
Contains	core/common/linked_list.hpp	/^    bool Contains(const Type &aEntry) const$/;"	f	class:ot::LinkedList	typeref:typename:bool
Contains	core/common/notifier.hpp	/^    bool Contains(Event aEvent) const { return (mEventFlags & aEvent) != 0; }$/;"	f	class:ot::Events	typeref:typename:bool
Contains	core/mac/mac_types.hpp	/^    bool Contains(RadioType aType) const { return ((mBitMask & BitFlag(aType)) != 0); }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:bool
Contains	core/meshcop/dataset.hpp	/^    template <typename TlvType> bool Contains(void) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:bool
Contains	core/meshcop/meshcop.cpp	/^bool SteeringData::Contains(const HashBitIndexes &aIndexes) const$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
Contains	core/meshcop/meshcop.cpp	/^bool SteeringData::Contains(const JoinerDiscerner &aDiscerner) const$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
Contains	core/meshcop/meshcop.cpp	/^bool SteeringData::Contains(const Mac::ExtAddress &aJoinerId) const$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
Contains	core/net/dns_dso.cpp	/^bool Dso::Connection::PendingRequests::Contains(MessageId aMessageId, Tlv::Type &aPrimaryTlvType/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:bool
Contains	core/net/dnssd.cpp	/^bool Dnssd::RequestIdRange::Contains(RequestId aId) const$/;"	f	class:ot::Dnssd::RequestIdRange	typeref:typename:bool
Contains	core/net/mdns.cpp	/^bool Core::TxMessageHistory::Contains(const Message &aMessage) const$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory	typeref:typename:bool
Contains	core/thread/child_table.hpp	/^    bool Contains(const Neighbor &aNeighbor) const$/;"	f	class:ot::ChildTable	typeref:typename:bool
Contains	core/thread/mle_types.hpp	/^    bool Contains(uint8_t aRouterId) const { return (mRouterIdSet[aRouterId \/ 8] & MaskFor(aRou/;"	f	class:ot::Mle::RouterIdSet	typeref:typename:bool
Contains	core/thread/router_table.hpp	/^    bool Contains(const Neighbor &aNeighbor) const$/;"	f	class:ot::RouterTable	typeref:typename:bool
Contains	lib/spinel/spinel_driver.hpp	/^        bool Contains(const Type &aEntry) const { return Find(aEntry) != nullptr; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:bool
ContainsAll	core/common/notifier.hpp	/^    bool ContainsAll(Flags aEvents) const { return (mEventFlags & aEvents) == aEvents; }$/;"	f	class:ot::Events	typeref:typename:bool
ContainsAllRequiredTlvsFor	core/meshcop/dataset.cpp	/^bool Dataset::ContainsAllRequiredTlvsFor(Type aType) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:bool
ContainsAllTlvs	core/meshcop/dataset.cpp	/^bool Dataset::ContainsAllTlvs(const Tlv::Type aTlvTypes[], uint8_t aLength) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:bool
ContainsAny	core/common/notifier.hpp	/^    bool ContainsAny(Flags aEvents) const { return (mEventFlags & aEvents) != 0; }$/;"	f	class:ot::Events	typeref:typename:bool
ContainsAnyOptions	core/net/nd6.hpp	/^        bool ContainsAnyOptions(void) const { return (mArray.GetLength() > sizeof(Header)); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:bool
ContainsAnyOptions	core/net/nd6.hpp	/^        bool ContainsAnyOptions(void) const { return (mData.GetLength() > sizeof(Header)); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:bool
ContainsBorderRouterWithRloc	core/thread/network_data.cpp	/^bool NetworkData::ContainsBorderRouterWithRloc(uint16_t aRloc16) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
ContainsChannel	core/mac/channel_mask.hpp	/^    bool ContainsChannel(uint8_t aChannel) const$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:bool
ContainsDefaultOrNonUlaRoutePrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::RxRaTracker::ContainsDefaultOrNonUlaRoutePrefix(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:bool
ContainsEntriesFrom	core/thread/network_data.cpp	/^bool NetworkData::ContainsEntriesFrom(const NetworkData &aCompare, uint16_t aRloc16) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
ContainsExternalRoute	core/thread/network_data.cpp	/^bool NetworkData::ContainsExternalRoute(const ExternalRouteConfig &aRoute) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
ContainsMatching	core/common/array.hpp	/^    template <typename Indicator> bool ContainsMatching(const Indicator &aIndicator) const$/;"	f	class:ot::Array	typeref:typename:bool
ContainsMatching	core/common/heap_array.hpp	/^    template <typename Indicator> bool ContainsMatching(const Indicator &aIndicator) const$/;"	f	class:ot::Heap::Array	typeref:typename:bool
ContainsMatching	core/common/linked_list.hpp	/^    template <typename Indicator> bool ContainsMatching(const Indicator &aIndicator) const$/;"	f	class:ot::LinkedList	typeref:typename:bool
ContainsMatchingEntry	core/thread/network_data_leader_ftd.cpp	/^bool Leader::ContainsMatchingEntry(const BorderRouterTlv *aBorderRouter, const BorderRouterEntry/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsMatchingEntry	core/thread/network_data_leader_ftd.cpp	/^bool Leader::ContainsMatchingEntry(const HasRouteTlv *aHasRoute, const HasRouteEntry &aEntry)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsMatchingEntry	core/thread/network_data_leader_ftd.cpp	/^bool Leader::ContainsMatchingEntry(const PrefixTlv *aPrefix, bool aStable, const BorderRouterEnt/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsMatchingEntry	core/thread/network_data_leader_ftd.cpp	/^bool Leader::ContainsMatchingEntry(const PrefixTlv *aPrefix, bool aStable, const HasRouteEntry &/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsMatchingServer	core/thread/network_data_leader_ftd.cpp	/^bool Leader::ContainsMatchingServer(const ServiceTlv *aService, const ServerTlv &aServer)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsNonUlaOnLinkPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::RxRaTracker::ContainsNonUlaOnLinkPrefix(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:bool
ContainsOmrPrefix	core/thread/network_data_leader.cpp	/^bool Leader::ContainsOmrPrefix(const Ip6::Prefix &aPrefix) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
ContainsOnLinkPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::RxRaTracker::ContainsOnLinkPrefix(OnLinkPrefix::UlaChecker aUlaChecker) con/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:bool
ContainsOnMeshPrefix	core/thread/network_data.cpp	/^bool NetworkData::ContainsOnMeshPrefix(const OnMeshPrefixConfig &aPrefix) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
ContainsOnMeshPrefix	core/thread/network_data_local.cpp	/^bool Local::ContainsOnMeshPrefix(const Ip6::Prefix &aPrefix) const$/;"	f	class:ot::NetworkData::Local	typeref:typename:bool
ContainsPrefix	core/net/ip6_address.cpp	/^bool Prefix::ContainsPrefix(const NetworkPrefix &aSubPrefix) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
ContainsPrefix	core/net/ip6_address.cpp	/^bool Prefix::ContainsPrefix(const Prefix &aSubPrefix) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
ContainsService	core/thread/network_data.cpp	/^bool NetworkData::ContainsService(const ServiceConfig &aService) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
ContainsSingleRadio	core/mac/mac_types.hpp	/^    bool ContainsSingleRadio(void) const { return !IsEmpty() && ((mBitMask & (mBitMask - 1)) == /;"	f	class:ot::Mac::RadioTypes	typeref:typename:bool
ContainsTlv	core/meshcop/dataset.hpp	/^    bool ContainsTlv(Tlv::Type aType) const { return (FindTlv(aType) != nullptr); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:bool
ContainsTlv	core/thread/mle.cpp	/^bool Mle::RxMessage::ContainsTlv(Tlv::Type aTlvType) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:bool
ContainsType	core/net/dns_types.cpp	/^bool NsecRecord::TypeBitMap::ContainsType(uint16_t aType) const$/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:bool
ContainsUlaOnLinkPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::RxRaTracker::ContainsUlaOnLinkPrefix(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:bool
ContextIds	core/thread/network_data_leader_ftd.cpp	/^Leader::ContextIds::ContextIds(Instance &aInstance)$/;"	f	class:ot::NetworkData::Leader::ContextIds
ContinueBenchmarkCircularSend	cli/cli_tcp.cpp	/^otError TcpExample::ContinueBenchmarkCircularSend(void)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
ContinueTlsHandshake	cli/cli_tcp.cpp	/^bool TcpExample::ContinueTlsHandshake(void)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:bool
ControlByteFor	core/thread/mle_tlvs.hpp	/^    static uint8_t ControlByteFor(uint8_t aContextId) { return kCompressed | (aContextId & kCont/;"	f	class:ot::Mle::AddressRegistrationTlv	typeref:typename:uint8_t
ConvertBeaconToActiveScanResult	core/mac/mac.cpp	/^Error Mac::ConvertBeaconToActiveScanResult(const RxFrame *aBeaconFrame, ActiveScanResult &aResul/;"	f	class:ot::Mac::Mac	typeref:typename:Error
ConvertLogLevel	ncp/ncp_base.cpp	/^uint8_t NcpBase::ConvertLogLevel(otLogLevel aLogLevel)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:uint8_t
ConvertLogRegion	ncp/ncp_base.cpp	/^unsigned int NcpBase::ConvertLogRegion(otLogRegion aLogRegion)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:unsigned int
ConvertTo	core/meshcop/dataset.cpp	/^void Dataset::ConvertTo(Info &aDatasetInfo) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
ConvertTo	core/meshcop/dataset.cpp	/^void Dataset::ConvertTo(Tlvs &aTlvs) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
ConvertTo	core/meshcop/timestamp.cpp	/^void Timestamp::ConvertTo(otTimestamp &aTimestamp) const$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
ConvertTo	core/net/mdns.cpp	/^void Core::BrowseCache::PtrEntry::ConvertTo(BrowseResult &aResult, const BrowseCache &aBrowseCac/;"	f	class:ot::Dns::Multicast::Core::BrowseCache::PtrEntry	typeref:typename:void
ConvertTo	core/net/mdns.cpp	/^void Core::SrvCache::ConvertTo(SrvResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
ConvertTo	core/net/mdns.cpp	/^void Core::TxtCache::ConvertTo(TxtResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
ConvertToCryptoKey	core/mac/mac_types.cpp	/^void KeyMaterial::ConvertToCryptoKey(Crypto::Key &aCryptoKey) const$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
ConvertToExtAddress	core/net/ip6_address.cpp	/^void InterfaceIdentifier::ConvertToExtAddress(Mac::ExtAddress &aExtAddress) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
ConvertToLowercase	core/common/string.hpp	/^    void ConvertToLowercase(void) { StringConvertToLowercase(mBuffer); }$/;"	f	class:ot::StringWriter	typeref:typename:void
ConvertToMacAddress	core/net/ip6_address.cpp	/^void InterfaceIdentifier::ConvertToMacAddress(Mac::Address &aMacAddress) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
ConvertToMask	core/thread/link_metrics_types.cpp	/^uint8_t SeriesFlags::ConvertToMask(void) const$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:uint8_t
ConvertToTlvFlags	core/thread/network_data_types.cpp	/^uint16_t OnMeshPrefixConfig::ConvertToTlvFlags(void) const$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:uint16_t
ConvertToTlvFlags	core/thread/network_data_types.cpp	/^uint8_t ExternalRouteConfig::ConvertToTlvFlags(void) const$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:uint8_t
ConvertToTypeIds	core/thread/link_metrics_types.cpp	/^uint8_t Metrics::ConvertToTypeIds(uint8_t aTypeIds[]) const$/;"	f	class:ot::LinkMetrics::Metrics	typeref:typename:uint8_t
ConvertToUppercase	core/common/string.hpp	/^    void ConvertToUppercase(void) { StringConvertToUppercase(mBuffer); }$/;"	f	class:ot::StringWriter	typeref:typename:void
CoprocessorHasCap	lib/spinel/spinel_driver.hpp	/^    bool CoprocessorHasCap(unsigned int aCapability) { return mCoprocessorCaps.Contains(aCapabil/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:bool
CopyAddress	core/mac/mac_types.cpp	/^void ExtAddress::CopyAddress(uint8_t *aDst, const uint8_t *aSrc, CopyByteOrder aByteOrder)$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
CopyAndEnqueueMessage	core/coap/coap.cpp	/^Message *CoapBase::CopyAndEnqueueMessage(const Message &aMessage, uint16_t aCopyLength, const Me/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
CopyAndEnqueueMessage	core/net/sntp_client.cpp	/^Message *Client::CopyAndEnqueueMessage(const Message &aMessage, const QueryMetadata &aQueryMetad/;"	f	class:ot::Sntp::Client	typeref:typename:Message *
CopyArgsToStringArray	core/utils/parse_cmdline.cpp	/^void Arg::CopyArgsToStringArray(Arg aArgs[], char *aStrings[])$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:void
CopyBits	core/net/ip6_address.cpp	/^void Address::CopyBits(uint8_t *aDst, const uint8_t *aSrc, uint8_t aNumBits)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
CopyBits	posix/platform/netif.cpp	/^static void CopyBits(uint8_t *aDst, const uint8_t *aSrc, uint8_t aNumBits)$/;"	f	typeref:typename:void	file:
CopyBytesFrom	core/common/data.hpp	/^    Error CopyBytesFrom(const Data<kDataLengthType> &aData)$/;"	f	class:ot::MutableData	typeref:typename:Error
CopyBytesFrom	core/common/data.hpp	/^    Error CopyBytesFrom(const uint8_t *aBuffer, LengthType aLength)$/;"	f	class:ot::MutableData	typeref:typename:Error
CopyBytesTo	core/common/data.hpp	/^    void CopyBytesTo(void *aBuffer) const { memcpy(aBuffer, mBuffer, mLength); }$/;"	f	class:ot::Data	typeref:typename:void
CopyBytesTo	core/common/heap_data.hpp	/^    Error CopyBytesTo(Message &aMessage) const { return aMessage.AppendBytes(mData.GetBytes(), m/;"	f	class:ot::Heap::Data	typeref:typename:Error
CopyBytesTo	core/common/heap_data.hpp	/^    void CopyBytesTo(uint8_t *aBuffer) const { return mData.CopyBytesTo(aBuffer); }$/;"	f	class:ot::Heap::Data	typeref:typename:void
CopyFrom	core/mac/mac_frame.cpp	/^void TxFrame::CopyFrom(const TxFrame &aFromFrame)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
CopyInfoTo	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefix::CopyInfoTo(PrefixTableEntry &aEntry, TimeMilli aNow) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:void
CopyInfoTo	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePrefix::CopyInfoTo(PrefixTableEntry &aEntry, TimeMilli aNow) const$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:void
CopyInfoTo	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::Router::CopyInfoTo(RouterEntry &aEntry, TimeMilli aNow) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Router	typeref:typename:void
CopyInfoTo	core/net/mdns.cpp	/^Error Core::HostEntry::CopyInfoTo(Host &aHost, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:Error
CopyInfoTo	core/net/mdns.cpp	/^Error Core::HostEntry::CopyInfoTo(Key &aKey, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:Error
CopyInfoTo	core/net/mdns.cpp	/^Error Core::ServiceEntry::CopyInfoTo(Key &aKey, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:Error
CopyInfoTo	core/net/mdns.cpp	/^Error Core::ServiceEntry::CopyInfoTo(Service &aService, EntryState &aState, EntryIterator &aIter/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:Error
CopyIp6AddressTo	posix/platform/ip6_utils.hpp	/^inline void CopyIp6AddressTo(const otIp6Address &aAddress, void *aBuffer)$/;"	f	namespace:ot::Posix::Ip6Utils	typeref:typename:void
CopyKeyInfoTo	core/net/mdns.cpp	/^Error Core::Entry::CopyKeyInfoTo(Key &aKey, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:Error
CopyNameAndRemoveDomain	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::CopyNameAndRemoveDomain(DnsName &aName, const char *aFullName)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
CopyNetworkData	core/thread/network_data.cpp	/^Error NetworkData::CopyNetworkData(Type aType, MutableNetworkData &aNetworkData) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
CopyNetworkData	core/thread/network_data.cpp	/^Error NetworkData::CopyNetworkData(Type aType, uint8_t *aData, uint8_t &aDataLength) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
CopyPrefixTo	core/thread/network_data_tlvs.hpp	/^    void CopyPrefixTo(Ip6::Prefix &aPrefix) const { aPrefix.Set(GetPrefix(), GetPrefixLength());/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:void
CopyString	cli/cli_srp_client.cpp	/^static otError CopyString(char *aDest, uint16_t aDestSize, const char *aSource)$/;"	f	namespace:ot::Cli	typeref:typename:otError	file:
CopyTo	core/mac/mac_types.hpp	/^    void CopyTo(uint8_t *aBuffer, CopyByteOrder aByteOrder = kNormalByteOrder) const$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
CopyTo	core/meshcop/meshcop.cpp	/^void JoinerDiscerner::CopyTo(Mac::ExtAddress &aExtAddress) const$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:void
CopyTo	core/meshcop/meshcop_tlvs.cpp	/^void SteeringDataTlv::CopyTo(SteeringData &aSteeringData) const$/;"	f	class:ot::MeshCoP::SteeringDataTlv	typeref:typename:void
CopyTo	core/meshcop/network_name.cpp	/^uint8_t NameData::CopyTo(char *aBuffer, uint8_t aMaxSize) const$/;"	f	class:ot::MeshCoP::NameData	typeref:typename:uint8_t
CopyTo	core/net/nat64_translator.cpp	/^void Translator::AddressMapping::CopyTo(otNat64AddressMapping &aMapping, TimeMilli aNow) const$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:void
CopyTo	core/thread/mle.cpp	/^void Mle::ParentCandidate::CopyTo(Parent &aParent) const$/;"	f	class:ot::Mle::Mle::ParentCandidate	typeref:typename:void
CopyToJoinerInfo	core/meshcop/commissioner.cpp	/^void Commissioner::Joiner::CopyToJoinerInfo(otJoinerInfo &aJoiner) const$/;"	f	class:ot::MeshCoP::Commissioner::Joiner	typeref:typename:void
Core	core/net/mdns.cpp	/^Core::Core(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core
CostForLinkQuality	core/thread/link_quality.cpp	/^uint8_t CostForLinkQuality(LinkQuality aLinkQuality)$/;"	f	namespace:ot	typeref:typename:uint8_t
Count	core/backbone_router/multicast_listeners_table.hpp	/^    uint16_t Count(void) const { return mNumValidListeners; }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:uint16_t
Count4To6	core/net/nat64_translator.hpp	/^        void Count4To6(Reason aReason) { mCount4To6[aReason]++; }$/;"	f	class:ot::Nat64::Translator::ErrorCounters	typeref:typename:void
Count4To6Packet	core/net/nat64_translator.cpp	/^void Translator::ProtocolCounters::Count4To6Packet(uint8_t aProtocol, uint64_t aPacketSize)$/;"	f	class:ot::Nat64::Translator::ProtocolCounters	typeref:typename:void
Count6To4	core/net/nat64_translator.hpp	/^        void Count6To4(Reason aReason) { mCount6To4[aReason]++; }$/;"	f	class:ot::Nat64::Translator::ErrorCounters	typeref:typename:void
Count6To4Packet	core/net/nat64_translator.cpp	/^void Translator::ProtocolCounters::Count6To4Packet(uint8_t aProtocol, uint64_t aPacketSize)$/;"	f	class:ot::Nat64::Translator::ProtocolCounters	typeref:typename:void
CountAddresses	posix/platform/infra_if.cpp	/^void InfraNetif::CountAddresses(otSysInfraNetIfAddressCounters &aAddressCounters) const$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
CountAnycastEntries	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::CountAnycastEntries(uint8_t &aNumEntries, uint8_t &aNumPrefe/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
CountBitsInMask	core/common/num_utils.hpp	/^template <typename UintType> uint8_t CountBitsInMask(UintType aMask)$/;"	f	namespace:ot	typeref:typename:uint8_t
CountBorderRouters	core/thread/network_data.cpp	/^uint8_t NetworkData::CountBorderRouters(RoleFilter aRoleFilter) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:uint8_t
CountExternalRouteEntries	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::CountExternalRouteEntries(uint8_t &aNumEntries, uint8_t &aNumPrefer/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
CountOnMeshPrefixEntries	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::CountOnMeshPrefixEntries(uint8_t &aNumEntries, uint8_t &aNumPreferr/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
CountServerDataUnicastEntries	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::CountServerDataUnicastEntries(uint8_t &aNumEntries,$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
CountServiceDataUnicastEntries	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::CountServiceDataUnicastEntries(uint8_t &aNumEntries,$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Crc16	core/common/crc16.cpp	/^Crc16::Crc16(Polynomial aPolynomial)$/;"	f	class:ot::Crc16
CreateIcmp6Socket	posix/platform/infra_if.cpp	/^int InfraNetif::CreateIcmp6Socket(const char *aInfraIfName)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:int
CreateNetLinkSocket	posix/platform/infra_if.cpp	/^int CreateNetLinkSocket(void)$/;"	f	namespace:ot::Posix	typeref:typename:int
CreateNewNetwork	core/meshcop/dataset_manager.hpp	/^    Error CreateNewNetwork(Dataset::Info &aDatasetInfo) { return aDatasetInfo.GenerateRandom(Get/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:Error
CreateSpinelInterface	posix/platform/spinel_manager.cpp	/^Spinel::SpinelInterface *SpinelManager::CreateSpinelInterface(const char *aInterfaceName)$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:Spinel::SpinelInterface *
CryptoFillBuffer	core/common/random.hpp	/^    static Error CryptoFillBuffer(uint8_t *aBuffer, uint16_t aSize) { return otPlatCryptoRandomG/;"	f	class:ot::Random::Manager	typeref:typename:Error
CryptoSecurePrng	core/crypto/mbedtls.cpp	/^int MbedTls::CryptoSecurePrng(void *, unsigned char *aBuffer, size_t aSize)$/;"	f	class:ot::Crypto::MbedTls	typeref:typename:int
CslPeriodToUsec	core/mac/mac.cpp	/^uint32_t Mac::CslPeriodToUsec(uint16_t aPeriodInTenSymbols)$/;"	f	class:ot::Mac::Mac	typeref:typename:uint32_t
CslSample	core/mac/mac_links.hpp	/^    void CslSample(void)$/;"	f	class:ot::Mac::Links	typeref:typename:void
CslSample	core/mac/sub_mac.cpp	/^void SubMac::CslSample(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
CslTxScheduler	core/thread/csl_tx_scheduler.cpp	/^CslTxScheduler::CslTxScheduler(Instance &aInstance)$/;"	f	class:ot::CslTxScheduler
Data	core/common/heap_data.hpp	/^    Data(Data &&aData) { TakeFrom(aData); }$/;"	f	class:ot::Heap::Data
Data	core/common/heap_data.hpp	/^    Data(void) { mData.Init(nullptr, 0); }$/;"	f	class:ot::Heap::Data
DataPollHandler	core/mac/data_poll_handler.cpp	/^DataPollHandler::DataPollHandler(Instance &aInstance)$/;"	f	class:ot::DataPollHandler
DataPollSender	core/mac/data_poll_sender.cpp	/^DataPollSender::DataPollSender(Instance &aInstance)$/;"	f	class:ot::DataPollSender
Dataset	cli/cli_dataset.hpp	/^    Dataset(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Dataset
Dataset	core/meshcop/dataset.cpp	/^Dataset::Dataset(void)$/;"	f	class:ot::MeshCoP::Dataset
DatasetManager	core/meshcop/dataset_manager.cpp	/^DatasetManager::DatasetManager(Instance &aInstance, Type aType, Timer::Handler aTimerHandler)$/;"	f	class:ot::MeshCoP::DatasetManager
DatasetUpdater	core/meshcop/dataset_updater.cpp	/^DatasetUpdater::DatasetUpdater(Instance &aInstance)$/;"	f	class:ot::MeshCoP::DatasetUpdater
DecideToAdvertise	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::DecideToAdvertise(Entry &aEntry, bool aUnregisterEntry, bool aUnregisterK/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
Decode	lib/hdlc/hdlc.cpp	/^void Decoder::Decode(const uint8_t *aData, uint16_t aLength)$/;"	f	class:ot::Hdlc::Decoder	typeref:typename:void
Decode	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::Decode(const uint8_t *aBuffer, uint16_t aLength) { mHdlcDecoder.Decode(aBuff/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
DecodeChannelMask	ncp/ncp_base.cpp	/^otError NcpBase::DecodeChannelMask(uint32_t &aChannelMask)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
DecodeLinkMetrics	ncp/ncp_base.cpp	/^otError NcpBase::DecodeLinkMetrics(otLinkMetrics *aMetrics, bool aAllowPduCount)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
DecodeOperationalDataset	ncp/ncp_base_mtd.cpp	/^otError NcpBase::DecodeOperationalDataset(otOperationalDataset &aDataset,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
DecodeStreamRawTxRequest	ncp/ncp_base_radio.cpp	/^otError NcpBase::DecodeStreamRawTxRequest(otRadioFrame &aFrame)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
Decoder	lib/hdlc/hdlc.cpp	/^Decoder::Decoder(void)$/;"	f	class:ot::Hdlc::Decoder
Decoder	lib/spinel/spinel_decoder.cpp	/^Decoder::Decoder(void)$/;"	f	class:ot::Spinel::Decoder
Decompress	core/thread/lowpan.cpp	/^Error Lowpan::Decompress(Message              &aMessage,$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DecompressBaseHeader	core/thread/lowpan.cpp	/^Error Lowpan::DecompressBaseHeader(Ip6::Header          &aIp6Header,$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DecompressEcn	core/thread/lowpan.cpp	/^Ip6::Ecn Lowpan::DecompressEcn(const Message &aMessage, uint16_t aOffset) const$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Ip6::Ecn
DecompressExtensionHeader	core/thread/lowpan.cpp	/^Error Lowpan::DecompressExtensionHeader(Message &aMessage, FrameData &aFrameData)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DecompressFrom	core/net/ip6.cpp	/^Error Headers::DecompressFrom(const FrameData &aFrameData, const Mac::Addresses &aMacAddrs, Inst/;"	f	class:ot::Ip6::Headers	typeref:typename:Error
DecompressFrom	core/net/ip6.cpp	/^Error Headers::DecompressFrom(const Message &aMessage, uint16_t aOffset, const Mac::Addresses &a/;"	f	class:ot::Ip6::Headers	typeref:typename:Error
DecompressUdpHeader	core/thread/lowpan.cpp	/^Error Lowpan::DecompressUdpHeader(Ip6::Udp::Header &aUdpHeader, FrameData &aFrameData)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DecompressUdpHeader	core/thread/lowpan.cpp	/^Error Lowpan::DecompressUdpHeader(Message &aMessage, FrameData &aFrameData, uint16_t aDatagramLe/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DecreaseLength	core/thread/network_data_tlvs.hpp	/^    void DecreaseLength(uint8_t aDecrement) { mLength -= aDecrement; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
DecrementHopsLeft	core/thread/lowpan.cpp	/^void MeshHeader::DecrementHopsLeft(void)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:void
DecrementIndirectMessageCount	core/thread/indirect_sender.hpp	/^        void DecrementIndirectMessageCount(void) { mQueuedMessageCount--; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
DecrementLifetime	core/thread/mesh_forwarder.hpp	/^            void              DecrementLifetime(void) { mLifetime--; }$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:void
DecrementMessageCount	core/thread/src_match_controller.cpp	/^void SourceMatchController::DecrementMessageCount(Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
DecrementNumEntries	core/net/mdns.hpp	/^        void     DecrementNumEntries(void) { mNumEntries--; }$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
DecrementPendingTrelAckCount	core/radio/trel_link.hpp	/^    void DecrementPendingTrelAckCount(void)$/;"	f	class:ot::Trel::NeighborInfo	typeref:typename:void
DecrementRetainCount	core/common/retain_ptr.hpp	/^    uint16_t DecrementRetainCount(void) { return --mRetainCount; }$/;"	f	class:ot::RetainCountable	typeref:typename:uint16_t
DecrementRetainCount	core/common/retain_ptr.hpp	/^    void DecrementRetainCount(void)$/;"	f	class:ot::RetainPtr	typeref:typename:void
DecrementTimeout	core/thread/address_resolver.hpp	/^        void     DecrementTimeout(void) { mInfo.mOther.mTimeout--; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
DefaultHandler	cli/cli_coap_secure.cpp	/^void CoapSecure::DefaultHandler(otMessage *aMessage, const otMessageInfo *aMessageInfo)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
DefaultHandler	cli/cli_coap_secure.cpp	/^void CoapSecure::DefaultHandler(void *aContext, otMessage *aMessage, const otMessageInfo *aMessa/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
DefaultRouteLookup	core/thread/network_data_leader.cpp	/^Error Leader::DefaultRouteLookup(const PrefixTlv &aPrefix, uint16_t &aRloc16) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
Deinit	core/border_router/infra_if.cpp	/^void InfraIf::Deinit(void)$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:void
Deinit	core/common/settings.cpp	/^void Settings::Deinit(void) { Get<SettingsDriver>().Deinit(); }$/;"	f	class:ot::Settings	typeref:typename:void
Deinit	core/common/settings_driver.hpp	/^    void Deinit(void)$/;"	f	class:ot::SettingsDriver	typeref:typename:void
Deinit	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::Deinit(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
Deinit	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::Deinit(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
Deinit	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::Deinit(void)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
Deinit	posix/platform/infra_if.cpp	/^void InfraNetif::Deinit(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
Deinit	posix/platform/mdns_socket.cpp	/^void MdnsSocket::Deinit(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
Deinit	posix/platform/spi_interface.cpp	/^void SpiInterface::Deinit(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
Deinit	posix/platform/spinel_manager.cpp	/^void SpinelManager::Deinit(void)$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:void
Deinit	posix/platform/udp.cpp	/^void Udp::Deinit(void)$/;"	f	class:ot::Posix::Udp	typeref:typename:void
Deinit	posix/platform/vendor_interface_example.cpp	/^void VendorInterface::Deinit(void)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:void
Deinitialize	core/net/tcp6.cpp	/^Error Tcp::Endpoint::Deinitialize(void)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
Deinitialize	core/net/tcp6.cpp	/^Error Tcp::Listener::Deinitialize(void)$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Error
Deinitialize	core/net/tcp6_ext.cpp	/^Error TcpCircularSendBuffer::Deinitialize(void) { return (mCapacityUsed != 0) ? kErrorBusy : kEr/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:Error
DelaySendingJoinerEntrust	core/meshcop/joiner_router.cpp	/^void JoinerRouter::DelaySendingJoinerEntrust(const Ip6::MessageInfo &aMessageInfo, const Kek &aK/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
Delete	core/common/owned_ptr.hpp	/^    void Delete(void)$/;"	f	class:ot::OwnedPtr	typeref:typename:void
Delete	core/common/settings.cpp	/^Error Settings::ChildInfoIterator::Delete(void)$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:Error
Delete	core/common/settings.hpp	/^    template <typename EntryType> Error Delete(void) { return DeleteEntry(EntryType::kKey); }$/;"	f	class:ot::Settings	typeref:typename:Error
Delete	core/common/settings_driver.hpp	/^    Error Delete(uint16_t aKey, int aIndex = -1)$/;"	f	class:ot::SettingsDriver	typeref:typename:Error
Delete	core/utils/flash.cpp	/^Error Flash::Delete(uint16_t aKey, int aIndex)$/;"	f	class:ot::Flash	typeref:typename:Error
DeleteAllBrOnLinkPrefixes	core/common/settings.cpp	/^Error Settings::DeleteAllBrOnLinkPrefixes(void) { return Get<SettingsDriver>().Delete(kKeyBrOnLi/;"	f	class:ot::Settings	typeref:typename:Error
DeleteAllChildInfo	core/common/settings.cpp	/^Error Settings::DeleteAllChildInfo(void)$/;"	f	class:ot::Settings	typeref:typename:Error
DeleteEntry	core/common/settings.cpp	/^Error Settings::DeleteEntry(Key aKey)$/;"	f	class:ot::Settings	typeref:typename:Error
DeleteIp4Route	posix/platform/netif.cpp	/^static otError DeleteIp4Route(const otIp4Cidr &aIp4Cidr)$/;"	f	typeref:typename:otError	file:
DeleteOperationalDataset	core/common/settings.cpp	/^void Settings::DeleteOperationalDataset(MeshCoP::Dataset::Type aType)$/;"	f	class:ot::Settings	typeref:typename:void
DeleteRoute	posix/platform/netif.cpp	/^static otError DeleteRoute(const otIp6Prefix &aPrefix)$/;"	f	typeref:typename:otError	file:
DeleteRoute	posix/platform/netif.cpp	/^template <size_t N> otError DeleteRoute(const uint8_t (&aAddress)[N], uint8_t aPrefixLen)$/;"	f	typeref:typename:otError
Deprecate	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::Deprecate(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
DeprecateAddress	core/utils/slaac_address.cpp	/^void Slaac::DeprecateAddress(SlaacAddress &aAddress)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
DeprecateOldPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::DeprecateOldPrefix(const Ip6::Prefix &aPrefix, TimeMil/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
Dequeue	core/coap/coap_message.hpp	/^    void Dequeue(Message &aMessage) { ot::MessageQueue::Dequeue(aMessage); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:void
Dequeue	core/common/message.cpp	/^void MessageQueue::Dequeue(Message &aMessage)$/;"	f	class:ot::MessageQueue	typeref:typename:void
Dequeue	core/common/message.cpp	/^void PriorityQueue::Dequeue(Message &aMessage)$/;"	f	class:ot::PriorityQueue	typeref:typename:void
DequeueAllResponses	core/coap/coap.cpp	/^void ResponsesQueue::DequeueAllResponses(void) { mQueue.DequeueAndFreeAll(); }$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
DequeueAndFree	core/coap/coap_message.hpp	/^    void DequeueAndFree(Message &aMessage) { ot::MessageQueue::DequeueAndFree(aMessage); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:void
DequeueAndFree	core/common/message.cpp	/^void MessageQueue::DequeueAndFree(Message &aMessage)$/;"	f	class:ot::MessageQueue	typeref:typename:void
DequeueAndFree	core/common/message.cpp	/^void PriorityQueue::DequeueAndFree(Message &aMessage)$/;"	f	class:ot::PriorityQueue	typeref:typename:void
DequeueAndFreeAll	core/common/message.cpp	/^void MessageQueue::DequeueAndFreeAll(void)$/;"	f	class:ot::MessageQueue	typeref:typename:void
DequeueAndFreeAll	core/common/message.cpp	/^void PriorityQueue::DequeueAndFreeAll(void)$/;"	f	class:ot::PriorityQueue	typeref:typename:void
DequeueMessage	core/coap/coap.cpp	/^void CoapBase::DequeueMessage(Message &aMessage)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
DequeueMessage	core/net/sntp_client.cpp	/^void Client::DequeueMessage(Message &aMessage)$/;"	f	class:ot::Sntp::Client	typeref:typename:void
DequeueResponse	core/coap/coap.cpp	/^void ResponsesQueue::DequeueResponse(Message &aMessage) { mQueue.DequeueAndFree(aMessage); }$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
DestroyKey	core/crypto/storage.hpp	/^inline void DestroyKey(KeyRef aKeyRef)$/;"	f	namespace:ot::Crypto::Storage	typeref:typename:void
DestroyKey	core/mac/mac_types.cpp	/^void KeyMaterial::DestroyKey(void)$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
DestroyPersistentKeys	core/crypto/storage.cpp	/^void Storage::DestroyPersistentKeys(void)$/;"	f	class:ot::Crypto::Storage	typeref:typename:void
DestroyPersistentKeys	core/thread/key_manager.cpp	/^void KeyManager::DestroyPersistentKeys(void) { Crypto::Storage::DestroyPersistentKeys(); }$/;"	f	class:ot::KeyManager	typeref:typename:void
DestroySecurelyStoredKeys	core/meshcop/dataset_manager.cpp	/^void DatasetManager::DestroySecurelyStoredKeys(void) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
DestroyTemporaryKeys	core/thread/key_manager.cpp	/^void KeyManager::DestroyTemporaryKeys(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
DetachGracefully	core/thread/mle.cpp	/^Error Mle::DetachGracefully(otDetachGracefullyCallback aCallback, void *aContext)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
DetermineAdvertiseIntervalMax	core/thread/mle_router.cpp	/^uint32_t MleRouter::DetermineAdvertiseIntervalMax(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint32_t
DetermineAndSetFlags	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::DetermineAndSetFlags(RouterAdvert::Header &aHeader) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
DetermineFavoredPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::DetermineFavoredPrefix(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
DetermineLeaseInterval	core/net/srp_client.cpp	/^uint32_t Client::DetermineLeaseInterval(uint32_t aInterval, uint32_t aDefaultInterval) const$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
DetermineMaxRetransmissions	core/net/ip6_mpl.cpp	/^uint8_t Mpl::DetermineMaxRetransmissions(void) const$/;"	f	class:ot::Ip6::Mpl	typeref:typename:uint8_t
DetermineNextFireTime	core/net/mdns.cpp	/^void Core::CacheEntry::DetermineNextFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
DetermineNextFireTime	core/net/mdns.cpp	/^void Core::Entry::DetermineNextFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
DetermineNextFireTime	core/net/mdns.cpp	/^void Core::HostEntry::DetermineNextFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
DetermineNextFireTime	core/net/mdns.cpp	/^void Core::ServiceEntry::DetermineNextFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
DetermineParentRequestType	core/thread/mle.cpp	/^Error Mle::DetermineParentRequestType(ParentRequestType &aType) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
DeterminePrefixFor	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::DeterminePrefixFor(State aState, Ip6::Prefix &aPrefix) cons/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
DetermineRecordFireTime	core/net/mdns.cpp	/^void Core::AddrCache::DetermineRecordFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
DetermineRecordFireTime	core/net/mdns.cpp	/^void Core::BrowseCache::DetermineRecordFireTime(void)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
DetermineRecordFireTime	core/net/mdns.cpp	/^void Core::ServiceCache::DetermineRecordFireTime(void) { mRecord.UpdateQueryAndFireTimeOn(*this)/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:void
DetermineTtl	core/net/mdns.cpp	/^uint32_t Core::DetermineTtl(uint32_t aTtl, uint32_t aDefaultTtl)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:uint32_t
DetermineTtl	core/net/srp_client.cpp	/^uint32_t Client::DetermineTtl(void) const$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
DeviceMode	core/thread/mle_types.hpp	/^    explicit DeviceMode(ModeConfig aModeConfig) { Set(aModeConfig); }$/;"	f	class:ot::Mle::DeviceMode
DeviceMode	core/thread/mle_types.hpp	/^    explicit DeviceMode(uint8_t aMode) { Set(aMode); }$/;"	f	class:ot::Mle::DeviceMode
DeviceProperties	core/thread/mle_types.cpp	/^DeviceProperties::DeviceProperties(void)$/;"	f	class:ot::Mle::DeviceProperties
Diags	core/diags/factory_diags.cpp	/^Diags::Diags(Instance &aInstance)$/;"	f	class:ot::FactoryDiags::Diags
DidChange	core/thread/network_data_leader.hpp	/^        bool DidChange(void) const { return mChanged; }$/;"	f	class:ot::NetworkData::Leader::ChangedFlags	typeref:typename:bool
DidStableChange	core/thread/network_data_leader.hpp	/^        bool DidStableChange(void) const { return mStableChanged; }$/;"	f	class:ot::NetworkData::Leader::ChangedFlags	typeref:typename:bool
Disable	core/mac/mac_links.hpp	/^    void Disable(void)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Disable	core/mac/sub_mac.cpp	/^Error SubMac::Disable(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
Disable	core/net/srp_server.cpp	/^void Server::Disable(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
Disable	core/radio/radio.hpp	/^inline Error Radio::Disable(void) { return kErrorInvalidState; }$/;"	f	class:ot::Radio	typeref:typename:Error
Disable	core/radio/radio.hpp	/^inline Error Radio::Disable(void)$/;"	f	class:ot::Radio	typeref:typename:Error
Disable	core/radio/trel_interface.cpp	/^void Interface::Disable(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
Disable	core/radio/trel_link.cpp	/^void Link::Disable(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
Disable	core/thread/mle.cpp	/^Error Mle::Disable(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
Disable	core/utils/slaac_address.cpp	/^void Slaac::Disable(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
Disable	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Disable(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Disable	posix/platform/mdns_socket.cpp	/^void MdnsSocket::Disable(uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
Disable	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Disable(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
DisableAutoStartMode	core/net/srp_client.hpp	/^    void DisableAutoStartMode(void) { mAutoStart.SetState(AutoStart::kDisabled); }$/;"	f	class:ot::Srp::Client	typeref:typename:void
DiscardFrame	lib/spinel/multi_frame_buffer.hpp	/^    void DiscardFrame(void)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:void
Disconnect	core/coap/coap_secure.hpp	/^    void Disconnect(void) { mDtls.Disconnect(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
Disconnect	core/meshcop/secure_transport.cpp	/^void SecureTransport::Disconnect(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
Disconnect	core/net/dns_dso.cpp	/^void Dso::Connection::Disconnect(DisconnectMode aMode, DisconnectReason aReason)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
Disconnect	core/radio/ble_secure.cpp	/^void BleSecure::Disconnect(void)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
DisconnectReasonToString	core/net/dns_dso.cpp	/^const char *Dso::Connection::DisconnectReasonToString(DisconnectReason aReason)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:const char *
Disconnected	core/meshcop/tcat_agent.cpp	/^void TcatAgent::Disconnected(void)$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:void
Discover	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::Discover(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
Discover	core/thread/discover_scanner.cpp	/^Error DiscoverScanner::Discover(const Mac::ChannelMask &aScanChannels,$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:Error
DiscoverCompressOffsets	core/net/mdns.cpp	/^void Core::BrowseCache::DiscoverCompressOffsets(void)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
DiscoverCompressOffsets	core/net/mdns.cpp	/^void Core::SrvCache::DiscoverCompressOffsets(void)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
DiscoverCompressOffsets	core/net/mdns.cpp	/^void Core::TxtCache::DiscoverCompressOffsets(void)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
DiscoverNat64Prefix	core/border_router/infra_if.cpp	/^Error InfraIf::DiscoverNat64Prefix(void) const$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:Error
DiscoverNat64Prefix	posix/platform/infra_if.cpp	/^otError InfraNetif::DiscoverNat64Prefix(uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:otError
DiscoverNat64PrefixDone	core/border_router/infra_if.cpp	/^void InfraIf::DiscoverNat64PrefixDone(uint32_t aIfIndex, const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:void
DiscoverNat64PrefixDone	posix/platform/infra_if.cpp	/^void InfraNetif::DiscoverNat64PrefixDone(union sigval sv)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
DiscoverOffsetsAndHost	core/net/mdns.cpp	/^void Core::ServiceEntry::DiscoverOffsetsAndHost(HostEntry *&aHostEntry)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
DiscoverScanner	core/thread/discover_scanner.cpp	/^DiscoverScanner::DiscoverScanner(Instance &aInstance)$/;"	f	class:ot::Mle::DiscoverScanner
DiscoverTopology	core/utils/mesh_diag.cpp	/^Error MeshDiag::DiscoverTopology(const DiscoverConfig &aConfig, DiscoverCallback aCallback, void/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
DispatchToNextHeader	core/thread/lowpan.cpp	/^Error Lowpan::DispatchToNextHeader(uint8_t aDispatch, uint8_t &aNextHeader)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:Error
DivideAndGetRemainder	core/common/uptime.cpp	/^static uint16_t DivideAndGetRemainder(uint32_t &aDividend, uint32_t aDivisor)$/;"	f	namespace:ot	typeref:typename:uint16_t	file:
DivideAndRoundToClosest	core/common/num_utils.hpp	/^template <typename IntType> inline IntType DivideAndRoundToClosest(IntType aDividend, IntType aD/;"	f	namespace:ot	typeref:typename:IntType
Dns	cli/cli_dns.hpp	/^    Dns(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Dns
DnsConfigServiceModeToString	cli/cli_dns.cpp	/^const char *Dns::DnsConfigServiceModeToString(otDnsServiceMode aMode) const$/;"	f	class:ot::Cli::Dns	typeref:typename:const char *
DnsSrpServiceEntry	core/thread/network_data_publisher.cpp	/^Publisher::DnsSrpServiceEntry::DnsSrpServiceEntry(Instance &aInstance) { Init(aInstance); }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry
Dnssd	core/net/dnssd.cpp	/^Dnssd::Dnssd(Instance &aInstance)$/;"	f	class:ot::Dnssd
DoSpiTransfer	posix/platform/spi_interface.cpp	/^otError SpiInterface::DoSpiTransfer(uint8_t *aSpiRxFrameBuffer, uint32_t aTransferLength)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
DoWrite	posix/client.cpp	/^bool DoWrite(int aFile, const void *aBuffer, size_t aSize)$/;"	f	namespace:__anon7e280f770111	typeref:typename:bool
DoesAllMatch	core/meshcop/meshcop.cpp	/^bool SteeringData::DoesAllMatch(uint8_t aMatch) const$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
DoesConfigMatchNetifAddr	core/utils/slaac_address.cpp	/^bool Slaac::DoesConfigMatchNetifAddr(const NetworkData::OnMeshPrefixConfig &aConfig,$/;"	f	class:ot::Utils::Slaac	typeref:typename:bool
DoesExist	posix/platform/config_file.cpp	/^bool ConfigFile::DoesExist(void) const { return (access(mFilePath, 0) == 0); }$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:bool
DoesFireBefore	core/common/timer.cpp	/^bool Timer::DoesFireBefore(const Timer &aSecondTimer, Time aNow) const$/;"	f	class:ot::Timer	typeref:typename:bool
DoesValidRecordExist	core/utils/flash.cpp	/^bool Flash::DoesValidRecordExist(uint32_t aOffset, uint16_t aKey) const$/;"	f	class:ot::Flash	typeref:typename:bool
Domain	posix/platform/power.hpp	/^    Domain(void) { m8[0] = '\\0'; }$/;"	f	class:ot::Power::Domain
DomainPrefixEventToString	core/backbone_router/bbr_leader.cpp	/^const char *Leader::DomainPrefixEventToString(DomainPrefixEvent aEvent)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:const char *
Down	core/thread/thread_netif.cpp	/^void ThreadNetif::Down(void)$/;"	f	class:ot::ThreadNetif	typeref:typename:void
DscpToPriority	core/net/ip6.cpp	/^Message::Priority Ip6::DscpToPriority(uint8_t aDscp)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Message::Priority
DscpToPriority	core/thread/tmf.cpp	/^Message::Priority Agent::DscpToPriority(uint8_t aDscp)$/;"	f	class:ot::Tmf::Agent	typeref:typename:Message::Priority
Dso	core/net/dns_dso.cpp	/^Dso::Dso(Instance &aInstance)$/;"	f	class:ot::Dns::Dso
DuaManager	core/thread/dua_manager.cpp	/^DuaManager::DuaManager(Instance &aInstance)$/;"	f	class:ot::DuaManager
Dump	core/common/log.hpp	/^    static void Dump(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	class:ot::Logger	typeref:typename:void
DumpAtLevel	core/common/log.cpp	/^void Logger::DumpAtLevel(const char *aModuleName, const char *aText, const void *aData, uint16_t/;"	f	class:ot::Logger	typeref:typename:void
DumpInModule	core/common/log.cpp	/^void Logger::DumpInModule(const char *aModuleName,$/;"	f	class:ot::Logger	typeref:typename:void
DumpMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::DumpMulticastForwardingCache(void) const$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
EcnToString	core/net/ip6.cpp	/^const char *Ip6::EcnToString(Ecn aEcn)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:const char *
EmitCoapReceive	core/utils/otns.cpp	/^void Otns::EmitCoapReceive(const Coap::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitCoapSend	core/utils/otns.cpp	/^void Otns::EmitCoapSend(const Coap::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitCoapSendFailure	core/utils/otns.cpp	/^void Otns::EmitCoapSendFailure(Error aError, Coap::Message &aMessage, const Ip6::MessageInfo &aM/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitDeviceMode	core/utils/otns.cpp	/^void Otns::EmitDeviceMode(Mle::DeviceMode aMode)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitEvents	core/common/notifier.cpp	/^void Notifier::EmitEvents(void)$/;"	f	class:ot::Notifier	typeref:typename:void
EmitExtendedAddress	core/utils/otns.cpp	/^void Otns::EmitExtendedAddress(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitNeighborChange	core/utils/otns.cpp	/^void Otns::EmitNeighborChange(NeighborTable::Event aEvent, const Neighbor &aNeighbor)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitPingReply	core/utils/otns.cpp	/^void Otns::EmitPingReply(const Ip6::Address &aPeerAddress, uint16_t aPingLength, uint32_t aTimes/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitPingRequest	core/utils/otns.cpp	/^void Otns::EmitPingRequest(const Ip6::Address &aPeerAddress,$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitShortAddress	core/utils/otns.cpp	/^void Otns::EmitShortAddress(uint16_t aShortAddress) { EmitStatus("rloc16=%d", aShortAddress); }$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitStatus	core/utils/otns.cpp	/^void Otns::EmitStatus(const char *aFmt, ...)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmitTransmit	core/utils/otns.cpp	/^void Otns::EmitTransmit(const Mac::TxFrame &aFrame)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
EmplaceSecurelyStoredKeys	core/meshcop/dataset_manager.cpp	/^void DatasetManager::EmplaceSecurelyStoredKeys(Dataset &aDataset) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
Enable	core/mac/mac_links.hpp	/^    void Enable(void)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Enable	core/mac/sub_mac.cpp	/^Error SubMac::Enable(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
Enable	core/net/srp_server.cpp	/^void Server::Enable(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
Enable	core/radio/radio.hpp	/^inline Error Radio::Enable(void) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
Enable	core/radio/radio.hpp	/^inline Error Radio::Enable(void)$/;"	f	class:ot::Radio	typeref:typename:Error
Enable	core/radio/trel_interface.cpp	/^void Interface::Enable(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
Enable	core/radio/trel_link.cpp	/^void Link::Enable(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
Enable	core/thread/mle.cpp	/^Error Mle::Enable(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
Enable	core/thread/src_match_controller.cpp	/^void SourceMatchController::Enable(bool aEnable)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
Enable	core/utils/slaac_address.cpp	/^void Slaac::Enable(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
Enable	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Enable(otInstance *aInstance)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Enable	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::Enable(uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
Enable	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Enable(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
EnableAutoAddress	core/net/srp_client.cpp	/^void Client::HostInfo::EnableAutoAddress(void)$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
EnableAutoHostAddress	core/net/srp_client.cpp	/^Error Client::EnableAutoHostAddress(void)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
EnableAutoStartMode	core/net/srp_client.cpp	/^void Client::EnableAutoStartMode(AutoStartCallback aCallback, void *aContext)$/;"	f	class:ot::Srp::Client	typeref:typename:void
EnableCsl	core/radio/radio.hpp	/^inline Error Radio::EnableCsl(uint32_t aCslPeriod, otShortAddress aShortAddr, const otExtAddress/;"	f	class:ot::Radio	typeref:typename:Error
EnableCsl	core/radio/radio.hpp	/^inline Error Radio::EnableCsl(uint32_t, otShortAddress aShortAddr, const otExtAddress *)$/;"	f	class:ot::Radio	typeref:typename:Error
EnablePropertyFilter	ncp/changed_props_set.cpp	/^otError ChangedPropsSet::EnablePropertyFilter(spinel_prop_key_t aPropKey, bool aEnable)$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:otError
EnableSrcMatch	core/radio/radio.hpp	/^inline void Radio::EnableSrcMatch(bool aEnable) { otPlatRadioEnableSrcMatch(GetInstancePtr(), aE/;"	f	class:ot::Radio	typeref:typename:void
EnableSrcMatch	core/radio/radio.hpp	/^inline void Radio::EnableSrcMatch(bool) {}$/;"	f	class:ot::Radio	typeref:typename:void
EnableSrcMatch	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::EnableSrcMatch(bool aEnable)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Encode	lib/hdlc/hdlc.cpp	/^otError Encoder::Encode(const uint8_t *aData, uint16_t aLength)$/;"	f	class:ot::Hdlc::Encoder	typeref:typename:otError
Encode	lib/hdlc/hdlc.cpp	/^otError Encoder::Encode(uint8_t aByte)$/;"	f	class:ot::Hdlc::Encoder	typeref:typename:otError
EncodeAndSend	ncp/ncp_hdlc.cpp	/^void NcpHdlc::EncodeAndSend(Tasklet &aTasklet)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
EncodeAndSend	ncp/ncp_hdlc.cpp	/^void NcpHdlc::EncodeAndSend(void)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
EncodeChannelMask	ncp/ncp_base.cpp	/^otError NcpBase::EncodeChannelMask(uint32_t aChannelMask)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeChildInfo	ncp/ncp_base_ftd.cpp	/^otError NcpBase::EncodeChildInfo(const otChildInfo &aChildInfo)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeLinkMetricsValues	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeLinkMetricsValues(const otLinkMetricsValues *aMetricsValues)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeNeighborInfo	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeNeighborInfo(const otNeighborInfo &aNeighborInfo)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeNeighborMultiRadioInfo	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeNeighborMultiRadioInfo(uint32_t aSpinelRadioLink, const otRadioLinkInfo &/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeOperationalDataset	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeOperationalDataset(const otOperationalDataset &aDataset)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeSrpClientHostInfo	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeSrpClientHostInfo(const otSrpClientHostInfo &aHostInfo)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EncodeSrpClientServices	ncp/ncp_base_mtd.cpp	/^otError NcpBase::EncodeSrpClientServices(const otSrpClientService *aServices)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
Encoder	lib/hdlc/hdlc.cpp	/^Encoder::Encoder(Spinel::FrameWritePointer &aWritePointer)$/;"	f	class:ot::Hdlc::Encoder
Encoder	lib/spinel/spinel_encoder.hpp	/^    explicit Encoder(Spinel::Buffer &aNcpBuffer)$/;"	f	class:ot::Spinel::Encoder
Encrypt	core/crypto/aes_ecb.cpp	/^void AesEcb::Encrypt(const uint8_t aInput[kBlockSize], uint8_t aOutput[kBlockSize])$/;"	f	class:ot::Crypto::AesEcb	typeref:typename:void
EndFrame	lib/hdlc/hdlc.cpp	/^otError Encoder::EndFrame(void)$/;"	f	class:ot::Hdlc::Encoder	typeref:typename:otError
EndFrame	lib/spinel/spinel_encoder.cpp	/^otError Encoder::EndFrame(void)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
EnergyScan	core/mac/link_raw.cpp	/^Error LinkRaw::EnergyScan(uint8_t aScanChannel, uint16_t aScanDuration, otLinkRawEnergyScanDone /;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
EnergyScan	core/mac/mac.cpp	/^Error Mac::EnergyScan(uint32_t aScanChannels, uint16_t aScanDuration, EnergyScanHandler aHandler/;"	f	class:ot::Mac::Mac	typeref:typename:Error
EnergyScan	core/mac/mac_links.hpp	/^    Error EnergyScan(uint8_t aScanChannel, uint16_t aScanDuration)$/;"	f	class:ot::Mac::Links	typeref:typename:Error
EnergyScan	core/mac/sub_mac.cpp	/^Error SubMac::EnergyScan(uint8_t aScanChannel, uint16_t aScanDuration)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
EnergyScan	core/radio/radio.hpp	/^inline Error Radio::EnergyScan(uint8_t aScanChannel, uint16_t aScanDuration)$/;"	f	class:ot::Radio	typeref:typename:Error
EnergyScan	core/radio/radio.hpp	/^inline Error Radio::EnergyScan(uint8_t, uint16_t) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
EnergyScan	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::EnergyScan(uint8_t aScanChannel, uint16_t aScanDuration)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
EnergyScanClient	core/meshcop/energy_scan_client.cpp	/^EnergyScanClient::EnergyScanClient(Instance &aInstance)$/;"	f	class:ot::EnergyScanClient
EnergyScanDone	core/mac/mac.cpp	/^void Mac::EnergyScanDone(int8_t aEnergyScanMaxRssi)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
EnergyScanDone	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::EnergyScanDone(int8_t aMaxRssi) { Get<LinkRaw>().InvokeEnergyScanDone(aM/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
EnergyScanDone	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::EnergyScanDone(int8_t aMaxRssi)$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
EnergyScanServer	core/thread/energy_scan_server.cpp	/^EnergyScanServer::EnergyScanServer(Instance &aInstance)$/;"	f	class:ot::EnergyScanServer
Enqueue	core/coap/coap_message.hpp	/^    void Enqueue(Message &aMessage) { Enqueue(aMessage, kQueuePositionTail); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:void
Enqueue	core/coap/coap_message.hpp	/^    void Enqueue(Message &aMessage, QueuePosition aPosition) { ot::MessageQueue::Enqueue(aMessag/;"	f	class:ot::Coap::MessageQueue	typeref:typename:void
Enqueue	core/common/message.cpp	/^void MessageQueue::Enqueue(Message &aMessage, QueuePosition aPosition)$/;"	f	class:ot::MessageQueue	typeref:typename:void
Enqueue	core/common/message.cpp	/^void PriorityQueue::Enqueue(Message &aMessage)$/;"	f	class:ot::PriorityQueue	typeref:typename:void
Enqueue	core/common/message.hpp	/^    void Enqueue(Message &aMessage) { Enqueue(aMessage, kQueuePositionTail); }$/;"	f	class:ot::MessageQueue	typeref:typename:void
EnqueueDatagram	core/net/ip6.cpp	/^void Ip6::EnqueueDatagram(Message &aMessage)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
EnqueuePacket	posix/platform/trel.cpp	/^static void EnqueuePacket(const uint8_t *aBuffer, uint16_t aLength, const otSockAddr *aDestSockA/;"	f	typeref:typename:void	file:
EnqueueResponse	core/coap/coap.cpp	/^void ResponsesQueue::EnqueueResponse(Message                &aMessage,$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
EnqueueResponse	ncp/ncp_base.cpp	/^otError NcpBase::EnqueueResponse(uint8_t aHeader, ResponseType aType, unsigned int aPropKeyOrSta/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
EntriesMatch	core/net/srp_advertising_proxy.cpp	/^template <> bool AdvertisingProxy::EntriesMatch(const Host &aFirstHost, const Host &aSecondHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
EntriesMatch	core/net/srp_advertising_proxy.cpp	/^template <> bool AdvertisingProxy::EntriesMatch(const Service &aFirstService, const Service &aSe/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
Entry	core/net/mdns.cpp	/^Core::Entry::Entry(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry
Entry	core/thread/network_data_publisher.hpp	/^        Entry(void)$/;"	f	class:ot::NetworkData::Publisher::Entry
EntryAgeToString	core/utils/history_tracker.cpp	/^void HistoryTracker::EntryAgeToString(uint32_t aEntryAge, char *aBuffer, uint16_t aSize)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
EntryIterator	core/net/mdns.cpp	/^Core::EntryIterator::EntryIterator(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::EntryIterator
EntryTimerContext	core/net/mdns.cpp	/^Core::EntryTimerContext::EntryTimerContext(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::EntryTimerContext
Erase	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::Erase(NdProxy &aNdProxy) { aNdProxy.mValid = false; }$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
Erase	posix/platform/multicast_routing.hpp	/^        void Erase(void) { mIif = kMifIndexNone; }$/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache	typeref:typename:void
ErasePersistentInfo	core/instance/instance.cpp	/^Error Instance::ErasePersistentInfo(void)$/;"	f	class:ot::Instance	typeref:typename:Error
ErrorToDnsResponseCode	core/net/srp_server.cpp	/^static Dns::UpdateHeader::Response ErrorToDnsResponseCode(Error aError)$/;"	f	namespace:ot::Srp	typeref:typename:Dns::UpdateHeader::Response	file:
ErrorToString	core/common/error.cpp	/^const char *ErrorToString(Error aError)$/;"	f	namespace:ot	typeref:typename:const char *
Evaluate	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::Evaluate(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
Evaluate	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::Evaluate(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
Evaluate	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::Evaluate(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
Evaluate	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::Evaluate(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
EvaluateRoutingCost	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::EvaluateRoutingCost(uint16_t aDest, uint8_t &aBestCost, uint16_t &aBestDest)/;"	f	class:ot::MeshForwarder	typeref:typename:void
EvaluateRoutingPolicy	core/border_router/routing_manager.cpp	/^void RoutingManager::EvaluateRoutingPolicy(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
EvaluateState	core/border_router/routing_manager.cpp	/^void RoutingManager::EvaluateState(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
EvaluateStateChange	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::EvaluateStateChange(Dhcp6PdState aOldState)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
EventToString	core/common/notifier.cpp	/^const char *Notifier::EventToString(Event aEvent) const$/;"	f	class:ot::Notifier	typeref:typename:const char *
EventToString	core/common/notifier.cpp	/^const char *Notifier::EventToString(Event) const { return ""; }$/;"	f	class:ot::Notifier	typeref:typename:const char *
Events	core/common/notifier.hpp	/^    Events(void)$/;"	f	class:ot::Events
EvictMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::EvictMessage(Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
EvictMessage	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::EvictMessage(Message::Priority aPriority)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
EvictMessage	core/thread/mesh_forwarder_mtd.cpp	/^Error MeshForwarder::EvictMessage(Message::Priority aPriority)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
ExecuteCommand	posix/platform/utils.cpp	/^otError ExecuteCommand(const char *aFormat, ...)$/;"	f	namespace:ot::Posix	typeref:typename:otError
Expand	core/crypto/hkdf_sha256.cpp	/^void HkdfSha256::Expand(const uint8_t *aInfo, uint16_t aInfoLength, uint8_t *aOutputKey, uint16_/;"	f	class:ot::Crypto::HkdfSha256	typeref:typename:void
ExpirationChecker	core/border_router/routing_manager.hpp	/^            explicit ExpirationChecker(TimeMilli aNow) { mNow = aNow; }$/;"	f	struct:ot::BorderRouter::RoutingManager::LifetimedPrefix::ExpirationChecker
ExpirationChecker	core/net/srp_advertising_proxy.hpp	/^            explicit ExpirationChecker(TimeMilli aNow)$/;"	f	struct:ot::Srp::AdvertisingProxy::AdvInfo::ExpirationChecker
Expire	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::Expire(void)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
ExpireChecker	core/net/mdns.hpp	/^        explicit ExpireChecker(TimeMilli aNow) { mNow = aNow; }$/;"	f	struct:ot::Dns::Multicast::Core::ExpireChecker
ExpireMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::ExpireMulticastForwardingCache(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
ExportKey	core/crypto/storage.hpp	/^inline Error ExportKey(KeyRef aKeyRef, uint8_t *aBuffer, size_t aBufferLen, size_t &aKeyLen)$/;"	f	namespace:ot::Crypto::Storage	typeref:typename:Error
ExtendedPanIdManager	core/meshcop/extended_panid.cpp	/^ExtendedPanIdManager::ExtendedPanIdManager(Instance &aInstance)$/;"	f	class:ot::MeshCoP::ExtendedPanIdManager
Extension	core/instance/extension_example.cpp	/^    explicit Extension(Instance &aInstance)$/;"	f	class:ot::Extension::Extension	file:
ExtensionBase	core/instance/extension.hpp	/^    explicit ExtensionBase(Instance &aInstance)$/;"	f	class:ot::Extension::ExtensionBase
ExternalRouteConfigToFlagByte	ncp/ncp_base_mtd.cpp	/^static uint8_t ExternalRouteConfigToFlagByte(const otExternalRouteConfig &aConfig)$/;"	f	namespace:ot::Ncp	typeref:typename:uint8_t	file:
ExternalRouteLookup	core/thread/network_data_leader.cpp	/^Error Leader::ExternalRouteLookup(uint8_t aDomainId, const Ip6::Address &aDestination, uint16_t /;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
Extract	core/crypto/hkdf_sha256.cpp	/^void HkdfSha256::Extract(const uint8_t *aSalt, uint16_t aSaltLength, const Key &aInputKey)$/;"	f	class:ot::Crypto::HkdfSha256	typeref:typename:void
ExtractFromIp4MappedIp6Address	core/net/ip4_types.cpp	/^Error Address::ExtractFromIp4MappedIp6Address(const Ip6::Address &aIp6Address)$/;"	f	class:ot::Ip4::Address	typeref:typename:Error
ExtractFromIp6Address	core/net/ip4_types.cpp	/^void Address::ExtractFromIp6Address(uint8_t aPrefixLength, const Ip6::Address &aIp6Address)$/;"	f	class:ot::Ip4::Address	typeref:typename:void
ExtractKek	core/thread/key_manager.hpp	/^    void ExtractKek(Kek &aKek) { mKek.ExtractKey(aKek); }$/;"	f	class:ot::KeyManager	typeref:typename:void
ExtractKey	core/crypto/storage.cpp	/^Error Key::ExtractKey(uint8_t *aKeyBuffer, uint16_t &aKeyLength) const$/;"	f	class:ot::Crypto::Key	typeref:typename:Error
ExtractKey	core/mac/mac_types.cpp	/^void KeyMaterial::ExtractKey(Key &aKey) const$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
ExtractLabels	core/net/dns_types.cpp	/^Error Name::ExtractLabels(const char *aName, const char *aSuffixName, char *aLabels, uint16_t aL/;"	f	class:ot::Dns::Name	typeref:typename:Error
ExtractLabels	core/net/dns_types.hpp	/^    static Error ExtractLabels(const char *aName, const char *aSuffixName, char (&aLabels)[kLabe/;"	f	class:ot::Dns::Name	typeref:typename:Error
ExtractServiceInstanceLabel	core/net/dnssd_server.cpp	/^Error Server::Response::ExtractServiceInstanceLabel(const char *aInstanceName, Name::LabelBuffer/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
FactoryReset	core/instance/instance.cpp	/^void Instance::FactoryReset(void)$/;"	f	class:ot::Instance	typeref:typename:void
FdFromHandle	posix/platform/udp.cpp	/^int FdFromHandle(void *aHandle) { return static_cast<int>(reinterpret_cast<long>(aHandle)); }$/;"	f	namespace:__anon4c0263950111	typeref:typename:int
FdToHandle	posix/platform/udp.cpp	/^void *FdToHandle(int aFd) { return reinterpret_cast<void *>(aFd); }$/;"	f	namespace:__anon4c0263950111	typeref:typename:void *
Fill	core/common/random.hpp	/^template <typename ObjectType> Error Fill(ObjectType &aObject)$/;"	f	namespace:ot::Random::Crypto	typeref:typename:Error
Fill	core/common/random.hpp	/^template <typename ObjectType> void Fill(ObjectType &aObject)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:void
Fill	core/mac/mac_types.hpp	/^    void Fill(uint8_t aByte) { memset(this, aByte, sizeof(*this)); }$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
FillBuffer	core/common/random.cpp	/^void FillBuffer(uint8_t *aBuffer, uint16_t aSize)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:void
FillBuffer	core/common/random.hpp	/^inline Error FillBuffer(uint8_t *aBuffer, uint16_t aSize) { return Manager::CryptoFillBuffer(aBu/;"	f	namespace:ot::Random::Crypto	typeref:typename:Error
FillConnectivityTlv	core/thread/mle_router.cpp	/^void MleRouter::FillConnectivityTlv(ConnectivityTlv &aTlv)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
FillRouteTlv	core/thread/router_table.cpp	/^void RouterTable::FillRouteTlv(Mle::RouteTlv &aRouteTlv, const Neighbor *aNeighbor) const$/;"	f	class:ot::RouterTable	typeref:typename:void
Filter	core/backbone_router/backbone_tmf.cpp	/^Error BackboneTmfAgent::Filter(const ot::Coap::Message &aMessage, const Ip6::MessageInfo &aMessa/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:Error
Filter	core/mac/mac_filter.cpp	/^Filter::Filter(void)$/;"	f	class:ot::Mac::Filter
Filter	core/net/ip6_filter.hpp	/^    explicit Filter(Instance &aInstance)$/;"	f	class:ot::Ip6::Filter
Filter	core/thread/tmf.cpp	/^Error Agent::Filter(const Message &aMessage, const Ip6::MessageInfo &aMessageInfo, void *aContex/;"	f	class:ot::Tmf::Agent	typeref:typename:Error
Finalize	core/crypto/aes_ccm.cpp	/^void AesCcm::Finalize(void *aTag)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
Finalize	core/instance/instance.cpp	/^void Instance::Finalize(void)$/;"	f	class:ot::Instance	typeref:typename:void
Finalize	core/net/dnssd_server.cpp	/^void Server::Finalize(ProxyQuery &aQuery, ResponseCode aResponseCode)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
Finalize	core/utils/mesh_diag.cpp	/^void MeshDiag::Finalize(Error aError)$/;"	f	class:ot::Utils::MeshDiag	typeref:typename:void
FinalizeCoapTransaction	core/coap/coap.cpp	/^void CoapBase::FinalizeCoapTransaction(Message                &aRequest,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
FinalizeMessageDirectTx	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::FinalizeMessageDirectTx(Message &aMessage, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
FinalizeMulticastRouterSock	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::FinalizeMulticastRouterSock(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
FinalizeQuery	core/net/dns_client.cpp	/^void Client::FinalizeQuery(Query &aQuery, Error aError)$/;"	f	class:ot::Dns::Client	typeref:typename:void
FinalizeQuery	core/net/dns_client.cpp	/^void Client::FinalizeQuery(Response &aResponse, Error aError)$/;"	f	class:ot::Dns::Client	typeref:typename:void
FinalizeSntpTransaction	core/net/sntp_client.cpp	/^void Client::FinalizeSntpTransaction(Message             &aQuery,$/;"	f	class:ot::Sntp::Client	typeref:typename:void
Find	core/common/array.hpp	/^    Type *Find(const Type &aEntry) { return AsNonConst(AsConst(this)->Find(aEntry)); }$/;"	f	class:ot::Array	typeref:typename:Type *
Find	core/common/array.hpp	/^    const Type *Find(const Type &aEntry) const$/;"	f	class:ot::Array	typeref:typename:const Type *
Find	core/common/binary_search.cpp	/^const void *BinarySearch::Find(const void *aKey,$/;"	f	class:ot::BinarySearch	typeref:typename:const void *
Find	core/common/binary_search.hpp	/^    static const Entry *Find(const Key &aKey, const Entry (&aTable)[kLength])$/;"	f	class:ot::BinarySearch	typeref:typename:const Entry *
Find	core/common/heap_array.hpp	/^    Type *Find(const Type &aEntry) { return AsNonConst(AsConst(this)->Find(aEntry)); }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
Find	core/common/heap_array.hpp	/^    const Type *Find(const Type &aEntry) const$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
Find	core/common/linked_list.hpp	/^    Error Find(const Type &aEntry, Type *&aPrevEntry)$/;"	f	class:ot::LinkedList	typeref:typename:Error
Find	core/common/linked_list.hpp	/^    Error Find(const Type &aEntry, const Type *&aPrevEntry) const$/;"	f	class:ot::LinkedList	typeref:typename:Error
Find	core/common/tlvs.hpp	/^    static Error Find(const Message &aMessage, typename SimpleTlvType::ValueType &aValue)$/;"	f	class:ot::Tlv	typeref:typename:Error
Find	core/common/tlvs.hpp	/^    static Error Find(const Message &aMessage, typename StringTlvType::StringType &aValue)$/;"	f	class:ot::Tlv	typeref:typename:Error
Find	core/common/tlvs.hpp	/^    static Error Find(const Message &aMessage, typename UintTlvType::UintValueType &aValue)$/;"	f	class:ot::Tlv	typeref:typename:Error
Find	core/common/tlvs.hpp	/^    template <typename TlvType> static Error Find(const Message &aMessage, void *aValue, uint8_t/;"	f	class:ot::Tlv	typeref:typename:Error
Find	core/common/tlvs.hpp	/^    template <typename TlvType> static TlvType *Find(void *aTlvsStart, uint16_t aTlvsLength)$/;"	f	class:ot::Tlv	typeref:typename:TlvType *
Find	core/common/tlvs.hpp	/^    template <typename TlvType> static const TlvType *Find(const void *aTlvsStart, uint16_t aTlv/;"	f	class:ot::Tlv	typeref:typename:const TlvType *
Find	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *NetworkDataTlv::Find(const NetworkDataTlv *aStart, const NetworkDataTlv *a/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const NetworkDataTlv *
Find	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *NetworkDataTlv::Find(const NetworkDataTlv *aStart,$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const NetworkDataTlv *
Find	core/thread/network_data_tlvs.hpp	/^    static NetworkDataTlv *Find(NetworkDataTlv *aStart, NetworkDataTlv *aEnd, Type aType)$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:NetworkDataTlv *
Find	core/thread/network_data_tlvs.hpp	/^    static NetworkDataTlv *Find(NetworkDataTlv *aStart, NetworkDataTlv *aEnd, Type aType, bool a/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:NetworkDataTlv *
Find	core/thread/network_data_tlvs.hpp	/^    static const TlvType *Find(const NetworkDataTlv *aStart, const NetworkDataTlv *aEnd, bool aS/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const TlvType *
Find	core/thread/network_data_tlvs.hpp	/^    template <typename TlvType> static TlvType *Find(NetworkDataTlv *aStart, NetworkDataTlv *aEn/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:TlvType *
Find	core/thread/network_data_tlvs.hpp	/^    template <typename TlvType> static const TlvType *Find(const NetworkDataTlv *aStart, const N/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const TlvType *
Find	lib/spinel/spinel_driver.hpp	/^        const Type *Find(const Type &aEntry) const$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:const Type *
FindARecord	core/net/dns_client.cpp	/^Error Client::Response::FindARecord(Section aSection, const Name &aHostName, uint16_t aIndex, AR/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
FindAvailableEntry	core/mac/mac_filter.cpp	/^Filter::FilterEntry *Filter::FindAvailableEntry(void)$/;"	f	class:ot::Mac::Filter	typeref:typename:Filter::FilterEntry *
FindBestChannels	core/utils/channel_monitor.cpp	/^Mac::ChannelMask ChannelMonitor::FindBestChannels(const Mac::ChannelMask &aMask, uint16_t &aOccu/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:Mac::ChannelMask
FindBestMatchingJoinerEntry	core/meshcop/commissioner.cpp	/^Commissioner::Joiner *Commissioner::FindBestMatchingJoinerEntry(const Mac::ExtAddress &aReceived/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Commissioner::Joiner *
FindBetterChannel	core/utils/channel_manager.cpp	/^Error ChannelManager::FindBetterChannel(uint8_t &aNewChannel, uint16_t &aOccupancy)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
FindBorderAgentRloc	core/thread/network_data_leader.cpp	/^Error Leader::FindBorderAgentRloc(uint16_t &aRloc16) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
FindByAddressIid	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::NdProxy *NdProxyTable::FindByAddressIid(const Ip6::InterfaceIdentifier &aAddressIi/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:NdProxyTable::NdProxy *
FindByMeshLocalIid	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::NdProxy *NdProxyTable::FindByMeshLocalIid(const Ip6::InterfaceIdentifier &aMeshLoc/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:NdProxyTable::NdProxy *
FindCacheEntry	core/thread/address_resolver.cpp	/^AddressResolver::CacheEntry *AddressResolver::FindCacheEntry(const Ip6::Address &aEid,$/;"	f	class:ot::AddressResolver	typeref:typename:AddressResolver::CacheEntry *
FindCallbackMatching	core/net/mdns.cpp	/^Core::ResultCallback *Core::CacheEntry::FindCallbackMatching(const ResultCallback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:Core::ResultCallback *
FindChild	core/thread/child_table.cpp	/^Child *ChildTable::FindChild(const Mac::Address &aMacAddress, Child::StateFilter aFilter)$/;"	f	class:ot::ChildTable	typeref:typename:Child *
FindChild	core/thread/child_table.cpp	/^Child *ChildTable::FindChild(const Mac::ExtAddress &aExtAddress, Child::StateFilter aFilter)$/;"	f	class:ot::ChildTable	typeref:typename:Child *
FindChild	core/thread/child_table.cpp	/^Child *ChildTable::FindChild(uint16_t aRloc16, Child::StateFilter aFilter)$/;"	f	class:ot::ChildTable	typeref:typename:Child *
FindChild	core/thread/child_table.cpp	/^const Child *ChildTable::FindChild(const Child::AddressMatcher &aMatcher) const$/;"	f	class:ot::ChildTable	typeref:typename:const Child *
FindChild	core/thread/child_table.hpp	/^    Child *FindChild(const Child::AddressMatcher &aMatcher) { return AsNonConst(AsConst(this)->F/;"	f	class:ot::ChildTable	typeref:typename:Child *
FindChildOrRouter	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindChildOrRouter(const Neighbor::AddressMatcher &aMatcher)$/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindClientConnection	core/net/dns_dso.cpp	/^Dso::Connection *Dso::FindClientConnection(const Ip6::SockAddr &aPeerSockAddr)$/;"	f	class:ot::Dns::Dso	typeref:typename:Dso::Connection *
FindCommissioningData	core/thread/network_data_leader.cpp	/^const CommissioningDataTlv *Leader::FindCommissioningData(void) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:const CommissioningDataTlv *
FindCommissioningData	core/thread/network_data_leader.hpp	/^    CommissioningDataTlv *FindCommissioningData(void) { return AsNonConst(AsConst(this)->FindCom/;"	f	class:ot::NetworkData::Leader	typeref:typename:CommissioningDataTlv *
FindCommissioningDataSubTlv	core/thread/network_data_leader.cpp	/^const MeshCoP::Tlv *Leader::FindCommissioningDataSubTlv(uint8_t aType) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:const MeshCoP::Tlv *
FindCommissioningDataSubTlv	core/thread/network_data_leader.hpp	/^    MeshCoP::Tlv         *FindCommissioningDataSubTlv(uint8_t aType)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:MeshCoP::Tlv *
FindCommissioningSessionId	core/thread/network_data_leader.cpp	/^Error Leader::FindCommissioningSessionId(uint16_t &aSessionId) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
FindContextForId	core/thread/lowpan.cpp	/^void Lowpan::FindContextForId(uint8_t aContextId, Context &aContext) const$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:void
FindContextToCompressAddress	core/thread/lowpan.cpp	/^void Lowpan::FindContextToCompressAddress(const Ip6::Address &aIp6Address, Context &aContext) co/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:void
FindDomainIdFor	core/thread/network_data.cpp	/^Error NetworkData::FindDomainIdFor(const Ip6::Prefix &aPrefix, uint8_t &aDomainId) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
FindDomainIdFor	core/utils/slaac_address.cpp	/^Error Slaac::FindDomainIdFor(const Ip6::Address &aAddress, uint8_t &aDomainId) const$/;"	f	class:ot::Utils::Slaac	typeref:typename:Error
FindDstAddrIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindDstAddrIndex(void) const { return kFcfSize + kDsnSize + (IsDstPanIdPresent() /;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindDstPanIdIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindDstPanIdIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindEntry	core/mac/mac_filter.cpp	/^const Filter::FilterEntry *Filter::FindEntry(const ExtAddress &aExtAddress) const$/;"	f	class:ot::Mac::Filter	typeref:typename:const Filter::FilterEntry *
FindEntry	core/mac/mac_filter.hpp	/^    FilterEntry *FindEntry(const ExtAddress &aExtAddress) { return AsNonConst(AsConst(this)->Fin/;"	f	class:ot::Mac::Filter	typeref:typename:FilterEntry *
FindEntry	core/thread/mesh_forwarder_ftd.cpp	/^MeshForwarder::FragmentPriorityList::Entry *MeshForwarder::FragmentPriorityList::FindEntry(uint1/;"	f	class:ot::MeshForwarder::FragmentPriorityList	typeref:typename:MeshForwarder::FragmentPriorityList::Entry *
FindFavoredOnLinkPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::FindFavoredOnLinkPrefix(Ip6::Prefix &aPrefix) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
FindFirstNonNullTail	core/common/message.cpp	/^const Message *PriorityQueue::FindFirstNonNullTail(Message::Priority aStartPriorityLevel) const$/;"	f	class:ot::PriorityQueue	typeref:typename:const Message *
FindFirstNonNullTail	core/common/message.hpp	/^    Message *FindFirstNonNullTail(Message::Priority aStartPriorityLevel)$/;"	f	class:ot::PriorityQueue	typeref:typename:Message *
FindGetPropertyHandler	ncp/ncp_base_dispatcher.cpp	/^NcpBase::PropertyHandler NcpBase::FindGetPropertyHandler(spinel_prop_key_t aKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase::PropertyHandler
FindHeaderIeIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindHeaderIeIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindHostAddress	core/net/dns_client.cpp	/^Error Client::Response::FindHostAddress(Section       aSection,$/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
FindIn	core/common/tlvs.cpp	/^Error Tlv::ParsedInfo::FindIn(const Message &aMessage, uint8_t aType)$/;"	f	class:ot::Tlv::ParsedInfo	typeref:typename:Error
FindIn	core/meshcop/meshcop_tlvs.cpp	/^Error ChannelMaskTlv::FindIn(const Message &aMessage, uint32_t &aChannelMask)$/;"	f	class:ot::MeshCoP::ChannelMaskTlv	typeref:typename:Error
FindInCommissioningData	core/thread/network_data_leader.hpp	/^    template <typename SubTlvType> SubTlvType *FindInCommissioningData(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:SubTlvType *
FindInCommissioningData	core/thread/network_data_leader.hpp	/^    template <typename SubTlvType> const SubTlvType *FindInCommissioningData(void) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:const SubTlvType *
FindInServiceAlocs	core/thread/mle.cpp	/^Mle::ServiceAloc *Mle::FindInServiceAlocs(uint16_t aAloc16)$/;"	f	class:ot::Mle::Mle	typeref:typename:Mle::ServiceAloc *
FindIndirectMessage	core/thread/indirect_sender.cpp	/^Message *IndirectSender::FindIndirectMessage(Child &aChild, bool aSupervisionTypeOnly)$/;"	f	class:ot::IndirectSender	typeref:typename:Message *
FindInsertPropertyHandler	ncp/ncp_base_dispatcher.cpp	/^NcpBase::PropertyHandler NcpBase::FindInsertPropertyHandler(spinel_prop_key_t aKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase::PropertyHandler
FindInvalid	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::NdProxy *NdProxyTable::FindInvalid(void)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:NdProxyTable::NdProxy *
FindJoinerEntry	core/meshcop/commissioner.cpp	/^Commissioner::Joiner *Commissioner::FindJoinerEntry(const JoinerDiscerner &aDiscerner)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Commissioner::Joiner *
FindJoinerEntry	core/meshcop/commissioner.cpp	/^Commissioner::Joiner *Commissioner::FindJoinerEntry(const Mac::ExtAddress *aEui64)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Commissioner::Joiner *
FindJoinerUdpPort	core/thread/network_data_leader.cpp	/^Error Leader::FindJoinerUdpPort(uint16_t &aPort) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
FindMainQuery	core/net/dns_client.cpp	/^Client::Query &Client::FindMainQuery(Query &aQuery)$/;"	f	class:ot::Dns::Client	typeref:typename:Client::Query &
FindMapping	core/net/nat64_translator.cpp	/^Translator::AddressMapping *Translator::FindMapping(const Ip4::Address &aIp4Addr)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Translator::AddressMapping *
FindMatchedResponse	core/coap/coap.cpp	/^const Message *ResponsesQueue::FindMatchedResponse(const Message &aRequest, const Ip6::MessageIn/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:const Message *
FindMatching	core/common/array.hpp	/^    template <typename Indicator> Type *FindMatching(const Indicator &aIndicator)$/;"	f	class:ot::Array	typeref:typename:Type *
FindMatching	core/common/array.hpp	/^    template <typename Indicator> const Type *FindMatching(const Indicator &aIndicator) const$/;"	f	class:ot::Array	typeref:typename:const Type *
FindMatching	core/common/heap_array.hpp	/^    template <typename Indicator> Type *FindMatching(const Indicator &aIndicator)$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
FindMatching	core/common/heap_array.hpp	/^    template <typename Indicator> const Type *FindMatching(const Indicator &aIndicator) const$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
FindMatching	core/common/linked_list.hpp	/^    Type *FindMatching(const Type *aBegin, const Type *aEnd, const Indicator &aIndicator, Type */;"	f	class:ot::LinkedList	typeref:typename:Type *
FindMatching	core/common/linked_list.hpp	/^    const Type *FindMatching(const Type      *aBegin,$/;"	f	class:ot::LinkedList	typeref:typename:const Type *
FindMatching	core/common/linked_list.hpp	/^    template <typename Indicator> Type *FindMatching(const Indicator &aIndicator)$/;"	f	class:ot::LinkedList	typeref:typename:Type *
FindMatching	core/common/linked_list.hpp	/^    template <typename Indicator> Type *FindMatching(const Indicator &aIndicator, Type *&aPrevEn/;"	f	class:ot::LinkedList	typeref:typename:Type *
FindMatching	core/common/linked_list.hpp	/^    template <typename Indicator> const Type *FindMatching(const Indicator &aIndicator) const$/;"	f	class:ot::LinkedList	typeref:typename:const Type *
FindMatching	core/common/linked_list.hpp	/^    template <typename Indicator> const Type *FindMatching(const Indicator &aIndicator, const Ty/;"	f	class:ot::LinkedList	typeref:typename:const Type *
FindMatchingPrefixEntry	core/thread/network_data_publisher.cpp	/^Publisher::PrefixEntry *Publisher::FindMatchingPrefixEntry(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Publisher::PrefixEntry *
FindMatchingPrefixEntry	core/thread/network_data_publisher.cpp	/^const Publisher::PrefixEntry *Publisher::FindMatchingPrefixEntry(const Ip6::Prefix &aPrefix) con/;"	f	class:ot::NetworkData::Publisher	typeref:typename:const Publisher::PrefixEntry *
FindNeighbor	core/thread/link_metrics.cpp	/^Error Initiator::FindNeighbor(const Ip6::Address &aDestination, Neighbor *&aNeighbor)$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
FindNeighbor	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindNeighbor(Mac::ShortAddress aShortAddress, Neighbor::StateFilter aFi/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindNeighbor	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindNeighbor(const Ip6::Address &aIp6Address, Neighbor::StateFilter aFi/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindNeighbor	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindNeighbor(const Mac::Address &aMacAddress, Neighbor::StateFilter aFi/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindNeighbor	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindNeighbor(const Mac::ExtAddress &aExtAddress, Neighbor::StateFilter /;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindNeighbor	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindNeighbor(const Neighbor::AddressMatcher &aMatcher)$/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindNeighbor	core/thread/router_table.cpp	/^Router *RouterTable::FindNeighbor(const Mac::Address &aMacAddress)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindNeighbor	core/thread/router_table.cpp	/^Router *RouterTable::FindNeighbor(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindNeighbor	core/thread/router_table.cpp	/^Router *RouterTable::FindNeighbor(uint16_t aRloc16)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindNextHopOf	core/thread/router_table.cpp	/^const Router *RouterTable::FindNextHopOf(const Router &aRouter) const { return FindRouterById(aR/;"	f	class:ot::RouterTable	typeref:typename:const Router *
FindNextHopOf	core/thread/router_table.hpp	/^    Router *FindNextHopOf(const Router &aRouter) { return AsNonConst(AsConst(this)->FindNextHopO/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindNextMatchingPrefixTlv	core/thread/network_data_leader.cpp	/^const PrefixTlv *Leader::FindNextMatchingPrefixTlv(const Ip6::Address &aAddress, const PrefixTlv/;"	f	class:ot::NetworkData::Leader	typeref:typename:const PrefixTlv *
FindNextService	core/thread/network_data.cpp	/^const ServiceTlv *NetworkData::FindNextService(const ServiceTlv  *aPrevServiceTlv,$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const ServiceTlv *
FindNextThreadService	core/thread/network_data.cpp	/^const ServiceTlv *NetworkData::FindNextThreadService(const ServiceTlv  *aPrevServiceTlv,$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const ServiceTlv *
FindOption	core/net/dhcp6_client.cpp	/^uint16_t Client::FindOption(Message &aMessage, uint16_t aOffset, uint16_t aLength, Dhcp6::Code a/;"	f	class:ot::Dhcp6::Client	typeref:typename:uint16_t
FindOption	core/net/dhcp6_server.cpp	/^uint16_t Server::FindOption(Message &aMessage, uint16_t aOffset, uint16_t aLength, Code aCode)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:uint16_t
FindOrAllocateMapping	core/net/nat64_translator.cpp	/^Translator::AddressMapping *Translator::FindOrAllocateMapping(const Ip6::Address &aIp6Addr)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Translator::AddressMapping *
FindOrAllocatePrefixEntry	core/thread/network_data_publisher.cpp	/^Publisher::PrefixEntry *Publisher::FindOrAllocatePrefixEntry(const Ip6::Prefix &aPrefix, Request/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Publisher::PrefixEntry *
FindOutstandingUpdate	core/net/srp_server.cpp	/^const Server::UpdateMetadata *Server::FindOutstandingUpdate(const MessageMetadata &aMessageMetad/;"	f	class:ot::Srp::Server	typeref:typename:const Server::UpdateMetadata *
FindParent	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindParent(Mac::ShortAddress aShortAddress, Neighbor::StateFilter aFilt/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindParent	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindParent(const Mac::Address &aMacAddress, Neighbor::StateFilter aFilt/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindParent	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindParent(const Mac::ExtAddress &aExtAddress, Neighbor::StateFilter aF/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindParent	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindParent(const Neighbor::AddressMatcher &aMatcher)$/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindPayloadIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindPayloadIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindPreferredDnsSrpAnycastInfo	core/thread/network_data_service.cpp	/^Error Manager::FindPreferredDnsSrpAnycastInfo(DnsSrpAnycast::Info &aInfo) const$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
FindPrefix	core/thread/network_data.cpp	/^const PrefixTlv *NetworkData::FindPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const PrefixTlv *
FindPrefix	core/thread/network_data.hpp	/^    PrefixTlv *FindPrefix(const Ip6::Prefix &aPrefix) { return FindPrefix(aPrefix.GetBytes(), aP/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:PrefixTlv *
FindPrefix	core/thread/network_data.hpp	/^    PrefixTlv *FindPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:PrefixTlv *
FindPrefix	core/thread/network_data.hpp	/^    const PrefixTlv *FindPrefix(const Ip6::Prefix &aPrefix) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const PrefixTlv *
FindPropertyHandler	ncp/ncp_base_dispatcher.cpp	/^NcpBase::PropertyHandler NcpBase::FindPropertyHandler(const HandlerEntry *aHandlerEntries,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase::PropertyHandler
FindPtrRecord	core/net/dns_client.cpp	/^Error Client::BrowseResponse::FindPtrRecord(const char *aInstanceLabel, Name &aInstanceName) con/;"	f	class:ot::Dns::Client::BrowseResponse	typeref:typename:Error
FindQueryById	core/net/dns_client.cpp	/^Client::Query *Client::FindQueryById(uint16_t aMessageId)$/;"	f	class:ot::Dns::Client	typeref:typename:Client::Query *
FindRecord	core/net/dns_types.cpp	/^Error ResourceRecord::FindRecord(const Message  &aMessage,$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
FindRecord	core/net/dns_types.cpp	/^Error ResourceRecord::FindRecord(const Message &aMessage, uint16_t &aOffset, uint16_t &aNumRecor/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
FindRecord	core/net/dns_types.hpp	/^    static Error FindRecord(const Message &aMessage,$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
FindRelatedQuery	core/net/sntp_client.cpp	/^Message *Client::FindRelatedQuery(const Header &aResponseHeader, QueryMetadata &aQueryMetadata)$/;"	f	class:ot::Sntp::Client	typeref:typename:Message *
FindRelatedRequest	core/coap/coap.cpp	/^Message *CoapBase::FindRelatedRequest(const Message          &aResponse,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
FindRemovePropertyHandler	ncp/ncp_base_dispatcher.cpp	/^NcpBase::PropertyHandler NcpBase::FindRemovePropertyHandler(spinel_prop_key_t aKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase::PropertyHandler
FindRlocs	core/thread/network_data.cpp	/^void NetworkData::FindRlocs(BorderRouterFilter aBrFilter, RoleFilter aRoleFilter, Rlocs &aRlocs)/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:void
FindRouter	core/thread/router_table.cpp	/^Router *RouterTable::FindRouter(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindRouter	core/thread/router_table.cpp	/^const Router *RouterTable::FindRouter(const Router::AddressMatcher &aMatcher) const$/;"	f	class:ot::RouterTable	typeref:typename:const Router *
FindRouter	core/thread/router_table.hpp	/^    Router       *FindRouter(const Router::AddressMatcher &aMatcher)$/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindRouterById	core/thread/router_table.cpp	/^const Router *RouterTable::FindRouterById(uint8_t aRouterId) const$/;"	f	class:ot::RouterTable	typeref:typename:const Router *
FindRouterById	core/thread/router_table.hpp	/^    Router *FindRouterById(uint8_t aRouterId) { return AsNonConst(AsConst(this)->FindRouterById(/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindRouterByRloc16	core/thread/router_table.cpp	/^const Router *RouterTable::FindRouterByRloc16(uint16_t aRloc16) const$/;"	f	class:ot::RouterTable	typeref:typename:const Router *
FindRouterByRloc16	core/thread/router_table.hpp	/^    Router *FindRouterByRloc16(uint16_t aRloc16) { return AsNonConst(AsConst(this)->FindRouterBy/;"	f	class:ot::RouterTable	typeref:typename:Router *
FindRxOnlyNeighborRouter	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindRxOnlyNeighborRouter(const Mac::Address &aMacAddress)$/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindRxOnlyNeighborRouter	core/thread/neighbor_table.cpp	/^Neighbor *NeighborTable::FindRxOnlyNeighborRouter(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::NeighborTable	typeref:typename:Neighbor *
FindSecurityHeaderIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindSecurityHeaderIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindServerConnection	core/net/dns_dso.cpp	/^Dso::Connection *Dso::FindServerConnection(const Ip6::SockAddr &aPeerSockAddr)$/;"	f	class:ot::Dns::Dso	typeref:typename:Dso::Connection *
FindService	core/net/srp_server.cpp	/^Server::Service *Server::Host::FindService(const char *aInstanceName) { return mServices.FindMat/;"	f	class:ot::Srp::Server::Host	typeref:typename:Server::Service *
FindService	core/net/srp_server.cpp	/^const Server::Service *Server::Host::FindService(const char *aInstanceName) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const Server::Service *
FindService	core/thread/network_data.cpp	/^const ServiceTlv *NetworkData::FindService(uint32_t           aEnterpriseNumber,$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const ServiceTlv *
FindService	core/thread/network_data.hpp	/^    ServiceTlv *FindService(uint32_t           aEnterpriseNumber,$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:ServiceTlv *
FindServiceById	core/thread/network_data_leader_ftd.cpp	/^const ServiceTlv *Leader::FindServiceById(uint8_t aServiceId) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:const ServiceTlv *
FindSetPropertyHandler	ncp/ncp_base_dispatcher.cpp	/^NcpBase::PropertyHandler NcpBase::FindSetPropertyHandler(spinel_prop_key_t aKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase::PropertyHandler
FindSrcAddrIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindSrcAddrIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindSrcPanIdIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::FindSrcPanIdIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
FindSteeringData	core/thread/network_data_leader.cpp	/^Error Leader::FindSteeringData(MeshCoP::SteeringData &aSteeringData) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
FindStringTlv	core/common/tlvs.cpp	/^Error Tlv::FindStringTlv(const Message &aMessage, uint8_t aType, uint8_t aMaxStringLength, char /;"	f	class:ot::Tlv	typeref:typename:Error
FindSubTlv	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *PrefixTlv::FindSubTlv(Type aType) const { return Find(GetSubTlvs(), GetNex/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const NetworkDataTlv *
FindSubTlv	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *PrefixTlv::FindSubTlv(Type aType, bool aStable) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const NetworkDataTlv *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    NetworkDataTlv *FindSubTlv(Type aType) { return AsNonConst(AsConst(this)->FindSubTlv(aType))/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:NetworkDataTlv *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    NetworkDataTlv *FindSubTlv(Type aType, bool aStable)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:NetworkDataTlv *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    template <typename SubTlvType> SubTlvType *FindSubTlv(bool aStable)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:SubTlvType *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    template <typename SubTlvType> SubTlvType *FindSubTlv(void)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:SubTlvType *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    template <typename SubTlvType> const SubTlvType *FindSubTlv(bool aStable) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const SubTlvType *
FindSubTlv	core/thread/network_data_tlvs.hpp	/^    template <typename SubTlvType> const SubTlvType *FindSubTlv(void) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const SubTlvType *
FindTlv	core/common/tlvs.cpp	/^Error Tlv::FindTlv(const Message &aMessage, uint8_t aType, uint16_t aMaxSize, Tlv &aTlv)$/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlv	core/common/tlvs.cpp	/^Error Tlv::FindTlv(const Message &aMessage, uint8_t aType, uint16_t aMaxSize, Tlv &aTlv, uint16_/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlv	core/common/tlvs.cpp	/^Error Tlv::FindTlv(const Message &aMessage, uint8_t aType, void *aValue, uint16_t aLength)$/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlv	core/common/tlvs.cpp	/^const Tlv *Tlv::FindTlv(const void *aTlvsStart, uint16_t aTlvsLength, uint8_t aType)$/;"	f	class:ot::Tlv	typeref:typename:const Tlv *
FindTlv	core/common/tlvs.hpp	/^    static Tlv *FindTlv(void *aTlvsStart, uint16_t aTlvsLength, uint8_t aType)$/;"	f	class:ot::Tlv	typeref:typename:Tlv *
FindTlv	core/common/tlvs.hpp	/^    template <typename TlvType> static Error FindTlv(const Message &aMessage, TlvType &aTlv)$/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlv	core/common/tlvs.hpp	/^    template <typename TlvType> static Error FindTlv(const Message &aMessage, TlvType &aTlv, uin/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlv	core/meshcop/dataset.cpp	/^const Tlv *Dataset::FindTlv(Tlv::Type aType) const { return As<Tlv>(Tlv::FindTlv(mTlvs, mLength,/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:const Tlv *
FindTlv	core/meshcop/dataset.hpp	/^    Tlv *FindTlv(Tlv::Type aType) { return AsNonConst(AsConst(this)->FindTlv(aType)); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Tlv *
FindTlvValueOffset	core/common/tlvs.cpp	/^Error Tlv::FindTlvValueOffset(const Message &aMessage, uint8_t aType, uint16_t &aValueOffset, ui/;"	f	class:ot::Tlv	typeref:typename:Error
FindTlvValueStartEndOffsets	core/common/tlvs.cpp	/^Error Tlv::FindTlvValueStartEndOffsets(const Message &aMessage,$/;"	f	class:ot::Tlv	typeref:typename:Error
FindUintTlv	core/common/tlvs.cpp	/^template <typename UintType> Error Tlv::FindUintTlv(const Message &aMessage, uint8_t aType, Uint/;"	f	class:ot::Tlv	typeref:typename:Error
Finish	core/coap/coap_message.cpp	/^void Message::Finish(void)$/;"	f	class:ot::Coap::Message	typeref:typename:void
Finish	core/crypto/hmac_sha256.cpp	/^void HmacSha256::Finish(Hash &aHash)$/;"	f	class:ot::Crypto::HmacSha256	typeref:typename:void
Finish	core/crypto/sha256.cpp	/^void Sha256::Finish(Hash &aHash) { SuccessOrAssert(otPlatCryptoSha256Finish(&mContext, aHash.m8,/;"	f	class:ot::Crypto::Sha256	typeref:typename:void
Finish	core/meshcop/dataset_updater.cpp	/^void DatasetUpdater::Finish(Error aError)$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:void
Finish	core/meshcop/joiner.cpp	/^void Joiner::Finish(Error aError)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
FinishMlr	core/thread/mlr_manager.cpp	/^void MlrManager::FinishMlr(bool aSuccess, const AddressArray &aFailedAddresses)$/;"	f	class:ot::MlrManager	typeref:typename:void
FinishOperation	core/mac/mac.cpp	/^void Mac::FinishOperation(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
FireAt	core/common/timer.cpp	/^void TimerMicro::FireAt(TimeMicro aFireTime)$/;"	f	class:ot::TimerMicro	typeref:typename:void
FireAt	core/common/timer.cpp	/^void TimerMilli::FireAt(TimeMilli aFireTime)$/;"	f	class:ot::TimerMilli	typeref:typename:void
FireAt	core/common/trickle_timer.hpp	/^    void FireAt(void) {}$/;"	f	class:ot::TrickleTimer	typeref:typename:void
FireAtIfEarlier	core/common/timer.cpp	/^void TimerMilli::FireAtIfEarlier(TimeMilli aFireTime)$/;"	f	class:ot::TimerMilli	typeref:typename:void
FireAtIfEarlier	core/common/trickle_timer.hpp	/^    void FireAtIfEarlier(void) {}$/;"	f	class:ot::TrickleTimer	typeref:typename:void
FirePendingCallbacks	core/net/tcp6.cpp	/^bool Tcp::Endpoint::FirePendingCallbacks(void)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:bool
FirePendingTimers	core/net/tcp6.cpp	/^bool Tcp::Endpoint::FirePendingTimers(TimeMilli aNow, bool &aHasFutureTimer, TimeMilli &aEarlies/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:bool
FireTime	core/net/mdns.hpp	/^        FireTime(void) { ClearFireTime(); }$/;"	f	class:ot::Dns::Multicast::Core::FireTime
Fired	core/common/timer.hpp	/^    void Fired(void) { mHandler(*this); }$/;"	f	class:ot::Timer	typeref:typename:void
FixHeap	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::FixHeap(uint16_t aIndex)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
FlagByteToExternalRoutePreference	ncp/ncp_base_mtd.cpp	/^static int FlagByteToExternalRoutePreference(uint8_t aFlags)$/;"	f	namespace:ot::Ncp	typeref:typename:int	file:
FlagsWithoutPreference	core/thread/network_data_tlvs.hpp	/^    static uint16_t FlagsWithoutPreference(uint16_t aFlags) { return (aFlags & ~kPreferenceMask)/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:uint16_t
FlagsWithoutPreference	core/thread/network_data_tlvs.hpp	/^    static uint8_t FlagsWithoutPreference(uint8_t aFlags) { return (aFlags & ~kPreferenceMask); /;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:uint8_t
Flash	core/utils/flash.hpp	/^    explicit Flash(Instance &aInstance)$/;"	f	class:ot::Flash
Flush	core/radio/ble_secure.cpp	/^Error BleSecure::Flush(void)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
FlushIpSet	posix/platform/firewall.cpp	/^inline otError IpSetManager::FlushIpSet(const char *aName)$/;"	f	class:ot::Posix::IpSetManager	typeref:typename:otError
ForceDiscardAll	core/net/tcp6_ext.cpp	/^void TcpCircularSendBuffer::ForceDiscardAll(void)$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:void
ForkPty	posix/platform/hdlc_interface.cpp	/^int HdlcInterface::ForkPty(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:int
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<const char *>(void) { return "%s/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<int16_t>(void) { return "%d"; }$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<int32_t>(void) { return "%ld"; }$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<int8_t>(void) { return "%d"; }$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<uint16_t>(void) { return "%u"; }$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<uint32_t>(void) { return "%lu"; /;"	f	class:ot::Cli::Utils	typeref:typename:const char *
FormatStringFor	cli/cli_utils.hpp	/^template <> inline constexpr const char *Utils::FormatStringFor<uint8_t>(void) { return "%u"; }$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
ForwardResponse	posix/platform/resolver.cpp	/^void Resolver::ForwardResponse(Transaction *aTxn)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
ForwardToCommissioner	core/meshcop/border_agent.cpp	/^Error BorderAgent::ForwardToCommissioner(Coap::Message &aForwardMessage, const Message &aMessage/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
ForwardToLeader	core/meshcop/border_agent.cpp	/^Error BorderAgent::ForwardToLeader(const Coap::Message &aMessage, const Ip6::MessageInfo &aMessa/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
FragmentDatagram	core/net/ip6.cpp	/^Error Ip6::FragmentDatagram(Message &aMessage, uint8_t aIpProto)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
FragmentOffsetToBytes	core/net/ip6_headers.hpp	/^    static inline uint16_t FragmentOffsetToBytes(uint16_t aOffset) { return static_cast<uint16_t/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint16_t
FrameBuffer	lib/spinel/multi_frame_buffer.hpp	/^    FrameBuffer(void)$/;"	f	class:ot::Spinel::FrameBuffer
FrameCounterUsed	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::FrameCounterUsed(uint32_t aFrameCounter) { OT_UNUSED_VARIABLE(aFrameCoun/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
FrameCounterUsed	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::FrameCounterUsed(uint32_t aFrameCounter)$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
FrameToMessage	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::FrameToMessage(const FrameData      &aFrameData,$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
FrameWritePointer	lib/spinel/multi_frame_buffer.hpp	/^    FrameWritePointer(void)$/;"	f	class:ot::Spinel::FrameWritePointer
Free	core/border_router/routing_manager.cpp	/^template <> void RoutingManager::RxRaTracker::Entry<RoutingManager::RxRaTracker::Router>::Free(v/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Entry::RxRaTracker::Router	typeref:typename:void
Free	core/border_router/routing_manager.cpp	/^template <class PrefixType> void RoutingManager::RxRaTracker::Entry<PrefixType>::Free(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Entry	typeref:typename:void
Free	core/common/heap.cpp	/^void Free(void *aPointer) { otPlatFree(aPointer); }$/;"	f	namespace:ot::Heap	typeref:typename:void
Free	core/common/heap_allocatable.hpp	/^    void Free(void)$/;"	f	class:ot::Heap::Allocatable	typeref:typename:void
Free	core/common/heap_array.hpp	/^    void Free(void)$/;"	f	class:ot::Heap::Array	typeref:typename:void
Free	core/common/heap_data.cpp	/^void Data::Free(void)$/;"	f	class:ot::Heap::Data	typeref:typename:void
Free	core/common/heap_string.cpp	/^void String::Free(void)$/;"	f	class:ot::Heap::String	typeref:typename:void
Free	core/common/message.cpp	/^void Message::Free(void) { GetMessagePool()->Free(this); }$/;"	f	class:ot::Message	typeref:typename:void
Free	core/common/message.cpp	/^void MessagePool::Free(Message *aMessage)$/;"	f	class:ot::MessagePool	typeref:typename:void
Free	core/common/owned_ptr.hpp	/^    void Free(void)$/;"	f	class:ot::OwnedPtr	typeref:typename:void
Free	core/common/owning_list.hpp	/^    void Free(void)$/;"	f	class:ot::OwningList	typeref:typename:void
Free	core/common/pool.hpp	/^    void Free(Type &aEntry) { mFreeList.Push(aEntry); }$/;"	f	class:ot::Pool	typeref:typename:void
Free	core/thread/link_metrics.cpp	/^void Subject::Free(SeriesInfo &aSeriesInfo) { mSeriesInfoPool.Free(aSeriesInfo); }$/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:void
Free	core/utils/heap.cpp	/^void Heap::Free(void *aPointer)$/;"	f	class:ot::Utils::Heap	typeref:typename:void
FreeAll	core/common/pool.hpp	/^    void FreeAll(void)$/;"	f	class:ot::Pool	typeref:typename:void
FreeAllRelatedAnswers	core/thread/network_diagnostic.cpp	/^void Server::FreeAllRelatedAnswers(Coap::Message &aFirstAnswer)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
FreeAllServices	core/net/srp_server.cpp	/^void Server::Host::FreeAllServices(void)$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
FreeAllServices	core/utils/srp_client_buffers.hpp	/^    void FreeAllServices(void) { mServicePool.FreeAll(); }$/;"	f	class:ot::Utils::SrpClientBuffers	typeref:typename:void
FreeAloc	core/net/nd_agent.hpp	/^    void FreeAloc(void) { mAloc.mNext = &mAloc; }$/;"	f	class:ot::NeighborDiscovery::Agent	typeref:typename:void
FreeBuffers	core/common/message.cpp	/^void MessagePool::FreeBuffers(Buffer *aBuffer)$/;"	f	class:ot::MessagePool	typeref:typename:void
FreeIterator	core/net/mdns.cpp	/^void Core::FreeIterator(Iterator &aIterator) { static_cast<EntryIterator &>(aIterator).Free(); }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
FreeJoinerFinalizeMessage	core/meshcop/joiner.cpp	/^void Joiner::FreeJoinerFinalizeMessage(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
FreeLastBlockResponse	core/coap/coap.cpp	/^void CoapBase::FreeLastBlockResponse(void)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
FreeMbedtls	core/meshcop/secure_transport.cpp	/^void SecureTransport::FreeMbedtls(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
FreeQuery	core/net/dns_client.cpp	/^void Client::FreeQuery(Query &aQuery)$/;"	f	class:ot::Dns::Client	typeref:typename:void
FreeService	core/utils/srp_client_buffers.hpp	/^    void FreeService(ServiceEntry &aServiceEntry) { mServicePool.Free(aServiceEntry); }$/;"	f	class:ot::Utils::SrpClientBuffers	typeref:typename:void
FreeTid	lib/spinel/radio_spinel.hpp	/^    void         FreeTid(spinel_tid_t tid) { mCmdTidsInUse &= ~(1 << tid); }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
From	core/coap/coap.hpp	/^    static const TxParameters &From(const otCoapTxParameters *aTxParameters)$/;"	f	class:ot::Coap::TxParameters	typeref:typename:const TxParameters &
From	core/common/message.cpp	/^const Message::Settings &Message::Settings::From(const otMessageSettings *aSettings)$/;"	f	class:ot::Message::Settings	typeref:typename:const Message::Settings &
From2BitUint	core/common/preference.cpp	/^int8_t Preference::From2BitUint(uint8_t a2BitUint)$/;"	f	class:ot::Preference	typeref:typename:int8_t
FromString	core/net/ip4_types.cpp	/^Error Address::FromString(const char *aString, char aTerminatorChar)$/;"	f	class:ot::Ip4::Address	typeref:typename:Error
FromString	core/net/ip4_types.cpp	/^Error Cidr::FromString(const char *aString)$/;"	f	class:ot::Ip4::Cidr	typeref:typename:Error
FromString	core/net/ip6_address.cpp	/^Error Address::FromString(const char *aString)$/;"	f	class:ot::Ip6::Address	typeref:typename:Error
FromString	core/net/ip6_address.cpp	/^Error Prefix::FromString(const char *aString)$/;"	f	class:ot::Ip6::Prefix	typeref:typename:Error
FromString	posix/platform/power.cpp	/^otError CalibratedPower::FromString(char *aString)$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:otError
FromString	posix/platform/power.cpp	/^otError TargetPower::FromString(char *aString)$/;"	f	class:ot::Power::TargetPower	typeref:typename:otError
FromTcb	core/net/tcp6.hpp	/^        static Endpoint &FromTcb(struct tcpcb &aTcb) { return *reinterpret_cast<Endpoint *>(&aTc/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Endpoint &
FromTcbListen	core/net/tcp6.hpp	/^        static Listener &FromTcbListen(struct tcpcb_listen &aTcbListen)$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Listener &
Front	core/common/array.hpp	/^    Type *Front(void) { return At(0); }$/;"	f	class:ot::Array	typeref:typename:Type *
Front	core/common/array.hpp	/^    const Type *Front(void) const { return At(0); }$/;"	f	class:ot::Array	typeref:typename:const Type *
Front	core/common/heap_array.hpp	/^    Type *Front(void) { return At(0); }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
Front	core/common/heap_array.hpp	/^    const Type *Front(void) const { return At(0); }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
Generate	core/crypto/ecdsa.hpp	/^        Error Generate(void) const { return otPlatCryptoEcdsaGenerateAndImportKey(mKeyRef); }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:Error
Generate	core/crypto/ecdsa.hpp	/^        Error Generate(void) { return otPlatCryptoEcdsaGenerateKey(this); }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:Error
GenerateChallenge	core/thread/child.hpp	/^    void GenerateChallenge(void) { mAttachChallenge.GenerateRandom(); }$/;"	f	class:ot::Child	typeref:typename:void
GenerateChallenge	core/thread/neighbor.hpp	/^    void GenerateChallenge(void) { mValidPending.mPending.mChallenge.GenerateRandom(); }$/;"	f	class:ot::Neighbor	typeref:typename:void
GenerateDomainUnicastAddressIid	core/thread/dua_manager.cpp	/^Error DuaManager::GenerateDomainUnicastAddressIid(void)$/;"	f	class:ot::DuaManager	typeref:typename:Error
GenerateEnhAck	core/mac/mac_frame.cpp	/^Error TxFrame::GenerateEnhAck(const RxFrame &aRxFrame, bool aIsFramePending, const uint8_t *aIeD/;"	f	class:ot::Mac::TxFrame	typeref:typename:Error
GenerateIid	core/utils/slaac_address.cpp	/^Error Slaac::GenerateIid(Ip6::Netif::UnicastAddress &aAddress, uint8_t &aDadCounter) const$/;"	f	class:ot::Utils::Slaac	typeref:typename:Error
GenerateImmAck	core/mac/mac_frame.cpp	/^void TxFrame::GenerateImmAck(const RxFrame &aFrame, bool aIsFramePending)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
GenerateJoinerId	core/meshcop/meshcop.cpp	/^void JoinerDiscerner::GenerateJoinerId(Mac::ExtAddress &aJoinerId) const$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:void
GenerateLocal	core/meshcop/dataset_manager_ftd.cpp	/^Error ActiveDatasetManager::GenerateLocal(void)$/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:Error
GenerateLocalPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::GenerateLocalPrefix(const Ip6::Prefix &aBrUlaPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
GenerateLocalPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::GenerateLocalPrefix(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
GenerateNextHexDumpLine	core/common/log.cpp	/^Error GenerateNextHexDumpLine(HexDumpInfo &aInfo)$/;"	f	namespace:ot	typeref:typename:Error
GenerateNextTransmissionTime	core/net/ip6_mpl.cpp	/^void Mpl::Metadata::GenerateNextTransmissionTime(TimeMilli aCurrentTime, uint8_t aInterval)$/;"	f	class:ot::Ip6::Mpl::Metadata	typeref:typename:void
GenerateNonce	core/crypto/aes_ccm.cpp	/^void AesCcm::GenerateNonce(const Mac::ExtAddress &aAddress,$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
GeneratePskc	core/meshcop/meshcop.cpp	/^Error GeneratePskc(const char          *aPassPhrase,$/;"	f	namespace:ot::MeshCoP	typeref:typename:Error
GenerateRandom	core/mac/mac_types.cpp	/^void ExtAddress::GenerateRandom(void)$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
GenerateRandom	core/meshcop/dataset.cpp	/^Error Dataset::Info::GenerateRandom(Instance &aInstance)$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:Error
GenerateRandom	core/net/dhcp6.hpp	/^    Error GenerateRandom(void)$/;"	f	class:ot::Dhcp6::TransactionId	typeref:typename:Error
GenerateRandom	core/net/ip6_address.cpp	/^void InterfaceIdentifier::GenerateRandom(void) { SuccessOrAssert(Random::Crypto::Fill(*this)); }$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
GenerateRandom	core/thread/key_manager.hpp	/^    Error GenerateRandom(void) { return Random::Crypto::Fill(*this); }$/;"	f	class:ot::NetworkKey	typeref:typename:Error
GenerateRandom	core/thread/key_manager.hpp	/^    Error GenerateRandom(void) { return Random::Crypto::Fill(*this); }$/;"	f	class:ot::Pskc	typeref:typename:Error
GenerateRandom	core/thread/mle_types.cpp	/^void TxChallenge::GenerateRandom(void) { IgnoreError(Random::Crypto::Fill(*this)); }$/;"	f	class:ot::Mle::TxChallenge	typeref:typename:void
GenerateRandomPanId	core/mac/mac_types.cpp	/^PanId GenerateRandomPanId(void)$/;"	f	namespace:ot::Mac	typeref:typename:PanId
GenerateRandomToken	core/coap/coap_message.cpp	/^Error Message::GenerateRandomToken(uint8_t aTokenLength)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
GenerateRandomUla	core/net/ip6_address.cpp	/^Error NetworkPrefix::GenerateRandomUla(void)$/;"	f	class:ot::Ip6::NetworkPrefix	typeref:typename:Error
Get	core/common/bit_vector.hpp	/^    bool Get(uint16_t aIndex) const$/;"	f	class:ot::BitVector	typeref:typename:bool
Get	core/common/crc16.hpp	/^    uint16_t Get(void) const { return mCrc; }$/;"	f	class:ot::Crc16	typeref:typename:uint16_t
Get	core/common/locator_getters.hpp	/^inline Type &GetProvider<InstanceGetProvider>::Get(void) const$/;"	f	class:ot::GetProvider	typeref:typename:Type &
Get	core/common/ptr_wrapper.hpp	/^    Type *Get(void) { return mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:Type *
Get	core/common/ptr_wrapper.hpp	/^    const Type *Get(void) const { return mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:const Type *
Get	core/common/settings_driver.hpp	/^    Error Get(uint16_t aKey, int aIndex, void *aValue, uint16_t *aValueLength) const$/;"	f	class:ot::SettingsDriver	typeref:typename:Error
Get	core/common/settings_driver.hpp	/^    Error Get(uint16_t aKey, void *aValue, uint16_t *aValueLength) const { return Get(aKey, 0, a/;"	f	class:ot::SettingsDriver	typeref:typename:Error
Get	core/instance/instance.cpp	/^Instance &Instance::Get(uint8_t aIdx)$/;"	f	class:ot::Instance	typeref:typename:Instance &
Get	core/instance/instance.cpp	/^Instance &Instance::Get(void)$/;"	f	class:ot::Instance	typeref:typename:Instance &
Get	core/instance/instance.hpp	/^template <> inline AddressResolver &Instance::Get(void) { return mAddressResolver; }$/;"	f	class:ot::Instance	typeref:typename:AddressResolver &
Get	core/instance/instance.hpp	/^template <> inline AnnounceBeginClient &Instance::Get(void) { return mCommissioner.GetAnnounceBe/;"	f	class:ot::Instance	typeref:typename:AnnounceBeginClient &
Get	core/instance/instance.hpp	/^template <> inline AnnounceBeginServer &Instance::Get(void) { return mAnnounceBegin; }$/;"	f	class:ot::Instance	typeref:typename:AnnounceBeginServer &
Get	core/instance/instance.hpp	/^template <> inline AnnounceSender &Instance::Get(void) { return mAnnounceSender; }$/;"	f	class:ot::Instance	typeref:typename:AnnounceSender &
Get	core/instance/instance.hpp	/^template <> inline AnycastLocator &Instance::Get(void) { return mAnycastLocator; }$/;"	f	class:ot::Instance	typeref:typename:AnycastLocator &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::BackboneTmfAgent &Instance::Get(void)$/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::BackboneTmfAgent &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::Leader &Instance::Get(void) { return mBackboneRouterLeader; }$/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::Leader &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::Local   &Instance::Get(void) { return mBackboneRouterLocal; }$/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::Local &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::Manager &Instance::Get(void) { return mBackboneRouterManager;/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::Manager &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::MulticastListenersTable &Instance::Get(void)$/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::MulticastListenersTable &
Get	core/instance/instance.hpp	/^template <> inline BackboneRouter::NdProxyTable &Instance::Get(void)$/;"	f	class:ot::Instance	typeref:typename:BackboneRouter::NdProxyTable &
Get	core/instance/instance.hpp	/^template <> inline Ble::BleSecure &Instance::Get(void) { return mApplicationBleSecure; }$/;"	f	class:ot::Instance	typeref:typename:Ble::BleSecure &
Get	core/instance/instance.hpp	/^template <> inline BorderRouter::InfraIf &Instance::Get(void) { return mRoutingManager.mInfraIf;/;"	f	class:ot::Instance	typeref:typename:BorderRouter::InfraIf &
Get	core/instance/instance.hpp	/^template <> inline BorderRouter::RoutingManager &Instance::Get(void) { return mRoutingManager; }$/;"	f	class:ot::Instance	typeref:typename:BorderRouter::RoutingManager &
Get	core/instance/instance.hpp	/^template <> inline ChildSupervisor &Instance::Get(void) { return mChildSupervisor; }$/;"	f	class:ot::Instance	typeref:typename:ChildSupervisor &
Get	core/instance/instance.hpp	/^template <> inline ChildTable &Instance::Get(void) { return mMleRouter.mChildTable; }$/;"	f	class:ot::Instance	typeref:typename:ChildTable &
Get	core/instance/instance.hpp	/^template <> inline CslTxScheduler &Instance::Get(void) { return mMeshForwarder.mIndirectSender.m/;"	f	class:ot::Instance	typeref:typename:CslTxScheduler &
Get	core/instance/instance.hpp	/^template <> inline DataPollHandler &Instance::Get(void) { return mMeshForwarder.mIndirectSender./;"	f	class:ot::Instance	typeref:typename:DataPollHandler &
Get	core/instance/instance.hpp	/^template <> inline DataPollSender &Instance::Get(void) { return mMeshForwarder.mDataPollSender; /;"	f	class:ot::Instance	typeref:typename:DataPollSender &
Get	core/instance/instance.hpp	/^template <> inline Dhcp6::Client &Instance::Get(void) { return mDhcp6Client; }$/;"	f	class:ot::Instance	typeref:typename:Dhcp6::Client &
Get	core/instance/instance.hpp	/^template <> inline Dhcp6::Server &Instance::Get(void) { return mDhcp6Server; }$/;"	f	class:ot::Instance	typeref:typename:Dhcp6::Server &
Get	core/instance/instance.hpp	/^template <> inline Dns::Client &Instance::Get(void) { return mDnsClient; }$/;"	f	class:ot::Instance	typeref:typename:Dns::Client &
Get	core/instance/instance.hpp	/^template <> inline Dns::Dso &Instance::Get(void) { return mDnsDso; }$/;"	f	class:ot::Instance	typeref:typename:Dns::Dso &
Get	core/instance/instance.hpp	/^template <> inline Dns::Multicast::Core &Instance::Get(void) { return mMdnsCore; }$/;"	f	class:ot::Instance	typeref:typename:Dns::Multicast::Core &
Get	core/instance/instance.hpp	/^template <> inline Dns::ServiceDiscovery::Server &Instance::Get(void) { return mDnssdServer; }$/;"	f	class:ot::Instance	typeref:typename:Dns::ServiceDiscovery::Server &
Get	core/instance/instance.hpp	/^template <> inline Dnssd &Instance::Get(void) { return mDnssd; }$/;"	f	class:ot::Instance	typeref:typename:Dnssd &
Get	core/instance/instance.hpp	/^template <> inline DuaManager &Instance::Get(void) { return mDuaManager; }$/;"	f	class:ot::Instance	typeref:typename:DuaManager &
Get	core/instance/instance.hpp	/^template <> inline EnergyScanClient &Instance::Get(void) { return mCommissioner.GetEnergyScanCli/;"	f	class:ot::Instance	typeref:typename:EnergyScanClient &
Get	core/instance/instance.hpp	/^template <> inline EnergyScanServer &Instance::Get(void) { return mEnergyScan; }$/;"	f	class:ot::Instance	typeref:typename:EnergyScanServer &
Get	core/instance/instance.hpp	/^template <> inline Extension::ExtensionBase &Instance::Get(void) { return mExtension; }$/;"	f	class:ot::Instance	typeref:typename:Extension::ExtensionBase &
Get	core/instance/instance.hpp	/^template <> inline FactoryDiags::Diags &Instance::Get(void) { return mDiags; }$/;"	f	class:ot::Instance	typeref:typename:FactoryDiags::Diags &
Get	core/instance/instance.hpp	/^template <> inline IndirectSender &Instance::Get(void) { return mMeshForwarder.mIndirectSender; /;"	f	class:ot::Instance	typeref:typename:IndirectSender &
Get	core/instance/instance.hpp	/^template <> inline Instance &Instance::Get(void) { return *this; }$/;"	f	class:ot::Instance	typeref:typename:Instance &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Filter &Instance::Get(void) { return mIp6Filter; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Filter &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Icmp &Instance::Get(void) { return mIp6.mIcmp; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Icmp &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Ip6 &Instance::Get(void) { return mIp6; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Ip6 &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Mpl &Instance::Get(void) { return mIp6.mMpl; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Mpl &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Netif &Instance::Get(void) { return mThreadNetif; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Netif &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Tcp &Instance::Get(void) { return mIp6.mTcp; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Tcp &
Get	core/instance/instance.hpp	/^template <> inline Ip6::Udp &Instance::Get(void) { return mIp6.mUdp; }$/;"	f	class:ot::Instance	typeref:typename:Ip6::Udp &
Get	core/instance/instance.hpp	/^template <> inline KeyManager &Instance::Get(void) { return mKeyManager; }$/;"	f	class:ot::Instance	typeref:typename:KeyManager &
Get	core/instance/instance.hpp	/^template <> inline LinkMetrics::Initiator &Instance::Get(void) { return mInitiator; }$/;"	f	class:ot::Instance	typeref:typename:LinkMetrics::Initiator &
Get	core/instance/instance.hpp	/^template <> inline LinkMetrics::Subject &Instance::Get(void) { return mSubject; }$/;"	f	class:ot::Instance	typeref:typename:LinkMetrics::Subject &
Get	core/instance/instance.hpp	/^template <> inline Lowpan::Lowpan &Instance::Get(void) { return mLowpan; }$/;"	f	class:ot::Instance	typeref:typename:Lowpan::Lowpan &
Get	core/instance/instance.hpp	/^template <> inline Mac::Filter &Instance::Get(void) { return mMac.mFilter; }$/;"	f	class:ot::Instance	typeref:typename:Mac::Filter &
Get	core/instance/instance.hpp	/^template <> inline Mac::LinkRaw &Instance::Get(void) { return mLinkRaw; }$/;"	f	class:ot::Instance	typeref:typename:Mac::LinkRaw &
Get	core/instance/instance.hpp	/^template <> inline Mac::Mac &Instance::Get(void) { return mMac; }$/;"	f	class:ot::Instance	typeref:typename:Mac::Mac &
Get	core/instance/instance.hpp	/^template <> inline Mac::SubMac &Instance::Get(void) { return mLinkRaw.mSubMac; }$/;"	f	class:ot::Instance	typeref:typename:Mac::SubMac &
Get	core/instance/instance.hpp	/^template <> inline Mac::SubMac &Instance::Get(void) { return mMac.mLinks.mSubMac; }$/;"	f	class:ot::Instance	typeref:typename:Mac::SubMac &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::ActiveDatasetManager &Instance::Get(void) { return mActiveDataset; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::ActiveDatasetManager &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::BorderAgent &Instance::Get(void) { return mBorderAgent; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::BorderAgent &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::Commissioner &Instance::Get(void) { return mCommissioner; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::Commissioner &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::DatasetUpdater &Instance::Get(void) { return mDatasetUpdater; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::DatasetUpdater &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::ExtendedPanIdManager &Instance::Get(void) { return mExtendedPanIdMan/;"	f	class:ot::Instance	typeref:typename:MeshCoP::ExtendedPanIdManager &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::Joiner &Instance::Get(void) { return mJoiner; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::Joiner &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::JoinerRouter &Instance::Get(void) { return mJoinerRouter; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::JoinerRouter &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::Leader &Instance::Get(void) { return mLeader; }$/;"	f	class:ot::Instance	typeref:typename:MeshCoP::Leader &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::NetworkNameManager &Instance::Get(void) { return mNetworkNameManager/;"	f	class:ot::Instance	typeref:typename:MeshCoP::NetworkNameManager &
Get	core/instance/instance.hpp	/^template <> inline MeshCoP::PendingDatasetManager &Instance::Get(void) { return mPendingDataset;/;"	f	class:ot::Instance	typeref:typename:MeshCoP::PendingDatasetManager &
Get	core/instance/instance.hpp	/^template <> inline MeshForwarder &Instance::Get(void) { return mMeshForwarder; }$/;"	f	class:ot::Instance	typeref:typename:MeshForwarder &
Get	core/instance/instance.hpp	/^template <> inline MessagePool &Instance::Get(void) { return mMessagePool; }$/;"	f	class:ot::Instance	typeref:typename:MessagePool &
Get	core/instance/instance.hpp	/^template <> inline Mle::DiscoverScanner &Instance::Get(void) { return mDiscoverScanner; }$/;"	f	class:ot::Instance	typeref:typename:Mle::DiscoverScanner &
Get	core/instance/instance.hpp	/^template <> inline Mle::Mle &Instance::Get(void) { return mMleRouter; }$/;"	f	class:ot::Instance	typeref:typename:Mle::Mle &
Get	core/instance/instance.hpp	/^template <> inline Mle::MleRouter &Instance::Get(void) { return mMleRouter; }$/;"	f	class:ot::Instance	typeref:typename:Mle::MleRouter &
Get	core/instance/instance.hpp	/^template <> inline MlrManager &Instance::Get(void) { return mMlrManager; }$/;"	f	class:ot::Instance	typeref:typename:MlrManager &
Get	core/instance/instance.hpp	/^template <> inline Nat64::Translator &Instance::Get(void) { return mNat64Translator; }$/;"	f	class:ot::Instance	typeref:typename:Nat64::Translator &
Get	core/instance/instance.hpp	/^template <> inline NeighborDiscovery::Agent &Instance::Get(void) { return mNeighborDiscoveryAgen/;"	f	class:ot::Instance	typeref:typename:NeighborDiscovery::Agent &
Get	core/instance/instance.hpp	/^template <> inline NeighborTable &Instance::Get(void) { return mMleRouter.mNeighborTable; }$/;"	f	class:ot::Instance	typeref:typename:NeighborTable &
Get	core/instance/instance.hpp	/^template <> inline NetworkData::Leader &Instance::Get(void) { return mNetworkDataLeader; }$/;"	f	class:ot::Instance	typeref:typename:NetworkData::Leader &
Get	core/instance/instance.hpp	/^template <> inline NetworkData::Local &Instance::Get(void) { return mNetworkDataLocal; }$/;"	f	class:ot::Instance	typeref:typename:NetworkData::Local &
Get	core/instance/instance.hpp	/^template <> inline NetworkData::Notifier &Instance::Get(void) { return mNetworkDataNotifier; }$/;"	f	class:ot::Instance	typeref:typename:NetworkData::Notifier &
Get	core/instance/instance.hpp	/^template <> inline NetworkData::Publisher &Instance::Get(void) { return mNetworkDataPublisher; }$/;"	f	class:ot::Instance	typeref:typename:NetworkData::Publisher &
Get	core/instance/instance.hpp	/^template <> inline NetworkData::Service::Manager &Instance::Get(void) { return mNetworkDataServi/;"	f	class:ot::Instance	typeref:typename:NetworkData::Service::Manager &
Get	core/instance/instance.hpp	/^template <> inline NetworkDiagnostic::Client &Instance::Get(void) { return mNetworkDiagnosticCli/;"	f	class:ot::Instance	typeref:typename:NetworkDiagnostic::Client &
Get	core/instance/instance.hpp	/^template <> inline NetworkDiagnostic::Server &Instance::Get(void) { return mNetworkDiagnosticSer/;"	f	class:ot::Instance	typeref:typename:NetworkDiagnostic::Server &
Get	core/instance/instance.hpp	/^template <> inline Notifier &Instance::Get(void) { return mNotifier; }$/;"	f	class:ot::Instance	typeref:typename:Notifier &
Get	core/instance/instance.hpp	/^template <> inline PanIdQueryClient &Instance::Get(void) { return mCommissioner.GetPanIdQueryCli/;"	f	class:ot::Instance	typeref:typename:PanIdQueryClient &
Get	core/instance/instance.hpp	/^template <> inline PanIdQueryServer &Instance::Get(void) { return mPanIdQuery; }$/;"	f	class:ot::Instance	typeref:typename:PanIdQueryServer &
Get	core/instance/instance.hpp	/^template <> inline Radio &Instance::Get(void) { return mRadio; }$/;"	f	class:ot::Instance	typeref:typename:Radio &
Get	core/instance/instance.hpp	/^template <> inline Radio::Callbacks &Instance::Get(void) { return mRadio.mCallbacks; }$/;"	f	class:ot::Instance	typeref:typename:Radio::Callbacks &
Get	core/instance/instance.hpp	/^template <> inline RadioSelector &Instance::Get(void) { return mRadioSelector; }$/;"	f	class:ot::Instance	typeref:typename:RadioSelector &
Get	core/instance/instance.hpp	/^template <> inline RadioStatistics &Instance::Get(void) { return mRadio.mRadioStatistics; }$/;"	f	class:ot::Instance	typeref:typename:RadioStatistics &
Get	core/instance/instance.hpp	/^template <> inline RouterTable &Instance::Get(void) { return mMleRouter.mRouterTable; }$/;"	f	class:ot::Instance	typeref:typename:RouterTable &
Get	core/instance/instance.hpp	/^template <> inline Settings &Instance::Get(void) { return mSettings; }$/;"	f	class:ot::Instance	typeref:typename:Settings &
Get	core/instance/instance.hpp	/^template <> inline SettingsDriver &Instance::Get(void) { return mSettingsDriver; }$/;"	f	class:ot::Instance	typeref:typename:SettingsDriver &
Get	core/instance/instance.hpp	/^template <> inline Sntp::Client &Instance::Get(void) { return mSntpClient; }$/;"	f	class:ot::Instance	typeref:typename:Sntp::Client &
Get	core/instance/instance.hpp	/^template <> inline SourceMatchController &Instance::Get(void)$/;"	f	class:ot::Instance	typeref:typename:SourceMatchController &
Get	core/instance/instance.hpp	/^template <> inline Srp::AdvertisingProxy &Instance::Get(void) { return mSrpAdvertisingProxy; }$/;"	f	class:ot::Instance	typeref:typename:Srp::AdvertisingProxy &
Get	core/instance/instance.hpp	/^template <> inline Srp::Client &Instance::Get(void) { return mSrpClient; }$/;"	f	class:ot::Instance	typeref:typename:Srp::Client &
Get	core/instance/instance.hpp	/^template <> inline Srp::Server &Instance::Get(void) { return mSrpServer; }$/;"	f	class:ot::Instance	typeref:typename:Srp::Server &
Get	core/instance/instance.hpp	/^template <> inline SupervisionListener &Instance::Get(void) { return mSupervisionListener; }$/;"	f	class:ot::Instance	typeref:typename:SupervisionListener &
Get	core/instance/instance.hpp	/^template <> inline Tasklet::Scheduler &Instance::Get(void) { return mTaskletScheduler; }$/;"	f	class:ot::Instance	typeref:typename:Tasklet::Scheduler &
Get	core/instance/instance.hpp	/^template <> inline ThreadNetif &Instance::Get(void) { return mThreadNetif; }$/;"	f	class:ot::Instance	typeref:typename:ThreadNetif &
Get	core/instance/instance.hpp	/^template <> inline TimeSync &Instance::Get(void) { return mTimeSync; }$/;"	f	class:ot::Instance	typeref:typename:TimeSync &
Get	core/instance/instance.hpp	/^template <> inline TimeTicker &Instance::Get(void) { return mTimeTicker; }$/;"	f	class:ot::Instance	typeref:typename:TimeTicker &
Get	core/instance/instance.hpp	/^template <> inline TimerMicro::Scheduler &Instance::Get(void) { return mTimerMicroScheduler; }$/;"	f	class:ot::Instance	typeref:typename:TimerMicro::Scheduler &
Get	core/instance/instance.hpp	/^template <> inline TimerMilli::Scheduler &Instance::Get(void) { return mTimerMilliScheduler; }$/;"	f	class:ot::Instance	typeref:typename:TimerMilli::Scheduler &
Get	core/instance/instance.hpp	/^template <> inline Tmf::Agent &Instance::Get(void) { return mTmfAgent; }$/;"	f	class:ot::Instance	typeref:typename:Tmf::Agent &
Get	core/instance/instance.hpp	/^template <> inline Tmf::SecureAgent &Instance::Get(void) { return mTmfSecureAgent; }$/;"	f	class:ot::Instance	typeref:typename:Tmf::SecureAgent &
Get	core/instance/instance.hpp	/^template <> inline Trel::Interface &Instance::Get(void) { return mMac.mLinks.mTrel.mInterface; }$/;"	f	class:ot::Instance	typeref:typename:Trel::Interface &
Get	core/instance/instance.hpp	/^template <> inline Trel::Link &Instance::Get(void) { return mMac.mLinks.mTrel; }$/;"	f	class:ot::Instance	typeref:typename:Trel::Link &
Get	core/instance/instance.hpp	/^template <> inline Uptime &Instance::Get(void) { return mUptime; }$/;"	f	class:ot::Instance	typeref:typename:Uptime &
Get	core/instance/instance.hpp	/^template <> inline Utils::ChannelManager &Instance::Get(void) { return mChannelManager; }$/;"	f	class:ot::Instance	typeref:typename:Utils::ChannelManager &
Get	core/instance/instance.hpp	/^template <> inline Utils::ChannelMonitor &Instance::Get(void) { return mChannelMonitor; }$/;"	f	class:ot::Instance	typeref:typename:Utils::ChannelMonitor &
Get	core/instance/instance.hpp	/^template <> inline Utils::HistoryTracker &Instance::Get(void) { return mHistoryTracker; }$/;"	f	class:ot::Instance	typeref:typename:Utils::HistoryTracker &
Get	core/instance/instance.hpp	/^template <> inline Utils::JamDetector &Instance::Get(void) { return mJamDetector; }$/;"	f	class:ot::Instance	typeref:typename:Utils::JamDetector &
Get	core/instance/instance.hpp	/^template <> inline Utils::LinkMetricsManager &Instance::Get(void) { return mLinkMetricsManager; /;"	f	class:ot::Instance	typeref:typename:Utils::LinkMetricsManager &
Get	core/instance/instance.hpp	/^template <> inline Utils::MeshDiag &Instance::Get(void) { return mMeshDiag; }$/;"	f	class:ot::Instance	typeref:typename:Utils::MeshDiag &
Get	core/instance/instance.hpp	/^template <> inline Utils::Otns &Instance::Get(void) { return mOtns; }$/;"	f	class:ot::Instance	typeref:typename:Utils::Otns &
Get	core/instance/instance.hpp	/^template <> inline Utils::PingSender &Instance::Get(void) { return mPingSender; }$/;"	f	class:ot::Instance	typeref:typename:Utils::PingSender &
Get	core/instance/instance.hpp	/^template <> inline Utils::PowerCalibration &Instance::Get(void) { return mPowerCalibration; }$/;"	f	class:ot::Instance	typeref:typename:Utils::PowerCalibration &
Get	core/instance/instance.hpp	/^template <> inline Utils::Slaac &Instance::Get(void) { return mSlaac; }$/;"	f	class:ot::Instance	typeref:typename:Utils::Slaac &
Get	core/instance/instance.hpp	/^template <> inline Utils::SrpClientBuffers &Instance::Get(void) { return mSrpClientBuffers; }$/;"	f	class:ot::Instance	typeref:typename:Utils::SrpClientBuffers &
Get	core/mac/mac_types.cpp	/^uint32_t LinkFrameCounters::Get(RadioType aRadioType) const$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:uint32_t
Get	core/mac/mac_types.hpp	/^    uint32_t Get(void) const$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:uint32_t
Get	core/meshcop/dataset.hpp	/^template <> inline const ExtendedPanId &Dataset::Info::Get<Dataset::kExtendedPanId>(void) const$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const ExtendedPanId &
Get	core/meshcop/dataset.hpp	/^template <> inline const Ip6::NetworkPrefix &Dataset::Info::Get<Dataset::kMeshLocalPrefix>(void)/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const Ip6::NetworkPrefix &
Get	core/meshcop/dataset.hpp	/^template <> inline const Mac::PanId &Dataset::Info::Get<Dataset::kPanId>(void) const { return mP/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const Mac::PanId &
Get	core/meshcop/dataset.hpp	/^template <> inline const NetworkKey &Dataset::Info::Get<Dataset::kNetworkKey>(void) const$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const NetworkKey &
Get	core/meshcop/dataset.hpp	/^template <> inline const NetworkName &Dataset::Info::Get<Dataset::kNetworkName>(void) const$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const NetworkName &
Get	core/meshcop/dataset.hpp	/^template <> inline const Pskc &Dataset::Info::Get<Dataset::kPskc>(void) const { return AsCoreTyp/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const Pskc &
Get	core/meshcop/dataset.hpp	/^template <> inline const SecurityPolicy &Dataset::Info::Get<Dataset::kSecurityPolicy>(void) cons/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const SecurityPolicy &
Get	core/meshcop/dataset.hpp	/^template <> inline const uint16_t &Dataset::Info::Get<Dataset::kChannel>(void) const { return mC/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const uint16_t &
Get	core/meshcop/dataset.hpp	/^template <> inline const uint32_t &Dataset::Info::Get<Dataset::kChannelMask>(void) const { retur/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const uint32_t &
Get	core/meshcop/dataset.hpp	/^template <> inline const uint32_t &Dataset::Info::Get<Dataset::kDelay>(void) const { return mDel/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const uint32_t &
Get	core/meshcop/dataset.hpp	/^template <> inline void Dataset::Info::Get<Dataset::kActiveTimestamp>(Timestamp &aTimestamp) con/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:void
Get	core/meshcop/dataset.hpp	/^template <> inline void Dataset::Info::Get<Dataset::kPendingTimestamp>(Timestamp &aTimestamp) co/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:void
Get	core/thread/mle_tlvs.hpp	/^    void Get(LeaderData &aLeaderData) const$/;"	f	class:ot::Mle::LeaderDataTlv	typeref:typename:void
Get	core/thread/mle_types.cpp	/^void DeviceMode::Get(ModeConfig &aModeConfig) const$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:void
Get	core/thread/mle_types.hpp	/^    uint8_t Get(void) const { return mMode; }$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:uint8_t
Get	core/utils/flash.cpp	/^Error Flash::Get(uint16_t aKey, int aIndex, uint8_t *aValue, uint16_t *aValueLength) const$/;"	f	class:ot::Flash	typeref:typename:Error
Get	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Get(spinel_prop_key_t aKey, const char *aFormat, ...)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Get	posix/platform/config_file.cpp	/^otError ConfigFile::Get(const char *aKey, int &aIterator, char *aValue, int aValueLength) const$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:otError
Get	posix/platform/daemon.cpp	/^Daemon &Daemon::Get(void)$/;"	f	class:ot::Posix::Daemon	typeref:typename:Daemon &
Get	posix/platform/infra_if.cpp	/^InfraNetif &InfraNetif::Get(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:InfraNetif &
Get	posix/platform/mainloop.cpp	/^Manager &Manager::Get(void)$/;"	f	class:ot::Posix::Mainloop::Manager	typeref:typename:Manager &
Get	posix/platform/mdns_socket.cpp	/^MdnsSocket &MdnsSocket::Get(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:MdnsSocket &
Get	posix/platform/udp.cpp	/^Udp &Udp::Get(void)$/;"	f	class:ot::Posix::Udp	typeref:typename:Udp &
Get154	core/mac/mac_types.hpp	/^    uint32_t Get154(void) const { return m154Counter; }$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:uint32_t
Get154MacFrameCounter	core/thread/key_manager.hpp	/^    uint32_t Get154MacFrameCounter(void) const { return mMacFrameCounters.Get154(); }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetAckMode	core/radio/trel_packet.hpp	/^    AckMode GetAckMode(void) const { return (mControl & kAckModeFlag) ? kAckRequested : kNoAck; /;"	f	class:ot::Trel::Header	typeref:typename:AckMode
GetAckRequest	core/mac/mac_frame.hpp	/^    bool GetAckRequest(void) const { return (GetPsdu()[0] & kFcfAckRequest) != 0; }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
GetAcknowledgmentNumber	core/net/tcp6.hpp	/^        uint32_t GetAcknowledgmentNumber(void) const { return BigEndian::HostSwap32(mAckNumber);/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint32_t
GetAction	core/net/ip6_headers.hpp	/^    Action GetAction(void) const { return static_cast<Action>(mType & kActionMask); }$/;"	f	class:ot::Ip6::Option	typeref:typename:Action
GetActiveRouterCount	core/thread/router_table.hpp	/^    uint8_t GetActiveRouterCount(void) const { return mRouters.GetLength(); }$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetActiveRouters	core/thread/mle_tlvs.hpp	/^    uint8_t GetActiveRouters(void) const { return mActiveRouters; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetActualPower	core/utils/power_calibration.hpp	/^        int16_t GetActualPower(void) const { return mActualPower; }$/;"	f	class:ot::Utils::PowerCalibration::CalibratedPowerEntry	typeref:typename:int16_t
GetActualPower	posix/platform/power.hpp	/^    int16_t GetActualPower(void) const { return mActualPower; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:int16_t
GetAdditionalRecordCount	core/net/dns_types.hpp	/^    uint16_t GetAdditionalRecordCount(void) const { return BigEndian::HostSwap16(mArCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:uint16_t
GetAddress	core/backbone_router/multicast_listeners_table.hpp	/^        const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener	typeref:typename:const Ip6::Address &
GetAddress	core/net/dhcp6.hpp	/^    Ip6::Address &GetAddress(void) { return mAddress; }$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:Ip6::Address &
GetAddress	core/net/dhcp6.hpp	/^    const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:const Ip6::Address &
GetAddress	core/net/dns_client.cpp	/^Error Client::AddressResponse::GetAddress(uint16_t aIndex, Ip6::Address &aAddress, uint32_t &aTt/;"	f	class:ot::Dns::Client::AddressResponse	typeref:typename:Error
GetAddress	core/net/dns_types.hpp	/^    const Ip4::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::Dns::ARecord	typeref:typename:const Ip4::Address &
GetAddress	core/net/dns_types.hpp	/^    const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::Dns::AaaaRecord	typeref:typename:const Ip6::Address &
GetAddress	core/net/mdns.hpp	/^        const Ip6::Address &GetAddress(void) const { return AsCoreType(&mAddress); }$/;"	f	class:ot::Dns::Multicast::Core::AddressInfo	typeref:typename:const Ip6::Address &
GetAddress	core/net/netif.hpp	/^        Address &GetAddress(void) { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::Netif::MulticastAddress	typeref:typename:Address &
GetAddress	core/net/netif.hpp	/^        Address &GetAddress(void) { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:Address &
GetAddress	core/net/netif.hpp	/^        const Address &GetAddress(void) const { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::Netif::MulticastAddress	typeref:typename:const Address &
GetAddress	core/net/netif.hpp	/^        const Address &GetAddress(void) const { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:const Address &
GetAddress	core/net/socket.hpp	/^    Address &GetAddress(void) { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:Address &
GetAddress	core/net/socket.hpp	/^    const Address &GetAddress(void) const { return AsCoreType(&mAddress); }$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:const Address &
GetAddress	core/net/srp_client.hpp	/^        const Ip6::Address &GetAddress(uint8_t aIndex) const { return AsCoreType(&mAddresses[aIn/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:const Ip6::Address &
GetAddress	core/thread/child.cpp	/^const Ip6::Address *Child::AddressIterator::GetAddress(void) const$/;"	f	class:ot::Child::AddressIterator	typeref:typename:const Ip6::Address *
GetAddress	core/thread/network_data_publisher.hpp	/^            const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:const Ip6::Address &
GetAddress	core/thread/network_data_service.hpp	/^        const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServerData	typeref:typename:const Ip6::Address &
GetAddress	core/thread/network_data_service.hpp	/^        const Ip6::Address &GetAddress(void) const { return mAddress; }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServiceData	typeref:typename:const Ip6::Address &
GetAddressMlrState	core/thread/child.cpp	/^MlrState Child::GetAddressMlrState(const Ip6::Address &aAddress) const$/;"	f	class:ot::Child	typeref:typename:MlrState
GetAddressMode	core/net/srp_server.hpp	/^    AddressMode GetAddressMode(void) const { return mAddressMode; }$/;"	f	class:ot::Srp::Server	typeref:typename:AddressMode
GetAddresses	core/net/srp_server.hpp	/^        const Ip6::Address *GetAddresses(uint8_t &aAddressesNum) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const Ip6::Address *
GetAdvData	core/meshcop/meshcop_tlvs.hpp	/^    const uint8_t *GetAdvData(void) const { return mAdvData; }$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:const uint8_t *
GetAdvDataLength	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetAdvDataLength(void) const { return GetLength() - sizeof(mOui); }$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:uint8_t
GetAdvTimeout	core/net/srp_advertising_proxy.hpp	/^    uint32_t GetAdvTimeout(void) const { return mAdvTimeout; }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:uint32_t
GetAdvertisedRioCount	core/border_router/routing_manager.hpp	/^        uint16_t        GetAdvertisedRioCount(void) const { return mPrefixes.GetLength(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:uint16_t
GetAdvertisementTrickleIntervalMax	core/thread/mle_router.hpp	/^    uint32_t GetAdvertisementTrickleIntervalMax(void) const { return mAdvertiseTrickleTimer.GetI/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint32_t
GetAesKey	core/mac/mac_frame.hpp	/^    const Mac::KeyMaterial &GetAesKey(void) const$/;"	f	class:ot::Mac::TxFrame	typeref:typename:const Mac::KeyMaterial &
GetAge	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetAge(void) const { return BigEndian::HostSwap32(mAge); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint32_t
GetAlgorithm	core/net/dns_types.hpp	/^    uint8_t GetAlgorithm(void) const { return mAlgorithm; }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:uint8_t
GetAlgorithm	core/net/dns_types.hpp	/^    uint8_t GetAlgorithm(void) const { return mAlgorithm; }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint8_t
GetAllDomainBackboneRoutersAddress	core/backbone_router/bbr_local.hpp	/^    const Ip6::Address &GetAllDomainBackboneRoutersAddress(void) const { return mAllDomainBackbo/;"	f	class:ot::BackboneRouter::Local	typeref:typename:const Ip6::Address &
GetAllNetworkBackboneRoutersAddress	core/backbone_router/bbr_local.hpp	/^    const Ip6::Address &GetAllNetworkBackboneRoutersAddress(void) const { return mAllNetworkBack/;"	f	class:ot::BackboneRouter::Local	typeref:typename:const Ip6::Address &
GetAloc	core/net/dhcp6_server.hpp	/^        Ip6::Netif::UnicastAddress &GetAloc(void) { return mAloc; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:Ip6::Netif::UnicastAddress &
GetAloc16	core/thread/mle.hpp	/^        uint16_t GetAloc16(void) const { return GetAddress().GetIid().GetLocator(); }$/;"	f	class:ot::Mle::Mle::ServiceAloc	typeref:typename:uint16_t
GetAndAdvanceIndex	core/thread/network_data.hpp	/^        uint8_t GetAndAdvanceIndex(void) { return mIteratorBuffer[kEntryPosition]++; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:uint8_t
GetAnnounceBeginClient	core/meshcop/commissioner.hpp	/^    AnnounceBeginClient &GetAnnounceBeginClient(void) { return mAnnounceBegin; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:AnnounceBeginClient &
GetAnswerCount	core/net/dns_types.hpp	/^    uint16_t GetAnswerCount(void) const { return BigEndian::HostSwap16(mAnCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:uint16_t
GetAnycastModeSequenceNumber	core/net/srp_server.hpp	/^    uint8_t GetAnycastModeSequenceNumber(void) const { return mAnycastSequenceNumber; }$/;"	f	class:ot::Srp::Server	typeref:typename:uint8_t
GetAnycastSeqNum	core/net/srp_client.hpp	/^        uint8_t GetAnycastSeqNum(void) const { return mAnycastSeqNum; }$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:uint8_t
GetAppendedLength	core/common/appender.cpp	/^uint16_t Appender::GetAppendedLength(void) const$/;"	f	class:ot::Appender	typeref:typename:uint16_t
GetApplicationCoap	core/instance/instance.hpp	/^    Coap::Coap &GetApplicationCoap(void) { return mApplicationCoap; }$/;"	f	class:ot::Instance	typeref:typename:Coap::Coap &
GetApplicationCoapSecure	core/instance/instance.hpp	/^    Coap::CoapSecure &GetApplicationCoapSecure(void) { return mApplicationCoapSecure; }$/;"	f	class:ot::Instance	typeref:typename:Coap::CoapSecure &
GetArgsLength	core/utils/parse_cmdline.cpp	/^uint8_t Arg::GetArgsLength(Arg aArgs[])$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:uint8_t
GetArrayBuffer	core/common/array.hpp	/^    Type *GetArrayBuffer(void) { return mElements; }$/;"	f	class:ot::Array	typeref:typename:Type *
GetArrayBuffer	core/common/array.hpp	/^    const Type *GetArrayBuffer(void) const { return mElements; }$/;"	f	class:ot::Array	typeref:typename:const Type *
GetArrayEnd	core/common/array.hpp	/^template <typename Type, uint16_t kArrayLength> inline Type *GetArrayEnd(Type (&aArray)[kArrayLe/;"	f	namespace:ot	typeref:typename:Type *
GetArrayEnd	core/common/array.hpp	/^template <typename Type, uint16_t kArrayLength> inline const Type *GetArrayEnd(const Type (&aArr/;"	f	namespace:ot	typeref:typename:const Type *
GetArrayEnd	lib/spinel/multi_frame_buffer.hpp	/^    template <typename Type, uint16_t kArrayLength> Type *GetArrayEnd(Type (&aArray)[kArrayLengt/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:Type *
GetArrayEnd	lib/spinel/multi_frame_buffer.hpp	/^    template <typename Type, uint16_t kArrayLength> const Type *GetArrayEnd(const Type (&aArray)/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:const Type *
GetArrayLength	core/common/array.hpp	/^template <typename Type, uint16_t kArrayLength> constexpr inline uint16_t GetArrayLength(const T/;"	f	namespace:ot	typeref:typename:uint16_t
GetAsBitMask	core/mac/mac_types.hpp	/^    uint8_t GetAsBitMask(void) const { return mBitMask; }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:uint8_t
GetAsCString	core/meshcop/meshcop.hpp	/^    const char *GetAsCString(void) const { return m8; }$/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:const char *
GetAsCString	core/meshcop/network_name.hpp	/^    const char *GetAsCString(void) const { return m8; }$/;"	f	class:ot::MeshCoP::NetworkName	typeref:typename:const char *
GetAsCString	core/net/dns_types.hpp	/^    const char *GetAsCString(void) const { return mString; }$/;"	f	class:ot::Dns::Name	typeref:typename:const char *
GetAsData	core/common/appender.cpp	/^void Appender::GetAsData(Data<kWithUint16Length> &aData) const$/;"	f	class:ot::Appender	typeref:typename:void
GetAsData	core/meshcop/network_name.cpp	/^NameData NetworkName::GetAsData(void) const$/;"	f	class:ot::MeshCoP::NetworkName	typeref:typename:NameData
GetAsFlags	core/common/notifier.hpp	/^    Flags GetAsFlags(void) const { return mEventFlags; }$/;"	f	class:ot::Events	typeref:typename:Flags
GetAsIndex	core/thread/child.hpp	/^        Index GetAsIndex(void) const { return mIndex; }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:Index
GetAsMessage	core/net/dns_types.hpp	/^    const Message &GetAsMessage(uint16_t &aOffset) const$/;"	f	class:ot::Dns::Name	typeref:typename:const Message &
GetAsPacket	core/net/nd6.hpp	/^        const Icmp6Packet &GetAsPacket(void) const { return mData; }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:const Icmp6Packet &
GetAsPacket	core/net/nd6.hpp	/^        void GetAsPacket(Icmp6Packet &aPacket) const { aPacket.Init(mArray.AsCArray(), mArray.Ge/;"	f	class:ot::Ip6::Nd::RouterAdvert::TxMessage	typeref:typename:void
GetAsRouterIdSet	core/thread/router_table.cpp	/^void RouterTable::RouterIdMap::GetAsRouterIdSet(Mle::RouterIdSet &aRouterIdSet) const$/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:void
GetAssignParentPriority	core/thread/mle_router.hpp	/^    int8_t GetAssignParentPriority(void) const { return mParentPriority; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:int8_t
GetAssignedRouterIdMask	core/thread/thread_tlvs.hpp	/^    Mle::RouterIdSet &GetAssignedRouterIdMask(void) { return mAssignedRouterIdMask; }$/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:Mle::RouterIdSet &
GetAssignedRouterIdMask	core/thread/thread_tlvs.hpp	/^    const Mle::RouterIdSet &GetAssignedRouterIdMask(void) const { return mAssignedRouterIdMask; /;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:const Mle::RouterIdSet &
GetAttachStartDelay	core/thread/mle.cpp	/^uint32_t Mle::GetAttachStartDelay(void) const$/;"	f	class:ot::Mle::Mle	typeref:typename:uint32_t
GetAuthoritative	core/meshcop/timestamp.hpp	/^    bool GetAuthoritative(void) const { return (BigEndian::HostSwap16(mTicks) & kAuthoritativeMa/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:bool
GetAuthorityRecordCount	core/net/dns_types.hpp	/^    uint16_t GetAuthorityRecordCount(void) const { return BigEndian::HostSwap16(mNsCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:uint16_t
GetAutoChannelSelectionInterval	core/utils/channel_manager.hpp	/^    uint32_t GetAutoChannelSelectionInterval(void) const { return mAutoSelectInterval; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint32_t
GetAutoCslChannelSelectionEnabled	core/utils/channel_manager.hpp	/^    bool GetAutoCslChannelSelectionEnabled(void) const { return mAutoSelectCslEnabled; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:bool
GetAutoNetworkChannelSelectionEnabled	core/utils/channel_manager.hpp	/^    bool GetAutoNetworkChannelSelectionEnabled(void) const { return mAutoSelectEnabled; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:bool
GetAverage	core/thread/link_quality.cpp	/^int8_t RssAverager::GetAverage(void) const$/;"	f	class:ot::RssAverager	typeref:typename:int8_t
GetAverage	core/thread/link_quality.hpp	/^    uint8_t GetAverage(void) const { return mAverage; }$/;"	f	class:ot::LqiAverager	typeref:typename:uint8_t
GetAverageLqi	core/common/message.hpp	/^    uint8_t GetAverageLqi(void) const { return GetMetadata().mLqiAverager.GetAverage(); }$/;"	f	class:ot::Message	typeref:typename:uint8_t
GetAverageLqi	core/thread/link_metrics_types.hpp	/^    uint8_t GetAverageLqi(void) const { return mLqiAverager.GetAverage(); }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:uint8_t
GetAverageRss	core/common/message.hpp	/^    int8_t GetAverageRss(void) const { return GetMetadata().mRssAverager.GetAverage(); }$/;"	f	class:ot::Message	typeref:typename:int8_t
GetAverageRss	core/thread/link_metrics_types.hpp	/^    int8_t GetAverageRss(void) const { return mRssAverager.GetAverage(); }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:int8_t
GetAverageRss	core/thread/link_quality.hpp	/^    int8_t GetAverageRss(void) const { return mRssAverager.GetAverage(); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:int8_t
GetAverageRssRaw	core/thread/link_quality.hpp	/^    uint16_t GetAverageRssRaw(void) const { return mRssAverager.GetRaw(); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:uint16_t
GetAverageRssi	core/thread/network_diagnostic_tlvs.hpp	/^    int8_t GetAverageRssi(void) const { return mAverageRssi; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:int8_t
GetAverageRssi	core/thread/network_diagnostic_tlvs.hpp	/^    int8_t GetAverageRssi(void) const { return mAverageRssi; }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:int8_t
GetBackboneRouterPrimary	core/thread/network_data_service.cpp	/^void Manager::GetBackboneRouterPrimary(ot::BackboneRouter::Config &aConfig) const$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:void
GetBackboneSockets	core/net/udp6.cpp	/^const Udp::SocketHandle *Udp::GetBackboneSockets(void) const$/;"	f	class:ot::Ip6::Udp	typeref:typename:const Udp::SocketHandle *
GetBackboneTmfAgent	core/backbone_router/bbr_manager.hpp	/^    BackboneTmfAgent &GetBackboneTmfAgent(void) { return mBackboneTmfAgent; }$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:BackboneTmfAgent &
GetBacklogBytes	core/net/tcp6.cpp	/^size_t Tcp::Endpoint::GetBacklogBytes(void) const { return GetSendBufferBytes() - GetInFlightByt/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:size_t
GetBit	core/meshcop/meshcop.hpp	/^    bool GetBit(uint8_t aBit) const { return (m8[BitIndex(aBit)] & BitFlag(aBit)) != 0; }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
GetBitmapLength	core/net/dns_types.hpp	/^        uint8_t GetBitmapLength(void) { return mBitmapLength; }$/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:uint8_t
GetBlockNumber	core/net/dns_types.hpp	/^        uint8_t GetBlockNumber(void) const { return mBlockNumber; }$/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:uint8_t
GetBlockWiseBlockNumber	core/coap/coap_message.hpp	/^    uint32_t GetBlockWiseBlockNumber(void) const { return GetHelpData().mBlockWiseData.mBlockNum/;"	f	class:ot::Coap::Message	typeref:typename:uint32_t
GetBlockWiseBlockSize	core/coap/coap_message.hpp	/^    otCoapBlockSzx GetBlockWiseBlockSize(void) const { return GetHelpData().mBlockWiseData.mBloc/;"	f	class:ot::Coap::Message	typeref:typename:otCoapBlockSzx
GetBorderAgentLocator	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetBorderAgentLocator(void) const { return BigEndian::HostSwap16(mLocator); }$/;"	f	class:ot::MeshCoP::BorderAgentLocatorTlv	typeref:typename:uint16_t
GetBorderRoutingCounters	core/net/ip6.hpp	/^    const otBorderRoutingCounters &GetBorderRoutingCounters(void) const { return mBorderRoutingC/;"	f	class:ot::Ip6::Ip6	typeref:typename:const otBorderRoutingCounters &
GetBorderRoutingCounters	core/net/ip6.hpp	/^    otBorderRoutingCounters &GetBorderRoutingCounters(void) { return mBorderRoutingCounters; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:otBorderRoutingCounters &
GetBroadcastTxFrame	core/mac/mac_links.cpp	/^TxFrame &TxFrames::GetBroadcastTxFrame(void)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:TxFrame &
GetBuffer	core/common/message.hpp	/^        const Buffer *GetBuffer(void) const { return mBuffer; }$/;"	f	class:ot::Message::Chunk	typeref:typename:const Buffer *
GetBuffer	core/meshcop/network_name.hpp	/^    const char *GetBuffer(void) const { return reinterpret_cast<const char *>(GetBytes()); }$/;"	f	class:ot::MeshCoP::NameData	typeref:typename:const char *
GetBuffer	core/radio/trel_packet.hpp	/^    const uint8_t *GetBuffer(void) const { return Base::GetBytes(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:const uint8_t *
GetBuffer	core/radio/trel_packet.hpp	/^    uint8_t *GetBuffer(void) { return Base::GetBytes(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:uint8_t *
GetBufferCount	core/common/message.cpp	/^uint8_t Message::GetBufferCount(void) const$/;"	f	class:ot::Message	typeref:typename:uint8_t
GetBufferInfo	core/instance/instance.cpp	/^void Instance::GetBufferInfo(BufferInfo &aInfo)$/;"	f	class:ot::Instance	typeref:typename:void
GetBufferStart	core/common/appender.hpp	/^    uint8_t *GetBufferStart(void) const { return AsNonConst(mShared.mFrameBuilder.GetBytes()); }$/;"	f	class:ot::Appender	typeref:typename:uint8_t *
GetBufferedMessageSet	core/net/ip6_mpl.hpp	/^    const MessageQueue &GetBufferedMessageSet(void) const { return mBufferedMessageSet; }$/;"	f	class:ot::Ip6::Mpl	typeref:typename:const MessageQueue &
GetBuild	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetBuild(void) const { return (BigEndian::HostSwap16(mBuildRevision) & kBuildMask) /;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:uint16_t
GetBusSpeed	lib/spinel/radio_spinel.cpp	/^uint32_t RadioSpinel::GetBusSpeed(void) const { return GetSpinelDriver().GetSpinelInterface()->G/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint32_t
GetBusSpeed	posix/platform/hdlc_interface.hpp	/^    uint32_t GetBusSpeed(void) const { return mBaudRate; }$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:uint32_t
GetBusSpeed	posix/platform/spi_interface.hpp	/^    uint32_t GetBusSpeed(void) const { return ((mSpiDevFd >= 0) ? mSpiSpeedHz : 0); }$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:uint32_t
GetBusSpeed	posix/platform/vendor_interface_example.cpp	/^uint32_t VendorInterface::GetBusSpeed(void) const { return 1000000; }$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:uint32_t
GetBusyPeriod	core/utils/jam_detector.hpp	/^    uint8_t GetBusyPeriod(void) const { return mBusyPeriod; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:uint8_t
GetBytes	core/common/data.hpp	/^    const uint8_t *GetBytes(void) const { return Base::GetBytes(); }$/;"	f	class:ot::MutableData	typeref:typename:const uint8_t *
GetBytes	core/common/data.hpp	/^    const uint8_t *GetBytes(void) const { return mBuffer; }$/;"	f	class:ot::Data	typeref:typename:const uint8_t *
GetBytes	core/common/data.hpp	/^    uint8_t *GetBytes(void) { return AsNonConst(Base::GetBytes()); }$/;"	f	class:ot::MutableData	typeref:typename:uint8_t *
GetBytes	core/common/frame_builder.hpp	/^    const uint8_t *GetBytes(void) const { return mBuffer; }$/;"	f	class:ot::FrameBuilder	typeref:typename:const uint8_t *
GetBytes	core/common/heap_data.hpp	/^    const uint8_t *GetBytes(void) const { return mData.GetBytes(); }$/;"	f	class:ot::Heap::Data	typeref:typename:const uint8_t *
GetBytes	core/common/message.hpp	/^        uint8_t *GetBytes(void) { return AsNonConst(Chunk::GetBytes()); }$/;"	f	class:ot::Message::MutableChunk	typeref:typename:uint8_t *
GetBytes	core/crypto/ecdsa.hpp	/^        const uint8_t *GetBytes(void) const { return m8; }$/;"	f	class:ot::Crypto::Ecdsa::P256::PublicKey	typeref:typename:const uint8_t *
GetBytes	core/crypto/ecdsa.hpp	/^        const uint8_t *GetBytes(void) const { return m8; }$/;"	f	class:ot::Crypto::Ecdsa::P256::Signature	typeref:typename:const uint8_t *
GetBytes	core/crypto/sha256.hpp	/^        const uint8_t *GetBytes(void) const { return m8; }$/;"	f	class:ot::Crypto::Sha256::Hash	typeref:typename:const uint8_t *
GetBytes	core/crypto/storage.hpp	/^    const uint8_t *GetBytes(void) const { return mKey; }$/;"	f	class:ot::Crypto::Key	typeref:typename:const uint8_t *
GetBytes	core/crypto/storage.hpp	/^    const uint8_t *GetBytes(void) const { return mKey; }$/;"	f	class:ot::Crypto::LiteralKey	typeref:typename:const uint8_t *
GetBytes	core/mac/mac_types.hpp	/^    const uint8_t *GetBytes(void) const { return m8; }$/;"	f	class:ot::Mac::Key	typeref:typename:const uint8_t *
GetBytes	core/meshcop/dataset.hpp	/^    const uint8_t *GetBytes(void) const { return mTlvs; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:const uint8_t *
GetBytes	core/meshcop/dataset.hpp	/^    uint8_t *GetBytes(void) { return mTlvs; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:uint8_t *
GetBytes	core/net/ip4_types.hpp	/^    const uint8_t *GetBytes(void) const { return mAddress.mFields.m8; }$/;"	f	class:ot::Ip4::Cidr	typeref:typename:const uint8_t *
GetBytes	core/net/ip4_types.hpp	/^    const uint8_t *GetBytes(void) const { return mFields.m8; }$/;"	f	class:ot::Ip4::Address	typeref:typename:const uint8_t *
GetBytes	core/net/ip6_address.hpp	/^    const uint8_t *GetBytes(void) const { return mFields.m8; }$/;"	f	class:ot::Ip6::Address	typeref:typename:const uint8_t *
GetBytes	core/net/ip6_address.hpp	/^    const uint8_t *GetBytes(void) const { return mFields.m8; }$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:const uint8_t *
GetBytes	core/net/ip6_address.hpp	/^    const uint8_t *GetBytes(void) const { return mPrefix.mFields.m8; }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:const uint8_t *
GetBytes	core/thread/mle_types.hpp	/^    const uint8_t *GetBytes(void) const { return mArray.GetArrayBuffer(); }$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:const uint8_t *
GetBytes	core/thread/network_data.hpp	/^    const uint8_t *GetBytes(void) const { return mTlvs; }$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const uint8_t *
GetBytes	core/thread/network_data.hpp	/^    uint8_t *GetBytes(void) { return AsNonConst(AsConst(this)->GetBytes()); }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:uint8_t *
GetBytesSize	core/net/ip6_address.hpp	/^    uint8_t GetBytesSize(void) const { return SizeForLength(mLength); }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:uint8_t
GetCString	core/utils/parse_cmdline.hpp	/^    char *GetCString(void) { return mString; }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:char *
GetCString	core/utils/parse_cmdline.hpp	/^    const char *GetCString(void) const { return mString; }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:const char *
GetCacheEntryPool	core/thread/address_resolver.hpp	/^    CacheEntryPool &GetCacheEntryPool(void) { return mCacheEntryPool; }$/;"	f	class:ot::AddressResolver	typeref:typename:CacheEntryPool &
GetCacheList	core/net/mdns.hpp	/^template <> inline OwningList<Core::BrowseCache> &Core::GetCacheList<Core::BrowseCache>(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::BrowseCache> &
GetCacheList	core/net/mdns.hpp	/^template <> inline OwningList<Core::Ip4AddrCache> &Core::GetCacheList<Core::Ip4AddrCache>(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::Ip4AddrCache> &
GetCacheList	core/net/mdns.hpp	/^template <> inline OwningList<Core::Ip6AddrCache> &Core::GetCacheList<Core::Ip6AddrCache>(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::Ip6AddrCache> &
GetCacheList	core/net/mdns.hpp	/^template <> inline OwningList<Core::SrvCache> &Core::GetCacheList<Core::SrvCache>(void) { return/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::SrvCache> &
GetCacheList	core/net/mdns.hpp	/^template <> inline OwningList<Core::TxtCache> &Core::GetCacheList<Core::TxtCache>(void) { return/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::TxtCache> &
GetCachedResponses	core/coap/coap.hpp	/^    const MessageQueue &GetCachedResponses(void) const { return mResponsesQueue.GetResponses(); /;"	f	class:ot::Coap::CoapBase	typeref:typename:const MessageQueue &
GetCapacity	core/common/heap_array.hpp	/^    IndexType GetCapacity(void) const { return mCapacity; }$/;"	f	class:ot::Heap::Array	typeref:typename:IndexType
GetCapacity	core/utils/heap.hpp	/^    size_t GetCapacity(void) const { return kFirstBlockSize; }$/;"	f	class:ot::Utils::Heap	typeref:typename:size_t
GetCaps	core/mac/link_raw.hpp	/^    otRadioCaps GetCaps(void) const { return mSubMac.GetCaps(); }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:otRadioCaps
GetCaps	core/mac/sub_mac.cpp	/^otRadioCaps SubMac::GetCaps(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:otRadioCaps
GetCaps	core/radio/radio.hpp	/^inline otRadioCaps Radio::GetCaps(void) { return otPlatRadioGetCaps(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:otRadioCaps
GetCaps	core/radio/radio.hpp	/^inline otRadioCaps Radio::GetCaps(void)$/;"	f	class:ot::Radio	typeref:typename:otRadioCaps
GetCcaEnergyDetectThreshold	core/radio/radio.hpp	/^inline Error Radio::GetCcaEnergyDetectThreshold(int8_t &) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
GetCcaEnergyDetectThreshold	core/radio/radio.hpp	/^inline Error Radio::GetCcaEnergyDetectThreshold(int8_t &aThreshold)$/;"	f	class:ot::Radio	typeref:typename:Error
GetCcaEnergyDetectThreshold	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetCcaEnergyDetectThreshold(int8_t &aThreshold)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetCcaFailureRate	core/mac/mac.hpp	/^    uint16_t GetCcaFailureRate(void) const { return mCcaSuccessRateTracker.GetFailureRate(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint16_t
GetCcaFailureRateThreshold	core/utils/channel_manager.hpp	/^    uint16_t GetCcaFailureRateThreshold(void) const { return mCcaFailureRateThreshold; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint16_t
GetChallenge	core/thread/child.hpp	/^    const Mle::TxChallenge &GetChallenge(void) const { return mAttachChallenge; }$/;"	f	class:ot::Child	typeref:typename:const Mle::TxChallenge &
GetChallenge	core/thread/neighbor.hpp	/^    const Mle::TxChallenge &GetChallenge(void) const { return mValidPending.mPending.mChallenge;/;"	f	class:ot::Neighbor	typeref:typename:const Mle::TxChallenge &
GetChannel	core/common/message.hpp	/^    uint8_t GetChannel(void) const { return GetMetadata().mChannel; }$/;"	f	class:ot::Message	typeref:typename:uint8_t
GetChannel	core/mac/link_raw.hpp	/^    uint8_t GetChannel(void) const { return mReceiveChannel; }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:uint8_t
GetChannel	core/mac/mac_frame.hpp	/^    uint8_t GetChannel(void) const { return mChannel; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetChannel	core/radio/trel_packet.hpp	/^    uint8_t GetChannel(void) const { return mChannel; }$/;"	f	class:ot::Trel::Header	typeref:typename:uint8_t
GetChannel	core/thread/mesh_forwarder.hpp	/^    uint8_t GetChannel(void) const { return mChannel; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:uint8_t
GetChannel	core/thread/mle_tlvs.hpp	/^    uint16_t GetChannel(void) const { return BigEndian::HostSwap16(mChannel); }$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:uint16_t
GetChannel	lib/spinel/radio_spinel.hpp	/^    uint8_t GetChannel(void) const { return mChannel; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint8_t
GetChannelEnd	posix/platform/power.hpp	/^    uint8_t GetChannelEnd(void) const { return mChannelEnd; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:uint8_t
GetChannelEnd	posix/platform/power.hpp	/^    uint8_t GetChannelEnd(void) const { return mChannelEnd; }$/;"	f	class:ot::Power::TargetPower	typeref:typename:uint8_t
GetChannelMask	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::GetChannelMask(Mac::ChannelMask &aChannelMask) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
GetChannelMask	core/thread/announce_sender.hpp	/^    const Mac::ChannelMask GetChannelMask(void) const { return mChannelMask; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:const Mac::ChannelMask
GetChannelMask	posix/platform/configuration.cpp	/^otError Configuration::GetChannelMask(const char *aKey, const Power::Domain &aDomain, uint32_t &/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
GetChannelOccupancy	core/utils/channel_monitor.cpp	/^uint16_t ChannelMonitor::GetChannelOccupancy(uint8_t aChannel) const$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:uint16_t
GetChannelPage	core/meshcop/meshcop_tlvs.hpp	/^        uint8_t  GetChannelPage(void) const { return mChannelPage; }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:uint8_t
GetChannelPage	core/thread/mle_tlvs.hpp	/^    uint8_t GetChannelPage(void) const { return mChannelPage; }$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:uint8_t
GetChannelPages	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t *GetChannelPages(void) { return mChannelPages; }$/;"	f	class:ot::NetworkDiagnostic::ChannelPagesTlv	typeref:typename:uint8_t *
GetChannelStart	posix/platform/power.hpp	/^    uint8_t GetChannelStart(void) const { return mChannelStart; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:uint8_t
GetChannelStart	posix/platform/power.hpp	/^    uint8_t GetChannelStart(void) const { return mChannelStart; }$/;"	f	class:ot::Power::TargetPower	typeref:typename:uint8_t
GetChecksum	core/net/icmp6.hpp	/^        uint16_t GetChecksum(void) const { return BigEndian::HostSwap16(mChecksum); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:uint16_t
GetChecksum	core/net/ip4_types.hpp	/^        uint16_t GetChecksum(void) const { return BigEndian::HostSwap16(mChecksum); }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:uint16_t
GetChecksum	core/net/ip4_types.hpp	/^    uint16_t GetChecksum(void) const { return BigEndian::HostSwap16(mHeaderChecksum); }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint16_t
GetChecksum	core/net/ip6.cpp	/^uint16_t Headers::GetChecksum(void) const$/;"	f	class:ot::Ip6::Headers	typeref:typename:uint16_t
GetChecksum	core/net/tcp6.hpp	/^        uint16_t GetChecksum(void) const { return BigEndian::HostSwap16(mChecksum); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetChecksum	core/net/udp6.hpp	/^        uint16_t GetChecksum(void) const { return BigEndian::HostSwap16(mChecksum); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:uint16_t
GetChild	core/thread/child.hpp	/^        const Child &GetChild(void) const { return mChild; }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:const Child &
GetChild	core/thread/child_table.hpp	/^        Child *GetChild(void) { return mItem; }$/;"	f	class:ot::ChildTable::Iterator	typeref:typename:Child *
GetChildAtIndex	core/thread/child_table.cpp	/^Child *ChildTable::GetChildAtIndex(uint16_t aChildIndex)$/;"	f	class:ot::ChildTable	typeref:typename:Child *
GetChildId	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetChildId(void) const { return (GetTimeoutChildId() & kChildIdMask) >> kChildIdOff/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:uint16_t
GetChildIndex	core/thread/child_table.hpp	/^    uint16_t GetChildIndex(const Child &aChild) const { return static_cast<uint16_t>(&aChild - m/;"	f	class:ot::ChildTable	typeref:typename:uint16_t
GetChildInfo	core/common/settings.hpp	/^        const ChildInfo &GetChildInfo(void) const { return mChildInfo; }$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:const ChildInfo &
GetChildInfoById	core/thread/child_table.cpp	/^Error ChildTable::GetChildInfoById(uint16_t aChildId, Child::Info &aChildInfo)$/;"	f	class:ot::ChildTable	typeref:typename:Error
GetChildInfoByIndex	core/thread/child_table.cpp	/^Error ChildTable::GetChildInfoByIndex(uint16_t aChildIndex, Child::Info &aChildInfo)$/;"	f	class:ot::ChildTable	typeref:typename:Error
GetChildMask	core/common/message.cpp	/^bool Message::GetChildMask(uint16_t aChildIndex) const { return GetMetadata().mChildMask.Get(aCh/;"	f	class:ot::Message	typeref:typename:bool
GetChildRouterLinks	core/thread/mle_router.hpp	/^    uint8_t GetChildRouterLinks(void) const { return mChildRouterLinks; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetClampedTtl	core/net/mdns.cpp	/^uint32_t Core::CacheRecordInfo::GetClampedTtl(void) const$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:uint32_t
GetClass	core/net/dns_types.hpp	/^    uint16_t GetClass(void) const { return BigEndian::HostSwap16(mClass); }$/;"	f	class:ot::Dns::Question	typeref:typename:uint16_t
GetClass	core/net/dns_types.hpp	/^    uint16_t GetClass(void) const { return BigEndian::HostSwap16(mClass); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:uint16_t
GetClockAccuracy	core/mac/mac_types.hpp	/^    uint8_t GetClockAccuracy(void) const { return mClockAccuracy; }$/;"	f	class:ot::Mac::CslAccuracy	typeref:typename:uint8_t
GetCode	core/coap/coap_message.hpp	/^    uint8_t GetCode(void) const { return static_cast<Code>(GetHelpData().mHeader.mCode); }$/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t
GetCode	core/net/dhcp6.hpp	/^    Code GetCode(void) const { return static_cast<Code>(BigEndian::HostSwap16(mCode)); }$/;"	f	class:ot::Dhcp6::Option	typeref:typename:Code
GetCode	core/net/icmp6.hpp	/^        Code GetCode(void) const { return static_cast<Code>(mCode); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:Code
GetCode	core/net/ip4_types.hpp	/^        uint8_t GetCode(void) const { return mCode; }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:uint8_t
GetCoexMetrics	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetCoexMetrics(otRadioCoexMetrics &aCoexMetrics)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetCommandClass	core/meshcop/tcat_agent.cpp	/^TcatAgent::CommandClass TcatAgent::GetCommandClass(uint8_t aTlvType) const$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:TcatAgent::CommandClass
GetCommandId	core/mac/mac_frame.cpp	/^Error Frame::GetCommandId(uint8_t &aCommandId) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetCommissionerAloc	core/thread/mle.hpp	/^    Error GetCommissionerAloc(Ip6::Address &aAddress, uint16_t aSessionId) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetCommissionerSessionId	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetCommissionerSessionId(void) const { return BigEndian::HostSwap16(mSessionId); }$/;"	f	class:ot::MeshCoP::CommissionerSessionIdTlv	typeref:typename:uint16_t
GetCommissioningDataset	core/thread/network_data_leader.cpp	/^void Leader::GetCommissioningDataset(MeshCoP::CommissioningDataset &aDataset) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
GetComponents	core/meshcop/dataset.hpp	/^        Components       &GetComponents(void) { return static_cast<Components &>(mComponents); }$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:Components &
GetComponents	core/meshcop/dataset.hpp	/^        const Components &GetComponents(void) const { return static_cast<const Components &>(mCo/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:const Components &
GetConfig	core/backbone_router/bbr_leader.cpp	/^Error Leader::GetConfig(Config &aConfig) const$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:Error
GetConfig	core/backbone_router/bbr_local.cpp	/^void Local::GetConfig(Config &aConfig) const$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
GetConnectionTime	core/thread/neighbor.cpp	/^uint32_t Neighbor::GetConnectionTime(void) const$/;"	f	class:ot::Neighbor	typeref:typename:uint32_t
GetConnectionTime	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetConnectionTime(void) const { return BigEndian::HostSwap32(mConnectionTime); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint32_t
GetConnectionTime	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetConnectionTime(void) const { return BigEndian::HostSwap32(mConnectionTime); }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint32_t
GetConnectivity	core/thread/network_diagnostic_tlvs.hpp	/^    void GetConnectivity(Connectivity &aConnectivity) const$/;"	f	class:ot::NetworkDiagnostic::ConnectivityTlv	typeref:typename:void
GetContext	core/common/callback.hpp	/^    void *GetContext(void) const { return mContext; }$/;"	f	class:ot::CallbackBase	typeref:typename:void *
GetContext	core/common/tasklet.hpp	/^    void *GetContext(void) { return mContext; }$/;"	f	class:ot::TaskletContext	typeref:typename:void *
GetContext	core/common/timer.hpp	/^    void *GetContext(void) { return mContext; }$/;"	f	class:ot::TimerMilliContext	typeref:typename:void *
GetContext	core/net/tcp6.hpp	/^        void *GetContext(void) { return mContext; }$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:void *
GetContext	core/net/tcp6.hpp	/^        void *GetContext(void) { return mContext; }$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:void *
GetContext	core/thread/network_data_leader.cpp	/^Error Leader::GetContext(const Ip6::Address &aAddress, Lowpan::Context &aContext) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
GetContext	core/thread/network_data_leader.cpp	/^Error Leader::GetContext(uint8_t aContextId, Lowpan::Context &aContext) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
GetContextForMeshLocalPrefix	core/thread/network_data_leader.cpp	/^void Leader::GetContextForMeshLocalPrefix(Lowpan::Context &aContext) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
GetContextId	core/net/dhcp6_server.hpp	/^        uint8_t GetContextId(void) const { return mAloc.mAddress.mFields.m8[15]; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:uint8_t
GetContextId	core/thread/mle_tlvs.hpp	/^    static uint8_t GetContextId(uint8_t aControlByte) { return (aControlByte & kContextIdMask); /;"	f	class:ot::Mle::AddressRegistrationTlv	typeref:typename:uint8_t
GetContextId	core/thread/network_data_tlvs.hpp	/^    uint8_t GetContextId(void) const { return mFlags & kContextIdMask; }$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:uint8_t
GetContextIdReuseDelay	core/thread/network_data_leader.hpp	/^    uint32_t GetContextIdReuseDelay(void) const { return mContextIds.GetReuseDelay(); }$/;"	f	class:ot::NetworkData::Leader	typeref:typename:uint32_t
GetContextLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetContextLength(void) const { return mContextLength; }$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:uint8_t
GetCoprocessorCaps	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::GetCoprocessorCaps(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
GetCoprocessorType	lib/spinel/spinel_driver.cpp	/^CoprocessorType SpinelDriver::GetCoprocessorType(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:CoprocessorType
GetCoprocessorVersion	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::GetCoprocessorVersion(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
GetCost	core/thread/router.hpp	/^    uint8_t GetCost(void) const { return mCost; }$/;"	f	class:ot::Router	typeref:typename:uint8_t
GetCount	core/thread/link_quality.hpp	/^    uint8_t GetCount(void) const { return mCount; }$/;"	f	class:ot::LqiAverager	typeref:typename:uint8_t
GetCounter	core/thread/child_supervision.hpp	/^    uint16_t GetCounter(void) const { return mCounter; }$/;"	f	class:ot::SupervisionListener	typeref:typename:uint16_t
GetCounters	core/mac/mac.hpp	/^    otMacCounters &GetCounters(void) { return mCounters; }$/;"	f	class:ot::Mac::Mac	typeref:typename:otMacCounters &
GetCounters	core/net/dnssd_server.hpp	/^    const Counters &GetCounters(void) const { return mCounters; };$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:const Counters &
GetCounters	core/net/nat64_translator.hpp	/^    void GetCounters(ProtocolCounters &aCounters) const { aCounters = mCounters; }$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
GetCounters	core/net/srp_advertising_proxy.hpp	/^    const Counters &GetCounters(void) const { return mCounters; }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:const Counters &
GetCounters	core/radio/trel_interface.cpp	/^const Counters *Interface::GetCounters(void) const { return otPlatTrelGetCounters(&GetInstance()/;"	f	class:ot::Trel::Interface	typeref:typename:const Counters *
GetCounters	core/thread/mesh_forwarder.hpp	/^    const otIpCounters &GetCounters(void) const { return mIpCounters; }$/;"	f	class:ot::MeshForwarder	typeref:typename:const otIpCounters &
GetCounters	core/thread/mle.hpp	/^    const Counters &GetCounters(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:const Counters &
GetCslAccuracy	core/radio/radio.hpp	/^inline uint8_t Radio::GetCslAccuracy(void) { return NumericLimits<uint8_t>::kMax; }$/;"	f	class:ot::Radio	typeref:typename:uint8_t
GetCslAccuracy	core/radio/radio.hpp	/^inline uint8_t Radio::GetCslAccuracy(void) { return otPlatRadioGetCslAccuracy(GetInstancePtr());/;"	f	class:ot::Radio	typeref:typename:uint8_t
GetCslAccuracy	core/thread/router.hpp	/^    const Mac::CslAccuracy &GetCslAccuracy(void) const { return mCslAccuracy; }$/;"	f	class:ot::Parent	typeref:typename:const Mac::CslAccuracy &
GetCslAccuracy	lib/spinel/radio_spinel.cpp	/^uint8_t RadioSpinel::GetCslAccuracy(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint8_t
GetCslChannel	core/mac/mac.hpp	/^    uint8_t GetCslChannel(void) const { return mCslChannel; }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
GetCslChannel	core/thread/csl_tx_scheduler.hpp	/^        uint8_t GetCslChannel(void) const { return mCslChannel; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint8_t
GetCslChannel	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetCslChannel(void) const { return mCslChannel; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint8_t
GetCslClockAccuracy	core/thread/mle_tlvs.hpp	/^    uint8_t GetCslClockAccuracy(void) const { return mCslClockAccuracy; }$/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:uint8_t
GetCslLastHeard	core/thread/csl_tx_scheduler.hpp	/^        TimeMilli GetCslLastHeard(void) const { return mCslLastHeard; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:TimeMilli
GetCslParentAccuracy	core/mac/mac.hpp	/^    const CslAccuracy &GetCslParentAccuracy(void) const { return mLinks.GetSubMac().GetCslParent/;"	f	class:ot::Mac::Mac	typeref:typename:const CslAccuracy &
GetCslParentAccuracy	core/mac/sub_mac.hpp	/^    const CslAccuracy &GetCslParentAccuracy(void) const { return mCslParentAccuracy; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:const CslAccuracy &
GetCslPeriod	core/mac/mac.hpp	/^    uint16_t GetCslPeriod(void) const { return mCslPeriod; }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint16_t
GetCslPeriod	core/thread/csl_tx_scheduler.hpp	/^        uint16_t GetCslPeriod(void) const { return mCslPeriod; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint16_t
GetCslPeriod	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetCslPeriod(void) const { return BigEndian::HostSwap16(mCslPeriod); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetCslPeriodInMsec	core/mac/mac.cpp	/^uint32_t Mac::GetCslPeriodInMsec(void) const$/;"	f	class:ot::Mac::Mac	typeref:typename:uint32_t
GetCslPhase	core/thread/csl_tx_scheduler.hpp	/^        uint16_t GetCslPhase(void) const { return mCslPhase; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint16_t
GetCslTimeout	core/thread/csl_tx_scheduler.hpp	/^        uint32_t GetCslTimeout(void) const { return mCslTimeout; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint32_t
GetCslTimeout	core/thread/mle.hpp	/^    uint32_t GetCslTimeout(void) const { return mCslTimeout; }$/;"	f	class:ot::Mle::Mle	typeref:typename:uint32_t
GetCslTimeout	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetCslTimeout(void) const { return BigEndian::HostSwap32(mCslTimeout); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint32_t
GetCslTxAttempts	core/thread/csl_tx_scheduler.hpp	/^        uint8_t GetCslTxAttempts(void) const { return mCslTxAttempts; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint8_t
GetCslUncertainty	core/radio/radio.hpp	/^inline uint8_t Radio::GetCslUncertainty(void) { return NumericLimits<uint8_t>::kMax; }$/;"	f	class:ot::Radio	typeref:typename:uint8_t
GetCslUncertainty	core/radio/radio.hpp	/^inline uint8_t Radio::GetCslUncertainty(void) { return otPlatRadioGetCslUncertainty(GetInstanceP/;"	f	class:ot::Radio	typeref:typename:uint8_t
GetCslUncertainty	core/thread/mle_tlvs.hpp	/^    uint8_t GetCslUncertainty(void) const { return mCslUncertainty; }$/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:uint8_t
GetCslUncertainty	lib/spinel/radio_spinel.cpp	/^uint8_t RadioSpinel::GetCslUncertainty(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint8_t
GetCslWindowEdges	core/mac/sub_mac.cpp	/^void SubMac::GetCslWindowEdges(uint32_t &aAhead, uint32_t &aAfter)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
GetCurCommandIid	ncp/ncp_base.cpp	/^spinel_iid_t NcpBase::GetCurCommandIid(void) const { return mCurCommandIid; }$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:spinel_iid_t
GetCurrentKeySequence	core/thread/key_manager.hpp	/^    uint32_t GetCurrentKeySequence(void) const { return mKeySequence; }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetCurrentMacKey	core/mac/mac_links.cpp	/^const KeyMaterial *Links::GetCurrentMacKey(const Frame &aFrame) const$/;"	f	class:ot::Mac::Links	typeref:typename:const KeyMaterial *
GetCurrentMacKey	core/mac/sub_mac.hpp	/^    const KeyMaterial &GetCurrentMacKey(void) const { return mCurrKey; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:const KeyMaterial &
GetCurrentMleKey	core/thread/key_manager.hpp	/^    const Mle::KeyMaterial &GetCurrentMleKey(void) const { return mMleKey; }$/;"	f	class:ot::KeyManager	typeref:typename:const Mle::KeyMaterial &
GetCurrentTrelMacKey	core/thread/key_manager.hpp	/^    const Mac::KeyMaterial &GetCurrentTrelMacKey(void) const { return mTrelKey; }$/;"	f	class:ot::KeyManager	typeref:typename:const Mac::KeyMaterial &
GetDadCounter	core/common/settings.hpp	/^        uint8_t GetDadCounter(void) const { return mDadCounter; }$/;"	f	class:ot::SettingsBase::DadInfo	typeref:typename:uint8_t
GetDadFlag	core/backbone_router/ndproxy_table.hpp	/^        bool GetDadFlag(void) const { return mDadFlag; }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:bool
GetData	core/common/message.hpp	/^    const uint8_t *GetData(void) const { return mBuffer.mData; }$/;"	f	class:ot::Buffer	typeref:typename:const uint8_t *
GetData	core/common/message.hpp	/^    uint8_t       *GetData(void) { return mBuffer.mData; }$/;"	f	class:ot::Buffer	typeref:typename:uint8_t *
GetData	core/meshcop/meshcop.hpp	/^    const uint8_t *GetData(void) const { return m8; }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:const uint8_t *
GetData	core/meshcop/meshcop.hpp	/^    uint8_t *GetData(void) { return m8; }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:uint8_t *
GetData	core/utils/flash.hpp	/^        const uint8_t *GetData(void) const { return mData; }$/;"	f	class:ot::Flash::Record	typeref:typename:const uint8_t *
GetData	lib/spinel/spi_frame.hpp	/^    uint8_t *GetData(void) { return mBuffer + kHeaderSize; }$/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:uint8_t *
GetData	posix/platform/power.hpp	/^    const uint8_t *GetData(void) const { return mData; }$/;"	f	class:ot::Power::RawPowerSetting	typeref:typename:const uint8_t *
GetDataEnd	core/net/nd6.hpp	/^        const uint8_t *GetDataEnd(void) const { return mData.GetBytes() + mData.GetLength(); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:const uint8_t *
GetDataVersion	core/thread/mle_types.hpp	/^    uint8_t GetDataVersion(NetworkData::Type aType) const$/;"	f	class:ot::Mle::LeaderData	typeref:typename:uint8_t
GetDatagramOffset	core/thread/lowpan.hpp	/^    uint16_t GetDatagramOffset(void) const { return mOffset; }$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:uint16_t
GetDatagramSize	core/thread/lowpan.hpp	/^    uint16_t GetDatagramSize(void) const { return mSize; }$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:uint16_t
GetDatagramTag	core/common/message.hpp	/^    uint32_t GetDatagramTag(void) const { return GetMetadata().mDatagramTag; }$/;"	f	class:ot::Message	typeref:typename:uint32_t
GetDatagramTag	core/thread/lowpan.hpp	/^    uint16_t GetDatagramTag(void) const { return mTag; }$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:uint16_t
GetDefault	core/coap/coap.hpp	/^    static const TxParameters &GetDefault(void) { return static_cast<const TxParameters &>(kDefa/;"	f	class:ot::Coap::TxParameters	typeref:typename:const TxParameters &
GetDefault	core/common/message.hpp	/^        static const Settings &GetDefault(void) { return static_cast<const Settings &>(kDefault)/;"	f	class:ot::Message::Settings	typeref:typename:const Settings &
GetDefaultConfig	core/net/dns_client.hpp	/^    const QueryConfig &GetDefaultConfig(void) const { return mDefaultConfig; }$/;"	f	class:ot::Dns::Client	typeref:typename:const QueryConfig &
GetDefaultPollPeriod	core/mac/data_poll_sender.cpp	/^uint32_t DataPollSender::GetDefaultPollPeriod(void) const$/;"	f	class:ot::DataPollSender	typeref:typename:uint32_t
GetDefaultRouterPreference	core/net/nd6.cpp	/^RoutePreference RouterAdvert::Header::GetDefaultRouterPreference(void) const$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:RoutePreference
GetDelay	core/utils/channel_manager.hpp	/^    uint16_t GetDelay(void) const { return mDelay; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint16_t
GetDelayTimerMinimal	core/meshcop/meshcop_leader.hpp	/^    uint32_t GetDelayTimerMinimal(void) const { return mDelayTimerMinimal; }$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:uint32_t
GetDerBytes	core/crypto/ecdsa.hpp	/^        const uint8_t *GetDerBytes(void) const { return mDerBytes; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:const uint8_t *
GetDerBytes	core/crypto/ecdsa.hpp	/^        uint8_t *GetDerBytes(void) { return mDerBytes; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:uint8_t *
GetDerLength	core/crypto/ecdsa.hpp	/^        uint8_t GetDerLength(void) const { return mDerLength; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:uint8_t
GetDestination	core/mac/mac_types.hpp	/^    PanId GetDestination(void) const { return mDestination; }$/;"	f	class:ot::Mac::PanIds	typeref:typename:PanId
GetDestination	core/net/ip4_types.hpp	/^    Address &GetDestination(void) { return mDestination; }$/;"	f	class:ot::Ip4::Header	typeref:typename:Address &
GetDestination	core/net/ip4_types.hpp	/^    const Address &GetDestination(void) const { return mDestination; }$/;"	f	class:ot::Ip4::Header	typeref:typename:const Address &
GetDestination	core/net/ip6_headers.hpp	/^    Address &GetDestination(void) { return mDestination; }$/;"	f	class:ot::Ip6::Header	typeref:typename:Address &
GetDestination	core/net/ip6_headers.hpp	/^    const Address &GetDestination(void) const { return mDestination; }$/;"	f	class:ot::Ip6::Header	typeref:typename:const Address &
GetDestination	core/radio/trel_packet.hpp	/^    const Mac::ExtAddress &GetDestination(void) const { return mDestination; }$/;"	f	class:ot::Trel::Header	typeref:typename:const Mac::ExtAddress &
GetDestination	core/thread/child_supervision.cpp	/^Child *ChildSupervisor::GetDestination(const Message &aMessage) const$/;"	f	class:ot::ChildSupervisor	typeref:typename:Child *
GetDestination	core/thread/lowpan.hpp	/^    uint16_t GetDestination(void) const { return mDestination; }$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:uint16_t
GetDestination	core/utils/ping_sender.hpp	/^        Ip6::Address &GetDestination(void) { return AsCoreType(&mDestination); }$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:Ip6::Address &
GetDestination	core/utils/ping_sender.hpp	/^        const Ip6::Address &GetDestination(void) const { return AsCoreType(&mDestination); }$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:const Ip6::Address &
GetDestinationAddress	core/net/ip6.hpp	/^    const Address &GetDestinationAddress(void) const { return mIp6Header.GetDestination(); }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Address &
GetDestinationPort	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetDestinationPort(void) const { return BigEndian::HostSwap16(mDestinationPort); }$/;"	f	class:ot::MeshCoP::UdpEncapsulationTlvHeader	typeref:typename:uint16_t
GetDestinationPort	core/net/ip6.cpp	/^uint16_t Headers::GetDestinationPort(void) const$/;"	f	class:ot::Ip6::Headers	typeref:typename:uint16_t
GetDestinationPort	core/net/tcp6.hpp	/^        uint16_t GetDestinationPort(void) const { return BigEndian::HostSwap16(mDestination); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetDestinationPort	core/net/udp6.hpp	/^        uint16_t GetDestinationPort(void) const { return BigEndian::HostSwap16(mDestinationPort)/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:uint16_t
GetDeviceMode	core/common/settings.hpp	/^        uint8_t GetDeviceMode(void) const { return mDeviceMode; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint8_t
GetDeviceMode	core/thread/mle.hpp	/^    DeviceMode GetDeviceMode(void) const { return mDeviceMode; }$/;"	f	class:ot::Mle::Mle	typeref:typename:DeviceMode
GetDeviceMode	core/thread/neighbor.hpp	/^    Mle::DeviceMode GetDeviceMode(void) const { return Mle::DeviceMode(mMode); }$/;"	f	class:ot::Neighbor	typeref:typename:Mle::DeviceMode
GetDeviceProperties	core/thread/mle_router.hpp	/^    const DeviceProperties &GetDeviceProperties(void) const { return mDeviceProperties; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:const DeviceProperties &
GetDf	core/net/ip4_types.hpp	/^    bool GetDf(void) const { return BigEndian::HostSwap16(mFlagsFragmentOffset) & kFlagsDf; }$/;"	f	class:ot::Ip4::Header	typeref:typename:bool
GetDhcp6PdState	core/border_router/routing_manager.hpp	/^    Dhcp6PdState GetDhcp6PdState(void) const { return mPdPrefixManager.GetState(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Dhcp6PdState
GetDirectRetrySuccessHistogram	core/mac/mac.cpp	/^const uint32_t *Mac::GetDirectRetrySuccessHistogram(uint8_t &aNumberOfEntries)$/;"	f	class:ot::Mac::Mac	typeref:typename:const uint32_t *
GetDiscerner	core/meshcop/joiner.cpp	/^const JoinerDiscerner *Joiner::GetDiscerner(void) const { return mDiscerner.IsEmpty() ? nullptr /;"	f	class:ot::MeshCoP::Joiner	typeref:typename:const JoinerDiscerner *
GetDisconnectReason	core/net/dns_dso.hpp	/^        DisconnectReason GetDisconnectReason(void) const { return mDisconnectReason; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:DisconnectReason
GetDistance	lib/spinel/spinel_buffer.cpp	/^uint16_t Buffer::GetDistance(const uint8_t *aStartPtr, const uint8_t *aEndPtr, Direction aDirect/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint16_t
GetDistantFuture	core/common/time.hpp	/^    Time GetDistantFuture(void) const { return Time(mValue + kDistantInterval); }$/;"	f	class:ot::Time	typeref:typename:Time
GetDistantPast	core/common/time.hpp	/^    Time GetDistantPast(void) const { return Time(mValue - kDistantInterval); }$/;"	f	class:ot::Time	typeref:typename:Time
GetDnsConfig	cli/cli_dns.cpp	/^otError Dns::GetDnsConfig(Arg aArgs[], otDnsQueryConfig *&aConfig)$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
GetDnsHeader	core/net/srp_server.hpp	/^        const Dns::UpdateHeader &GetDnsHeader(void) const { return mDnsHeader; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:const Dns::UpdateHeader &
GetDoNotEvict	core/common/message.hpp	/^    bool GetDoNotEvict(void) const { return GetMetadata().mDoNotEvict; }$/;"	f	class:ot::Message	typeref:typename:bool
GetDomain	core/net/srp_server.hpp	/^    const char *GetDomain(void) const { return mDomain.AsCString(); }$/;"	f	class:ot::Srp::Server	typeref:typename:const char *
GetDomain	posix/platform/configuration.cpp	/^otError Configuration::GetDomain(uint16_t aRegionCode, Power::Domain &aDomain)$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
GetDomainId	core/thread/network_data_tlvs.hpp	/^    uint8_t GetDomainId(void) const { return mDomainId; }$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:uint8_t
GetDomainId	core/utils/slaac_address.hpp	/^        uint8_t   GetDomainId(void) const { return mDomainId; }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:uint8_t
GetDomainName	core/meshcop/network_name.hpp	/^    const DomainName &GetDomainName(void) const { return mDomainName; }$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:const DomainName &
GetDomainName	core/net/srp_client.hpp	/^    const char *GetDomainName(void) const { return mDomainName; }$/;"	f	class:ot::Srp::Client	typeref:typename:const char *
GetDomainPrefix	core/backbone_router/bbr_leader.hpp	/^    const Ip6::Prefix *GetDomainPrefix(void) const$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:const Ip6::Prefix *
GetDomainPrefix	core/backbone_router/bbr_local.cpp	/^Error Local::GetDomainPrefix(NetworkData::OnMeshPrefixConfig &aConfig)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:Error
GetDomainUnicastAddress	core/thread/child.cpp	/^const Ip6::Address *Child::GetDomainUnicastAddress(void) const$/;"	f	class:ot::Child	typeref:typename:const Ip6::Address *
GetDomainUnicastAddress	core/thread/dua_manager.hpp	/^    const Ip6::Address &GetDomainUnicastAddress(void) const { return mDomainUnicastAddress.GetAd/;"	f	class:ot::DuaManager	typeref:typename:const Ip6::Address &
GetDscp	core/net/ip4_types.hpp	/^    uint8_t GetDscp(void) const { return (mDscpEcn & kDscpMask) >> kDscpOffset; }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint8_t
GetDscp	core/net/ip6_headers.hpp	/^    uint8_t GetDscp(void) const$/;"	f	class:ot::Ip6::Header	typeref:typename:uint8_t
GetDscpEcn	core/net/ip4_types.hpp	/^    uint8_t GetDscpEcn(void) const { return mDscpEcn; }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint8_t
GetDstAddr	core/mac/mac_frame.cpp	/^Error Frame::GetDstAddr(Address &aAddress) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetDstPanId	core/mac/mac_frame.cpp	/^Error Frame::GetDstPanId(PanId &aPanId) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetDtls	core/coap/coap_secure.hpp	/^    MeshCoP::SecureTransport &GetDtls(void) { return mDtls; }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:MeshCoP::SecureTransport &
GetDua	core/backbone_router/ndproxy_table.cpp	/^Ip6::Address NdProxyTable::GetDua(NdProxy &aNdProxy)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:Ip6::Address
GetDuidHardwareType	core/net/dhcp6.hpp	/^    uint16_t GetDuidHardwareType(void) const { return BigEndian::HostSwap16(mDuidHardwareType); /;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:uint16_t
GetDuidHardwareType	core/net/dhcp6.hpp	/^    uint16_t GetDuidHardwareType(void) const { return BigEndian::HostSwap16(mDuidHardwareType); /;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:uint16_t
GetDuidLinkLayerAddress	core/net/dhcp6.hpp	/^    const Mac::ExtAddress &GetDuidLinkLayerAddress(void) const { return mDuidLinkLayerAddress; }$/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:const Mac::ExtAddress &
GetDuidLinkLayerAddress	core/net/dhcp6.hpp	/^    const Mac::ExtAddress &GetDuidLinkLayerAddress(void) const { return mDuidLinkLayerAddress; }$/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:const Mac::ExtAddress &
GetDuidType	core/net/dhcp6.hpp	/^    DuidType GetDuidType(void) const { return static_cast<DuidType>(BigEndian::HostSwap16(mDuidT/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:DuidType
GetDuidType	core/net/dhcp6.hpp	/^    DuidType GetDuidType(void) const { return static_cast<DuidType>(BigEndian::HostSwap16(mDuidT/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:DuidType
GetDurationSinceLastMulticast	core/net/mdns.cpp	/^uint32_t Core::RecordInfo::GetDurationSinceLastMulticast(TimeMilli aTime) const$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:uint32_t
GetDurationTill	core/utils/history_tracker.cpp	/^uint32_t HistoryTracker::Timestamp::GetDurationTill(TimeMilli aTime) const$/;"	f	class:ot::Utils::HistoryTracker::Timestamp	typeref:typename:uint32_t
GetEchoMode	core/net/icmp6.hpp	/^    otIcmp6EchoMode GetEchoMode(void) const { return mEchoMode; }$/;"	f	class:ot::Ip6::Icmp	typeref:typename:otIcmp6EchoMode
GetEchoSequence	core/net/icmp6.hpp	/^    uint16_t GetEchoSequence(void) const { return mEchoSequence; }$/;"	f	class:ot::Ip6::Icmp	typeref:typename:uint16_t
GetEcn	core/net/ip4_types.hpp	/^    Ecn GetEcn(void) const { return static_cast<Ecn>(mDscpEcn & kEcnMask); }$/;"	f	class:ot::Ip4::Header	typeref:typename:Ecn
GetEcn	core/net/ip6.hpp	/^    Ecn GetEcn(void) const { return mIp6Header.GetEcn(); }$/;"	f	class:ot::Ip6::Headers	typeref:typename:Ecn
GetEcn	core/net/ip6_headers.hpp	/^    Ecn GetEcn(void) const { return static_cast<Ecn>((mVerTcFlow.m8[1] & kEcnMask) >> kEcnOffset/;"	f	class:ot::Ip6::Header	typeref:typename:Ecn
GetEcn	core/net/socket.hpp	/^    Ecn GetEcn(void) const { return static_cast<Ecn>(mEcn); }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:Ecn
GetElapsedTime	core/net/dhcp6.hpp	/^    uint16_t GetElapsedTime(void) const { return BigEndian::HostSwap16(mElapsedTime); }$/;"	f	class:ot::Dhcp6::ElapsedTime	typeref:typename:uint16_t
GetEnergyList	core/meshcop/meshcop_tlvs.hpp	/^    const uint8_t *GetEnergyList(void) const { return mEnergyList; }$/;"	f	class:ot::MeshCoP::EnergyListTlv	typeref:typename:const uint8_t *
GetEnergyListLength	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetEnergyListLength(void) const { return Min(kMaxListLength, GetLength()); }$/;"	f	class:ot::MeshCoP::EnergyListTlv	typeref:typename:uint8_t
GetEnergyScanClient	core/meshcop/commissioner.hpp	/^    EnergyScanClient &GetEnergyScanClient(void) { return mEnergyScan; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:EnergyScanClient &
GetEnhAckFlags	core/thread/link_metrics_tlvs.hpp	/^    uint8_t GetEnhAckFlags(void) const { return mEnhAckFlags; }$/;"	f	class:ot::LinkMetrics::EnhAckConfigSubTlv	typeref:typename:uint8_t
GetEnhAckProbingMetrics	core/thread/neighbor.hpp	/^    const LinkMetrics::Metrics &GetEnhAckProbingMetrics(void) const { return mEnhAckProbingMetri/;"	f	class:ot::Neighbor	typeref:typename:const LinkMetrics::Metrics &
GetEnterpriseNumber	core/thread/network_data_tlvs.hpp	/^    uint32_t GetEnterpriseNumber(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint32_t
GetEntry	core/border_router/routing_manager.hpp	/^            template <class PrefixType> const Entry<PrefixType> *GetEntry(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:const Entry<PrefixType> *
GetEntry	core/border_router/routing_manager.hpp	/^    &RoutingManager::RxRaTracker::SharedEntry::GetEntry(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry	typeref:typename:RoutingManager::RxRaTracker::Entry<RoutingManager::OnLinkPrefix> &
GetEntry	core/border_router/routing_manager.hpp	/^    &RoutingManager::RxRaTracker::SharedEntry::GetEntry(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry	typeref:typename:RoutingManager::RxRaTracker::Entry<RoutingManager::RoutePrefix> &
GetEntry	core/thread/address_resolver.hpp	/^        const CacheEntry     *GetEntry(void) const { return static_cast<const CacheEntry *>(mDat/;"	f	class:ot::AddressResolver::Iterator	typeref:typename:const CacheEntry *
GetEntry	core/thread/network_data_tlvs.hpp	/^    BorderRouterEntry *GetEntry(uint8_t aIndex)$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:BorderRouterEntry *
GetEntry	core/thread/network_data_tlvs.hpp	/^    HasRouteEntry *GetEntry(uint8_t aIndex)$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:HasRouteEntry *
GetEntry	core/thread/network_data_tlvs.hpp	/^    const BorderRouterEntry *GetEntry(uint8_t aIndex) const$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:const BorderRouterEntry *
GetEntry	core/thread/network_data_tlvs.hpp	/^    const HasRouteEntry *GetEntry(uint8_t aIndex) const$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:const HasRouteEntry *
GetEntry	ncp/changed_props_set.hpp	/^    const Entry *GetEntry(uint8_t aIndex) const$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:const Entry *
GetEntryAfter	core/thread/address_resolver.cpp	/^AddressResolver::CacheEntry *AddressResolver::GetEntryAfter(CacheEntry *aPrev, CacheEntryList &a/;"	f	class:ot::AddressResolver	typeref:typename:AddressResolver::CacheEntry *
GetEntryAt	core/common/pool.hpp	/^    Type &GetEntryAt(uint16_t aIndex) { return mPool[aIndex]; }$/;"	f	class:ot::Pool	typeref:typename:Type &
GetEntryAt	core/common/pool.hpp	/^    const Type &GetEntryAt(uint16_t aIndex) const { return mPool[aIndex]; }$/;"	f	class:ot::Pool	typeref:typename:const Type &
GetEntryIndex	core/thread/network_data.hpp	/^        uint8_t GetEntryIndex(void) const { return mIteratorBuffer[kEntryPosition]; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:uint8_t
GetEntryList	core/net/mdns.hpp	/^template <> inline OwningList<Core::HostEntry> &Core::GetEntryList<Core::HostEntry>(void) { retu/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::HostEntry> &
GetEntryList	core/net/mdns.hpp	/^template <> inline OwningList<Core::ServiceEntry> &Core::GetEntryList<Core::ServiceEntry>(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:OwningList<Core::ServiceEntry> &
GetEntryNumber	core/utils/history_tracker.hpp	/^        uint16_t  GetEntryNumber(void) const { return mData16; }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:uint16_t
GetEntryType	core/border_router/routing_manager.hpp	/^            EntryType            GetEntryType(void) const { return static_cast<EntryType>(mData3/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:EntryType
GetEphemeralPort	core/net/udp6.cpp	/^uint16_t Udp::GetEphemeralPort(void)$/;"	f	class:ot::Ip6::Udp	typeref:typename:uint16_t
GetError	core/net/srp_server.hpp	/^        Error                    GetError(void) const { return mError; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:Error
GetErrorCounters	core/net/nat64_translator.hpp	/^    void GetErrorCounters(ErrorCounters &aCounters) const { aCounters = mErrorCounters; }$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
GetExpectedTrelAckNumber	core/radio/trel_link.hpp	/^    uint32_t GetExpectedTrelAckNumber(void) const { return mTrelTxPacketNumber - GetPendingTrelA/;"	f	class:ot::Trel::NeighborInfo	typeref:typename:uint32_t
GetExpiration	core/net/dns_types.hpp	/^    uint32_t GetExpiration(void) const { return BigEndian::HostSwap32(mExpiration); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint32_t
GetExpirationTime	core/net/dns_dso.hpp	/^            TimeMilli GetExpirationTime(void) const { return mExpirationTime; }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:TimeMilli
GetExpirationTime	core/utils/slaac_address.hpp	/^        TimeMilli GetExpirationTime(void) const { return mExpirationTime; }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:TimeMilli
GetExpireTime	core/backbone_router/multicast_listeners_table.hpp	/^        const TimeMilli GetExpireTime(void) const { return mExpireTime; }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener	typeref:typename:const TimeMilli
GetExpireTime	core/border_router/routing_manager.hpp	/^        TimeMilli          GetExpireTime(void) const { return CalculateExpirationTime(mValidLife/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:TimeMilli
GetExpireTime	core/net/dnssd_server.hpp	/^        TimeMilli GetExpireTime(void) const { return mExpireTime; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server::UpstreamQueryTransaction	typeref:typename:TimeMilli
GetExpireTime	core/net/mdns.cpp	/^TimeMilli Core::CacheRecordInfo::GetExpireTime(void) const$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:TimeMilli
GetExpireTime	core/net/srp_server.cpp	/^TimeMilli Server::Host::GetExpireTime(void) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:TimeMilli
GetExpireTime	core/net/srp_server.cpp	/^TimeMilli Server::Service::GetExpireTime(void) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:TimeMilli
GetExpireTime	core/net/srp_server.hpp	/^        TimeMilli                GetExpireTime(void) const { return mExpireTime; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:TimeMilli
GetExtAddress	core/common/settings.hpp	/^        const Mac::ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/common/settings.hpp	/^        const Mac::ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/common/settings.hpp	/^        const Mac::ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/mac/link_raw.hpp	/^    const ExtAddress &GetExtAddress(void) const { return mSubMac.GetExtAddress(); }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:const ExtAddress &
GetExtAddress	core/mac/mac.hpp	/^    const ExtAddress &GetExtAddress(void) const { return mLinks.GetExtAddress(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:const ExtAddress &
GetExtAddress	core/mac/mac_links.hpp	/^    const ExtAddress &GetExtAddress(void) const$/;"	f	class:ot::Mac::Links	typeref:typename:const ExtAddress &
GetExtAddress	core/mac/sub_mac.hpp	/^    const ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:const ExtAddress &
GetExtAddress	core/radio/trel_interface.hpp	/^        const Mac::ExtAddress &GetExtAddress(void) const { return static_cast<const Mac::ExtAddr/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/thread/neighbor.hpp	/^    Mac::ExtAddress &GetExtAddress(void) { return mMacAddr; }$/;"	f	class:ot::Neighbor	typeref:typename:Mac::ExtAddress &
GetExtAddress	core/thread/neighbor.hpp	/^    const Mac::ExtAddress &GetExtAddress(void) const { return mMacAddr; }$/;"	f	class:ot::Neighbor	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/thread/network_diagnostic_tlvs.hpp	/^    const Mac::ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:const Mac::ExtAddress &
GetExtAddress	core/thread/network_diagnostic_tlvs.hpp	/^    const Mac::ExtAddress &GetExtAddress(void) const { return mExtAddress; }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:const Mac::ExtAddress &
GetExtPanId	core/meshcop/extended_panid.hpp	/^    const ExtendedPanId &GetExtPanId(void) const { return mExtendedPanId; }$/;"	f	class:ot::MeshCoP::ExtendedPanIdManager	typeref:typename:const ExtendedPanId &
GetExtPanId	core/radio/trel_interface.hpp	/^        const MeshCoP::ExtendedPanId &GetExtPanId(void) const$/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:const MeshCoP::ExtendedPanId &
GetExtended	core/mac/mac_types.hpp	/^    ExtAddress &GetExtended(void) { return mShared.mExtAddress; }$/;"	f	class:ot::Mac::Address	typeref:typename:ExtAddress &
GetExtended	core/mac/mac_types.hpp	/^    const ExtAddress &GetExtended(void) const { return mShared.mExtAddress; }$/;"	f	class:ot::Mac::Address	typeref:typename:const ExtAddress &
GetExtendedPanId	core/mac/mac_frame.hpp	/^    const otExtendedPanId &GetExtendedPanId(void) const { return mExtendedPanId; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:const otExtendedPanId &
GetExtendedResponseCode	core/net/dns_types.hpp	/^    uint8_t GetExtendedResponseCode(void) const { return GetTtlByteAt(kExtRCodeByteIndex); }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:uint8_t
GetExternalPollPeriod	core/mac/data_poll_sender.hpp	/^    uint32_t GetExternalPollPeriod(void) const { return mExternalPollPeriod; }$/;"	f	class:ot::DataPollSender	typeref:typename:uint32_t
GetFailureRate	core/thread/link_quality.hpp	/^    uint16_t GetFailureRate(void) const { return mFailureRate; }$/;"	f	class:ot::SuccessRateTracker	typeref:typename:uint16_t
GetFavoredChannels	core/utils/channel_manager.hpp	/^    uint32_t GetFavoredChannels(void) const { return mFavoredChannelMask.GetMask(); }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint32_t
GetFavoredDiscoveredPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetFavoredDiscoveredPrefix(void) const { return mFavoredDiscoveredPre/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:const Ip6::Prefix &
GetFavoredNat64Prefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetFavoredNat64Prefix(Ip6::Prefix &aPrefix, RoutePreference &aRoutePrefere/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetFavoredOmrPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetFavoredOmrPrefix(Ip6::Prefix &aPrefix, RoutePreference &aPreference) co/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetFavoredOnLinkPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetFavoredOnLinkPrefix(Ip6::Prefix &aPrefix) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetFavoredPrefix	core/border_router/routing_manager.cpp	/^const Ip6::Prefix &RoutingManager::Nat64PrefixManager::GetFavoredPrefix(RoutePreference &aPrefer/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:const Ip6::Prefix &
GetFavoredPrefix	core/border_router/routing_manager.hpp	/^        const FavoredOmrPrefix &GetFavoredPrefix(void) const { return mFavoredPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:const FavoredOmrPrefix &
GetFcsSize	core/mac/mac_frame.cpp	/^uint8_t Frame::GetFcsSize(void) const { return Trel::Link::kFcsSize; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetFcsSize	core/mac/mac_frame.cpp	/^uint8_t Frame::GetFcsSize(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetFcsSize	core/mac/mac_frame.hpp	/^    uint8_t GetFcsSize(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetFemLnaGain	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetFemLnaGain(int8_t &aGain)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetFieldsLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetFieldsLength(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint8_t
GetFilename	posix/platform/daemon.cpp	/^void GetFilename(Filename &aFilename, const char *aPattern)$/;"	f	namespace:ot::Posix::__anon5fac48a00111	typeref:typename:void
GetFireTime	core/common/timer.hpp	/^    Time GetFireTime(void) const { return mFireTime; }$/;"	f	class:ot::Timer	typeref:typename:Time
GetFireTime	core/common/trickle_timer.hpp	/^    void GetFireTime(void) {}$/;"	f	class:ot::TrickleTimer	typeref:typename:void
GetFireTime	core/net/mdns.hpp	/^        TimeMilli GetFireTime(void) const { return mFireTime; }$/;"	f	class:ot::Dns::Multicast::Core::FireTime	typeref:typename:TimeMilli
GetFirstChunk	core/common/message.cpp	/^void Message::GetFirstChunk(uint16_t aOffset, uint16_t &aLength, Chunk &aChunk) const$/;"	f	class:ot::Message	typeref:typename:void
GetFirstChunk	core/common/message.hpp	/^    void GetFirstChunk(uint16_t aOffset, uint16_t &aLength, MutableChunk &aChunk)$/;"	f	class:ot::Message	typeref:typename:void
GetFirstData	core/common/message.hpp	/^    const uint8_t *GetFirstData(void) const { return mBuffer.mHead.mData; }$/;"	f	class:ot::Buffer	typeref:typename:const uint8_t *
GetFirstData	core/common/message.hpp	/^    uint8_t       *GetFirstData(void) { return mBuffer.mHead.mData; }$/;"	f	class:ot::Buffer	typeref:typename:uint8_t *
GetFirstEntry	core/thread/network_data_tlvs.hpp	/^    BorderRouterEntry *GetFirstEntry(void) { return reinterpret_cast<BorderRouterEntry *>(GetVal/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:BorderRouterEntry *
GetFirstEntry	core/thread/network_data_tlvs.hpp	/^    HasRouteEntry *GetFirstEntry(void) { return reinterpret_cast<HasRouteEntry *>(GetValue()); }$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:HasRouteEntry *
GetFirstEntry	core/thread/network_data_tlvs.hpp	/^    const BorderRouterEntry *GetFirstEntry(void) const$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:const BorderRouterEntry *
GetFirstEntry	core/thread/network_data_tlvs.hpp	/^    const HasRouteEntry *GetFirstEntry(void) const { return reinterpret_cast<const HasRouteEntry/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:const HasRouteEntry *
GetFixedDuaInterfaceIdentifier	core/thread/dua_manager.hpp	/^    const Ip6::InterfaceIdentifier &GetFixedDuaInterfaceIdentifier(void) const { return mFixedDu/;"	f	class:ot::DuaManager	typeref:typename:const Ip6::InterfaceIdentifier &
GetFlags	core/net/sntp_client.hpp	/^        uint8_t GetFlags(void) const { return mFlags; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint8_t
GetFlags	core/net/tcp6.hpp	/^        uint16_t GetFlags(void) const { return BigEndian::HostSwap16(mFlags); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetFlags	core/thread/key_manager.cpp	/^void SecurityPolicy::GetFlags(uint8_t *aFlags, uint8_t aFlagsLength) const$/;"	f	class:ot::SecurityPolicy	typeref:typename:void
GetFlags	core/thread/network_data_tlvs.hpp	/^    uint16_t GetFlags(void) const { return BigEndian::HostSwap16(mFlags); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:uint16_t
GetFlags	core/thread/network_data_tlvs.hpp	/^    uint8_t GetFlags(void) const { return mFlags; }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:uint8_t
GetFlags	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetFlags(void) const { return mFlags; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint8_t
GetFlags	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetFlags(void) const { return mFlags; }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint8_t
GetFlags	posix/platform/infra_if.cpp	/^uint32_t InfraNetif::GetFlags(void) const$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:uint32_t
GetFlagsIndex	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetFlagsIndex(void) const { return BigEndian::HostSwap16(mFlagsIndex); }$/;"	f	class:ot::NetworkDiagnostic::AnswerTlv	typeref:typename:uint16_t
GetFlagsLength	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t  GetFlagsLength(void) const { return GetLength() - sizeof(mRotationTime); }$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:uint8_t
GetFlow	core/net/ip6_headers.hpp	/^    uint32_t GetFlow(void) const { return BigEndian::HostSwap32(mVerTcFlow.m32) & kFlowMask; }$/;"	f	class:ot::Ip6::Header	typeref:typename:uint32_t
GetFooter	core/mac/mac_frame.cpp	/^const uint8_t *Frame::GetFooter(void) const { return mPsdu + mLength - GetFooterLength(); }$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetFooter	core/mac/mac_frame.hpp	/^    uint8_t *GetFooter(void) { return AsNonConst(AsConst(this)->GetFooter()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetFooterLength	core/mac/mac_frame.cpp	/^uint8_t Frame::GetFooterLength(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetFor	core/net/mdns.hpp	/^        uint16_t GetFor(Section aSection) const { return mCounts[aSection]; }$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts	typeref:typename:uint16_t
GetForeignIp6Address	core/net/tcp6.cpp	/^Address &Tcp::Endpoint::GetForeignIp6Address(void) { return *reinterpret_cast<Address *>(&GetTcb/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Address &
GetForeignIp6Address	core/net/tcp6.cpp	/^const Address &Tcp::Endpoint::GetForeignIp6Address(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:const Address &
GetForwardFramePriority	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::GetForwardFramePriority(const FrameData      &aFrameData,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
GetForwardTrackingSeriesInfo	core/thread/neighbor.cpp	/^LinkMetrics::SeriesInfo *Neighbor::GetForwardTrackingSeriesInfo(const uint8_t &aSeriesId)$/;"	f	class:ot::Neighbor	typeref:typename:LinkMetrics::SeriesInfo *
GetFragmentOffset	core/net/ip4_types.hpp	/^    uint16_t GetFragmentOffset(void) const { return BigEndian::HostSwap16(mFlagsFragmentOffset) /;"	f	class:ot::Ip4::Header	typeref:typename:uint16_t
GetFragmentPriority	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::GetFragmentPriority(Lowpan::FragmentHeader &aFragmentHeader,$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
GetFrame	lib/spinel/multi_frame_buffer.hpp	/^    uint8_t *GetFrame(void) const { return mWriteFrameStart + kHeaderSize + GetSkipLength(); }$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:uint8_t *
GetFrame	lib/spinel/multi_frame_buffer.hpp	/^    uint8_t *GetFrame(void) { return mBuffer; }$/;"	f	class:ot::Spinel::FrameBuffer	typeref:typename:uint8_t *
GetFrame	lib/spinel/spinel_decoder.hpp	/^    const uint8_t *GetFrame(void) const { return mFrame; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:const uint8_t *
GetFrameControlField	core/mac/mac_frame.cpp	/^uint16_t Frame::GetFrameControlField(void) const { return LittleEndian::ReadUint16(mPsdu); }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetFrameCounter	core/mac/mac_frame.cpp	/^Error Frame::GetFrameCounter(uint32_t &aFrameCounter) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetFrameCounter	core/mac/sub_mac.hpp	/^    uint32_t GetFrameCounter(void) const { return mFrameCounter; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:uint32_t
GetFrameCounter	core/thread/mle.hpp	/^        uint32_t GetFrameCounter(void) const { return LittleEndian::HostSwap32(mFrameCounter); }$/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:uint32_t
GetFrameErrorRate	core/thread/link_quality.hpp	/^    uint16_t GetFrameErrorRate(void) const { return mFrameErrorRate.GetFailureRate(); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:uint16_t
GetFrameErrorRate	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetFrameErrorRate(void) const { return BigEndian::HostSwap16(mFrameErrorRate); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetFrameErrorRate	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetFrameErrorRate(void) const { return BigEndian::HostSwap16(mFrameErrorRate); }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint16_t
GetFrameMaxLength	lib/spinel/multi_frame_buffer.hpp	/^    uint16_t GetFrameMaxLength(void) const { return static_cast<uint16_t>(mBuffer + kSize - GetF/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:uint16_t
GetFramePending	core/mac/mac_frame.hpp	/^    bool GetFramePending(void) const { return (GetPsdu()[0] & kFcfFramePending) != 0; }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
GetFramePriority	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::GetFramePriority(const FrameData      &aFrameData,$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
GetFreeBufferCount	core/common/message.cpp	/^uint16_t MessagePool::GetFreeBufferCount(void) const$/;"	f	class:ot::MessagePool	typeref:typename:uint16_t
GetFreeSize	core/utils/heap.hpp	/^    size_t GetFreeSize(void) const { return mMemory.mFreeSize; }$/;"	f	class:ot::Utils::Heap	typeref:typename:size_t
GetFreeSpace	core/net/tcp6_ext.cpp	/^size_t TcpCircularSendBuffer::GetFreeSpace(void) const { return mCapacity - mCapacityUsed; }$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:size_t
GetFromType	core/net/dns_types.hpp	/^    Type GetFromType(void) const$/;"	f	class:ot::Dns::Name	typeref:typename:Type
GetFullName	core/net/srp_server.hpp	/^        const char *GetFullName(void) const { return mFullName.AsCString(); }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const char *
GetGeneratedPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix      &GetGeneratedPrefix(void) const { return mGeneratedPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:const Ip6::Prefix &
GetGpioValue	posix/platform/spi_interface.cpp	/^uint8_t SpiInterface::GetGpioValue(int aFd)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:uint8_t
GetHandler	core/common/callback.hpp	/^    HandlerType GetHandler(void) const { return mHandler; }$/;"	f	class:ot::CallbackBase	typeref:typename:HandlerType
GetHead	core/coap/coap_message.hpp	/^    Message *GetHead(void) { return static_cast<Message *>(ot::MessageQueue::GetHead()); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:Message *
GetHead	core/coap/coap_message.hpp	/^    const Message *GetHead(void) const { return static_cast<const Message *>(ot::MessageQueue::G/;"	f	class:ot::Coap::MessageQueue	typeref:typename:const Message *
GetHead	core/common/linked_list.hpp	/^    Type *GetHead(void) { return mHead; }$/;"	f	class:ot::LinkedList	typeref:typename:Type *
GetHead	core/common/linked_list.hpp	/^    const Type *GetHead(void) const { return mHead; }$/;"	f	class:ot::LinkedList	typeref:typename:const Type *
GetHead	core/common/message.cpp	/^const Message *PriorityQueue::GetHead(void) const$/;"	f	class:ot::PriorityQueue	typeref:typename:const Message *
GetHead	core/common/message.hpp	/^    Message *GetHead(void) { return AsNonConst(AsConst(this)->GetHead()); }$/;"	f	class:ot::PriorityQueue	typeref:typename:Message *
GetHead	core/common/message.hpp	/^    Message *GetHead(void) { return Message::NextOf(GetTail()); }$/;"	f	class:ot::MessageQueue	typeref:typename:Message *
GetHead	core/common/message.hpp	/^    const Message *GetHead(void) const { return Message::NextOf(GetTail()); }$/;"	f	class:ot::MessageQueue	typeref:typename:const Message *
GetHeadForPriority	core/common/message.cpp	/^const Message *PriorityQueue::GetHeadForPriority(Message::Priority aPriority) const$/;"	f	class:ot::PriorityQueue	typeref:typename:const Message *
GetHeadForPriority	core/common/message.hpp	/^    Message *GetHeadForPriority(Message::Priority aPriority)$/;"	f	class:ot::PriorityQueue	typeref:typename:Message *
GetHeader	core/mac/mac_frame.hpp	/^    const uint8_t *GetHeader(void) const { return GetPsdu(); }$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetHeader	core/mac/mac_frame.hpp	/^    uint8_t *GetHeader(void) { return GetPsdu(); }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetHeader	core/net/nd6.hpp	/^        const Header &GetHeader(void) const { return *reinterpret_cast<const Header *>(mData.Get/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:const Header &
GetHeader	core/radio/trel_packet.hpp	/^    Header &GetHeader(void) { return *reinterpret_cast<Header *>(Base::GetBytes()); }$/;"	f	class:ot::Trel::Packet	typeref:typename:Header &
GetHeader	core/radio/trel_packet.hpp	/^    const Header &GetHeader(void) const { return *reinterpret_cast<const Header *>(Base::GetByte/;"	f	class:ot::Trel::Packet	typeref:typename:const Header &
GetHeaderAcceptLen	lib/spinel/spi_frame.hpp	/^    uint16_t GetHeaderAcceptLen(void) const { return LittleEndian::ReadUint16(mBuffer + kIndexAc/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:uint16_t
GetHeaderDataLen	lib/spinel/spi_frame.hpp	/^    uint16_t GetHeaderDataLen(void) const { return LittleEndian::ReadUint16(mBuffer + kIndexData/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:uint16_t
GetHeaderFlagByte	lib/spinel/spi_frame.hpp	/^    uint8_t GetHeaderFlagByte(void) const { return mBuffer[kIndexFlagByte]; }$/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:uint8_t
GetHeaderIe	core/mac/mac_frame.cpp	/^const uint8_t *Frame::GetHeaderIe(uint8_t aIeId) const$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetHeaderIe	core/mac/mac_frame.hpp	/^    uint8_t *GetHeaderIe(uint8_t aIeId) { return AsNonConst(AsConst(this)->GetHeaderIe(aIeId)); /;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetHeaderLength	core/coap/coap_message.hpp	/^    uint16_t GetHeaderLength(void) const { return GetHelpData().mHeaderLength; }$/;"	f	class:ot::Coap::Message	typeref:typename:uint16_t
GetHeaderLength	core/mac/mac_frame.cpp	/^uint8_t Frame::GetHeaderLength(void) const { return static_cast<uint8_t>(GetPayload() - mPsdu); /;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetHeaderLength	core/thread/lowpan.cpp	/^uint16_t MeshHeader::GetHeaderLength(void) const$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:uint16_t
GetHeap	core/instance/instance.cpp	/^Utils::Heap &Instance::GetHeap(void)$/;"	f	class:ot::Instance	typeref:typename:Utils::Heap &
GetHelpData	core/coap/coap_message.hpp	/^    HelpData &GetHelpData(void) { return AsNonConst(AsConst(this)->GetHelpData()); }$/;"	f	class:ot::Coap::Message	typeref:typename:HelpData &
GetHelpData	core/coap/coap_message.hpp	/^    const HelpData &GetHelpData(void) const$/;"	f	class:ot::Coap::Message	typeref:typename:const HelpData &
GetHelpDataReserved	core/coap/coap_message.hpp	/^    static uint16_t GetHelpDataReserved(void) { return sizeof(HelpData) + kHelpDataAlignment; }$/;"	f	class:ot::Coap::Message	typeref:typename:uint16_t
GetHistogram	core/thread/mesh_forwarder.cpp	/^const uint32_t *MeshForwarder::TxQueueStats::GetHistogram(uint16_t &aNumBins, uint32_t &aBinInte/;"	f	class:ot::MeshForwarder::TxQueueStats	typeref:typename:const uint32_t *
GetHistoryBitmap	core/utils/jam_detector.hpp	/^    uint64_t GetHistoryBitmap(void) const { return mHistoryBitmap; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:uint64_t
GetHopLimit	core/net/ip6_headers.hpp	/^    uint8_t GetHopLimit(void) const { return mHopLimit; }$/;"	f	class:ot::Ip6::Header	typeref:typename:uint8_t
GetHopLimit	core/net/socket.hpp	/^    uint8_t GetHopLimit(void) const { return mHopLimit; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:uint8_t
GetHopsLeft	core/thread/lowpan.hpp	/^    uint8_t GetHopsLeft(void) const { return mHopsLeft; }$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:uint8_t
GetHost	core/net/srp_server.hpp	/^        Host                    &GetHost(void) { return mHost; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:Host &
GetHost	core/net/srp_server.hpp	/^        const Host &GetHost(void) const { return *mHost; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const Host &
GetHostAddress	core/net/dns_client.cpp	/^Error Client::BrowseResponse::GetHostAddress(const char   *aHostName,$/;"	f	class:ot::Dns::Client::BrowseResponse	typeref:typename:Error
GetHostAddress	core/net/dns_client.cpp	/^Error Client::ServiceResponse::GetHostAddress(const char   *aHostName,$/;"	f	class:ot::Dns::Client::ServiceResponse	typeref:typename:Error
GetHostAddressesArray	core/utils/srp_client_buffers.hpp	/^    Ip6::Address *GetHostAddressesArray(uint8_t &aArrayLength)$/;"	f	class:ot::Utils::SrpClientBuffers	typeref:typename:Ip6::Address *
GetHostInfo	core/net/srp_client.hpp	/^    const HostInfo &GetHostInfo(void) const { return mHostInfo; }$/;"	f	class:ot::Srp::Client	typeref:typename:const HostInfo &
GetHostName	core/net/dns_client.hpp	/^        Error GetHostName(char *aNameBuffer, uint16_t aNameBufferSize) const$/;"	f	class:ot::Dns::Client::AddressResponse	typeref:typename:Error
GetHostNameString	core/utils/srp_client_buffers.hpp	/^    char *GetHostNameString(uint16_t &aSize)$/;"	f	class:ot::Utils::SrpClientBuffers	typeref:typename:char *
GetHosts	core/net/srp_server.hpp	/^    LinkedList<Host> &GetHosts(void) { return mHosts; }$/;"	f	class:ot::Srp::Server	typeref:typename:LinkedList<Host> &
GetHosts	core/net/srp_server.hpp	/^    const LinkedList<Host> &GetHosts(void) const { return mHosts; }$/;"	f	class:ot::Srp::Server	typeref:typename:const LinkedList<Host> &
GetIaid	core/net/dhcp6.hpp	/^    uint32_t GetIaid(void) const { return BigEndian::HostSwap32(mIaid); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:uint32_t
GetIcmpHeader	core/net/ip6.hpp	/^    const Icmp::Header &GetIcmpHeader(void) const { return mHeader.mIcmp; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Icmp::Header &
GetId	core/common/settings.hpp	/^        MeshCoP::BorderAgent::Id &GetId(void) { return mId; }$/;"	f	class:ot::SettingsBase::BorderAgentId	typeref:typename:MeshCoP::BorderAgent::Id &
GetId	core/common/settings.hpp	/^        const MeshCoP::BorderAgent::Id &GetId(void) const { return mId; }$/;"	f	class:ot::SettingsBase::BorderAgentId	typeref:typename:const MeshCoP::BorderAgent::Id &
GetId	core/instance/instance.hpp	/^    uint32_t GetId(void) const { return mId; }$/;"	f	class:ot::Instance	typeref:typename:uint32_t
GetId	core/mac/mac_frame.hpp	/^    uint16_t GetId(void) const { return (LittleEndian::HostSwap16(mFields.m16) & kIdMask) >> kId/;"	f	class:ot::Mac::HeaderIe	typeref:typename:uint16_t
GetId	core/meshcop/border_agent.cpp	/^Error BorderAgent::GetId(Id &aId)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
GetId	core/meshcop/commissioner.hpp	/^    const char *GetId(void) const { return mCommissionerId; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:const char *
GetId	core/meshcop/joiner.hpp	/^    const Mac::ExtAddress &GetId(void) const { return mId; }$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:const Mac::ExtAddress &
GetId	core/net/icmp6.hpp	/^        uint16_t GetId(void) const { return BigEndian::HostSwap16(mData.m16[0]); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:uint16_t
GetId	core/net/srp_server.hpp	/^        ServiceUpdateId          GetId(void) const { return mId; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:ServiceUpdateId
GetIdSequence	core/thread/mle_tlvs.hpp	/^    uint8_t GetIdSequence(void) const { return mIdSequence; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetIdSequence	core/thread/thread_tlvs.hpp	/^    uint8_t GetIdSequence(void) const { return mIdSequence; }$/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:uint8_t
GetIdentification	core/net/ip4_types.hpp	/^    uint16_t GetIdentification(void) const { return BigEndian::HostSwap16(mIdentification); }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint16_t
GetIdentification	core/net/ip6_headers.hpp	/^    uint32_t GetIdentification(void) const { return mIdentification; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint32_t
GetIdx	core/instance/instance.cpp	/^uint8_t Instance::GetIdx(Instance *aInstance)$/;"	f	class:ot::Instance	typeref:typename:uint8_t
GetIeeeEui64	core/radio/radio.hpp	/^inline void Radio::GetIeeeEui64(Mac::ExtAddress &aIeeeEui64)$/;"	f	class:ot::Radio	typeref:typename:void
GetIeeeEui64	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetIeeeEui64(uint8_t *aIeeeEui64)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetIfInBroadcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfInBroadcastPkts(void) const { return BigEndian::HostSwap32(mIfInBroadcastPkts)/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfInDiscards	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfInDiscards(void) const { return BigEndian::HostSwap32(mIfInDiscards); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfInErrors	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfInErrors(void) const { return BigEndian::HostSwap32(mIfInErrors); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfInUcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfInUcastPkts(void) const { return BigEndian::HostSwap32(mIfInUcastPkts); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfInUnknownProtos	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfInUnknownProtos(void) const { return BigEndian::HostSwap32(mIfInUnknownProtos)/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfIndex	core/border_router/infra_if.hpp	/^    uint32_t GetIfIndex(void) const { return mIfIndex; }$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:uint32_t
GetIfOutBroadcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfOutBroadcastPkts(void) const { return BigEndian::HostSwap32(mIfOutBroadcastPkt/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfOutDiscards	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfOutDiscards(void) const { return BigEndian::HostSwap32(mIfOutDiscards); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfOutErrors	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfOutErrors(void) const { return BigEndian::HostSwap32(mIfOutErrors); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIfOutUcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetIfOutUcastPkts(void) const { return BigEndian::HostSwap32(mIfOutUcastPkts); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:uint32_t
GetIid	core/net/ip6_address.hpp	/^    InterfaceIdentifier &GetIid(void) { return static_cast<InterfaceIdentifier &>(mFields.mCompo/;"	f	class:ot::Ip6::Address	typeref:typename:InterfaceIdentifier &
GetIid	core/net/ip6_address.hpp	/^    const InterfaceIdentifier &GetIid(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:const InterfaceIdentifier &
GetIidListFromUrl	posix/platform/spinel_manager.cpp	/^void SpinelManager::GetIidListFromUrl(spinel_iid_t (&aIidList)[Spinel::kSpinelHeaderMaxNumIid])$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:void
GetIidSecretKey	core/utils/slaac_address.cpp	/^void Slaac::GetIidSecretKey(IidSecretKey &aKey) const$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
GetInFlightBytes	core/net/tcp6.cpp	/^size_t Tcp::Endpoint::GetInFlightBytes(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:size_t
GetInactivityTimeout	core/net/dns_dso.hpp	/^        uint32_t GetInactivityTimeout(void) const { return BigEndian::HostSwap32(mInactivityTime/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:uint32_t
GetInactivityTimeout	core/net/dns_dso.hpp	/^        uint32_t GetInactivityTimeout(void) const { return mInactivity.GetInterval(); }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:uint32_t
GetInception	core/net/dns_types.hpp	/^    uint32_t GetInception(void) const { return BigEndian::HostSwap32(mInception); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint32_t
GetIndex	core/net/tcp6_ext.cpp	/^size_t TcpCircularSendBuffer::GetIndex(size_t aStart, size_t aOffsetFromStart) const$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:size_t
GetIndex	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetIndex(void) const { return GetFlagsIndex() & kIndexMask; }$/;"	f	class:ot::NetworkDiagnostic::AnswerTlv	typeref:typename:uint16_t
GetIndex	core/thread/router_table.hpp	/^        uint8_t GetIndex(uint8_t aRouterId) const { return (mIndexes[aRouterId] & kIndexMask); }$/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:uint8_t
GetIndexOf	core/common/pool.hpp	/^    uint16_t GetIndexOf(const Type &aEntry) const { return static_cast<uint16_t>(&aEntry - mPool/;"	f	class:ot::Pool	typeref:typename:uint16_t
GetIndirectDataSequenceNumber	core/mac/data_poll_handler.hpp	/^        uint8_t GetIndirectDataSequenceNumber(void) const { return mIndirectDsn; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:uint8_t
GetIndirectFragmentOffset	core/thread/indirect_sender.hpp	/^        uint16_t GetIndirectFragmentOffset(void) const { return mIndirectFragmentOffset; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:uint16_t
GetIndirectFrameCounter	core/mac/data_poll_handler.hpp	/^        uint32_t GetIndirectFrameCounter(void) const { return mIndirectFrameCounter; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:uint32_t
GetIndirectKeyId	core/mac/data_poll_handler.hpp	/^        uint8_t GetIndirectKeyId(void) const { return mIndirectKeyId; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:uint8_t
GetIndirectMessage	core/thread/indirect_sender.hpp	/^        Message *GetIndirectMessage(void) { return mIndirectMessage; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:Message *
GetIndirectMessageCount	core/thread/indirect_sender.hpp	/^        uint16_t GetIndirectMessageCount(void) const { return mQueuedMessageCount; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:uint16_t
GetIndirectRetrySuccessHistogram	core/mac/mac.cpp	/^const uint32_t *Mac::GetIndirectRetrySuccessHistogram(uint8_t &aNumberOfEntries)$/;"	f	class:ot::Mac::Mac	typeref:typename:const uint32_t *
GetIndirectTxAttempts	core/mac/data_poll_handler.hpp	/^        uint8_t GetIndirectTxAttempts(void) const { return mIndirectTxAttempts; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:uint8_t
GetIndirectTxSuccess	core/thread/indirect_sender.hpp	/^        bool GetIndirectTxSuccess(void) const { return mIndirectTxSuccess; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:bool
GetInfo	core/backbone_router/ndproxy_table.cpp	/^Error NdProxyTable::GetInfo(const Ip6::Address &aDua, otBackboneRouterNdProxyInfo &aNdProxyInfo)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:Error
GetInfo	core/common/message.cpp	/^void MessageQueue::GetInfo(Info &aInfo) const$/;"	f	class:ot::MessageQueue	typeref:typename:void
GetInfo	core/common/message.cpp	/^void PriorityQueue::GetInfo(Info &aInfo) const$/;"	f	class:ot::PriorityQueue	typeref:typename:void
GetInitTime	core/border_router/routing_manager.hpp	/^            TimeMilli            GetInitTime(void) const { return TimeMilli(mData1); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:TimeMilli
GetInitTime	core/utils/history_tracker.hpp	/^        TimeMilli GetInitTime(void) const { return TimeMilli(mData32); }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:TimeMilli
GetInstance	core/common/locator.hpp	/^    Instance &GetInstance(void) const { return *mInstance; }$/;"	f	class:ot::InstanceLocator	typeref:typename:Instance &
GetInstance	core/common/message.hpp	/^inline Instance &Message::GetInstance(void) const { return GetMessagePool()->GetInstance(); }$/;"	f	class:ot::Message	typeref:typename:Instance &
GetInstance	core/net/srp_advertising_proxy.hpp	/^        Instance &GetInstance(void) const { return mHost.GetInstance(); }$/;"	f	struct:ot::Srp::AdvertisingProxy::AdvInfo	typeref:typename:Instance &
GetInstance	core/net/tcp6.cpp	/^Instance &Tcp::Endpoint::GetInstance(void) const { return AsNonConst(AsCoreType(GetTcb().instanc/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Instance &
GetInstance	core/net/tcp6.cpp	/^Instance &Tcp::Listener::GetInstance(void) const { return AsNonConst(AsCoreType(GetTcbListen().i/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Instance &
GetInstanceLabel	core/net/srp_server.hpp	/^        const char *GetInstanceLabel(void) const { return mInstanceLabel.AsCString(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const char *
GetInstanceName	core/net/srp_client.hpp	/^        const char *GetInstanceName(void) const { return mInstanceName; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:const char *
GetInstanceName	core/net/srp_server.hpp	/^        const char *GetInstanceName(void) const { return mInstanceName.AsCString(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const char *
GetInstanceNameString	core/utils/srp_client_buffers.hpp	/^        char *GetInstanceNameString(uint16_t &aSize)$/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:char *
GetInstancePtr	cli/cli_utils.hpp	/^    otInstance *GetInstancePtr(void) { return mInstance; }$/;"	f	class:ot::Cli::Utils	typeref:typename:otInstance *
GetInstancePtr	core/common/settings_driver.hpp	/^    otInstance *GetInstancePtr(void) const { return reinterpret_cast<otInstance *>(&InstanceLoca/;"	f	class:ot::SettingsDriver	typeref:typename:otInstance *
GetInstancePtr	core/radio/radio.hpp	/^    otInstance *GetInstancePtr(void) const { return reinterpret_cast<otInstance *>(&InstanceLoca/;"	f	class:ot::Radio	typeref:typename:otInstance *
GetInterpreter	cli/cli.hpp	/^    static Interpreter &GetInterpreter(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:Interpreter &
GetInterval	core/net/dns_dso.hpp	/^            uint32_t GetInterval(void) const { return mInterval; }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:uint32_t
GetInterval	core/thread/child_supervision.hpp	/^    uint16_t GetInterval(void) const { return mInterval; }$/;"	f	class:ot::SupervisionListener	typeref:typename:uint16_t
GetIntervalMax	core/common/trickle_timer.hpp	/^    uint32_t GetIntervalMax(void) const { return mIntervalMax; }$/;"	f	class:ot::TrickleTimer	typeref:typename:uint32_t
GetIntervalMin	core/common/trickle_timer.hpp	/^    uint32_t GetIntervalMin(void) const { return mIntervalMin; }$/;"	f	class:ot::TrickleTimer	typeref:typename:uint32_t
GetIp4Cidr	core/net/nat64_translator.cpp	/^Error Translator::GetIp4Cidr(Ip4::Cidr &aCidr)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
GetIp6Address	core/thread/thread_tlvs.hpp	/^    const Ip6::Address &GetIp6Address(uint8_t aIndex) const$/;"	f	class:ot::Ip6AddressesTlv	typeref:typename:const Ip6::Address &
GetIp6Header	core/net/ip6.hpp	/^    const Header &GetIp6Header(void) const { return mIp6Header; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Header &
GetIp6Prefix	core/net/nat64_translator.cpp	/^Error Translator::GetIp6Prefix(Ip6::Prefix &aPrefix)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
GetIpProto	core/net/ip6.hpp	/^    uint8_t GetIpProto(void) const { return mIp6Header.GetNextHeader(); }$/;"	f	class:ot::Ip6::Headers	typeref:typename:uint8_t
GetJitter	core/thread/announce_sender.hpp	/^    uint16_t GetJitter(void) const { return mJitter; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:uint16_t
GetJitter	core/thread/mle_router.hpp	/^        uint8_t GetJitter(void) const { return mJitter; }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:uint8_t
GetJoinerUdpPort	core/meshcop/joiner_router.cpp	/^uint16_t JoinerRouter::GetJoinerUdpPort(void) const$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:uint16_t
GetJoinerUdpPort	core/meshcop/meshcop.hpp	/^    uint16_t GetJoinerUdpPort(void) const { return mJoinerUdpPort; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:uint16_t
GetKeepAliveInterval	core/net/dns_dso.hpp	/^        uint32_t GetKeepAliveInterval(void) const { return BigEndian::HostSwap32(mKeepAliveInter/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:uint32_t
GetKeepAliveInterval	core/net/dns_dso.hpp	/^        uint32_t GetKeepAliveInterval(void) const { return mKeepAlive.GetInterval(); }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:uint32_t
GetKeepAlivePollPeriod	core/mac/data_poll_sender.cpp	/^uint32_t DataPollSender::GetKeepAlivePollPeriod(void) const$/;"	f	class:ot::DataPollSender	typeref:typename:uint32_t
GetKek	core/thread/key_manager.hpp	/^    const KekKeyMaterial &GetKek(void) const { return mKek; }$/;"	f	class:ot::KeyManager	typeref:typename:const KekKeyMaterial &
GetKekFrameCounter	core/thread/key_manager.hpp	/^    uint32_t GetKekFrameCounter(void) const { return mKekFrameCounter; }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetKey	core/mac/mac_types.hpp	/^    Key &GetKey(void) { return static_cast<Key &>(mKeyMaterial.mKey); }$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:Key &
GetKey	core/mac/mac_types.hpp	/^    const Key &GetKey(void) const { return static_cast<const Key &>(mKeyMaterial.mKey); }$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:const Key &
GetKey	core/net/dns_types.hpp	/^    const Crypto::Ecdsa::P256::PublicKey &GetKey(void) const { return mKey; }$/;"	f	class:ot::Dns::Ecdsa256KeyRecord	typeref:typename:const Crypto::Ecdsa::P256::PublicKey &
GetKey	core/net/srp_server.hpp	/^        const Key &GetKey(void) const { return mKey; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const Key &
GetKey	core/utils/flash.hpp	/^        uint16_t GetKey(void) const { return mKey; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:uint16_t
GetKeyBuffer	core/net/dns_types.hpp	/^        char       *GetKeyBuffer(void) { return mChar; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:char *
GetKeyExpireTime	core/net/srp_server.cpp	/^TimeMilli Server::Host::GetKeyExpireTime(void) const { return mUpdateTime + Time::SecToMsec(mKey/;"	f	class:ot::Srp::Server::Host	typeref:typename:TimeMilli
GetKeyExpireTime	core/net/srp_server.cpp	/^TimeMilli Server::Service::GetKeyExpireTime(void) const { return mUpdateTime + Time::SecToMsec(m/;"	f	class:ot::Srp::Server::Service	typeref:typename:TimeMilli
GetKeyId	core/mac/mac_frame.cpp	/^Error Frame::GetKeyId(uint8_t &aKeyId) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetKeyId	core/thread/mle.hpp	/^        uint32_t GetKeyId(void) const { return BigEndian::HostSwap32(mKeySource); }$/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:uint32_t
GetKeyIdMode	core/mac/mac_frame.cpp	/^Error Frame::GetKeyIdMode(uint8_t &aKeyIdMode) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetKeyLease	core/net/srp_client.hpp	/^        uint32_t GetKeyLease(void) const { return mKeyLease; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint32_t
GetKeyLease	core/net/srp_server.hpp	/^        uint32_t GetKeyLease(void) const { return mKeyLease; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:uint32_t
GetKeyLease	core/net/srp_server.hpp	/^        uint32_t GetKeyLease(void) const { return mKeyLease; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint32_t
GetKeyLeaseInterval	core/net/dns_types.hpp	/^    uint32_t GetKeyLeaseInterval(void) const$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:uint32_t
GetKeyLeaseInterval	core/net/srp_client.hpp	/^    uint32_t GetKeyLeaseInterval(void) const { return mDefaultKeyLease; }$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
GetKeyRef	core/crypto/ecdsa.hpp	/^        otCryptoKeyRef GetKeyRef(void) const { return mKeyRef; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:otCryptoKeyRef
GetKeyRef	core/crypto/storage.hpp	/^    Storage::KeyRef GetKeyRef(void) const { return mKeyRef; }$/;"	f	class:ot::Crypto::Key	typeref:typename:Storage::KeyRef
GetKeyRef	core/mac/mac_types.hpp	/^    KeyRef GetKeyRef(void) const { return mKeyMaterial.mKeyRef; }$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:KeyRef
GetKeyRef	core/meshcop/dataset_manager.hpp	/^        Crypto::Storage::KeyRef GetKeyRef(Dataset::Type aType) const$/;"	f	struct:ot::MeshCoP::DatasetManager::SecurelyStoredTlv	typeref:typename:Crypto::Storage::KeyRef
GetKeySequence	core/common/settings.hpp	/^        uint32_t GetKeySequence(void) const { return LittleEndian::HostSwap32(mKeySequence); }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint32_t
GetKeySequence	core/thread/neighbor.hpp	/^    uint32_t GetKeySequence(void) const { return mKeySequence; }$/;"	f	class:ot::Neighbor	typeref:typename:uint32_t
GetKeySource	core/mac/mac_frame.cpp	/^const uint8_t *Frame::GetKeySource(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetKeySourceLength	core/mac/mac_frame.cpp	/^uint8_t Frame::GetKeySourceLength(uint8_t aKeyIdMode)$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetKeySwitchGuardTime	core/thread/key_manager.hpp	/^    uint16_t GetKeySwitchGuardTime(void) const { return mKeySwitchGuardTime; }$/;"	f	class:ot::KeyManager	typeref:typename:uint16_t
GetKeyTag	core/net/dns_types.hpp	/^    uint16_t GetKeyTag(void) const { return BigEndian::HostSwap16(mKeyTag); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint16_t
GetKissCode	core/net/sntp_client.hpp	/^        char *GetKissCode(void) { return reinterpret_cast<char *>(&mReferenceId); }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:char *
GetLabels	core/net/dns_types.hpp	/^    uint8_t GetLabels(void) const { return mLabels; }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint8_t
GetLastEntry	core/thread/network_data_tlvs.hpp	/^    BorderRouterEntry *GetLastEntry(void)$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:BorderRouterEntry *
GetLastEntry	core/thread/network_data_tlvs.hpp	/^    HasRouteEntry *GetLastEntry(void)$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:HasRouteEntry *
GetLastEntry	core/thread/network_data_tlvs.hpp	/^    const BorderRouterEntry *GetLastEntry(void) const$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:const BorderRouterEntry *
GetLastEntry	core/thread/network_data_tlvs.hpp	/^    const HasRouteEntry *GetLastEntry(void) const$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:const HasRouteEntry *
GetLastHeard	core/thread/neighbor.hpp	/^    TimeMilli GetLastHeard(void) const { return mLastHeard; }$/;"	f	class:ot::Neighbor	typeref:typename:TimeMilli
GetLastMulticastTime	core/net/mdns.cpp	/^Error Core::RecordInfo::GetLastMulticastTime(TimeMilli &aLastMulticastTime) const$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:Error
GetLastOutboundFrameTag	ncp/ncp_base.cpp	/^Spinel::Buffer::FrameTag NcpBase::GetLastOutboundFrameTag(void) { return mTxFrameBuffer.InFrameG/;"	f	class:ot::Ncp::NcpBase	typeref:typename:Spinel::Buffer::FrameTag
GetLastPollRadioType	core/mac/data_poll_handler.hpp	/^        Mac::RadioType GetLastPollRadioType(void) const { return mLastPollRadioType; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:Mac::RadioType
GetLastQueryId	core/thread/network_diagnostic.hpp	/^    uint16_t GetLastQueryId(void) const { return mQueryId; }$/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:uint16_t
GetLastRss	core/thread/link_quality.hpp	/^    int8_t GetLastRss(void) const { return mLastRss; }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:int8_t
GetLastRssi	core/thread/network_diagnostic_tlvs.hpp	/^    int8_t GetLastRssi(void) const { return mLastRssi; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:int8_t
GetLastRssi	core/thread/network_diagnostic_tlvs.hpp	/^    int8_t GetLastRssi(void) const { return mLastRssi; }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:int8_t
GetLastRxFragmentTag	core/thread/neighbor.hpp	/^    uint16_t GetLastRxFragmentTag(void) const { return mLastRxFragmentTag; }$/;"	f	class:ot::Neighbor	typeref:typename:uint16_t
GetLastRxTimestamp	core/thread/csl_tx_scheduler.hpp	/^        uint64_t GetLastRxTimestamp(void) const { return mLastRxTimestamp; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:uint64_t
GetLastTransactionTime	core/thread/address_resolver.hpp	/^        uint32_t GetLastTransactionTime(void) const { return mInfo.mCached.mLastTransactionTime;/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:uint32_t
GetLastUpdateTime	core/border_router/routing_manager.hpp	/^        const TimeMilli   &GetLastUpdateTime(void) const { return mLastUpdateTime; }$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:const TimeMilli &
GetLeader	core/thread/router_table.cpp	/^const Router *RouterTable::GetLeader(void) const { return FindRouterById(Get<Mle::MleRouter>().G/;"	f	class:ot::RouterTable	typeref:typename:const Router *
GetLeader	core/thread/router_table.hpp	/^    Router *GetLeader(void) { return AsNonConst(AsConst(this)->GetLeader()); }$/;"	f	class:ot::RouterTable	typeref:typename:Router *
GetLeaderAddress	core/thread/mle.cpp	/^Error Mle::GetLeaderAddress(Ip6::Address &aAddress) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetLeaderAge	core/thread/router_table.cpp	/^uint32_t RouterTable::GetLeaderAge(void) const$/;"	f	class:ot::RouterTable	typeref:typename:uint32_t
GetLeaderAloc	core/thread/mle.hpp	/^    Error GetLeaderAloc(Ip6::Address &aAddress) const { return GetLocatorAddress(aAddress, kAloc/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetLeaderCost	core/thread/mle_tlvs.hpp	/^    uint8_t GetLeaderCost(void) const { return mLeaderCost; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetLeaderCost	core/thread/router.hpp	/^    uint8_t GetLeaderCost(void) const { return mLeaderCost; }$/;"	f	class:ot::Parent	typeref:typename:uint8_t
GetLeaderData	core/thread/mle.cpp	/^const LeaderData &Mle::GetLeaderData(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:const LeaderData &
GetLeaderId	core/thread/mle.hpp	/^    uint8_t GetLeaderId(void) const { return mLeaderData.GetLeaderRouterId(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:uint8_t
GetLeaderRouterId	core/thread/mle_types.hpp	/^    uint8_t GetLeaderRouterId(void) const { return mLeaderRouterId; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:uint8_t
GetLeaderWeight	core/thread/mle_router.hpp	/^    uint8_t GetLeaderWeight(void) const { return mLeaderWeight; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetLease	core/net/srp_client.hpp	/^        uint32_t GetLease(void) const { return (mLease & kLeaseMask); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint32_t
GetLease	core/net/srp_server.hpp	/^        uint32_t GetLease(void) const { return mLease; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:uint32_t
GetLease	core/net/srp_server.hpp	/^        uint32_t GetLease(void) const { return mLease; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint32_t
GetLeaseConfig	core/net/srp_server.hpp	/^        const LeaseConfig       &GetLeaseConfig(void) const { return mLeaseConfig; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:const LeaseConfig &
GetLeaseConfig	core/net/srp_server.hpp	/^    void GetLeaseConfig(LeaseConfig &aLeaseConfig) const { aLeaseConfig = mLeaseConfig; }$/;"	f	class:ot::Srp::Server	typeref:typename:void
GetLeaseInfo	core/net/srp_server.cpp	/^void Server::Host::GetLeaseInfo(LeaseInfo &aLeaseInfo) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
GetLeaseInfo	core/net/srp_server.cpp	/^void Server::Service::GetLeaseInfo(LeaseInfo &aLeaseInfo) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:void
GetLeaseInterval	core/net/dns_types.hpp	/^    uint32_t GetLeaseInterval(void) const { return BigEndian::HostSwap32(mLeaseInterval); }$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:uint32_t
GetLeaseInterval	core/net/srp_client.hpp	/^    uint32_t GetLeaseInterval(void) const { return mDefaultLease; }$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
GetLeaseRenewTime	core/net/srp_client.hpp	/^        TimeMilli GetLeaseRenewTime(void) const { return TimeMilli(mData); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:TimeMilli
GetLeftNext	core/utils/heap.hpp	/^    uint16_t GetLeftNext(void) const { return *(&mSize - 1); }$/;"	f	class:ot::Utils::Block	typeref:typename:uint16_t
GetLength	core/coap/coap_message.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Coap::Option	typeref:typename:uint16_t
GetLength	core/common/array.hpp	/^    IndexType GetLength(void) const { return mLength; }$/;"	f	class:ot::Array	typeref:typename:IndexType
GetLength	core/common/data.hpp	/^    LengthType GetLength(void) const { return mLength; }$/;"	f	class:ot::Data	typeref:typename:LengthType
GetLength	core/common/frame_builder.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::FrameBuilder	typeref:typename:uint16_t
GetLength	core/common/heap_array.hpp	/^    IndexType GetLength(void) const { return mLength; }$/;"	f	class:ot::Heap::Array	typeref:typename:IndexType
GetLength	core/common/heap_data.hpp	/^    uint16_t GetLength(void) const { return mData.GetLength(); }$/;"	f	class:ot::Heap::Data	typeref:typename:uint16_t
GetLength	core/common/message.hpp	/^    uint16_t GetLength(void) const { return GetMetadata().mLength; }$/;"	f	class:ot::Message	typeref:typename:uint16_t
GetLength	core/common/string.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::StringWriter	typeref:typename:uint16_t
GetLength	core/common/tlvs.hpp	/^    uint16_t GetLength(void) const { return BigEndian::HostSwap16(mLength); }$/;"	f	class:ot::ExtendedTlv	typeref:typename:uint16_t
GetLength	core/common/tlvs.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Tlv	typeref:typename:uint8_t
GetLength	core/crypto/storage.hpp	/^    uint16_t GetLength(void) const { return mKeyLength; }$/;"	f	class:ot::Crypto::Key	typeref:typename:uint16_t
GetLength	core/crypto/storage.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Crypto::LiteralKey	typeref:typename:uint16_t
GetLength	core/mac/mac_frame.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetLength	core/mac/mac_frame.hpp	/^    uint8_t GetLength(void) const { return mFields.m8[0] & kLengthMask; }$/;"	f	class:ot::Mac::HeaderIe	typeref:typename:uint8_t
GetLength	core/meshcop/dataset.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:uint8_t
GetLength	core/meshcop/meshcop.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:uint8_t
GetLength	core/meshcop/meshcop.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:uint8_t
GetLength	core/meshcop/meshcop.hpp	/^    uint8_t GetLength(void) const { return static_cast<uint8_t>(StringLength(m8, kMaxLength + 1)/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:uint8_t
GetLength	core/meshcop/meshcop_leader.cpp	/^uint8_t Leader::CommissioningData::GetLength(void) const$/;"	f	class:ot::MeshCoP::Leader::CommissioningData	typeref:typename:uint8_t
GetLength	core/meshcop/network_name.hpp	/^    uint8_t GetLength(void) const { return Data<kWithUint8Length>::GetLength(); }$/;"	f	class:ot::MeshCoP::NameData	typeref:typename:uint8_t
GetLength	core/net/dhcp6.hpp	/^    uint16_t GetLength(void) const { return BigEndian::HostSwap16(mLength); }$/;"	f	class:ot::Dhcp6::Option	typeref:typename:uint16_t
GetLength	core/net/dns_dso.hpp	/^        uint16_t GetLength(void) const { return BigEndian::HostSwap16(mLength); }$/;"	f	class:ot::Dns::Dso::Tlv	typeref:typename:uint16_t
GetLength	core/net/dns_types.hpp	/^    uint16_t GetLength(void) const { return BigEndian::HostSwap16(mLength); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:uint16_t
GetLength	core/net/ip6_address.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:uint8_t
GetLength	core/net/ip6_headers.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Ip6::ExtensionHeader	typeref:typename:uint8_t
GetLength	core/net/ip6_headers.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Ip6::Option	typeref:typename:uint8_t
GetLength	core/net/nd6.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:uint16_t
GetLength	core/net/udp6.hpp	/^        uint16_t GetLength(void) const { return BigEndian::HostSwap16(mLength); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:uint16_t
GetLength	core/radio/trel_packet.hpp	/^    uint16_t GetLength(void) const { return Base::GetLength(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:uint16_t
GetLength	core/radio/trel_packet.hpp	/^    uint16_t GetLength(void) const { return GetSize(GetType()); }$/;"	f	class:ot::Trel::Header	typeref:typename:uint16_t
GetLength	core/thread/mle_types.hpp	/^    uint8_t GetLength(void) const { return mArray.GetLength(); }$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:uint8_t
GetLength	core/thread/network_data.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:uint8_t
GetLength	core/thread/network_data_service.hpp	/^        uint8_t GetLength(void) const { return sizeof(ServerData); }$/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:uint8_t
GetLength	core/thread/network_data_service.hpp	/^        uint8_t GetLength(void) const { return sizeof(ServerData); }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServerData	typeref:typename:uint8_t
GetLength	core/thread/network_data_service.hpp	/^        uint8_t GetLength(void) const { return sizeof(ServiceData); }$/;"	f	class:ot::NetworkData::Service::DnsSrpAnycast::ServiceData	typeref:typename:uint8_t
GetLength	core/thread/network_data_service.hpp	/^        uint8_t GetLength(void) const { return sizeof(ServiceData); }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServiceData	typeref:typename:uint8_t
GetLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetLength(void) const { return mLength; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:uint8_t
GetLength	core/utils/flash.hpp	/^        uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:uint16_t
GetLength	core/utils/parse_cmdline.cpp	/^uint16_t Arg::GetLength(void) const { return IsEmpty() ? 0 : static_cast<uint16_t>(strlen(mStrin/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:uint16_t
GetLength	lib/spinel/multi_frame_buffer.hpp	/^    uint16_t GetLength(void) const { return static_cast<uint16_t>(mWritePointer - GetFrame()); }$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:uint16_t
GetLength	lib/spinel/multi_frame_buffer.hpp	/^    uint16_t GetLength(void) const { return static_cast<uint16_t>(mWritePointer - mBuffer); }$/;"	f	class:ot::Spinel::FrameBuffer	typeref:typename:uint16_t
GetLength	lib/spinel/spinel_decoder.hpp	/^    uint16_t GetLength(void) const { return mLength; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:uint16_t
GetLength	posix/platform/power.hpp	/^    uint16_t       GetLength(void) const { return mLength; }$/;"	f	class:ot::Power::RawPowerSetting	typeref:typename:uint16_t
GetLifetime	core/common/settings.hpp	/^        uint32_t GetLifetime(void) const { return mLifetime; }$/;"	f	class:ot::SettingsBase::BrOnLinkPrefix	typeref:typename:uint32_t
GetLinkAckFrameCounter	core/thread/neighbor.hpp	/^    uint32_t GetLinkAckFrameCounter(void) const { return mValidPending.mValid.mLinkAckFrameCount/;"	f	class:ot::Neighbor	typeref:typename:uint32_t
GetLinkCost	core/thread/router_table.cpp	/^uint8_t RouterTable::GetLinkCost(const Router &aRouter) const$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetLinkCost	core/thread/router_table.cpp	/^uint8_t RouterTable::GetLinkCost(uint8_t aRouterId) const$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetLinkFailures	core/thread/neighbor.hpp	/^    uint8_t GetLinkFailures(void) const { return mLinkFailures; }$/;"	f	class:ot::Neighbor	typeref:typename:uint8_t
GetLinkFrameCounters	core/thread/neighbor.hpp	/^    Mac::LinkFrameCounters &GetLinkFrameCounters(void) { return mValidPending.mValid.mLinkFrameC/;"	f	class:ot::Neighbor	typeref:typename:Mac::LinkFrameCounters &
GetLinkFrameCounters	core/thread/neighbor.hpp	/^    const Mac::LinkFrameCounters &GetLinkFrameCounters(void) const { return mValidPending.mValid/;"	f	class:ot::Neighbor	typeref:typename:const Mac::LinkFrameCounters &
GetLinkInfo	core/common/message.cpp	/^Error Message::GetLinkInfo(ThreadLinkInfo &aLinkInfo) const$/;"	f	class:ot::Message	typeref:typename:Error
GetLinkInfo	core/thread/neighbor.hpp	/^    LinkQualityInfo &GetLinkInfo(void) { return mLinkInfo; }$/;"	f	class:ot::Neighbor	typeref:typename:LinkQualityInfo &
GetLinkInfo	core/thread/neighbor.hpp	/^    const LinkQualityInfo &GetLinkInfo(void) const { return mLinkInfo; }$/;"	f	class:ot::Neighbor	typeref:typename:const LinkQualityInfo &
GetLinkLocalAddress	core/thread/mle.hpp	/^    const Ip6::Address &GetLinkLocalAddress(void) const { return mLinkLocal64.GetAddress(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::Address &
GetLinkLocalAllNodesMulticast	core/net/ip6_address.cpp	/^const Address &Address::GetLinkLocalAllNodesMulticast(void)$/;"	f	class:ot::Ip6::Address	typeref:typename:const Address &
GetLinkLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^const Address &Address::GetLinkLocalAllRoutersMulticast(void)$/;"	f	class:ot::Ip6::Address	typeref:typename:const Address &
GetLinkLocalAllThreadNodesAddress	core/thread/mle.hpp	/^    const Ip6::Address &GetLinkLocalAllThreadNodesAddress(void) const { return mLinkLocalAllThre/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::Address &
GetLinkMargin	core/thread/link_quality.cpp	/^uint8_t LinkQualityInfo::GetLinkMargin(void) const$/;"	f	class:ot::LinkQualityInfo	typeref:typename:uint8_t
GetLinkMargin	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetLinkMargin(void) const { return mLinkMargin; }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint8_t
GetLinkMargin	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetLinkMargin(void) const { return mLinkMargin; }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint8_t
GetLinkMetrics	core/thread/link_metrics_types.hpp	/^    const Metrics &GetLinkMetrics(void) const { return mMetrics; }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:const Metrics &
GetLinkMetricsValueByExtAddr	core/utils/link_metrics_manager.cpp	/^Error LinkMetricsManager::GetLinkMetricsValueByExtAddr(const Mac::ExtAddress      &aExtAddress,$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:Error
GetLinkQuality	core/thread/link_quality.hpp	/^    LinkQuality GetLinkQuality(void) const { return mLinkQuality; }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:LinkQuality
GetLinkQuality	core/thread/network_diagnostic_tlvs.hpp	/^    LinkQuality GetLinkQuality(void) const$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:LinkQuality
GetLinkQuality1	core/thread/mle_tlvs.hpp	/^    uint8_t GetLinkQuality1(void) const { return mLinkQuality1; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetLinkQuality2	core/thread/mle_tlvs.hpp	/^    uint8_t GetLinkQuality2(void) const { return mLinkQuality2; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetLinkQuality3	core/thread/mle_tlvs.hpp	/^    uint8_t GetLinkQuality3(void) const { return mLinkQuality3; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetLinkQualityIn	core/thread/mle_tlvs.hpp	/^    LinkQuality GetLinkQualityIn(uint8_t aRouterIndex) const$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:LinkQuality
GetLinkQualityIn	core/thread/neighbor.hpp	/^    LinkQuality GetLinkQualityIn(void) const { return GetLinkInfo().GetLinkQuality(); }$/;"	f	class:ot::Neighbor	typeref:typename:LinkQuality
GetLinkQualityOut	core/thread/mle_tlvs.hpp	/^    LinkQuality GetLinkQualityOut(uint8_t aRouterIndex) const$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:LinkQuality
GetLinkQualityOut	core/thread/router.hpp	/^    LinkQuality GetLinkQualityOut(void) const { return static_cast<LinkQuality>(mLinkQualityOut)/;"	f	class:ot::Router	typeref:typename:LinkQuality
GetList	core/thread/address_resolver.hpp	/^        const CacheEntryList *GetList(void) const { return static_cast<const CacheEntryList *>(m/;"	f	class:ot::AddressResolver::Iterator	typeref:typename:const CacheEntryList *
GetLocalAddress	core/net/tcp6.cpp	/^const SockAddr &Tcp::Endpoint::GetLocalAddress(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:const SockAddr &
GetLocalIp6Address	core/net/tcp6.cpp	/^Address &Tcp::Endpoint::GetLocalIp6Address(void) { return *reinterpret_cast<Address *>(&GetTcb()/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Address &
GetLocalIp6Address	core/net/tcp6.cpp	/^Address &Tcp::Listener::GetLocalIp6Address(void) { return *reinterpret_cast<Address *>(&GetTcbLi/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Address &
GetLocalIp6Address	core/net/tcp6.cpp	/^const Address &Tcp::Endpoint::GetLocalIp6Address(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:const Address &
GetLocalIp6Address	core/net/tcp6.cpp	/^const Address &Tcp::Listener::GetLocalIp6Address(void) const$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:const Address &
GetLocalPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetLocalPrefix(void) const { return mLocalPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:const Ip6::Prefix &
GetLocalPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetLocalPrefix(void) const { return mLocalPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:const Ip6::Prefix &
GetLocalPrefix	core/border_router/routing_manager.hpp	/^        const OmrPrefix        &GetLocalPrefix(void) const { return mLocalPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:const OmrPrefix &
GetLocalRaHeaderToMirror	core/border_router/routing_manager.hpp	/^        const RouterAdvert::Header &GetLocalRaHeaderToMirror(void) const { return mLocalRaHeader/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:const RouterAdvert::Header &
GetLocalTimestamp	core/meshcop/dataset_manager.hpp	/^    const Timestamp *GetLocalTimestamp(void) const { return mLocalTimestampValid ? &mLocalTimest/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:const Timestamp *
GetLocator	core/meshcop/meshcop.hpp	/^    uint16_t GetLocator(void) const { return mLocator; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:uint16_t
GetLocator	core/net/ip6_address.hpp	/^    uint16_t GetLocator(void) const { return BigEndian::HostSwap16(mFields.m16[3]); }$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:uint16_t
GetLocatorAddress	core/thread/mle.cpp	/^Error Mle::GetLocatorAddress(Ip6::Address &aAddress, uint16_t aLocator) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetLogLevel	core/instance/instance.hpp	/^    static LogLevel GetLogLevel(void)$/;"	f	class:ot::Instance	typeref:typename:LogLevel
GetLqi	core/mac/mac_frame.hpp	/^    uint8_t GetLqi(void) const { return mInfo.mRxInfo.mLqi; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:uint8_t
GetLqi	core/thread/mesh_forwarder.hpp	/^    uint8_t GetLqi(void) const { return mLqi; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:uint8_t
GetLqiAverager	core/common/message.hpp	/^    const LqiAverager &GetLqiAverager(void) const { return GetMetadata().mLqiAverager; }$/;"	f	class:ot::Message	typeref:typename:const LqiAverager &
GetMacAddress	core/thread/indirect_sender.cpp	/^const Mac::Address &IndirectSender::ChildInfo::GetMacAddress(Mac::Address &aMacAddress) const$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:const Mac::Address &
GetMacDestinationAddress	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::GetMacDestinationAddress(const Ip6::Address &aIp6Addr, Mac::Address &aMacAdd/;"	f	class:ot::MeshForwarder	typeref:typename:void
GetMacFrameCounter	core/common/settings.hpp	/^        uint32_t GetMacFrameCounter(void) const { return LittleEndian::HostSwap32(mMacFrameCount/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint32_t
GetMacKey	core/thread/key_manager.hpp	/^        const Mac::Key &GetMacKey(void) const { return mKeys.mMacKey; }$/;"	f	union:ot::KeyManager::HashKeys	typeref:typename:const Mac::Key &
GetMacSourceAddress	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::GetMacSourceAddress(const Ip6::Address &aIp6Addr, Mac::Address &aMacAddr)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
GetMajor	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetMajor(void) const { return (mMinorMajor & kMajorMask) >> kMajorOffset; }$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:uint8_t
GetMask	core/mac/channel_mask.hpp	/^    uint32_t GetMask(void) const { return mMask; }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:uint32_t
GetMask	core/meshcop/meshcop.hpp	/^    uint64_t GetMask(void) const { return (static_cast<uint64_t>(1ULL) << mLength) - 1; }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:uint64_t
GetMask	core/meshcop/meshcop_tlvs.hpp	/^        uint32_t GetMask(void) const { return Reverse32(BigEndian::HostSwap32(mMask)); }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:uint32_t
GetMaskLength	core/meshcop/meshcop_tlvs.hpp	/^        uint8_t  GetMaskLength(void) const { return mMaskLength; }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:uint8_t
GetMatchedResponseCopy	core/coap/coap.cpp	/^Error ResponsesQueue::GetMatchedResponseCopy(const Message          &aRequest,$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:Error
GetMaxChildIpAddresses	core/thread/mle_router.cpp	/^uint8_t MleRouter::GetMaxChildIpAddresses(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetMaxChildTimeout	core/thread/mle_router.cpp	/^Error MleRouter::GetMaxChildTimeout(uint32_t &aTimeout) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
GetMaxChildren	core/thread/child_table.hpp	/^    uint16_t GetMaxChildren(void) const { return kMaxChildren; }$/;"	f	class:ot::ChildTable	typeref:typename:uint16_t
GetMaxChildrenAllowed	core/thread/child_table.hpp	/^    uint16_t GetMaxChildrenAllowed(void) const { return mMaxChildrenAllowed; }$/;"	f	class:ot::ChildTable	typeref:typename:uint16_t
GetMaxCsmaBackoffs	core/mac/mac_frame.hpp	/^    uint8_t GetMaxCsmaBackoffs(void) const { return mInfo.mTxInfo.mMaxCsmaBackoffs; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:uint8_t
GetMaxFrameRetries	core/mac/mac_frame.hpp	/^    uint8_t GetMaxFrameRetries(void) const { return mInfo.mTxInfo.mMaxFrameRetries; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:uint8_t
GetMaxFrameRetriesDirect	core/mac/mac.hpp	/^    uint8_t GetMaxFrameRetriesDirect(void) const { return mMaxFrameRetriesDirect; }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
GetMaxFrameRetriesIndirect	core/mac/mac.hpp	/^    uint8_t GetMaxFrameRetriesIndirect(void) const { return mMaxFrameRetriesIndirect; }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
GetMaxInterval	core/thread/mesh_forwarder.hpp	/^        uint32_t        GetMaxInterval(void) const { return mMaxInterval; }$/;"	f	class:ot::MeshForwarder::TxQueueStats	typeref:typename:uint32_t
GetMaxLength	core/common/frame_builder.hpp	/^    uint16_t GetMaxLength(void) const { return mMaxLength; }$/;"	f	class:ot::FrameBuilder	typeref:typename:uint16_t
GetMaxLength	core/thread/network_data_leader.hpp	/^    uint8_t GetMaxLength(void) const { return mMaxLength; }$/;"	f	class:ot::NetworkData::Leader	typeref:typename:uint8_t
GetMaxPayloadLength	core/mac/mac_frame.cpp	/^uint16_t Frame::GetMaxPayloadLength(void) const { return GetMtu() - (GetHeaderLength() + GetFoot/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetMaxSize	core/common/array.hpp	/^    IndexType GetMaxSize(void) const { return static_cast<IndexType>(kMaxSize); }$/;"	f	class:ot::Array	typeref:typename:IndexType
GetMaxSize	lib/spinel/spinel_driver.hpp	/^        uint16_t GetMaxSize(void) const { return kMaxSize; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:uint16_t
GetMaxTimeInQueue	core/thread/mesh_forwarder.hpp	/^    uint32_t GetMaxTimeInQueue(void) const { return mTxQueueStats.GetMaxInterval(); }$/;"	f	class:ot::MeshForwarder	typeref:typename:uint32_t
GetMaxTxAttempts	core/net/dns_client.hpp	/^        uint8_t GetMaxTxAttempts(void) const { return mMaxTxAttempts; }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:uint8_t
GetMaxUsedBufferCount	core/common/message.hpp	/^    uint16_t GetMaxUsedBufferCount(void) const { return mMaxAllocated; }$/;"	f	class:ot::MessagePool	typeref:typename:uint16_t
GetMaximum	core/mac/mac_types.cpp	/^uint32_t LinkFrameCounters::GetMaximum(void) const$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:uint32_t
GetMaximumMacFrameCounter	core/thread/key_manager.hpp	/^    uint32_t GetMaximumMacFrameCounter(void) const { return mMacFrameCounters.GetMaximum(); }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetMeshDest	core/common/message.hpp	/^    uint16_t GetMeshDest(void) const { return GetMetadata().mMeshDest; }$/;"	f	class:ot::Message	typeref:typename:uint16_t
GetMeshLocal16	core/thread/mle.hpp	/^    const Ip6::Address &GetMeshLocal16(void) const { return mMeshLocal16.GetAddress(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::Address &
GetMeshLocal64	core/thread/mle.hpp	/^    const Ip6::Address &GetMeshLocal64(void) const { return mMeshLocal64.GetAddress(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::Address &
GetMeshLocal64UnicastAddress	core/thread/mle.hpp	/^    Ip6::Netif::UnicastAddress &GetMeshLocal64UnicastAddress(void) { return mMeshLocal64; }$/;"	f	class:ot::Mle::Mle	typeref:typename:Ip6::Netif::UnicastAddress &
GetMeshLocalIid	core/backbone_router/ndproxy_table.hpp	/^        const Ip6::InterfaceIdentifier &GetMeshLocalIid(void) const { return mMeshLocalIid; }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:const Ip6::InterfaceIdentifier &
GetMeshLocalIid	core/common/settings.hpp	/^        const Ip6::InterfaceIdentifier &GetMeshLocalIid(void) const { return mMlIid; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:const Ip6::InterfaceIdentifier &
GetMeshLocalIid	core/thread/address_resolver.hpp	/^        const Ip6::InterfaceIdentifier &GetMeshLocalIid(void) const { return mInfo.mCached.mMesh/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:const Ip6::InterfaceIdentifier &
GetMeshLocalIid	core/thread/child.hpp	/^    const Ip6::InterfaceIdentifier &GetMeshLocalIid(void) const { return mMeshLocalIid; }$/;"	f	class:ot::Child	typeref:typename:const Ip6::InterfaceIdentifier &
GetMeshLocalIp6Address	core/thread/child.cpp	/^Error Child::GetMeshLocalIp6Address(Ip6::Address &aAddress) const$/;"	f	class:ot::Child	typeref:typename:Error
GetMeshLocalPrefix	core/thread/mle.hpp	/^    const Ip6::NetworkPrefix &GetMeshLocalPrefix(void) const { return mMeshLocalPrefix; }$/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::NetworkPrefix &
GetMessage	core/coap/coap_message.hpp	/^        const Message &GetMessage(void) const { return *static_cast<const Message *>(mMessage); /;"	f	class:ot::Coap::Option::Iterator	typeref:typename:const Message &
GetMessage	core/common/appender.hpp	/^    Message &GetMessage(void) const { return *mShared.mMessage.mMessage; }$/;"	f	class:ot::Appender	typeref:typename:Message &
GetMessageErrorRate	core/thread/link_quality.hpp	/^    uint16_t GetMessageErrorRate(void) const { return mMessageErrorRate.GetFailureRate(); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:uint16_t
GetMessageErrorRate	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetMessageErrorRate(void) const { return BigEndian::HostSwap16(mMessageErrorRate); /;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetMessageErrorRate	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetMessageErrorRate(void) const { return BigEndian::HostSwap16(mMessageErrorRate); /;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint16_t
GetMessageId	core/coap/coap_message.hpp	/^    uint16_t GetMessageId(void) const { return BigEndian::HostSwap16(GetHelpData().mHeader.mMess/;"	f	class:ot::Coap::Message	typeref:typename:uint16_t
GetMessageId	core/meshcop/border_agent.hpp	/^        uint16_t GetMessageId(void) const { return mMessageId; }$/;"	f	class:ot::MeshCoP::BorderAgent::ForwardContext	typeref:typename:uint16_t
GetMessageId	core/net/dns_types.hpp	/^    uint16_t GetMessageId(void) const { return BigEndian::HostSwap16(mMessageId); }$/;"	f	class:ot::Dns::Header	typeref:typename:uint16_t
GetMessageInfo	core/coap/coap_secure.hpp	/^    const Ip6::MessageInfo &GetMessageInfo(void) const { return mDtls.GetMessageInfo(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:const Ip6::MessageInfo &
GetMessageInfo	core/meshcop/secure_transport.hpp	/^    const Ip6::MessageInfo &GetMessageInfo(void) const { return mMessageInfo; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:const Ip6::MessageInfo &
GetMessageInfo	core/net/dnssd_server.hpp	/^        const Ip6::MessageInfo &GetMessageInfo(void) const { return mMessageInfo; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server::UpstreamQueryTransaction	typeref:typename:const Ip6::MessageInfo &
GetMessageInfo	core/net/srp_server.hpp	/^        const Ip6::MessageInfo  &GetMessageInfo(void) const { return mMessageInfo; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:const Ip6::MessageInfo &
GetMessagePool	core/common/message.hpp	/^    MessagePool *GetMessagePool(void) const { return GetMetadata().mMessagePool; }$/;"	f	class:ot::Message	typeref:typename:MessagePool *
GetMessageQueue	core/common/message.hpp	/^    MessageQueue *GetMessageQueue(void) const$/;"	f	class:ot::Message	typeref:typename:MessageQueue *
GetMessageQueue	core/thread/mle.hpp	/^    const MessageQueue &GetMessageQueue(void) const { return mDelayedResponses; }$/;"	f	class:ot::Mle::Mle	typeref:typename:const MessageQueue &
GetMetadata	core/common/message.hpp	/^    Metadata       &GetMetadata(void) { return mBuffer.mHead.mMetadata; }$/;"	f	class:ot::Buffer	typeref:typename:Metadata &
GetMetadata	core/common/message.hpp	/^    const Metadata &GetMetadata(void) const { return mBuffer.mHead.mMetadata; }$/;"	f	class:ot::Buffer	typeref:typename:const Metadata &
GetMetrics	core/thread/link_metrics_types.hpp	/^    Metrics &GetMetrics(void) { return static_cast<Metrics &>(mMetrics); }$/;"	f	class:ot::LinkMetrics::MetricsValues	typeref:typename:Metrics &
GetMetrics	core/thread/link_metrics_types.hpp	/^    const Metrics &GetMetrics(void) const { return static_cast<const Metrics &>(mMetrics); }$/;"	f	class:ot::LinkMetrics::MetricsValues	typeref:typename:const Metrics &
GetMetricsTypeId	core/thread/link_metrics_tlvs.hpp	/^    uint8_t GetMetricsTypeId(void) const { return mMetricsTypeId; }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:uint8_t
GetMetricsValue32	core/thread/link_metrics_tlvs.hpp	/^    uint32_t GetMetricsValue32(void) const { return BigEndian::HostSwap32(mMetricsValue.m32); }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:uint32_t
GetMetricsValue8	core/thread/link_metrics_tlvs.hpp	/^    uint8_t GetMetricsValue8(void) const { return mMetricsValue.m8; }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:uint8_t
GetMf	core/net/ip4_types.hpp	/^    bool GetMf(void) const { return BigEndian::HostSwap16(mFlagsFragmentOffset) & kFlagsMf; }$/;"	f	class:ot::Ip4::Header	typeref:typename:bool
GetMinor	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetMinor(void) const { return (mMinorMajor & kMinorMask) >> kMinorOffset; }$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:uint8_t
GetMleFrameCounter	core/common/settings.hpp	/^        uint32_t GetMleFrameCounter(void) const { return LittleEndian::HostSwap32(mMleFrameCount/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint32_t
GetMleFrameCounter	core/thread/key_manager.hpp	/^    uint32_t GetMleFrameCounter(void) const { return mMleFrameCounter; }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetMleFrameCounter	core/thread/neighbor.hpp	/^    uint32_t GetMleFrameCounter(void) const { return mValidPending.mValid.mMleFrameCounter; }$/;"	f	class:ot::Neighbor	typeref:typename:uint32_t
GetMleKey	core/thread/key_manager.hpp	/^        const Mle::Key &GetMleKey(void) const { return mKeys.mMleKey; }$/;"	f	union:ot::KeyManager::HashKeys	typeref:typename:const Mle::Key &
GetMlrState	core/net/netif.hpp	/^        MlrState GetMlrState(void) const { return mMlrState; }$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress	typeref:typename:MlrState
GetMlrTimeout	core/thread/network_data_service.hpp	/^        uint32_t GetMlrTimeout(void) const { return BigEndian::HostSwap32(mMlrTimeout); }$/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:uint32_t
GetMode	core/common/settings.hpp	/^        uint8_t GetMode(void) const { return mMode; }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:uint8_t
GetMode	core/common/trickle_timer.hpp	/^    Mode GetMode(void) const { return mMode; }$/;"	f	class:ot::TrickleTimer	typeref:typename:Mode
GetMode	core/mac/mac_filter.hpp	/^    Mode GetMode(void) const { return mMode; }$/;"	f	class:ot::Mac::Filter	typeref:typename:Mode
GetMode	core/net/sntp_client.hpp	/^        Mode GetMode(void) const { return static_cast<Mode>((mFlags & kModeMask) >> kModeOffset)/;"	f	class:ot::Sntp::Client::Header	typeref:typename:Mode
GetMode	core/thread/network_diagnostic_tlvs.hpp	/^    Mle::DeviceMode GetMode(void) const { return Mle::DeviceMode(mMode); }$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:Mle::DeviceMode
GetMtu	core/mac/mac_frame.cpp	/^uint16_t Frame::GetMtu(void) const { return Trel::Link::kMtuSize; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetMtu	core/mac/mac_frame.cpp	/^uint16_t Frame::GetMtu(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetMtu	core/mac/mac_frame.hpp	/^    uint16_t GetMtu(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetMulticastAddresses	core/net/netif.hpp	/^    const LinkedList<MulticastAddress> &GetMulticastAddresses(void) const { return mMulticastAdd/;"	f	class:ot::Ip6::Netif	typeref:typename:const LinkedList<MulticastAddress> &
GetMulticastListenersTable	core/backbone_router/bbr_manager.hpp	/^    MulticastListenersTable &GetMulticastListenersTable(void) { return mMulticastListenersTable;/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:MulticastListenersTable &
GetMulticastLoop	core/common/message.hpp	/^    bool GetMulticastLoop(void) const { return GetMetadata().mMulticastLoop; }$/;"	f	class:ot::Message	typeref:typename:bool
GetMulticastLoop	core/net/socket.hpp	/^    bool GetMulticastLoop(void) const { return mMulticastLoop; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:bool
GetMultipanActiveInterface	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetMultipanActiveInterface(spinel_iid_t *aIid)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetName	core/net/dns_client.cpp	/^Error Client::Response::GetName(char *aNameBuffer, uint16_t aNameBufferSize) const$/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
GetName	core/net/srp_client.hpp	/^        const char *GetName(void) const { return mName; }$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:const char *
GetName	core/net/srp_client.hpp	/^        const char *GetName(void) const { return mName; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:const char *
GetNat64Mode	core/net/dns_client.hpp	/^        Nat64Mode GetNat64Mode(void) const { return static_cast<Nat64Mode>(mNat64Mode); }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:Nat64Mode
GetNat64Prefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetNat64Prefix(Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetNat64PrefixManagerState	core/border_router/routing_manager.hpp	/^    Nat64::State GetNat64PrefixManagerState(void) const { return mNat64PrefixManager.GetState();/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Nat64::State
GetNcpBaseIid	ncp/ncp_base.hpp	/^    static inline uint8_t GetNcpBaseIid(otInstance *aInstance)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:uint8_t
GetNcpInstance	ncp/ncp_base.cpp	/^NcpBase *NcpBase::GetNcpInstance(void) { return sNcpInstance; }$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:NcpBase *
GetNdProxyTable	core/backbone_router/bbr_manager.cpp	/^NdProxyTable &Manager::GetNdProxyTable(void) { return mNdProxyTable; }$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:NdProxyTable &
GetNeighborCount	core/thread/router_table.cpp	/^uint8_t RouterTable::GetNeighborCount(LinkQuality aLinkQuality) const$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetNetifIndex	posix/platform/infra_if.hpp	/^    uint32_t GetNetifIndex(void) const { return mInfraIfIndex; }$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:uint32_t
GetNetifName	posix/platform/infra_if.hpp	/^    const char *GetNetifName(void) const { return (mInfraIfIndex != 0) ? mInfraIfName : nullptr;/;"	f	class:ot::Posix::InfraNetif	typeref:typename:const char *
GetNetworkDataType	core/thread/mle.hpp	/^    NetworkData::Type GetNetworkDataType(void) const { return mDeviceMode.GetNetworkDataType(); /;"	f	class:ot::Mle::Mle	typeref:typename:NetworkData::Type
GetNetworkDataType	core/thread/mle_types.hpp	/^    NetworkData::Type GetNetworkDataType(void) const$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:NetworkData::Type
GetNetworkDataType	core/thread/neighbor.hpp	/^    NetworkData::Type GetNetworkDataType(void) const { return GetDeviceMode().GetNetworkDataType/;"	f	class:ot::Neighbor	typeref:typename:NetworkData::Type
GetNetworkDataVersion	core/thread/child.hpp	/^    uint8_t GetNetworkDataVersion(void) const { return mNetworkDataVersion; }$/;"	f	class:ot::Child	typeref:typename:uint8_t
GetNetworkIdTimeout	core/thread/mle_router.hpp	/^    uint8_t GetNetworkIdTimeout(void) const { return mNetworkIdTimeout; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetNetworkKey	core/thread/key_manager.cpp	/^void KeyManager::GetNetworkKey(NetworkKey &aNetworkKey) const$/;"	f	class:ot::KeyManager	typeref:typename:void
GetNetworkKeyRef	core/thread/key_manager.hpp	/^    NetworkKeyRef GetNetworkKeyRef(void) const { return mNetworkKeyRef; }$/;"	f	class:ot::KeyManager	typeref:typename:NetworkKeyRef
GetNetworkName	core/mac/mac_frame.hpp	/^    MeshCoP::NameData GetNetworkName(void) const { return MeshCoP::NameData(mNetworkName, sizeof/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:MeshCoP::NameData
GetNetworkName	core/meshcop/meshcop_tlvs.cpp	/^NameData NetworkNameTlv::GetNetworkName(void) const$/;"	f	class:ot::MeshCoP::NetworkNameTlv	typeref:typename:NameData
GetNetworkName	core/meshcop/network_name.hpp	/^    const NetworkName &GetNetworkName(void) const { return mNetworkName; }$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:const NetworkName &
GetNetworkTimeOffset	core/common/message.hpp	/^    int64_t GetNetworkTimeOffset(void) const { return GetMetadata().mNetworkTimeOffset; }$/;"	f	class:ot::Message	typeref:typename:int64_t
GetNetworkTimeOffset	core/thread/mesh_forwarder.hpp	/^    int64_t GetNetworkTimeOffset(void) const { return mNetworkTimeOffset; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:int64_t
GetNetworkTimeOffset	core/thread/time_sync_service.hpp	/^    int64_t GetNetworkTimeOffset(void) const { return mNetworkTimeOffset; }$/;"	f	class:ot::TimeSync	typeref:typename:int64_t
GetNewChild	core/thread/child_table.cpp	/^Child *ChildTable::GetNewChild(void)$/;"	f	class:ot::ChildTable	typeref:typename:Child *
GetNewPeerEntry	core/radio/trel_interface.cpp	/^Interface::Peer *Interface::GetNewPeerEntry(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:Interface::Peer *
GetNext	core/backbone_router/multicast_listeners_table.cpp	/^Error MulticastListenersTable::GetNext(Listener::Iterator &aIterator, Listener::Info &aInfo)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:Error
GetNext	core/border_router/routing_manager.hpp	/^            SharedEntry       *GetNext(void) { return mNext; }$/;"	f	union:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry	typeref:typename:SharedEntry *
GetNext	core/border_router/routing_manager.hpp	/^            const SharedEntry *GetNext(void) const { return mNext; }$/;"	f	union:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry	typeref:typename:const SharedEntry *
GetNext	core/coap/coap.hpp	/^    ResourceBlockWise *GetNext(void)$/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:ResourceBlockWise *
GetNext	core/coap/coap.hpp	/^    const ResourceBlockWise *GetNext(void) const$/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:const ResourceBlockWise *
GetNext	core/common/linked_list.hpp	/^    Type *GetNext(void) { return static_cast<Type *>(static_cast<Type *>(this)->mNext); }$/;"	f	class:ot::LinkedListEntry	typeref:typename:Type *
GetNext	core/common/linked_list.hpp	/^    const Type *GetNext(void) const { return static_cast<const Type *>(static_cast<const Type *>/;"	f	class:ot::LinkedListEntry	typeref:typename:const Type *
GetNext	core/common/message.cpp	/^Message *Message::GetNext(void) const$/;"	f	class:ot::Message	typeref:typename:Message *
GetNext	core/common/random.cpp	/^uint32_t Manager::NonCryptoPrng::GetNext(void)$/;"	f	class:ot::Random::Manager::NonCryptoPrng	typeref:typename:uint32_t
GetNext	core/common/tlvs.hpp	/^    Tlv *GetNext(void) { return reinterpret_cast<Tlv *>(reinterpret_cast<uint8_t *>(this) + GetS/;"	f	class:ot::Tlv	typeref:typename:Tlv *
GetNext	core/common/tlvs.hpp	/^    const Tlv *GetNext(void) const$/;"	f	class:ot::Tlv	typeref:typename:const Tlv *
GetNext	core/meshcop/meshcop_tlvs.hpp	/^    Tlv *GetNext(void) { return As<Tlv>(ot::Tlv::GetNext()); }$/;"	f	class:ot::MeshCoP::Tlv	typeref:typename:Tlv *
GetNext	core/meshcop/meshcop_tlvs.hpp	/^    const Tlv *GetNext(void) const { return As<Tlv>(ot::Tlv::GetNext()); }$/;"	f	class:ot::MeshCoP::Tlv	typeref:typename:const Tlv *
GetNext	core/net/netif.hpp	/^        ExternalMulticastAddress *GetNext(void) { return static_cast<ExternalMulticastAddress *>/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress	typeref:typename:ExternalMulticastAddress *
GetNext	core/net/netif.hpp	/^        MulticastAddress *GetNext(void) { return static_cast<MulticastAddress *>(AsNonConst(mNex/;"	f	class:ot::Ip6::Netif::MulticastAddress	typeref:typename:MulticastAddress *
GetNext	core/net/netif.hpp	/^        UnicastAddress *GetNext(void) { return static_cast<UnicastAddress *>(AsNonConst(mNext));/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:UnicastAddress *
GetNext	core/net/netif.hpp	/^        const MulticastAddress *GetNext(void) const { return static_cast<const MulticastAddress /;"	f	class:ot::Ip6::Netif::MulticastAddress	typeref:typename:const MulticastAddress *
GetNext	core/net/netif.hpp	/^        const UnicastAddress *GetNext(void) const { return static_cast<const UnicastAddress *>(m/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:const UnicastAddress *
GetNext	core/thread/address_resolver.cpp	/^AddressResolver::CacheEntry *AddressResolver::CacheEntry::GetNext(void)$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:AddressResolver::CacheEntry *
GetNext	core/thread/address_resolver.cpp	/^const AddressResolver::CacheEntry *AddressResolver::CacheEntry::GetNext(void) const$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:const AddressResolver::CacheEntry *
GetNext	core/thread/network_data_tlvs.hpp	/^    BorderRouterEntry *GetNext(void) { return (this + 1); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:BorderRouterEntry *
GetNext	core/thread/network_data_tlvs.hpp	/^    HasRouteEntry *GetNext(void) { return (this + 1); }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:HasRouteEntry *
GetNext	core/thread/network_data_tlvs.hpp	/^    NetworkDataTlv *GetNext(void)$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:NetworkDataTlv *
GetNext	core/thread/network_data_tlvs.hpp	/^    const BorderRouterEntry *GetNext(void) const { return (this + 1); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:const BorderRouterEntry *
GetNext	core/thread/network_data_tlvs.hpp	/^    const HasRouteEntry *GetNext(void) const { return (this + 1); }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:const HasRouteEntry *
GetNext	core/thread/network_data_tlvs.hpp	/^    const NetworkDataTlv *GetNext(void) const$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const NetworkDataTlv *
GetNext	core/utils/heap.hpp	/^    uint16_t GetNext(void) const$/;"	f	class:ot::Utils::Block	typeref:typename:uint16_t
GetNext	core/utils/srp_client_buffers.hpp	/^        ServiceEntry       *GetNext(void) { return reinterpret_cast<ServiceEntry *>(mService.mNe/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:ServiceEntry *
GetNext	core/utils/srp_client_buffers.hpp	/^        const ServiceEntry *GetNext(void) const { return reinterpret_cast<const ServiceEntry *>(/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:const ServiceEntry *
GetNextAddress	core/mac/mac_filter.cpp	/^Error Filter::GetNextAddress(Iterator &aIterator, Entry &aEntry) const$/;"	f	class:ot::Mac::Filter	typeref:typename:Error
GetNextAddress	core/utils/mesh_diag.cpp	/^Error MeshDiag::Ip6AddrIterator::GetNextAddress(Ip6::Address &aAddress)$/;"	f	class:ot::Utils::MeshDiag::Ip6AddrIterator	typeref:typename:Error
GetNextAddressMapping	core/net/nat64_translator.cpp	/^Error Translator::GetNextAddressMapping(AddressMappingIterator &aIterator, otNat64AddressMapping/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
GetNextAnnounceChannel	core/thread/mle.cpp	/^Error Mle::GetNextAnnounceChannel(uint8_t &aChannel) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetNextBuffer	core/common/message.hpp	/^    Buffer *GetNextBuffer(void) { return GetNext(); }$/;"	f	class:ot::Buffer	typeref:typename:Buffer *
GetNextBuffer	core/common/message.hpp	/^    const Buffer *GetNextBuffer(void) const { return GetNext(); }$/;"	f	class:ot::Buffer	typeref:typename:const Buffer *
GetNextCacheEntry	core/thread/address_resolver.cpp	/^Error AddressResolver::GetNextCacheEntry(EntryInfo &aInfo, Iterator &aIterator) const$/;"	f	class:ot::AddressResolver	typeref:typename:Error
GetNextChannel	core/mac/channel_mask.cpp	/^Error ChannelMask::GetNextChannel(uint8_t &aChannel) const$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:Error
GetNextChildInfo	core/utils/mesh_diag.cpp	/^Error MeshDiag::ChildIterator::GetNextChildInfo(ChildInfo &aChildInfo)$/;"	f	class:ot::Utils::MeshDiag::ChildIterator	typeref:typename:Error
GetNextChunk	core/common/message.cpp	/^void Message::GetNextChunk(uint16_t &aLength, Chunk &aChunk) const$/;"	f	class:ot::Message	typeref:typename:void
GetNextChunk	core/common/message.hpp	/^    void GetNextChunk(uint16_t &aLength, MutableChunk &aChunk)$/;"	f	class:ot::Message	typeref:typename:void
GetNextCoapMessage	core/coap/coap_message.hpp	/^    Message *GetNextCoapMessage(void) { return static_cast<Message *>(GetNext()); }$/;"	f	class:ot::Coap::Message	typeref:typename:Message *
GetNextCoapMessage	core/coap/coap_message.hpp	/^    const Message *GetNextCoapMessage(void) const { return static_cast<const Message *>(GetNext(/;"	f	class:ot::Coap::Message	typeref:typename:const Message *
GetNextCslTransmissionDelay	core/thread/csl_tx_scheduler.cpp	/^uint32_t CslTxScheduler::GetNextCslTransmissionDelay(const Child &aChild,$/;"	f	class:ot::CslTxScheduler	typeref:typename:uint32_t
GetNextDiagTlv	core/thread/network_diagnostic.cpp	/^Error Client::GetNextDiagTlv(const Coap::Message &aMessage, Iterator &aIterator, TlvInfo &aTlvIn/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:Error
GetNextDnsSrpAnycastInfo	core/thread/network_data_service.cpp	/^Error Manager::GetNextDnsSrpAnycastInfo(Iterator &aIterator, DnsSrpAnycast::Info &aInfo) const$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
GetNextDnsSrpUnicastInfo	core/thread/network_data_service.cpp	/^Error Manager::GetNextDnsSrpUnicastInfo(Iterator &aIterator, DnsSrpUnicast::Info &aInfo) const$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
GetNextEntry	core/border_router/routing_manager.cpp	/^Error RoutingManager::RxRaTracker::GetNextEntry(PrefixTableIterator &aIterator, PrefixTableEntry/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:Error
GetNextEntry	core/net/dns_types.cpp	/^Error TxtEntry::Iterator::GetNextEntry(TxtEntry &aEntry)$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:Error
GetNextExternalRoute	core/thread/network_data.cpp	/^Error NetworkData::GetNextExternalRoute(Iterator &aIterator, ExternalRouteConfig &aConfig) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextExternalRoute	core/thread/network_data.cpp	/^Error NetworkData::GetNextExternalRoute(Iterator &aIterator, uint16_t aRloc16, ExternalRouteConf/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextFireTime	core/net/dns_dso.cpp	/^TimeMilli Dso::Connection::GetNextFireTime(TimeMilli aNow) const$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:TimeMilli
GetNextFireTime	core/net/dns_dso.cpp	/^TimeMilli Dso::Connection::PendingRequests::GetNextFireTime(TimeMilli aNow) const$/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:TimeMilli
GetNextHeader	core/net/ip6_headers.hpp	/^    uint8_t GetNextHeader(void) const { return mNextHeader; }$/;"	f	class:ot::Ip6::ExtensionHeader	typeref:typename:uint8_t
GetNextHeader	core/net/ip6_headers.hpp	/^    uint8_t GetNextHeader(void) const { return mNextHeader; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint8_t
GetNextHeader	core/net/ip6_headers.hpp	/^    uint8_t GetNextHeader(void) const { return mNextHeader; }$/;"	f	class:ot::Ip6::Header	typeref:typename:uint8_t
GetNextHop	core/thread/mle.cpp	/^uint16_t Mle::GetNextHop(uint16_t aDestination) const$/;"	f	class:ot::Mle::Mle	typeref:typename:uint16_t
GetNextHop	core/thread/mle_router.hpp	/^    uint16_t GetNextHop(uint16_t aDestination) { return mRouterTable.GetNextHop(aDestination); }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint16_t
GetNextHop	core/thread/router.hpp	/^    uint8_t GetNextHop(void) const { return mNextHop; }$/;"	f	class:ot::Router	typeref:typename:uint8_t
GetNextHop	core/thread/router_table.cpp	/^uint16_t RouterTable::GetNextHop(uint16_t aDestRloc16) const$/;"	f	class:ot::RouterTable	typeref:typename:uint16_t
GetNextHopAndPathCost	core/thread/router_table.cpp	/^void RouterTable::GetNextHopAndPathCost(uint16_t aDestRloc16, uint16_t &aNextHopRloc16, uint8_t /;"	f	class:ot::RouterTable	typeref:typename:void
GetNextHost	core/net/mdns.cpp	/^Error Core::EntryIterator::GetNextHost(Host &aHost, EntryState &aState)$/;"	f	class:ot::Dns::Multicast::Core::EntryIterator	typeref:typename:Error
GetNextHost	core/net/mdns.cpp	/^Error Core::GetNextHost(Iterator &aIterator, Host &aHost, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
GetNextHost	core/net/srp_server.cpp	/^const Server::Host *Server::GetNextHost(const Server::Host *aHost)$/;"	f	class:ot::Srp::Server	typeref:typename:const Server::Host *
GetNextJoinerInfo	core/meshcop/commissioner.cpp	/^Error Commissioner::GetNextJoinerInfo(uint16_t &aIterator, otJoinerInfo &aJoinerInfo) const$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
GetNextKey	core/net/mdns.cpp	/^Error Core::EntryIterator::GetNextKey(Key &aKey, EntryState &aState)$/;"	f	class:ot::Dns::Multicast::Core::EntryIterator	typeref:typename:Error
GetNextKey	core/net/mdns.cpp	/^Error Core::GetNextKey(Iterator &aIterator, Key &aKey, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
GetNextLabel	core/net/dns_types.cpp	/^Error Name::LabelIterator::GetNextLabel(void)$/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:Error
GetNextLowpanContextInfo	core/thread/network_data.cpp	/^Error NetworkData::GetNextLowpanContextInfo(Iterator &aIterator, LowpanContextInfo &aContextInfo/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextMacKey	core/mac/sub_mac.hpp	/^    const KeyMaterial &GetNextMacKey(void) const { return mNextKey; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:const KeyMaterial &
GetNextNeighborInfo	core/thread/neighbor_table.cpp	/^Error NeighborTable::GetNextNeighborInfo(otNeighborInfoIterator &aIterator, Neighbor::Info &aNei/;"	f	class:ot::NeighborTable	typeref:typename:Error
GetNextOnMeshPrefix	core/thread/network_data.cpp	/^Error NetworkData::GetNextOnMeshPrefix(Iterator &aIterator, OnMeshPrefixConfig &aConfig) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextOnMeshPrefix	core/thread/network_data.cpp	/^Error NetworkData::GetNextOnMeshPrefix(Iterator &aIterator, uint16_t aRloc16, OnMeshPrefixConfig/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextPeer	core/radio/trel_interface.cpp	/^const Interface::Peer *Interface::GetNextPeer(PeerIterator &aIterator) const$/;"	f	class:ot::Trel::Interface	typeref:typename:const Interface::Peer *
GetNextPrefix	cli/cli_network_data.cpp	/^otError NetworkData::GetNextPrefix(otNetworkDataIterator *aIterator, otBorderRouterConfig *aConf/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
GetNextPrefixTableEntry	core/border_router/routing_manager.hpp	/^    Error GetNextPrefixTableEntry(PrefixTableIterator &aIterator, PrefixTableEntry &aEntry) cons/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetNextQuery	core/net/dnssd_server.cpp	/^const otDnssdQuery *Server::GetNextQuery(const otDnssdQuery *aQuery) const$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:const otDnssdQuery *
GetNextRadioTimeRecalcStart	lib/spinel/radio_spinel.hpp	/^    uint64_t GetNextRadioTimeRecalcStart(void) const { return mRadioTimeRecalcStart; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint64_t
GetNextRoute	cli/cli_network_data.cpp	/^otError NetworkData::GetNextRoute(otNetworkDataIterator *aIterator, otExternalRouteConfig *aConf/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
GetNextRouter	core/border_router/routing_manager.cpp	/^Error RoutingManager::RxRaTracker::GetNextRouter(PrefixTableIterator &aIterator, RouterEntry &aE/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:Error
GetNextRouterEntry	core/border_router/routing_manager.hpp	/^    Error GetNextRouterEntry(PrefixTableIterator &aIterator, RouterEntry &aEntry) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetNextRssIn	core/mac/mac_filter.cpp	/^Error Filter::GetNextRssIn(Iterator &aIterator, Entry &aEntry) const$/;"	f	class:ot::Mac::Filter	typeref:typename:Error
GetNextSavedFrame	lib/spinel/multi_frame_buffer.hpp	/^    otError GetNextSavedFrame(uint8_t *&aFrame, uint16_t &aLength)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:otError
GetNextService	cli/cli_network_data.cpp	/^otError NetworkData::GetNextService(otNetworkDataIterator *aIterator, otServiceConfig *aConfig, /;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
GetNextService	core/net/mdns.cpp	/^Error Core::EntryIterator::GetNextService(Service &aService, EntryState &aState)$/;"	f	class:ot::Dns::Multicast::Core::EntryIterator	typeref:typename:Error
GetNextService	core/net/mdns.cpp	/^Error Core::GetNextService(Iterator &aIterator, Service &aService, EntryState &aState) const$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
GetNextService	core/net/srp_server.cpp	/^const Server::Service *Server::Host::GetNextService(const Service *aPrevService) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const Server::Service *
GetNextService	core/thread/network_data.cpp	/^Error NetworkData::GetNextService(Iterator &aIterator, ServiceConfig &aConfig) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextService	core/thread/network_data.cpp	/^Error NetworkData::GetNextService(Iterator &aIterator, uint16_t aRloc16, ServiceConfig &aConfig)/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
GetNextTargetPower	posix/platform/configuration.cpp	/^otError Configuration::GetNextTargetPower(const Power::Domain &aDomain,$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
GetNextTid	lib/spinel/radio_spinel.cpp	/^spinel_tid_t RadioSpinel::GetNextTid(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:spinel_tid_t
GetNextTime	core/net/mdns.hpp	/^        TimeMilli GetNextTime(void) const { return mNextTime; }$/;"	f	class:ot::Dns::Multicast::Core::TimerContext	typeref:typename:TimeMilli
GetNoiseFloor	core/mac/mac.hpp	/^    int8_t GetNoiseFloor(void) const { return mLinks.GetNoiseFloor(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:int8_t
GetNoiseFloor	core/mac/mac_links.hpp	/^    int8_t GetNoiseFloor(void) const$/;"	f	class:ot::Mac::Links	typeref:typename:int8_t
GetNoiseFloor	core/mac/sub_mac.cpp	/^int8_t SubMac::GetNoiseFloor(void) const { return Get<Radio>().GetReceiveSensitivity(); }$/;"	f	class:ot::Mac::SubMac	typeref:typename:int8_t
GetNow	core/common/timer.hpp	/^    static TimeMicro GetNow(void) { return Time(otPlatAlarmMicroGetNow()); }$/;"	f	class:ot::TimerMicro	typeref:typename:TimeMicro
GetNow	core/common/timer.hpp	/^    static TimeMilli GetNow(void) { return TimeMilli(otPlatAlarmMilliGetNow()); }$/;"	f	class:ot::TimerMilli	typeref:typename:TimeMilli
GetNow	core/net/mdns.hpp	/^        TimeMilli GetNow(void) const { return mNow; }$/;"	f	class:ot::Dns::Multicast::Core::TimerContext	typeref:typename:TimeMilli
GetNow	lib/spinel/radio_spinel.cpp	/^uint64_t RadioSpinel::GetNow(void) { return (mIsTimeSynced) ? (otPlatTimeGet() + mRadioTimeOffse/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint64_t
GetNumAddresses	core/net/srp_client.hpp	/^        uint8_t GetNumAddresses(void) const { return mNumAddresses; }$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:uint8_t
GetNumBits	core/meshcop/meshcop.hpp	/^    uint8_t GetNumBits(void) const { return (mLength * kBitsPerByte); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:uint8_t
GetNumChildren	core/thread/child_table.cpp	/^uint16_t ChildTable::GetNumChildren(Child::StateFilter aFilter) const$/;"	f	class:ot::ChildTable	typeref:typename:uint16_t
GetNumEntries	core/net/mdns.hpp	/^        uint16_t GetNumEntries(void) const { return mNumEntries; }$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:uint16_t
GetNumEntries	core/thread/network_data_tlvs.hpp	/^    uint8_t GetNumEntries(void) const { return GetLength() \/ sizeof(BorderRouterEntry); }$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:uint8_t
GetNumEntries	core/thread/network_data_tlvs.hpp	/^    uint8_t GetNumEntries(void) const { return GetLength() \/ sizeof(HasRouteEntry); }$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:uint8_t
GetNumEntries	ncp/changed_props_set.cpp	/^uint8_t ChangedPropsSet::GetNumEntries(void) const$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:uint8_t
GetNumTxtEntries	core/net/srp_client.hpp	/^        uint8_t GetNumTxtEntries(void) const { return mNumTxtEntries; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint8_t
GetNumber	core/coap/coap_message.hpp	/^    uint16_t GetNumber(void) const { return mNumber; }$/;"	f	class:ot::Coap::Option	typeref:typename:uint16_t
GetNumberOfAllocatedIds	core/thread/mle_types.cpp	/^uint8_t RouterIdSet::GetNumberOfAllocatedIds(void) const$/;"	f	class:ot::Mle::RouterIdSet	typeref:typename:uint8_t
GetNumberOfChannels	core/mac/channel_mask.cpp	/^uint8_t ChannelMask::GetNumberOfChannels(void) const$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:uint8_t
GetNumberOfPeers	core/radio/trel_interface.hpp	/^    uint16_t GetNumberOfPeers(void) const { return mPeerTable.GetLength(); }$/;"	f	class:ot::Trel::Interface	typeref:typename:uint16_t
GetNumberOfSubTypes	core/net/srp_server.hpp	/^        uint16_t GetNumberOfSubTypes(void) const { return mSubTypes.GetLength(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint16_t
GetOffset	core/common/message.hpp	/^    uint16_t GetOffset(void) const { return GetMetadata().mOffset; }$/;"	f	class:ot::Message	typeref:typename:uint16_t
GetOffset	core/net/ip6_headers.hpp	/^    uint16_t GetOffset(void) const { return (BigEndian::HostSwap16(mOffsetMore) & kOffsetMask) >/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint16_t
GetOmrPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetOmrPrefix(Ip6::Prefix &aPrefix) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetOnLinkPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetOnLinkPrefix(Ip6::Prefix &aPrefix) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetOption	core/coap/coap_message.hpp	/^        const Option *GetOption(void) const { return IsDone() ? nullptr : static_cast<const Opti/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:const Option *
GetOptionCode	core/net/dns_types.hpp	/^    uint16_t GetOptionCode(void) const { return BigEndian::HostSwap16(mOptionCode); }$/;"	f	class:ot::Dns::Option	typeref:typename:uint16_t
GetOptionLength	core/net/dns_types.hpp	/^    uint16_t GetOptionLength(void) const { return BigEndian::HostSwap16(mOptionLength); }$/;"	f	class:ot::Dns::Option	typeref:typename:uint16_t
GetOptionLength	core/net/nd6.hpp	/^        uint16_t GetOptionLength(void) const { return ContainsAnyOptions() ? mData.GetLength() -/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:uint16_t
GetOptionStart	core/coap/coap_message.hpp	/^    uint16_t GetOptionStart(void) const { return kMinHeaderLength + GetTokenLength(); }$/;"	f	class:ot::Coap::Message	typeref:typename:uint16_t
GetOptionStart	core/net/nd6.hpp	/^        const uint8_t *GetOptionStart(void) const { return (mData.GetBytes() + sizeof(Header)); /;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:const uint8_t *
GetOptionValueMessageOffset	core/coap/coap_message.hpp	/^        uint16_t GetOptionValueMessageOffset(void) const { return mNextOptionOffset - mOption.mL/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:uint16_t
GetOrigin	core/common/message.hpp	/^    Origin GetOrigin(void) const { return static_cast<Origin>(GetMetadata().mOrigin); }$/;"	f	class:ot::Message	typeref:typename:Origin
GetOrigin	core/net/netif.hpp	/^        AddressOrigin GetOrigin(void) const { return static_cast<AddressOrigin>(mAddressOrigin);/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:AddressOrigin
GetOriginalTtl	core/net/dns_types.hpp	/^    uint32_t GetOriginalTtl(void) const { return BigEndian::HostSwap32(mOriginalTtl); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint32_t
GetOriginateTimestampFraction	core/net/sntp_client.hpp	/^        uint32_t GetOriginateTimestampFraction(void) const$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetOriginateTimestampSeconds	core/net/sntp_client.hpp	/^        uint32_t GetOriginateTimestampSeconds(void) const { return BigEndian::HostSwap32(mOrigin/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetOui	core/meshcop/meshcop_tlvs.hpp	/^    uint32_t GetOui(void) const { return BigEndian::ReadUint24(mOui); }$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:uint32_t
GetOui	core/meshcop/meshcop_tlvs.hpp	/^    uint32_t GetOui(void) const { return BigEndian::ReadUint24(mOui); }$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:uint32_t
GetOwnerFlags	core/net/dns_types.hpp	/^    OwnerFlags GetOwnerFlags(void) const { return static_cast<OwnerFlags>(mFlags[0] & kOwnerFlag/;"	f	class:ot::Dns::KeyRecord	typeref:typename:OwnerFlags
GetPacketNumber	core/radio/trel_packet.hpp	/^    uint32_t GetPacketNumber(void) const { return BigEndian::HostSwap32(mPacketNumber); }$/;"	f	class:ot::Trel::Header	typeref:typename:uint32_t
GetPanChannel	core/mac/mac.hpp	/^    uint8_t GetPanChannel(void) const { return mPanChannel; }$/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
GetPanId	core/common/message.hpp	/^    uint16_t GetPanId(void) const { return GetMetadata().mPanId; }$/;"	f	class:ot::Message	typeref:typename:uint16_t
GetPanId	core/mac/link_raw.hpp	/^    PanId GetPanId(void) const { return mPanId; }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:PanId
GetPanId	core/mac/mac.hpp	/^    PanId GetPanId(void) const { return mPanId; }$/;"	f	class:ot::Mac::Mac	typeref:typename:PanId
GetPanId	core/radio/trel_packet.hpp	/^    Mac::PanId GetPanId(void) const { return BigEndian::HostSwap16(mPanId); }$/;"	f	class:ot::Trel::Header	typeref:typename:Mac::PanId
GetPanId	core/thread/mesh_forwarder.hpp	/^    Mac::PanId GetPanId(void) const { return mPanId; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:Mac::PanId
GetPanIdQueryClient	core/meshcop/commissioner.hpp	/^    PanIdQueryClient &GetPanIdQueryClient(void) { return mPanIdQuery; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:PanIdQueryClient &
GetParent	core/mac/data_poll_sender.cpp	/^const Neighbor &DataPollSender::GetParent(void) const$/;"	f	class:ot::DataPollSender	typeref:typename:const Neighbor &
GetParent	core/thread/mle.hpp	/^    Parent &GetParent(void) { return mParent; }$/;"	f	class:ot::Mle::Mle	typeref:typename:Parent &
GetParent	core/thread/mle.hpp	/^    const Parent &GetParent(void) const { return mParent; }$/;"	f	class:ot::Mle::Mle	typeref:typename:const Parent &
GetParentCandidate	core/thread/mle.hpp	/^    Parent &GetParentCandidate(void) { return mParentCandidate; }$/;"	f	class:ot::Mle::Mle	typeref:typename:Parent &
GetParentInfo	core/thread/mle.cpp	/^Error Mle::GetParentInfo(Router::Info &aParentInfo) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetParentPriority	core/thread/mle_tlvs.cpp	/^int8_t ConnectivityTlv::GetParentPriority(void) const$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:int8_t
GetPartitionId	core/thread/mle_types.hpp	/^    uint32_t GetPartitionId(void) const { return mPartitionId; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:uint32_t
GetPath	lib/url/url.hpp	/^    const char *GetPath(void) const { return mPath; }$/;"	f	class:ot::Url::Url	typeref:typename:const char *
GetPathCost	core/thread/router_table.cpp	/^uint8_t RouterTable::GetPathCost(uint16_t aDestRloc16) const$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetPathCostToLeader	core/thread/router_table.cpp	/^uint8_t RouterTable::GetPathCostToLeader(void) const$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetPayload	core/mac/mac_frame.cpp	/^const uint8_t *Frame::GetPayload(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetPayload	core/mac/mac_frame.hpp	/^    const uint8_t *GetPayload(void) const { return reinterpret_cast<const uint8_t *>(this) + siz/;"	f	class:ot::Mac::Beacon	typeref:typename:const uint8_t *
GetPayload	core/mac/mac_frame.hpp	/^    uint8_t *GetPayload(void) { return AsNonConst(AsConst(this)->GetPayload()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetPayload	core/mac/mac_frame.hpp	/^    uint8_t *GetPayload(void) { return reinterpret_cast<uint8_t *>(this) + sizeof(*this); }$/;"	f	class:ot::Mac::Beacon	typeref:typename:uint8_t *
GetPayload	core/radio/trel_packet.hpp	/^    const uint8_t *GetPayload(void) const { return Base::GetBytes() + GetHeader().GetLength(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:const uint8_t *
GetPayload	core/radio/trel_packet.hpp	/^    uint8_t *GetPayload(void) { return Base::GetBytes() + GetHeader().GetLength(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:uint8_t *
GetPayloadLength	core/mac/mac_frame.cpp	/^uint16_t Frame::GetPayloadLength(void) const { return mLength - (GetHeaderLength() + GetFooterLe/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetPayloadLength	core/net/ip6_headers.hpp	/^    uint16_t GetPayloadLength(void) const { return BigEndian::HostSwap16(mPayloadLength); }$/;"	f	class:ot::Ip6::Header	typeref:typename:uint16_t
GetPayloadLength	core/radio/trel_packet.hpp	/^    uint16_t GetPayloadLength(void) const { return GetLength() - GetHeader().GetLength(); }$/;"	f	class:ot::Trel::Packet	typeref:typename:uint16_t
GetPayloadMessageOffset	core/coap/coap_message.hpp	/^        uint16_t GetPayloadMessageOffset(void) const { return mNextOptionOffset; }$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:uint16_t
GetPdOmrPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetPdOmrPrefix(PrefixTableEntry &aPrefixInfo) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetPdProcessedRaInfo	core/border_router/routing_manager.cpp	/^Error RoutingManager::GetPdProcessedRaInfo(PdProcessedRaInfo &aPdProcessedRaInfo)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
GetPduCount	core/thread/link_metrics_types.hpp	/^    uint32_t GetPduCount(void) const { return mPduCount; }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:uint32_t
GetPeerAddr	core/net/socket.hpp	/^    Address &GetPeerAddr(void) { return AsCoreType(&mPeerAddr); }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:Address &
GetPeerAddr	core/net/socket.hpp	/^    const Address &GetPeerAddr(void) const { return AsCoreType(&mPeerAddr); }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:const Address &
GetPeerAddress	core/net/tcp6.cpp	/^const SockAddr &Tcp::Endpoint::GetPeerAddress(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:const SockAddr &
GetPeerCertificateBase64	core/coap/coap_secure.hpp	/^    Error GetPeerCertificateBase64(unsigned char *aPeerCert, size_t *aCertLength, size_t aCertBu/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
GetPeerCertificateBase64	core/meshcop/secure_transport.cpp	/^Error SecureTransport::GetPeerCertificateBase64(unsigned char *aPeerCert, size_t *aCertLength, s/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
GetPeerCertificateBase64	core/radio/ble_secure.cpp	/^Error BleSecure::GetPeerCertificateBase64(unsigned char *aPeerCert, size_t *aCertLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
GetPeerName	core/net/udp6.hpp	/^        SockAddr &GetPeerName(void) { return AsCoreType(&mPeerName); }$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:SockAddr &
GetPeerName	core/net/udp6.hpp	/^        const SockAddr &GetPeerName(void) const { return AsCoreType(&mPeerName); }$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:const SockAddr &
GetPeerPort	core/net/socket.hpp	/^    uint16_t GetPeerPort(void) const { return mPeerPort; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:uint16_t
GetPeerSockAddr	core/net/dns_dso.hpp	/^        const Ip6::SockAddr &GetPeerSockAddr(void) const { return mPeerSockAddr; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:const Ip6::SockAddr &
GetPeerSubjectAttributeByOid	core/meshcop/secure_transport.cpp	/^Error SecureTransport::GetPeerSubjectAttributeByOid(const char *aOid,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
GetPeerSubjectAttributeByOid	core/radio/ble_secure.hpp	/^    Error GetPeerSubjectAttributeByOid(const char *aOid,$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
GetPendingTrelAckCount	core/radio/trel_link.hpp	/^    uint32_t GetPendingTrelAckCount(void) const { return (mTrelPreviousPendingAcks + mTrelCurren/;"	f	class:ot::Trel::NeighborInfo	typeref:typename:uint32_t
GetPeriod	core/mac/mac_frame.hpp	/^    uint16_t GetPeriod(void) const { return LittleEndian::HostSwap16(mPeriod); }$/;"	f	class:ot::Mac::CslIe	typeref:typename:uint16_t
GetPeriod	core/thread/announce_sender.hpp	/^    uint32_t GetPeriod(void) const { return mPeriod; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:uint32_t
GetPhase	core/mac/mac_frame.hpp	/^    uint16_t GetPhase(void) const { return LittleEndian::HostSwap16(mPhase); }$/;"	f	class:ot::Mac::CslIe	typeref:typename:uint16_t
GetPointer	core/utils/heap.hpp	/^    void *GetPointer(void) { return &mMemory; }$/;"	f	class:ot::Utils::Block	typeref:typename:void *
GetPoll	core/net/sntp_client.hpp	/^        uint8_t GetPoll(void) const { return mPoll; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint8_t
GetPollDestinationAddress	core/mac/data_poll_sender.cpp	/^Error DataPollSender::GetPollDestinationAddress(Mac::Address &aDest, Mac::RadioType &aRadioType)/;"	f	class:ot::DataPollSender	typeref:typename:Error
GetPort	core/common/settings.hpp	/^        uint16_t GetPort(void) const { return LittleEndian::HostSwap16(mPort); }$/;"	f	class:ot::SettingsBase::SrpServerInfo	typeref:typename:uint16_t
GetPort	core/net/dns_types.hpp	/^    uint16_t GetPort(void) const { return BigEndian::HostSwap16(mPort); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:uint16_t
GetPort	core/net/socket.hpp	/^    uint16_t GetPort(void) const { return mPort; }$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:uint16_t
GetPort	core/net/srp_client.hpp	/^        uint16_t GetPort(void) const { return mPort; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint16_t
GetPort	core/net/srp_server.hpp	/^        uint16_t GetPort(void) const { return mPort; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint16_t
GetPort	core/net/srp_server.hpp	/^    uint16_t GetPort(void) const { return (mState == kStateRunning) ? mPort : 0; }$/;"	f	class:ot::Srp::Server	typeref:typename:uint16_t
GetPort	core/thread/network_data_publisher.hpp	/^            uint16_t            GetPort(void) const { return mPortOrSeqNumber; }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:uint16_t
GetPort	core/thread/network_data_service.hpp	/^        uint16_t GetPort(void) const { return BigEndian::HostSwap16(mPort); }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServerData	typeref:typename:uint16_t
GetPort	core/thread/network_data_service.hpp	/^        uint16_t GetPort(void) const { return BigEndian::HostSwap16(mPort); }$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServiceData	typeref:typename:uint16_t
GetPowerSettings	core/diags/factory_diags.cpp	/^Error Diags::GetPowerSettings(uint8_t aChannel, PowerSettings &aPowerSettings)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
GetPowerSettings	core/utils/power_calibration.cpp	/^Error PowerCalibration::GetPowerSettings(uint8_t   aChannel,$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:Error
GetPrecision	core/net/sntp_client.hpp	/^        uint8_t GetPrecision(void) const { return mPrecision; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint8_t
GetPreference	core/border_router/routing_manager.hpp	/^        RoutePreference    GetPreference(void) const { return mPreference; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefix	typeref:typename:RoutePreference
GetPreference	core/border_router/routing_manager.hpp	/^        RoutePreference GetPreference(void) const { return mPreference; }$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:RoutePreference
GetPreference	core/border_router/routing_manager.hpp	/^        RoutePreference GetPreference(void) const { return mPreference; }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:RoutePreference
GetPreference	core/net/nd6.cpp	/^RoutePreference RouteInfoOption::GetPreference(void) const$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:RoutePreference
GetPreference	core/thread/network_data_tlvs.hpp	/^    int8_t GetPreference(void) const { return PreferenceFromFlags(GetFlags()); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:int8_t
GetPreference	core/thread/network_data_tlvs.hpp	/^    int8_t GetPreference(void) const { return PreferenceFromFlags(GetFlags()); }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:int8_t
GetPreference	core/thread/network_data_types.hpp	/^    RoutePreference GetPreference(void) const { return RoutePreferenceFromValue(RoutePreferenceT/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:RoutePreference
GetPreferredChannelMask	core/radio/radio.hpp	/^inline uint32_t Radio::GetPreferredChannelMask(void) { return otPlatRadioGetPreferredChannelMask/;"	f	class:ot::Radio	typeref:typename:uint32_t
GetPreferredChannelMask	posix/platform/configuration.hpp	/^    uint32_t GetPreferredChannelMask(void) const { return mPreferredChannelMask; }$/;"	f	class:ot::Posix::Configuration	typeref:typename:uint32_t
GetPreferredLeaderPartitionId	core/thread/mle_router.hpp	/^    uint32_t GetPreferredLeaderPartitionId(void) const { return mPreferredLeaderPartitionId; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint32_t
GetPreferredLifetime	core/border_router/routing_manager.hpp	/^        uint32_t  GetPreferredLifetime(void) const { return mPreferredLifetime; }$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:uint32_t
GetPreferredLifetime	core/net/dhcp6.hpp	/^    uint32_t GetPreferredLifetime(void) const { return BigEndian::HostSwap32(mPreferredLifetime)/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:uint32_t
GetPreferredLifetime	core/net/nd6.hpp	/^    uint32_t GetPreferredLifetime(void) const { return BigEndian::HostSwap32(mPreferredLifetime)/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:uint32_t
GetPreferredNat64Prefix	core/thread/network_data_leader.cpp	/^Error Leader::GetPreferredNat64Prefix(ExternalRouteConfig &aConfig) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
GetPrefix	core/border_router/routing_manager.hpp	/^        Ip6::Prefix       &GetPrefix(void) { return mPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:Ip6::Prefix &
GetPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetPrefix(void) const { return mPrefix.GetPrefix(); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:const Ip6::Prefix &
GetPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetPrefix(void) const { return mPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:const Ip6::Prefix &
GetPrefix	core/border_router/routing_manager.hpp	/^        const Ip6::Prefix &GetPrefix(void) const { return mPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefix	typeref:typename:const Ip6::Prefix &
GetPrefix	core/common/settings.hpp	/^        const Ip6::Prefix &GetPrefix(void) const { return mPrefix; }$/;"	f	class:ot::SettingsBase::BrOnLinkPrefix	typeref:typename:const Ip6::Prefix &
GetPrefix	core/net/dhcp6_server.hpp	/^        Ip6::Prefix &GetPrefix(void) { return mPrefix; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:Ip6::Prefix &
GetPrefix	core/net/dhcp6_server.hpp	/^        const Ip6::Prefix &GetPrefix(void) const { return mPrefix; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:const Ip6::Prefix &
GetPrefix	core/net/ip6_address.hpp	/^    const NetworkPrefix &GetPrefix(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:const NetworkPrefix &
GetPrefix	core/net/ip6_address.hpp	/^    void GetPrefix(uint8_t aLength, Prefix &aPrefix) const { aPrefix.Set(mFields.m8, aLength); }$/;"	f	class:ot::Ip6::Address	typeref:typename:void
GetPrefix	core/net/nd6.cpp	/^void PrefixInfoOption::GetPrefix(Prefix &aPrefix) const { aPrefix.Set(mPrefix.GetBytes(), mPrefi/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
GetPrefix	core/net/nd6.cpp	/^void RouteInfoOption::GetPrefix(Prefix &aPrefix) const { aPrefix.Set(GetPrefixBytes(), mPrefixLe/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:void
GetPrefix	core/thread/network_data_tlvs.hpp	/^    const uint8_t *GetPrefix(void) const { return reinterpret_cast<const uint8_t *>(this) + size/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const uint8_t *
GetPrefix	core/thread/network_data_tlvs.hpp	/^    uint8_t *GetPrefix(void) { return reinterpret_cast<uint8_t *>(this) + sizeof(*this); }$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:uint8_t *
GetPrefix	core/thread/network_data_types.hpp	/^    Ip6::Prefix &GetPrefix(void) { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:Ip6::Prefix &
GetPrefix	core/thread/network_data_types.hpp	/^    Ip6::Prefix &GetPrefix(void) { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::LowpanContextInfo	typeref:typename:Ip6::Prefix &
GetPrefix	core/thread/network_data_types.hpp	/^    Ip6::Prefix &GetPrefix(void) { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:Ip6::Prefix &
GetPrefix	core/thread/network_data_types.hpp	/^    const Ip6::Prefix &GetPrefix(void) const { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:const Ip6::Prefix &
GetPrefix	core/thread/network_data_types.hpp	/^    const Ip6::Prefix &GetPrefix(void) const { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::LowpanContextInfo	typeref:typename:const Ip6::Prefix &
GetPrefix	core/thread/network_data_types.hpp	/^    const Ip6::Prefix &GetPrefix(void) const { return AsCoreType(&mPrefix); }$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:const Ip6::Prefix &
GetPrefixAsAddress	core/net/dhcp6_server.hpp	/^        const Ip6::Address &GetPrefixAsAddress(void) const$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:const Ip6::Address &
GetPrefixBytes	core/net/nd6.hpp	/^    const uint8_t *GetPrefixBytes(void) const { return reinterpret_cast<const uint8_t *>(this) +/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:const uint8_t *
GetPrefixBytes	core/net/nd6.hpp	/^    uint8_t       *GetPrefixBytes(void) { return AsNonConst(AsConst(this)->GetPrefixBytes()); }$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:uint8_t *
GetPrefixInfo	core/border_router/routing_manager.cpp	/^Error RoutingManager::PdPrefixManager::GetPrefixInfo(PrefixTableEntry &aInfo) const$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:Error
GetPrefixLength	core/net/netif.hpp	/^        uint8_t GetPrefixLength(void) const { return mPrefixLength; }$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:uint8_t
GetPrefixLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetPrefixLength(void) const { return mPrefixLength; }$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:uint8_t
GetPrerequisiteRecordCount	core/net/dns_types.hpp	/^    uint16_t GetPrerequisiteRecordCount(void) const { return GetAnswerCount(); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:uint16_t
GetPreviousMacKey	core/mac/sub_mac.hpp	/^    const KeyMaterial &GetPreviousMacKey(void) const { return mPrevKey; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:const KeyMaterial &
GetPreviousPartitionId	core/common/settings.hpp	/^        uint32_t GetPreviousPartitionId(void) const { return LittleEndian::HostSwap32(mPreviousP/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint32_t
GetPreviousPartitionId	core/thread/mle_router.hpp	/^    uint32_t GetPreviousPartitionId(void) const { return mPreviousPartitionId; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint32_t
GetPriority	core/common/message.hpp	/^        Priority GetPriority(void) const { return static_cast<Priority>(mPriority); }$/;"	f	class:ot::Message::Settings	typeref:typename:Priority
GetPriority	core/common/message.hpp	/^    Priority GetPriority(void) const { return static_cast<Priority>(GetMetadata().mPriority); }$/;"	f	class:ot::Message	typeref:typename:Priority
GetPriority	core/net/dns_types.hpp	/^    uint16_t GetPriority(void) const { return BigEndian::HostSwap16(mPriority); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:uint16_t
GetPriority	core/net/srp_client.hpp	/^        uint16_t GetPriority(void) const { return mPriority; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint16_t
GetPriority	core/net/srp_server.hpp	/^        uint16_t GetPriority(void) const { return mPriority; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint16_t
GetPriority	core/thread/mesh_forwarder.hpp	/^            Message::Priority GetPriority(void) const { return static_cast<Message::Priority>(mP/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:Message::Priority
GetPriorityQueue	core/common/message.hpp	/^    PriorityQueue *GetPriorityQueue(void) const$/;"	f	class:ot::Message	typeref:typename:PriorityQueue *
GetProbeMessage	core/net/mdns.hpp	/^        TxMessage &GetProbeMessage(void) { return mProbeMessage; }$/;"	f	class:ot::Dns::Multicast::Core::EntryTimerContext	typeref:typename:TxMessage &
GetProcessedRaInfo	core/border_router/routing_manager.cpp	/^Error RoutingManager::PdPrefixManager::GetProcessedRaInfo(PdProcessedRaInfo &aPdProcessedRaInfo)/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:Error
GetPromiscuous	core/radio/radio.hpp	/^inline bool Radio::GetPromiscuous(void) { return false; }$/;"	f	class:ot::Radio	typeref:typename:bool
GetPromiscuous	core/radio/radio.hpp	/^inline bool Radio::GetPromiscuous(void) { return otPlatRadioGetPromiscuous(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:bool
GetProtocol	core/net/dns_types.hpp	/^    uint8_t GetProtocol(void) const { return mProtocol; }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:uint8_t
GetProtocol	core/net/ip4_types.hpp	/^    uint8_t GetProtocol(void) const { return mProtocol; }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint8_t
GetProtocol	lib/url/url.hpp	/^    const char *GetProtocol(void) const { return mProtocol; }$/;"	f	class:ot::Url::Url	typeref:typename:const char *
GetProtocolId	core/mac/mac_frame.hpp	/^    uint8_t GetProtocolId(void) const { return mProtocolId; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:uint8_t
GetProtocolVersion	core/mac/mac_frame.hpp	/^    uint8_t GetProtocolVersion(void) const { return mFlags >> kVersionOffset; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:uint8_t
GetProvisioningUrl	core/meshcop/commissioner.hpp	/^    const char *GetProvisioningUrl(void) const { return mProvisioningUrl; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:const char *
GetPsdu	core/mac/mac_frame.hpp	/^    const uint8_t *GetPsdu(void) const { return mPsdu; }$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetPsdu	core/mac/mac_frame.hpp	/^    uint8_t *GetPsdu(void) { return mPsdu; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetPsduCount	core/common/message.hpp	/^    uint8_t GetPsduCount(void) const { return GetMetadata().mLqiAverager.GetCount(); }$/;"	f	class:ot::Message	typeref:typename:uint8_t
GetPskc	core/thread/key_manager.cpp	/^void KeyManager::GetPskc(Pskc &aPskc) const$/;"	f	class:ot::KeyManager	typeref:typename:void
GetPskcRef	core/thread/key_manager.hpp	/^    const PskcRef &GetPskcRef(void) const { return mPskcRef; }$/;"	f	class:ot::KeyManager	typeref:typename:const PskcRef &
GetPublicKey	core/crypto/ecdsa.hpp	/^        Error GetPublicKey(PublicKey &aPublicKey) const { return otPlatCryptoEcdsaGetPublicKey(t/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:Error
GetPublicKey	core/crypto/ecdsa.hpp	/^        Error GetPublicKey(PublicKey &aPublicKey) const$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:Error
GetQueryMessage	core/net/mdns.hpp	/^        TxMessage &GetQueryMessage(void) { return mQueryMessage; }$/;"	f	class:ot::Dns::Multicast::Core::CacheTimerContext	typeref:typename:TxMessage &
GetQueryTime	core/net/mdns.cpp	/^TimeMilli Core::CacheRecordInfo::GetQueryTime(uint8_t aAttemptIndex) const$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:TimeMilli
GetQueryType	core/net/dns_types.hpp	/^    QueryType GetQueryType(void) const { return static_cast<QueryType>((mFlags[0] & kOpCodeMask)/;"	f	class:ot::Dns::Header	typeref:typename:QueryType
GetQueryTypeAndCallback	core/net/dns_client.cpp	/^void Client::GetQueryTypeAndCallback(const Query &aQuery, QueryType &aType, Callback &aCallback,/;"	f	class:ot::Dns::Client	typeref:typename:void
GetQueryTypeAndName	core/net/dnssd_server.cpp	/^Server::DnsQueryType Server::GetQueryTypeAndName(const otDnssdQuery *aQuery, Dns::Name::Buffer &/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:Server::DnsQueryType
GetQuestionCount	core/net/dns_types.hpp	/^    uint16_t GetQuestionCount(void) const { return BigEndian::HostSwap16(mQdCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:uint16_t
GetQueuedMessageCount	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetQueuedMessageCount(void) const { return BigEndian::HostSwap16(mQueuedMessageCoun/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetRadioCaps	core/mac/sub_mac.hpp	/^    otRadioCaps GetRadioCaps(void) const { return mRadioCaps; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:otRadioCaps
GetRadioCaps	lib/spinel/radio_spinel.hpp	/^    otRadioCaps GetRadioCaps(void) const { return sRadioCaps; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otRadioCaps
GetRadioChannelMask	lib/spinel/radio_spinel.cpp	/^uint32_t RadioSpinel::GetRadioChannelMask(bool aPreferred)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint32_t
GetRadioPreference	core/thread/radio_selector.hpp	/^        uint8_t GetRadioPreference(Mac::RadioType aType) const { return mRadioPreference[aType];/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:uint8_t
GetRadioRegion	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetRadioRegion(uint16_t *aRegionCode)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetRadioSpinel	posix/platform/radio.cpp	/^ot::Spinel::RadioSpinel &GetRadioSpinel(void) { return sRadio.GetRadioSpinel(); }$/;"	f	typeref:typename:ot::Spinel::RadioSpinel &
GetRadioSpinel	posix/platform/radio.hpp	/^    Spinel::RadioSpinel &GetRadioSpinel(void) { return mRadioSpinel; }$/;"	f	class:ot::Posix::Radio	typeref:typename:Spinel::RadioSpinel &
GetRadioSpinelMetrics	lib/spinel/radio_spinel.hpp	/^    const otRadioSpinelMetrics *GetRadioSpinelMetrics(void) const { return &mRadioSpinelMetrics;/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:const otRadioSpinelMetrics *
GetRadioType	core/common/message.hpp	/^    Mac::RadioType GetRadioType(void) const { return static_cast<Mac::RadioType>(GetMetadata().m/;"	f	class:ot::Message	typeref:typename:Mac::RadioType
GetRadioType	core/mac/mac_frame.hpp	/^    RadioType GetRadioType(void) const { return static_cast<RadioType>(mRadioType); }$/;"	f	class:ot::Mac::Frame	typeref:typename:RadioType
GetRaw	core/thread/link_quality.hpp	/^    uint16_t GetRaw(void) const { return mAverage; }$/;"	f	class:ot::RssAverager	typeref:typename:uint16_t
GetRawPowerSetting	core/diags/factory_diags.cpp	/^Error Diags::GetRawPowerSetting(RawPowerSetting &aRawPowerSetting)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
GetRawPowerSetting	core/utils/power_calibration.cpp	/^Error PowerCalibration::CalibratedPowerEntry::GetRawPowerSetting(uint8_t  *aRawPowerSetting,$/;"	f	class:ot::Utils::PowerCalibration::CalibratedPowerEntry	typeref:typename:Error
GetRawPowerSetting	posix/platform/power.hpp	/^    const RawPowerSetting &GetRawPowerSetting(void) const { return mRawPowerSetting; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:const RawPowerSetting &
GetRcpInterfaceMetrics	posix/platform/hdlc_interface.hpp	/^    const otRcpInterfaceMetrics *GetRcpInterfaceMetrics(void) const { return &mInterfaceMetrics;/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:const otRcpInterfaceMetrics *
GetRcpInterfaceMetrics	posix/platform/spi_interface.hpp	/^    const otRcpInterfaceMetrics *GetRcpInterfaceMetrics(void) const { return &mInterfaceMetrics;/;"	f	class:ot::Posix::SpiInterface	typeref:typename:const otRcpInterfaceMetrics *
GetRcpInterfaceMetrics	posix/platform/vendor_interface_example.cpp	/^const otRcpInterfaceMetrics *VendorInterface::GetRcpInterfaceMetrics(void) const$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:const otRcpInterfaceMetrics *
GetReadLength	lib/spinel/spinel_decoder.hpp	/^    uint16_t GetReadLength(void) const { return mIndex; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:uint16_t
GetRealRxFrameStart	posix/platform/spi_interface.cpp	/^uint8_t *SpiInterface::GetRealRxFrameStart(uint8_t *aSpiRxFrameBuffer, uint8_t aAlignAllowance, /;"	f	class:ot::Posix::SpiInterface	typeref:typename:uint8_t *
GetRealmLocalAllMplForwarders	core/net/ip6_address.cpp	/^const Address &Address::GetRealmLocalAllMplForwarders(void)$/;"	f	class:ot::Ip6::Address	typeref:typename:const Address &
GetRealmLocalAllNodesMulticast	core/net/ip6_address.cpp	/^const Address &Address::GetRealmLocalAllNodesMulticast(void)$/;"	f	class:ot::Ip6::Address	typeref:typename:const Address &
GetRealmLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^const Address &Address::GetRealmLocalAllRoutersMulticast(void)$/;"	f	class:ot::Ip6::Address	typeref:typename:const Address &
GetRealmLocalAllThreadNodesAddress	core/thread/mle.hpp	/^    const Ip6::Address &GetRealmLocalAllThreadNodesAddress(void) const$/;"	f	class:ot::Mle::Mle	typeref:typename:const Ip6::Address &
GetReassemblyQueue	core/thread/mesh_forwarder.hpp	/^    const MessageQueue &GetReassemblyQueue(void) const { return mReassemblyList; }$/;"	f	class:ot::MeshForwarder	typeref:typename:const MessageQueue &
GetReceiveSensitivity	core/radio/radio.hpp	/^inline int8_t Radio::GetReceiveSensitivity(void) const { return kDefaultReceiveSensitivity; }$/;"	f	class:ot::Radio	typeref:typename:int8_t
GetReceiveSensitivity	core/radio/radio.hpp	/^inline int8_t Radio::GetReceiveSensitivity(void) const { return otPlatRadioGetReceiveSensitivity/;"	f	class:ot::Radio	typeref:typename:int8_t
GetReceiveSensitivity	lib/spinel/radio_spinel.hpp	/^    int8_t GetReceiveSensitivity(void) const { return mRxSensitivity; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:int8_t
GetReceiveTimestampFraction	core/net/sntp_client.hpp	/^        uint32_t GetReceiveTimestampFraction(void) const { return BigEndian::HostSwap32(mReceive/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetReceiveTimestampSeconds	core/net/sntp_client.hpp	/^        uint32_t GetReceiveTimestampSeconds(void) const { return BigEndian::HostSwap32(mReceiveT/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetRecordCounts	core/net/mdns.hpp	/^        const RecordCounts &GetRecordCounts(void) const { return mRecordCounts; }$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:const RecordCounts &
GetRecordData	core/net/dns_types.hpp	/^    const uint8_t *GetRecordData(void) const { return reinterpret_cast<const uint8_t *>(&mTypeCo/;"	f	class:ot::Dns::SigRecord	typeref:typename:const uint8_t *
GetRecursionFlag	core/net/dns_client.hpp	/^        RecursionFlag GetRecursionFlag(void) const { return static_cast<RecursionFlag>(mRecursio/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:RecursionFlag
GetReferenceId	core/net/sntp_client.hpp	/^        uint32_t GetReferenceId(void) const { return BigEndian::HostSwap32(mReferenceId); }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetReferenceTimestampFraction	core/net/sntp_client.hpp	/^        uint32_t GetReferenceTimestampFraction(void) const$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetReferenceTimestampSeconds	core/net/sntp_client.hpp	/^        uint32_t GetReferenceTimestampSeconds(void) const { return BigEndian::HostSwap32(mRefere/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetRegion	core/mac/mac.cpp	/^Error Mac::GetRegion(uint16_t &aRegionCode) const { return Get<Radio>().GetRegion(aRegionCode); /;"	f	class:ot::Mac::Mac	typeref:typename:Error
GetRegion	core/radio/radio.hpp	/^    Error GetRegion(uint16_t &aRegionCode) const { return otPlatRadioGetRegion(GetInstancePtr(),/;"	f	class:ot::Radio	typeref:typename:Error
GetRegion	posix/platform/configuration.hpp	/^    uint16_t GetRegion(void) const { return mRegionCode; }$/;"	f	class:ot::Posix::Configuration	typeref:typename:uint16_t
GetRegistrationJitter	core/backbone_router/bbr_local.hpp	/^    uint8_t GetRegistrationJitter(void) const { return mRegistrationJitter; }$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:uint8_t
GetRemainingLength	core/common/frame_builder.hpp	/^    uint16_t GetRemainingLength(void) const { return mMaxLength - mLength; }$/;"	f	class:ot::FrameBuilder	typeref:typename:uint16_t
GetRemainingLength	lib/spinel/spinel_decoder.hpp	/^    uint16_t GetRemainingLength(void) const { return mLength - mIndex; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:uint16_t
GetRemainingLengthInStruct	lib/spinel/spinel_decoder.hpp	/^    uint16_t GetRemainingLengthInStruct(void) const { return mEnd - mIndex; }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:uint16_t
GetRemainingTtl	core/net/mdns.cpp	/^uint32_t Core::CacheRecordInfo::GetRemainingTtl(TimeMilli aNow) const$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:uint32_t
GetRemoveTime	core/thread/network_data_leader.hpp	/^        TimeMilli GetRemoveTime(uint8_t aId) const { return mRemoveTimes[aId - kMinId]; }$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:TimeMilli
GetRemovedServices	core/net/srp_client.cpp	/^void Client::GetRemovedServices(LinkedList<Service> &aRemovedServices)$/;"	f	class:ot::Srp::Client	typeref:typename:void
GetRequestInterval	core/net/dns_dso.hpp	/^            uint32_t GetRequestInterval(void) const { return mRequest; }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:uint32_t
GetRequestMessages	core/coap/coap.hpp	/^    const MessageQueue &GetRequestMessages(void) const { return mPendingRequests; }$/;"	f	class:ot::Coap::CoapBase	typeref:typename:const MessageQueue &
GetRequestTlv	core/thread/child.hpp	/^    uint8_t GetRequestTlv(uint8_t aIndex) const { return mRequestTlvs[aIndex]; }$/;"	f	class:ot::Child	typeref:typename:uint8_t
GetRequestTxParameters	cli/cli_coap.hpp	/^    const otCoapTxParameters *GetRequestTxParameters(void) const$/;"	f	class:ot::Cli::Coap	typeref:typename:const otCoapTxParameters *
GetRequestedChannel	core/utils/channel_manager.hpp	/^    uint8_t GetRequestedChannel(void) const { return mChannel; }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint8_t
GetRequester	core/thread/network_data_publisher.hpp	/^        Requester GetRequester(void) const { return mRequester; }$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:Requester
GetRequiredRadioTypes	core/mac/mac_links.hpp	/^    RadioTypes GetRequiredRadioTypes(void) const { return mRequiredRadioTypes; }$/;"	f	class:ot::Mac::TxFrames	typeref:typename:RadioTypes
GetReregistrationDelay	core/thread/network_data_service.hpp	/^        uint16_t GetReregistrationDelay(void) const { return BigEndian::HostSwap16(mReregistrati/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:uint16_t
GetReserved	core/common/message.hpp	/^    uint16_t GetReserved(void) const { return GetMetadata().mReserved; }$/;"	f	class:ot::Message	typeref:typename:uint16_t
GetResponseCode	core/net/dns_types.hpp	/^    Response GetResponseCode(void) const { return static_cast<Response>((mFlags[1] & kRCodeMask)/;"	f	class:ot::Dns::Header	typeref:typename:Response
GetResponseCounters	core/net/srp_server.hpp	/^    const otSrpServerResponseCounters *GetResponseCounters(void) const { return &mResponseCounte/;"	f	class:ot::Srp::Server	typeref:typename:const otSrpServerResponseCounters *
GetResponseMessage	core/net/mdns.hpp	/^        TxMessage &GetResponseMessage(void) { return mResponseMessage; }$/;"	f	class:ot::Dns::Multicast::Core::EntryTimerContext	typeref:typename:TxMessage &
GetResponseTimeout	core/net/dns_client.hpp	/^        uint32_t GetResponseTimeout(void) const { return mResponseTimeout; }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:uint32_t
GetResponseTxParameters	cli/cli_coap.hpp	/^    const otCoapTxParameters *GetResponseTxParameters(void) const$/;"	f	class:ot::Cli::Coap	typeref:typename:const otCoapTxParameters *
GetResponses	core/coap/coap.hpp	/^    const MessageQueue &GetResponses(void) const { return mQueue; }$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:const MessageQueue &
GetRestOfHeader	core/net/ip4_types.hpp	/^        const uint8_t *GetRestOfHeader(void) const { return mRestOfHeader; }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:const uint8_t *
GetRetainCount	core/common/retain_ptr.hpp	/^    uint16_t GetRetainCount(void) const { return mRetainCount; }$/;"	f	class:ot::RetainCountable	typeref:typename:uint16_t
GetRetryDelay	core/net/dns_dso.hpp	/^        uint32_t GetRetryDelay(void) const { return BigEndian::HostSwap32(mRetryDelay); }$/;"	f	class:ot::Dns::Dso::RetryDelayTlv	typeref:typename:uint32_t
GetRetryDelay	core/net/dns_dso.hpp	/^        uint32_t GetRetryDelay(void) const { return mRetryDelay; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:uint32_t
GetRetryDelay	core/thread/address_resolver.hpp	/^        uint16_t GetRetryDelay(void) const { return mInfo.mOther.mRetryDelay; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:uint16_t
GetRetryDelayErrorCode	core/net/dns_dso.hpp	/^        Dns::Header::Response GetRetryDelayErrorCode(void) const { return mRetryDelayErrorCode; /;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Dns::Header::Response
GetRetryWaitInterval	core/net/srp_client.hpp	/^    uint32_t     GetRetryWaitInterval(void) const { return mRetryWaitInterval; }$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
GetReuseDelay	core/thread/network_data_leader.hpp	/^        uint32_t GetReuseDelay(void) const { return mReuseDelay; }$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:uint32_t
GetRevision	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetRevision(void) const { return (BigEndian::HostSwap16(mBuildRevision) & kRevMask) /;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:uint8_t
GetRloc	core/thread/network_data_tlvs.hpp	/^    uint16_t GetRloc(void) const { return BigEndian::HostSwap16(mRloc); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:uint16_t
GetRloc	core/thread/network_data_tlvs.hpp	/^    uint16_t GetRloc(void) const { return BigEndian::HostSwap16(mRloc); }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:uint16_t
GetRloc16	core/backbone_router/ndproxy_table.hpp	/^        uint16_t GetRloc16(void) const { return mRloc16; }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:uint16_t
GetRloc16	core/common/settings.hpp	/^        uint16_t GetRloc16(void) const { return LittleEndian::HostSwap16(mRloc16); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:uint16_t
GetRloc16	core/common/settings.hpp	/^        uint16_t GetRloc16(void) const { return LittleEndian::HostSwap16(mRloc16); }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint16_t
GetRloc16	core/thread/address_resolver.hpp	/^        Mac::ShortAddress GetRloc16(void) const { return mRloc16; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:Mac::ShortAddress
GetRloc16	core/thread/mle.hpp	/^    uint16_t GetRloc16(void) const { return mRloc16; }$/;"	f	class:ot::Mle::Mle	typeref:typename:uint16_t
GetRloc16	core/thread/neighbor.hpp	/^    uint16_t GetRloc16(void) const { return mRloc16; }$/;"	f	class:ot::Neighbor	typeref:typename:uint16_t
GetRloc16	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetRloc16(void) const { return BigEndian::HostSwap16(mRloc16); }$/;"	f	class:ot::NetworkDiagnostic::ChildIp6AddressListTlvValue	typeref:typename:uint16_t
GetRloc16	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetRloc16(void) const { return BigEndian::HostSwap16(mRloc16); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetRloc16	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetRloc16(void) const { return BigEndian::HostSwap16(mRloc16); }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint16_t
GetRole	core/common/settings.hpp	/^        uint8_t GetRole(void) const { return mRole; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint8_t
GetRole	core/thread/mle.hpp	/^    DeviceRole GetRole(void) const { return mRole; }$/;"	f	class:ot::Mle::Mle	typeref:typename:DeviceRole
GetRootDelay	core/net/sntp_client.hpp	/^        uint32_t GetRootDelay(void) const { return BigEndian::HostSwap32(mRootDelay); }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetRootDispersion	core/net/sntp_client.hpp	/^        uint32_t GetRootDispersion(void) const { return BigEndian::HostSwap32(mRootDispersion); /;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetRotationTime	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetRotationTime(void) const { return BigEndian::HostSwap16(mRotationTime); }$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:uint16_t
GetRouteCost	core/thread/mle_tlvs.hpp	/^    uint8_t GetRouteCost(uint8_t aRouterIndex) const { return mRouteData[aRouterIndex] & kRouteC/;"	f	class:ot::Mle::RouteTlv	typeref:typename:uint8_t
GetRouteCost	core/thread/mle_tlvs.hpp	/^    uint8_t GetRouteCost(uint8_t aRouterIndex) const$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:uint8_t
GetRouteDataLength	core/thread/mle_tlvs.hpp	/^    uint8_t GetRouteDataLength(void) const { return GetLength() - sizeof(mRouterIdSequence) - si/;"	f	class:ot::Mle::RouteTlv	typeref:typename:uint8_t
GetRouteInfoOptionPreference	core/border_router/routing_manager.hpp	/^    RoutePreference GetRouteInfoOptionPreference(void) const { return mRioAdvertiser.GetPreferen/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:RoutePreference
GetRouteLifetime	core/net/nd6.hpp	/^    uint32_t GetRouteLifetime(void) const { return BigEndian::HostSwap32(mRouteLifetime); }$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:uint32_t
GetRoutePreference	core/border_router/routing_manager.hpp	/^        RoutePreference GetRoutePreference(void) const { return mRoutePreference; }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:RoutePreference
GetRoutePreference	core/border_router/routing_manager.hpp	/^    RoutePreference GetRoutePreference(void) const { return mRoutePublisher.GetPreference(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:RoutePreference
GetRouter	core/border_router/routing_manager.hpp	/^            const Entry<Router> *GetRouter(void) const { return static_cast<const Entry<Router> /;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:const Entry<Router> *
GetRouterDowngradeThreshold	core/thread/mle_router.hpp	/^    uint8_t GetRouterDowngradeThreshold(void) const { return mRouterDowngradeThreshold; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetRouterId	core/thread/neighbor.hpp	/^    uint8_t GetRouterId(void) const { return mRloc16 >> Mle::kRouterIdOffset; }$/;"	f	class:ot::Neighbor	typeref:typename:uint8_t
GetRouterIdMask	core/thread/mle_tlvs.hpp	/^    const RouterIdSet &GetRouterIdMask(void) const { return mRouterIdMask; }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:const RouterIdSet &
GetRouterIdRange	core/thread/router_table.cpp	/^void RouterTable::GetRouterIdRange(uint8_t &aMinRouterId, uint8_t &aMaxRouterId) const$/;"	f	class:ot::RouterTable	typeref:typename:void
GetRouterIdSequence	core/thread/mle_tlvs.hpp	/^    uint8_t GetRouterIdSequence(void) const { return mRouterIdSequence; }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:uint8_t
GetRouterIdSequence	core/thread/router_table.hpp	/^    uint8_t GetRouterIdSequence(void) const { return mRouterIdSequence; }$/;"	f	class:ot::RouterTable	typeref:typename:uint8_t
GetRouterIdSequenceLastUpdated	core/thread/router_table.hpp	/^    TimeMilli GetRouterIdSequenceLastUpdated(void) const { return mRouterIdSequenceLastUpdated; /;"	f	class:ot::RouterTable	typeref:typename:TimeMilli
GetRouterIdSet	core/thread/router_table.hpp	/^    void GetRouterIdSet(Mle::RouterIdSet &aRouterIdSet) const { return mRouterIdMap.GetAsRouterI/;"	f	class:ot::RouterTable	typeref:typename:void
GetRouterInfo	core/thread/router_table.cpp	/^Error RouterTable::GetRouterInfo(uint16_t aRouterId, Router::Info &aRouterInfo)$/;"	f	class:ot::RouterTable	typeref:typename:Error
GetRouterLifetime	core/net/nd6.hpp	/^        uint16_t GetRouterLifetime(void) const { return BigEndian::HostSwap16(mRouterLifetime); /;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:uint16_t
GetRouterRoleTransitionTimeout	core/thread/mle_router.hpp	/^    uint8_t GetRouterRoleTransitionTimeout(void) const { return mRouterRoleTransition.GetTimeout/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetRouterSelectionJitter	core/thread/mle_router.hpp	/^    uint8_t GetRouterSelectionJitter(void) const { return mRouterRoleTransition.GetJitter(); }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetRouterUpgradeThreshold	core/thread/mle_router.hpp	/^    uint8_t GetRouterUpgradeThreshold(void) const { return mRouterUpgradeThreshold; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:uint8_t
GetRss	core/thread/mesh_forwarder.hpp	/^    int8_t GetRss(void) const { return mRss; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:int8_t
GetRssAverager	core/common/message.hpp	/^    const RssAverager &GetRssAverager(void) const { return GetMetadata().mRssAverager; }$/;"	f	class:ot::Message	typeref:typename:const RssAverager &
GetRssi	core/mac/mac_frame.hpp	/^    int8_t GetRssi(void) const { return mInfo.mRxInfo.mRssi; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:int8_t
GetRssi	core/mac/mac_links.hpp	/^    int8_t GetRssi(void) const$/;"	f	class:ot::Mac::Links	typeref:typename:int8_t
GetRssi	core/mac/sub_mac.cpp	/^int8_t SubMac::GetRssi(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:int8_t
GetRssi	core/radio/radio.hpp	/^inline int8_t Radio::GetRssi(void) { return kInvalidRssi; }$/;"	f	class:ot::Radio	typeref:typename:int8_t
GetRssi	core/radio/radio.hpp	/^inline int8_t Radio::GetRssi(void) { return otPlatRadioGetRssi(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:int8_t
GetRssi	lib/spinel/radio_spinel.cpp	/^int8_t RadioSpinel::GetRssi(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:int8_t
GetRssiThreshold	core/utils/jam_detector.hpp	/^    int8_t GetRssiThreshold(void) const { return mRssiThreshold; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:int8_t
GetRxChannelAfterTxDone	core/mac/mac_frame.hpp	/^    uint8_t GetRxChannelAfterTxDone(void) const { return mInfo.mTxInfo.mRxChannelAfterTxDone; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:uint8_t
GetRxOnWhenIdle	core/mac/mac.hpp	/^    bool GetRxOnWhenIdle(void) const { return mRxOnWhenIdle; }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
GetRxOnWhenIdle	core/thread/mesh_forwarder.cpp	/^bool MeshForwarder::GetRxOnWhenIdle(void) const { return Get<Mac::Mac>().GetRxOnWhenIdle(); }$/;"	f	class:ot::MeshForwarder	typeref:typename:bool
GetSampleCount	core/utils/channel_monitor.hpp	/^    uint32_t GetSampleCount(void) const { return mSampleCount; }$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:uint32_t
GetScope	core/net/ip6_address.cpp	/^uint8_t Address::GetScope(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:uint8_t
GetScope	core/net/netif.hpp	/^        uint8_t GetScope(void) const$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:uint8_t
GetSeconds	core/meshcop/timestamp.hpp	/^    uint64_t GetSeconds(void) const$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:uint64_t
GetSecondsSinceLastSupervision	core/thread/child.hpp	/^    uint16_t GetSecondsSinceLastSupervision(void) const { return mSecondsSinceSupervision; }$/;"	f	class:ot::Child	typeref:typename:uint16_t
GetSecurityControlField	core/mac/mac_frame.cpp	/^Error Frame::GetSecurityControlField(uint8_t &aSecurityControlField) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetSecurityEnabled	core/mac/mac_frame.hpp	/^    bool GetSecurityEnabled(void) const { return (GetPsdu()[0] & kFcfSecurityEnabled) != 0; }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
GetSecurityLevel	core/mac/mac_frame.cpp	/^Error Frame::GetSecurityLevel(uint8_t &aSecurityLevel) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetSecurityPolicy	core/meshcop/meshcop_tlvs.cpp	/^SecurityPolicy SecurityPolicyTlv::GetSecurityPolicy(void) const$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:SecurityPolicy
GetSecurityPolicy	core/thread/key_manager.hpp	/^    const SecurityPolicy &GetSecurityPolicy(void) const { return mSecurityPolicy; }$/;"	f	class:ot::KeyManager	typeref:typename:const SecurityPolicy &
GetSedBufferSize	core/thread/mle_tlvs.hpp	/^    uint16_t GetSedBufferSize(void) const$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint16_t
GetSedDatagramCount	core/thread/mle_tlvs.hpp	/^    uint8_t GetSedDatagramCount(void) const$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:uint8_t
GetSeedId	core/net/ip6_mpl.hpp	/^    uint16_t GetSeedId(void) const { return BigEndian::HostSwap16(mSeedId); }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:uint16_t
GetSeedIdLength	core/net/ip6_mpl.hpp	/^    SeedIdLength GetSeedIdLength(void) const { return static_cast<SeedIdLength>(mControl & kSeed/;"	f	class:ot::Ip6::MplOption	typeref:typename:SeedIdLength
GetSelectedRadioTypes	core/mac/mac_links.hpp	/^    RadioTypes GetSelectedRadioTypes(void) const { return mSelectedRadioTypes; }$/;"	f	class:ot::Mac::TxFrames	typeref:typename:RadioTypes
GetSendBufferBytes	core/net/tcp6.cpp	/^size_t Tcp::Endpoint::GetSendBufferBytes(void) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:size_t
GetSendQueue	core/net/ip6.hpp	/^    const PriorityQueue &GetSendQueue(void) const { return mSendQueue; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:const PriorityQueue &
GetSendQueue	core/thread/mesh_forwarder.hpp	/^    const PriorityQueue &GetSendQueue(void) const { return mSendQueue; }$/;"	f	class:ot::MeshForwarder	typeref:typename:const PriorityQueue &
GetSenderAddress	core/net/mdns.hpp	/^        const AddressInfo  &GetSenderAddress(void) const { return mSenderAddress; }$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:const AddressInfo &
GetSequence	core/mac/mac_frame.hpp	/^    uint8_t GetSequence(void) const { return GetPsdu()[kSequenceIndex]; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetSequence	core/mac/mac_frame.hpp	/^    uint8_t GetSequence(void) const { return mSequence; }$/;"	f	class:ot::Mac::TimeIe	typeref:typename:uint8_t
GetSequence	core/net/icmp6.hpp	/^        uint16_t GetSequence(void) const { return BigEndian::HostSwap16(mData.m16[1]); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:uint16_t
GetSequence	core/net/ip6_mpl.hpp	/^    uint8_t GetSequence(void) const { return mSequence; }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:uint8_t
GetSequenceNumber	core/net/tcp6.hpp	/^        uint32_t GetSequenceNumber(void) const { return BigEndian::HostSwap32(mSequenceNumber); /;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint32_t
GetSequenceNumber	core/thread/network_data_publisher.hpp	/^            uint8_t             GetSequenceNumber(void) const { return static_cast<uint8_t>(mPor/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:uint8_t
GetSequenceNumber	core/thread/network_data_service.hpp	/^        uint8_t GetSequenceNumber(void) const { return mSequenceNumber; }$/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:uint8_t
GetSequenceNumber	core/thread/network_data_service.hpp	/^        uint8_t GetSequenceNumber(void) const { return mSequenceNumber; }$/;"	f	class:ot::NetworkData::Service::DnsSrpAnycast::ServiceData	typeref:typename:uint8_t
GetSeriesFlagsMask	core/thread/link_metrics_tlvs.hpp	/^    uint8_t GetSeriesFlagsMask(void) const { return mSeriesFlagsMask; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:uint8_t
GetSeriesId	core/thread/link_metrics_tlvs.hpp	/^    uint8_t GetSeriesId(void) const { return mSeriesId; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:uint8_t
GetSeriesId	core/thread/link_metrics_types.hpp	/^    uint8_t GetSeriesId(void) const { return mSeriesId; }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:uint8_t
GetServer16	core/backbone_router/bbr_leader.hpp	/^    uint16_t GetServer16(void) const { return mConfig.mServer16; }$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:uint16_t
GetServer16	core/thread/network_data_tlvs.hpp	/^    uint16_t GetServer16(void) const { return BigEndian::HostSwap16(mServer16); }$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:uint16_t
GetServerAddress	core/common/settings.hpp	/^        const Ip6::Address &GetServerAddress(void) const { return mServerAddress; }$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:const Ip6::Address &
GetServerAddress	core/net/srp_client.hpp	/^    const Ip6::SockAddr &GetServerAddress(void) const { return mSocket.GetPeerName(); }$/;"	f	class:ot::Srp::Client	typeref:typename:const Ip6::SockAddr &
GetServerConfig	core/thread/network_data_types.hpp	/^    ServerConfig &GetServerConfig(void) { return static_cast<ServerConfig &>(mServerConfig); }$/;"	f	class:ot::NetworkData::ServiceConfig	typeref:typename:ServerConfig &
GetServerConfig	core/thread/network_data_types.hpp	/^    const ServerConfig &GetServerConfig(void) const { return static_cast<const ServerConfig &>(m/;"	f	class:ot::NetworkData::ServiceConfig	typeref:typename:const ServerConfig &
GetServerData	core/thread/network_data_tlvs.hpp	/^    const uint8_t *GetServerData(void) const { return reinterpret_cast<const uint8_t *>(this) + /;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:const uint8_t *
GetServerData	core/thread/network_data_tlvs.hpp	/^    uint8_t       *GetServerData(void) { return AsNonConst(AsConst(this)->GetServerData()); }$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:uint8_t *
GetServerData	core/thread/network_data_tlvs.hpp	/^    void GetServerData(ServerData &aServerData) const { aServerData.Init(GetServerData(), GetSer/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:void
GetServerData	core/thread/network_data_types.hpp	/^        void GetServerData(ServerData &aServerData) const { aServerData.Init(mServerData, mServe/;"	f	class:ot::NetworkData::ServiceConfig::ServerConfig	typeref:typename:void
GetServerDataLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetServerDataLength(void) const { return GetLength() - (sizeof(*this) - sizeof(Netwo/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:uint8_t
GetServerPort	core/common/settings.hpp	/^        uint16_t GetServerPort(void) const { return LittleEndian::HostSwap16(mServerPort); }$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:uint16_t
GetServerSockAddr	core/net/dns_client.hpp	/^        Ip6::SockAddr &GetServerSockAddr(void) { return AsCoreType(&mServerSockAddr); }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:Ip6::SockAddr &
GetServerSockAddr	core/net/dns_client.hpp	/^        const Ip6::SockAddr &GetServerSockAddr(void) const$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:const Ip6::SockAddr &
GetServiceAloc	core/thread/mle.cpp	/^Error Mle::GetServiceAloc(uint8_t aServiceId, Ip6::Address &aAddress) const$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
GetServiceData	core/thread/network_data_tlvs.hpp	/^    const uint8_t *GetServiceData(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:const uint8_t *
GetServiceData	core/thread/network_data_tlvs.hpp	/^    void GetServiceData(ServiceData &aServiceData) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:void
GetServiceData	core/thread/network_data_types.hpp	/^    void GetServiceData(ServiceData &aServiceData) const { aServiceData.Init(mServiceData, mServ/;"	f	class:ot::NetworkData::ServiceConfig	typeref:typename:void
GetServiceDataLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetServiceDataLength(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint8_t
GetServiceId	core/backbone_router/bbr_leader.cpp	/^Error Leader::GetServiceId(uint8_t &aServiceId) const$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:Error
GetServiceId	core/thread/network_data_leader.cpp	/^Error Leader::GetServiceId(uint32_t           aEnterpriseNumber,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
GetServiceId	core/thread/network_data_service.cpp	/^Error Manager::GetServiceId(const void *aServiceData,$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
GetServiceId	core/thread/network_data_service.hpp	/^    template <typename ServiceType> Error GetServiceId(bool aServerStable, uint8_t &aServiceId) /;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
GetServiceId	core/thread/network_data_tlvs.hpp	/^    uint8_t GetServiceId(void) const { return (mFlagsServiceId & kServiceIdMask); }$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint8_t
GetServiceInfo	core/net/dns_client.cpp	/^Error Client::BrowseResponse::GetServiceInfo(const char *aInstanceLabel, ServiceInfo &aServiceIn/;"	f	class:ot::Dns::Client::BrowseResponse	typeref:typename:Error
GetServiceInfo	core/net/dns_client.cpp	/^Error Client::ServiceResponse::GetServiceInfo(ServiceInfo &aServiceInfo) const$/;"	f	class:ot::Dns::Client::ServiceResponse	typeref:typename:Error
GetServiceInstance	core/net/dns_client.cpp	/^Error Client::BrowseResponse::GetServiceInstance(uint16_t aIndex, char *aLabelBuffer, uint8_t aL/;"	f	class:ot::Dns::Client::BrowseResponse	typeref:typename:Error
GetServiceMode	core/net/dns_client.hpp	/^        ServiceMode GetServiceMode(void) const { return static_cast<ServiceMode>(mServiceMode); /;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:ServiceMode
GetServiceName	core/net/dns_client.cpp	/^Error Client::ServiceResponse::GetServiceName(char    *aLabelBuffer,$/;"	f	class:ot::Dns::Client::ServiceResponse	typeref:typename:Error
GetServiceName	core/net/dns_client.hpp	/^        Error GetServiceName(char *aNameBuffer, uint16_t aNameBufferSize) const$/;"	f	class:ot::Dns::Client::BrowseResponse	typeref:typename:Error
GetServiceName	core/net/srp_server.hpp	/^        const char *GetServiceName(void) const { return mServiceName.AsCString(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const char *
GetServiceNameString	core/utils/srp_client_buffers.hpp	/^        char *GetServiceNameString(uint16_t &aSize)$/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:char *
GetServices	core/net/srp_client.hpp	/^    const LinkedList<Service> &GetServices(void) const { return mServices; }$/;"	f	class:ot::Srp::Client	typeref:typename:const LinkedList<Service> &
GetServices	core/net/srp_server.hpp	/^        const LinkedList<Service> &GetServices(void) const { return mServices; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:const LinkedList<Service> &
GetSessionId	core/meshcop/commissioner.hpp	/^    uint16_t GetSessionId(void) const { return mSessionId; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:uint16_t
GetSessionId	core/meshcop/meshcop.hpp	/^    uint16_t GetSessionId(void) const { return mSessionId; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:uint16_t
GetShort	core/mac/mac_types.hpp	/^    ShortAddress GetShort(void) const { return mShared.mShortAddress; }$/;"	f	class:ot::Mac::Address	typeref:typename:ShortAddress
GetShortAddress	core/mac/link_raw.hpp	/^    ShortAddress GetShortAddress(void) const { return mSubMac.GetShortAddress(); }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:ShortAddress
GetShortAddress	core/mac/mac.hpp	/^    ShortAddress GetShortAddress(void) const { return mLinks.GetShortAddress(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:ShortAddress
GetShortAddress	core/mac/mac_links.hpp	/^    ShortAddress GetShortAddress(void) const$/;"	f	class:ot::Mac::Links	typeref:typename:ShortAddress
GetShortAddress	core/mac/sub_mac.hpp	/^    ShortAddress GetShortAddress(void) const { return mShortAddress; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:ShortAddress
GetSignatoryFlags	core/net/dns_types.hpp	/^    uint8_t GetSignatoryFlags(void) const { return (mFlags[1] & kSignatoryFlagsMask); }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:uint8_t
GetSize	core/common/pool.hpp	/^    uint16_t GetSize(void) const { return kPoolSize; }$/;"	f	class:ot::Pool	typeref:typename:uint16_t
GetSize	core/common/string.hpp	/^    uint16_t GetSize(void) const { return mSize; }$/;"	f	class:ot::StringWriter	typeref:typename:uint16_t
GetSize	core/common/tlvs.cpp	/^uint32_t Tlv::GetSize(void) const$/;"	f	class:ot::Tlv	typeref:typename:uint32_t
GetSize	core/net/dns_dso.hpp	/^        uint32_t GetSize(void) const { return sizeof(Tlv) + static_cast<uint32_t>(GetLength()); /;"	f	class:ot::Dns::Dso::Tlv	typeref:typename:uint32_t
GetSize	core/net/dns_types.hpp	/^        uint16_t GetSize(void) const { return (sizeof(mBlockNumber) + sizeof(mBitmapLength) + mB/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:uint16_t
GetSize	core/net/dns_types.hpp	/^    uint32_t GetSize(void) const { return sizeof(Option) + GetOptionLength(); }$/;"	f	class:ot::Dns::Option	typeref:typename:uint32_t
GetSize	core/net/dns_types.hpp	/^    uint32_t GetSize(void) const { return sizeof(ResourceRecord) + GetLength(); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:uint32_t
GetSize	core/net/ip6_headers.cpp	/^uint16_t Option::GetSize(void) const$/;"	f	class:ot::Ip6::Option	typeref:typename:uint16_t
GetSize	core/net/ip6_headers.hpp	/^    uint16_t GetSize(void) const { return kLengthUnitSize * (mLength + 1); }$/;"	f	class:ot::Ip6::ExtensionHeader	typeref:typename:uint16_t
GetSize	core/net/nd6.hpp	/^    uint16_t GetSize(void) const { return mLength * kLengthUnit; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:uint16_t
GetSize	core/radio/trel_packet.cpp	/^uint16_t Header::GetSize(Type aType)$/;"	f	class:ot::Trel::Header	typeref:typename:uint16_t
GetSize	core/thread/network_data.hpp	/^    uint8_t GetSize(void) const { return mSize; }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:uint8_t
GetSize	core/thread/network_data_tlvs.hpp	/^    uint8_t GetSize(void) const { return sizeof(NetworkDataTlv) + mLength; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:uint8_t
GetSize	core/utils/flash.hpp	/^        uint16_t GetSize(void) const { return sizeof(*this) + ((mLength + 3) & 0xfffc); }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:uint16_t
GetSize	core/utils/heap.hpp	/^    uint16_t GetSize(void) const { return mSize; }$/;"	f	class:ot::Utils::Block	typeref:typename:uint16_t
GetSize	core/utils/history_tracker.hpp	/^        uint16_t     GetSize(void) const { return 0; }$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:uint16_t
GetSize	core/utils/history_tracker.hpp	/^        uint16_t GetSize(void) const { return mSize; }$/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:uint16_t
GetSkipLength	lib/spinel/multi_frame_buffer.hpp	/^    uint16_t GetSkipLength(void) const { return LittleEndian::ReadUint16(mWriteFrameStart + kHea/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:uint16_t
GetSockAddr	core/net/socket.hpp	/^    Address &GetSockAddr(void) { return AsCoreType(&mSockAddr); }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:Address &
GetSockAddr	core/net/socket.hpp	/^    const Address &GetSockAddr(void) const { return AsCoreType(&mSockAddr); }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:const Address &
GetSockAddr	core/radio/trel_interface.hpp	/^            const Ip6::SockAddr &GetSockAddr(void) const { return static_cast<const Ip6::SockAdd/;"	f	class:ot::Trel::Interface::Peer::Info	typeref:typename:const Ip6::SockAddr &
GetSockAddr	core/radio/trel_interface.hpp	/^        const Ip6::SockAddr &GetSockAddr(void) const { return static_cast<const Ip6::SockAddr &>/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:const Ip6::SockAddr &
GetSockName	core/net/udp6.hpp	/^        SockAddr &GetSockName(void) { return AsCoreType(&mSockName); }$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:SockAddr &
GetSockName	core/net/udp6.hpp	/^        const SockAddr &GetSockName(void) const { return AsCoreType(&mSockName); }$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:const SockAddr &
GetSockPort	core/net/socket.hpp	/^    uint16_t GetSockPort(void) const { return mSockPort; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:uint16_t
GetSocket	core/net/srp_server.cpp	/^Ip6::Udp::Socket &Server::GetSocket(void)$/;"	f	class:ot::Srp::Server	typeref:typename:Ip6::Udp::Socket &
GetSource	core/mac/mac_types.hpp	/^    PanId GetSource(void) const { return mSource; }$/;"	f	class:ot::Mac::PanIds	typeref:typename:PanId
GetSource	core/net/ip4_types.hpp	/^    Address &GetSource(void) { return mSource; }$/;"	f	class:ot::Ip4::Header	typeref:typename:Address &
GetSource	core/net/ip4_types.hpp	/^    const Address &GetSource(void) const { return mSource; }$/;"	f	class:ot::Ip4::Header	typeref:typename:const Address &
GetSource	core/net/ip6_headers.hpp	/^    Address &GetSource(void) { return mSource; }$/;"	f	class:ot::Ip6::Header	typeref:typename:Address &
GetSource	core/net/ip6_headers.hpp	/^    const Address &GetSource(void) const { return mSource; }$/;"	f	class:ot::Ip6::Header	typeref:typename:const Address &
GetSource	core/radio/trel_packet.hpp	/^    const Mac::ExtAddress &GetSource(void) const { return mSource; }$/;"	f	class:ot::Trel::Header	typeref:typename:const Mac::ExtAddress &
GetSource	core/thread/lowpan.hpp	/^    uint16_t GetSource(void) const { return mSource; }$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:uint16_t
GetSource	core/utils/ping_sender.hpp	/^        Ip6::Address &GetSource(void) { return AsCoreType(&mSource); }$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:Ip6::Address &
GetSource	core/utils/ping_sender.hpp	/^        const Ip6::Address &GetSource(void) const { return AsCoreType(&mSource); }$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:const Ip6::Address &
GetSourceAddress	core/net/ip6.hpp	/^    const Address &GetSourceAddress(void) const { return mIp6Header.GetSource(); }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Address &
GetSourcePort	core/meshcop/meshcop_tlvs.hpp	/^    uint16_t GetSourcePort(void) const { return BigEndian::HostSwap16(mSourcePort); }$/;"	f	class:ot::MeshCoP::UdpEncapsulationTlvHeader	typeref:typename:uint16_t
GetSourcePort	core/net/ip6.cpp	/^uint16_t Headers::GetSourcePort(void) const$/;"	f	class:ot::Ip6::Headers	typeref:typename:uint16_t
GetSourcePort	core/net/tcp6.hpp	/^        uint16_t GetSourcePort(void) const { return BigEndian::HostSwap16(mSource); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetSourcePort	core/net/udp6.hpp	/^        uint16_t GetSourcePort(void) const { return BigEndian::HostSwap16(mSourcePort); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:uint16_t
GetSpinelDriver	lib/spinel/radio_spinel.cpp	/^SpinelDriver &RadioSpinel::GetSpinelDriver(void) const$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:SpinelDriver &
GetSpinelDriver	posix/platform/spinel_manager.cpp	/^Spinel::SpinelDriver &GetSpinelDriver(void) { return sSpinelManager.GetSpinelDriver(); }$/;"	f	namespace:ot::Posix	typeref:typename:Spinel::SpinelDriver &
GetSpinelDriver	posix/platform/spinel_manager.hpp	/^    Spinel::SpinelDriver &GetSpinelDriver(void) { return mSpinelDriver; }$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:Spinel::SpinelDriver &
GetSpinelInterface	lib/spinel/spinel_driver.hpp	/^    SpinelInterface *GetSpinelInterface(void) const { return mSpinelInterface; }$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:SpinelInterface *
GetSpinelInterface	posix/platform/radio.hpp	/^    Spinel::SpinelInterface &GetSpinelInterface(void) { return SpinelManager::GetSpinelManager()/;"	f	class:ot::Posix::Radio	typeref:typename:Spinel::SpinelInterface &
GetSpinelInterface	posix/platform/spinel_manager.hpp	/^    Spinel::SpinelInterface &GetSpinelInterface(void)$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:Spinel::SpinelInterface &
GetSpinelManager	posix/platform/spinel_manager.cpp	/^SpinelManager &SpinelManager::GetSpinelManager(void) { return sSpinelManager; }$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:SpinelManager &
GetSrcAddr	core/mac/mac_frame.cpp	/^Error Frame::GetSrcAddr(Address &aAddress) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetSrcPanId	core/mac/mac_frame.cpp	/^Error Frame::GetSrcPanId(PanId &aPanId) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
GetStaleTime	core/border_router/routing_manager.cpp	/^TimeMilli RoutingManager::OnLinkPrefix::GetStaleTime(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:TimeMilli
GetStaleTime	core/border_router/routing_manager.cpp	/^TimeMilli RoutingManager::RoutePrefix::GetStaleTime(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:TimeMilli
GetStaleTimeFromPreferredLifetime	core/border_router/routing_manager.cpp	/^TimeMilli RoutingManager::OnLinkPrefix::GetStaleTimeFromPreferredLifetime(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:TimeMilli
GetStartTimeOfCurrentInterval	core/common/trickle_timer.cpp	/^TimeMilli TrickleTimer::GetStartTimeOfCurrentInterval(void) const$/;"	f	class:ot::TrickleTimer	typeref:typename:TimeMilli
GetStartingChannel	core/thread/announce_sender.hpp	/^    uint8_t GetStartingChannel(void) const { return mStartingChannel; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:uint8_t
GetState	core/backbone_router/bbr_local.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:State
GetState	core/border_router/routing_manager.cpp	/^Nat64::State RoutingManager::Nat64PrefixManager::GetState(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:Nat64::State
GetState	core/border_router/routing_manager.cpp	/^RoutingManager::PdPrefixManager::State RoutingManager::PdPrefixManager::GetState(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:RoutingManager::PdPrefixManager::State
GetState	core/border_router/routing_manager.cpp	/^RoutingManager::State RoutingManager::GetState(void) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:RoutingManager::State
GetState	core/border_router/routing_manager.hpp	/^        State GetState(void) const { return mState; }$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:State
GetState	core/meshcop/border_agent.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:State
GetState	core/meshcop/commissioner.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:State
GetState	core/meshcop/joiner.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:State
GetState	core/net/dns_dso.hpp	/^        State GetState(void) const { return mState; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:State
GetState	core/net/dnssd.cpp	/^Dnssd::State Dnssd::GetState(void) const$/;"	f	class:ot::Dnssd	typeref:typename:Dnssd::State
GetState	core/net/mdns.hpp	/^        State GetState(void) const { return mState; }$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:State
GetState	core/net/nat64_translator.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::Nat64::Translator	typeref:typename:State
GetState	core/net/srp_client.hpp	/^        ItemState GetState(void) const { return static_cast<ItemState>(mState); }$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:ItemState
GetState	core/net/srp_client.hpp	/^        ItemState GetState(void) const { return static_cast<ItemState>(mState); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:ItemState
GetState	core/net/srp_client.hpp	/^        State   GetState(void) const { return mState; }$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:State
GetState	core/net/srp_client.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::Srp::Client	typeref:typename:State
GetState	core/net/srp_server.hpp	/^    State GetState(void) const { return mState; }$/;"	f	class:ot::Srp::Server	typeref:typename:State
GetState	core/radio/radio.hpp	/^inline otRadioState Radio::GetState(void) { return OT_RADIO_STATE_DISABLED; }$/;"	f	class:ot::Radio	typeref:typename:otRadioState
GetState	core/radio/radio.hpp	/^inline otRadioState Radio::GetState(void) { return otPlatRadioGetState(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:otRadioState
GetState	core/thread/neighbor.hpp	/^    State GetState(void) const { return static_cast<State>(mState); }$/;"	f	class:ot::Neighbor	typeref:typename:State
GetState	core/thread/network_data_publisher.hpp	/^        State            GetState(void) const { return mState; }$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:State
GetState	core/utils/jam_detector.hpp	/^    bool GetState(void) const { return mJamState; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:bool
GetState	lib/spinel/radio_spinel.cpp	/^otRadioState RadioSpinel::GetState(void) const$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otRadioState
GetStats	core/radio/radio.cpp	/^const otRadioTimeStats &RadioStatistics::GetStats(void)$/;"	f	class:ot::RadioStatistics	typeref:typename:const otRadioTimeStats &
GetStatusCode	core/net/dhcp6.hpp	/^    Status GetStatusCode(void) const { return static_cast<Status>(BigEndian::HostSwap16(mStatus)/;"	f	class:ot::Dhcp6::StatusCode	typeref:typename:Status
GetSteeringData	core/meshcop/meshcop.hpp	/^    const SteeringData &GetSteeringData(void) const { return static_cast<const SteeringData &>(m/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:const SteeringData &
GetSteeringDataLength	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetSteeringDataLength(void) const$/;"	f	class:ot::MeshCoP::SteeringDataTlv	typeref:typename:uint8_t
GetStratum	core/net/sntp_client.hpp	/^        uint8_t GetStratum(void) const { return mStratum; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint8_t
GetSubMac	core/mac/mac_links.hpp	/^    SubMac &GetSubMac(void) { return mSubMac; }$/;"	f	class:ot::Mac::Links	typeref:typename:SubMac &
GetSubMac	core/mac/mac_links.hpp	/^    const SubMac &GetSubMac(void) const { return mSubMac; }$/;"	f	class:ot::Mac::Links	typeref:typename:const SubMac &
GetSubTlv	core/thread/network_data.hpp	/^        const NetworkDataTlv *GetSubTlv(const NetworkDataTlv *aSubTlvs) const$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:const NetworkDataTlv *
GetSubTlvOffset	core/thread/network_data.hpp	/^        uint8_t GetSubTlvOffset(void) const { return mIteratorBuffer[kSubTlvPosition]; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:uint8_t
GetSubTlvs	core/thread/network_data_tlvs.hpp	/^    NetworkDataTlv *GetSubTlvs(void) { return reinterpret_cast<NetworkDataTlv *>(GetValue() + Ge/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:NetworkDataTlv *
GetSubTlvs	core/thread/network_data_tlvs.hpp	/^    NetworkDataTlv *GetSubTlvs(void)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:NetworkDataTlv *
GetSubTlvs	core/thread/network_data_tlvs.hpp	/^    const NetworkDataTlv *GetSubTlvs(void) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:const NetworkDataTlv *
GetSubTlvs	core/thread/network_data_tlvs.hpp	/^    const NetworkDataTlv *GetSubTlvs(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:const NetworkDataTlv *
GetSubTlvsLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetSubTlvsLength(void) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:uint8_t
GetSubTlvsLength	core/thread/network_data_tlvs.hpp	/^    uint8_t GetSubTlvsLength(void) { return GetLength() - GetFieldsLength(); }$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:uint8_t
GetSubType	core/common/message.hpp	/^    SubType GetSubType(void) const { return static_cast<SubType>(GetMetadata().mSubType); }$/;"	f	class:ot::Message	typeref:typename:SubType
GetSubType	core/mac/mac_frame.hpp	/^    uint8_t GetSubType(void) const { return mSubType; }$/;"	f	class:ot::Mac::VendorIeHeader	typeref:typename:uint8_t
GetSubTypeLabelAt	core/net/srp_client.hpp	/^        const char *GetSubTypeLabelAt(uint16_t aIndex) const { return mSubTypeLabels[aIndex]; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:const char *
GetSubTypeLabelsArray	core/utils/srp_client_buffers.hpp	/^        const char **GetSubTypeLabelsArray(uint16_t &aArrayLength)$/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:const char **
GetSubTypeServiceNameAt	core/net/srp_server.cpp	/^const char *Server::Service::GetSubTypeServiceNameAt(uint16_t aIndex) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const char *
GetSubnetId	core/net/ip6_address.hpp	/^    uint16_t GetSubnetId(void) const { return BigEndian::HostSwap16(mPrefix.mFields.m16[3]); }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:uint16_t
GetSuccessRate	core/thread/link_quality.hpp	/^    uint16_t GetSuccessRate(void) const { return kMaxRateValue - mFailureRate; }$/;"	f	class:ot::SuccessRateTracker	typeref:typename:uint16_t
GetSupervisionInterval	core/thread/child.hpp	/^    uint16_t GetSupervisionInterval(void) const { return mSupervisionInterval; }$/;"	f	class:ot::Child	typeref:typename:uint16_t
GetSupervisionInterval	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetSupervisionInterval(void) const { return BigEndian::HostSwap16(mSupervisionInter/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetSupportedChannelMask	core/mac/mac.hpp	/^    const ChannelMask &GetSupportedChannelMask(void) const { return mSupportedChannelMask; }$/;"	f	class:ot::Mac::Mac	typeref:typename:const ChannelMask &
GetSupportedChannelMask	core/radio/max_power_table.hpp	/^    uint32_t GetSupportedChannelMask(void) const$/;"	f	class:ot::MaxPowerTable	typeref:typename:uint32_t
GetSupportedChannelMask	core/radio/radio.hpp	/^inline uint32_t Radio::GetSupportedChannelMask(void) { return otPlatRadioGetSupportedChannelMask/;"	f	class:ot::Radio	typeref:typename:uint32_t
GetSupportedChannelMask	posix/platform/configuration.hpp	/^    uint32_t GetSupportedChannelMask(void) const { return mSupportedChannelMask; }$/;"	f	class:ot::Posix::Configuration	typeref:typename:uint32_t
GetSupportedChannels	core/utils/channel_manager.hpp	/^    uint32_t GetSupportedChannels(void) const { return mSupportedChannelMask.GetMask(); }$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:uint32_t
GetSupportedEntries	ncp/changed_props_set.hpp	/^    const Entry *GetSupportedEntries(uint8_t &aNumEntries) const$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:const Entry *
GetSupportedRadioTypes	core/thread/radio_selector.hpp	/^        Mac::RadioTypes GetSupportedRadioTypes(void) const { return mSupportedRadioTypes; }$/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:Mac::RadioTypes
GetT1	core/net/dhcp6.hpp	/^    uint32_t GetT1(void) const { return BigEndian::HostSwap32(mT1); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:uint32_t
GetT2	core/net/dhcp6.hpp	/^    uint32_t GetT2(void) const { return BigEndian::HostSwap32(mT2); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:uint32_t
GetTagLength	core/crypto/aes_ccm.hpp	/^    uint8_t GetTagLength(void) const { return mTagLength; }$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:uint8_t
GetTail	core/common/linked_list.hpp	/^    Type *GetTail(void) { return AsNonConst(AsConst(this)->GetTail()); }$/;"	f	class:ot::LinkedList	typeref:typename:Type *
GetTail	core/common/linked_list.hpp	/^    const Type *GetTail(void) const$/;"	f	class:ot::LinkedList	typeref:typename:const Type *
GetTail	core/common/message.cpp	/^const Message *PriorityQueue::GetTail(void) const { return FindFirstNonNullTail(Message::kPriori/;"	f	class:ot::PriorityQueue	typeref:typename:const Message *
GetTail	core/common/message.hpp	/^    Message       *GetTail(void) { return static_cast<Message *>(mData); }$/;"	f	class:ot::MessageQueue	typeref:typename:Message *
GetTail	core/common/message.hpp	/^    Message *GetTail(void) { return AsNonConst(AsConst(this)->GetTail()); }$/;"	f	class:ot::PriorityQueue	typeref:typename:Message *
GetTail	core/common/message.hpp	/^    const Message *GetTail(void) const { return static_cast<const Message *>(mData); }$/;"	f	class:ot::MessageQueue	typeref:typename:const Message *
GetTarget	core/thread/address_resolver.hpp	/^        const Ip6::Address &GetTarget(void) const { return mTarget; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:const Ip6::Address &
GetTargetAddress	core/net/nd6.hpp	/^    const Address &GetTargetAddress(void) const { return mTargetAddress; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:const Address &
GetTargetAddress	core/net/nd6.hpp	/^    const Address &GetTargetAddress(void) const { return mTargetAddress; }$/;"	f	class:ot::Ip6::Nd::NeighborSolicitMessage	typeref:typename:const Address &
GetTargetPower	posix/platform/power.hpp	/^    int16_t GetTargetPower(void) const { return mTargetPower; }$/;"	f	class:ot::Power::TargetPower	typeref:typename:int16_t
GetTcb	core/net/tcp6.hpp	/^        const struct tcpcb &GetTcb(void) const { return *reinterpret_cast<const struct tcpcb *>(/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:const struct tcpcb &
GetTcb	core/net/tcp6.hpp	/^        struct tcpcb &GetTcb(void) { return *reinterpret_cast<struct tcpcb *>(&mTcb); }$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:struct:tcpcb &
GetTcbListen	core/net/tcp6.hpp	/^        const struct tcpcb_listen &GetTcbListen(void) const$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:const struct tcpcb_listen &
GetTcbListen	core/net/tcp6.hpp	/^        struct tcpcb_listen &GetTcbListen(void) { return *reinterpret_cast<struct tcpcb_listen */;"	f	class:ot::Ip6::Tcp::Listener	typeref:struct:tcpcb_listen &
GetTcpHeader	core/net/ip6.hpp	/^    const Tcp::Header &GetTcpHeader(void) const { return mHeader.mTcp; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Tcp::Header &
GetTemporaryMacKey	core/mac/mac_links.cpp	/^const KeyMaterial *Links::GetTemporaryMacKey(const Frame &aFrame, uint32_t aKeySequence) const$/;"	f	class:ot::Mac::Links	typeref:typename:const KeyMaterial *
GetTemporaryMleKey	core/thread/key_manager.cpp	/^const Mle::KeyMaterial &KeyManager::GetTemporaryMleKey(uint32_t aKeySequence)$/;"	f	class:ot::KeyManager	typeref:typename:const Mle::KeyMaterial &
GetTemporaryTrelMacKey	core/thread/key_manager.cpp	/^const Mac::KeyMaterial &KeyManager::GetTemporaryTrelMacKey(uint32_t aKeySequence)$/;"	f	class:ot::KeyManager	typeref:typename:const Mac::KeyMaterial &
GetThreadAttributeFromCertificate	core/meshcop/secure_transport.cpp	/^Error SecureTransport::GetThreadAttributeFromCertificate(const mbedtls_x509_crt *aCert,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
GetThreadAttributeFromOwnCertificate	core/meshcop/secure_transport.cpp	/^Error SecureTransport::GetThreadAttributeFromOwnCertificate(int      aThreadOidDescriptor,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
GetThreadAttributeFromOwnCertificate	core/radio/ble_secure.hpp	/^    Error GetThreadAttributeFromOwnCertificate(int      aThreadOidDescriptor,$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
GetThreadAttributeFromPeerCertificate	core/meshcop/secure_transport.cpp	/^Error SecureTransport::GetThreadAttributeFromPeerCertificate(int      aThreadOidDescriptor,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
GetThreadAttributeFromPeerCertificate	core/radio/ble_secure.hpp	/^    Error GetThreadAttributeFromPeerCertificate(int      aThreadOidDescriptor,$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
GetThreadIe	core/mac/mac_frame.cpp	/^const uint8_t *Frame::GetThreadIe(uint8_t aSubType) const$/;"	f	class:ot::Mac::Frame	typeref:typename:const uint8_t *
GetThreadIe	core/mac/mac_frame.hpp	/^    uint8_t *GetThreadIe(uint8_t aSubType) { return AsNonConst(AsConst(this)->GetThreadIe(aSubTy/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t *
GetTicks	core/meshcop/timestamp.hpp	/^    uint16_t GetTicks(void) const { return BigEndian::HostSwap16(mTicks) >> kTicksOffset; }$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:uint16_t
GetTime	core/mac/mac_frame.hpp	/^    uint64_t GetTime(void) const { return LittleEndian::HostSwap64(mTime); }$/;"	f	class:ot::Mac::TimeIe	typeref:typename:uint64_t
GetTime	core/thread/time_sync_service.cpp	/^TimeSync::Status TimeSync::GetTime(uint64_t &aNetworkTime) const$/;"	f	class:ot::TimeSync	typeref:typename:TimeSync::Status
GetTimeIe	core/mac/mac_frame.cpp	/^const TimeIe *Frame::GetTimeIe(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:const TimeIe *
GetTimeIe	core/mac/mac_frame.hpp	/^    TimeIe *GetTimeIe(void) { return AsNonConst(AsConst(this)->GetTimeIe()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:TimeIe *
GetTimeIeOffset	core/mac/mac.cpp	/^uint8_t Mac::GetTimeIeOffset(const Frame &aFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:uint8_t
GetTimeIeOffset	core/mac/mac_frame.hpp	/^    uint8_t GetTimeIeOffset(void) const { return mInfo.mTxInfo.mIeInfo->mTimeIeOffset; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:uint8_t
GetTimeInQueueHistogram	core/thread/mesh_forwarder.hpp	/^    const uint32_t *GetTimeInQueueHistogram(uint16_t &aNumBins, uint32_t &aBinInterval) const$/;"	f	class:ot::MeshForwarder	typeref:typename:const uint32_t *
GetTimeSinceLastTransaction	core/backbone_router/ndproxy_table.hpp	/^        uint32_t GetTimeSinceLastTransaction(void) const$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:uint32_t
GetTimeSyncPeriod	core/thread/mle_tlvs.hpp	/^    uint16_t GetTimeSyncPeriod(void) const { return BigEndian::HostSwap16(mTimeSyncPeriod); }$/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:uint16_t
GetTimeSyncPeriod	core/thread/time_sync_service.hpp	/^    uint16_t GetTimeSyncPeriod(void) const { return mTimeSyncPeriod; }$/;"	f	class:ot::TimeSync	typeref:typename:uint16_t
GetTimeSyncSeq	core/common/message.hpp	/^    uint8_t GetTimeSyncSeq(void) const { return GetMetadata().mTimeSyncSeq; }$/;"	f	class:ot::Message	typeref:typename:uint8_t
GetTimeSyncSeq	core/thread/mesh_forwarder.hpp	/^    uint8_t GetTimeSyncSeq(void) const { return mTimeSyncSeq; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:uint8_t
GetTimeSyncSeq	core/thread/time_sync_service.hpp	/^    uint8_t GetTimeSyncSeq(void) const { return mTimeSyncSeq; }$/;"	f	class:ot::TimeSync	typeref:typename:uint8_t
GetTimeout	core/common/settings.hpp	/^        uint32_t GetTimeout(void) const { return LittleEndian::HostSwap32(mTimeout); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:uint32_t
GetTimeout	core/thread/address_resolver.hpp	/^        uint16_t GetTimeout(void) const { return mInfo.mOther.mTimeout; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:uint16_t
GetTimeout	core/thread/child.hpp	/^    uint32_t GetTimeout(void) const { return mTimeout; }$/;"	f	class:ot::Child	typeref:typename:uint32_t
GetTimeout	core/thread/child_supervision.hpp	/^    uint16_t GetTimeout(void) const { return mTimeout; }$/;"	f	class:ot::SupervisionListener	typeref:typename:uint16_t
GetTimeout	core/thread/mle.hpp	/^    uint32_t GetTimeout(void) const { return mTimeout; }$/;"	f	class:ot::Mle::Mle	typeref:typename:uint32_t
GetTimeout	core/thread/mle_router.hpp	/^        uint8_t GetTimeout(void) const { return mTimeout; }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:uint8_t
GetTimeout	core/thread/network_diagnostic_tlvs.hpp	/^    uint32_t GetTimeout(void) const { return BigEndian::HostSwap32(mTimeout); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint32_t
GetTimeout	core/thread/network_diagnostic_tlvs.hpp	/^    uint8_t GetTimeout(void) const { return (GetTimeoutChildId() & kTimeoutMask) >> kTimeoutOffs/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:uint8_t
GetTimeoutChildId	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetTimeoutChildId(void) const { return BigEndian::HostSwap16(mTimeoutChildId); }$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:uint16_t
GetTimeoutFailureCount	core/net/srp_client.hpp	/^        uint8_t GetTimeoutFailureCount(void) const { return mTimeoutFailureCount; }$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:uint8_t
GetTimer	core/thread/network_data_publisher.hpp	/^    TimerMilli &GetTimer(void) { return mTimer; }$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:TimerMilli &
GetTimestamp	core/common/message.hpp	/^    TimeMilli GetTimestamp(void) const { return GetMetadata().mTimestamp; }$/;"	f	class:ot::Message	typeref:typename:TimeMilli
GetTimestamp	core/mac/mac_frame.hpp	/^    const uint64_t &GetTimestamp(void) const { return mInfo.mRxInfo.mTimestamp; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:const uint64_t &
GetTimestamp	core/meshcop/dataset_manager.cpp	/^const Timestamp *DatasetManager::GetTimestamp(void) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:const Timestamp *
GetTlv	core/thread/network_data.hpp	/^        const NetworkDataTlv *GetTlv(const uint8_t *aTlvs) const$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:const NetworkDataTlv *
GetTlvOffset	core/thread/network_data.hpp	/^        uint8_t GetTlvOffset(void) const { return mIteratorBuffer[kTlvPosition]; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:uint8_t
GetTlvs	core/thread/thread_tlvs.hpp	/^    uint8_t *GetTlvs(void) { return mTlvs; }$/;"	f	class:ot::ThreadNetworkDataTlv	typeref:typename:uint8_t *
GetTlvsEnd	core/meshcop/dataset.hpp	/^    Tlv *GetTlvsEnd(void) { return reinterpret_cast<Tlv *>(mTlvs + mLength); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Tlv *
GetTlvsEnd	core/meshcop/dataset.hpp	/^    const Tlv *GetTlvsEnd(void) const { return reinterpret_cast<const Tlv *>(mTlvs + mLength); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:const Tlv *
GetTlvsEnd	core/thread/network_data.hpp	/^    NetworkDataTlv *GetTlvsEnd(void) { return AsNonConst(AsConst(this)->GetTlvsEnd()); }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:NetworkDataTlv *
GetTlvsEnd	core/thread/network_data.hpp	/^    const NetworkDataTlv *GetTlvsEnd(void) const { return reinterpret_cast<const NetworkDataTlv /;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const NetworkDataTlv *
GetTlvsStart	core/meshcop/dataset.hpp	/^    Tlv *GetTlvsStart(void) { return reinterpret_cast<Tlv *>(mTlvs); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Tlv *
GetTlvsStart	core/meshcop/dataset.hpp	/^    const Tlv *GetTlvsStart(void) const { return reinterpret_cast<const Tlv *>(mTlvs); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:const Tlv *
GetTlvsStart	core/thread/network_data.hpp	/^    NetworkDataTlv *GetTlvsStart(void) { return AsNonConst(AsConst(this)->GetTlvsStart()); }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:NetworkDataTlv *
GetTlvsStart	core/thread/network_data.hpp	/^    const NetworkDataTlv *GetTlvsStart(void) const { return reinterpret_cast<const NetworkDataTl/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:const NetworkDataTlv *
GetToken	core/coap/coap_message.hpp	/^    const uint8_t *GetToken(void) const { return GetHelpData().mHeader.mToken; }$/;"	f	class:ot::Coap::Message	typeref:typename:const uint8_t *
GetToken	core/coap/coap_message.hpp	/^    uint8_t *GetToken(void) { return GetHelpData().mHeader.mToken; }$/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t *
GetTokenLength	core/coap/coap_message.hpp	/^    uint8_t GetTokenLength(void) const$/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t
GetTotalBufferCount	core/common/message.cpp	/^uint16_t MessagePool::GetTotalBufferCount(void) const$/;"	f	class:ot::MessagePool	typeref:typename:uint16_t
GetTotalLength	core/net/ip4_types.hpp	/^    uint16_t GetTotalLength(void) const { return BigEndian::HostSwap16(mTotalLength); }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint16_t
GetTrafficClass	core/net/ip6_headers.hpp	/^    uint8_t GetTrafficClass(void) const$/;"	f	class:ot::Ip6::Header	typeref:typename:uint8_t
GetTransaction	posix/platform/resolver.cpp	/^Resolver::Transaction *Resolver::GetTransaction(int aFd)$/;"	f	class:ot::Posix::Resolver	typeref:typename:Resolver::Transaction *
GetTransaction	posix/platform/resolver.cpp	/^Resolver::Transaction *Resolver::GetTransaction(otPlatDnsUpstreamQuery *aThreadTxn)$/;"	f	class:ot::Posix::Resolver	typeref:typename:Resolver::Transaction *
GetTransactionId	core/net/dhcp6.hpp	/^    const TransactionId &GetTransactionId(void) const { return mTransactionId; }$/;"	f	class:ot::Dhcp6::Header	typeref:typename:const TransactionId &
GetTransmitBuffer	core/radio/radio.hpp	/^inline Mac::TxFrame &Radio::GetTransmitBuffer(void)$/;"	f	class:ot::Radio	typeref:typename:Mac::TxFrame &
GetTransmitFrame	core/mac/link_raw.hpp	/^    TxFrame &GetTransmitFrame(void) { return mSubMac.GetTransmitFrame(); }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:TxFrame &
GetTransmitFrame	core/mac/sub_mac.hpp	/^    TxFrame &GetTransmitFrame(void) { return mTransmitFrame; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:TxFrame &
GetTransmitFrame	core/radio/trel_link.hpp	/^    Mac::TxFrame &GetTransmitFrame(void) { return mTxFrame; }$/;"	f	class:ot::Trel::Link	typeref:typename:Mac::TxFrame &
GetTransmitFrame	lib/spinel/radio_spinel.hpp	/^    otRadioFrame &GetTransmitFrame(void) { return mTxRadioFrame; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otRadioFrame &
GetTransmitPower	core/radio/max_power_table.hpp	/^    int8_t GetTransmitPower(uint8_t aChannel) const { return mPowerTable[aChannel - Radio::kChan/;"	f	class:ot::MaxPowerTable	typeref:typename:int8_t
GetTransmitPower	core/radio/radio.hpp	/^inline Error Radio::GetTransmitPower(int8_t &) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
GetTransmitPower	core/radio/radio.hpp	/^inline Error Radio::GetTransmitPower(int8_t &aPower) { return otPlatRadioGetTransmitPower(GetIns/;"	f	class:ot::Radio	typeref:typename:Error
GetTransmitPower	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetTransmitPower(int8_t &aPower)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetTransmitRetries	core/mac/mac_links.hpp	/^    uint8_t GetTransmitRetries(void) const$/;"	f	class:ot::Mac::Links	typeref:typename:uint8_t
GetTransmitRetries	core/mac/sub_mac.hpp	/^    uint8_t GetTransmitRetries(void) const { return mTransmitRetries; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:uint8_t
GetTransmitTimestampFraction	core/net/sntp_client.hpp	/^        uint32_t GetTransmitTimestampFraction(void) const { return BigEndian::HostSwap32(mTransm/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetTransmitTimestampSeconds	core/net/sntp_client.hpp	/^        uint32_t GetTransmitTimestampSeconds(void) const { return BigEndian::HostSwap32(mTransmi/;"	f	class:ot::Sntp::Client::Header	typeref:typename:uint32_t
GetTransportProto	core/net/dns_client.hpp	/^        TransportProto GetTransportProto(void) const { return static_cast<TransportProto>(mTrans/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:TransportProto
GetTrel	core/mac/mac_types.hpp	/^    uint32_t GetTrel(void) const { return mTrelCounter; }$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:uint32_t
GetTrelMacFrameCounter	core/thread/key_manager.hpp	/^    uint32_t GetTrelMacFrameCounter(void) const { return mMacFrameCounters.GetTrel(); }$/;"	f	class:ot::KeyManager	typeref:typename:uint32_t
GetTtl	core/net/dns_types.hpp	/^    uint32_t GetTtl(void) const { return BigEndian::HostSwap32(mTtl); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:uint32_t
GetTtl	core/net/ip4_types.hpp	/^    uint8_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Ip4::Header	typeref:typename:uint8_t
GetTtl	core/net/mdns.hpp	/^            uint32_t GetTtl(void) const { return mRecord.GetTtl(); }$/;"	f	struct:ot::Dns::Multicast::Core::AddrCache::AddrEntry	typeref:typename:uint32_t
GetTtl	core/net/mdns.hpp	/^        uint32_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:uint32_t
GetTtl	core/net/mdns.hpp	/^        uint32_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:uint32_t
GetTtl	core/net/srp_client.hpp	/^    uint32_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Srp::Client	typeref:typename:uint32_t
GetTtl	core/net/srp_server.hpp	/^        uint32_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:uint32_t
GetTtl	core/net/srp_server.hpp	/^        uint32_t GetTtl(void) const { return mTtl; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint32_t
GetTtlByteAt	core/net/dns_types.hpp	/^    uint8_t  GetTtlByteAt(uint8_t aIndex) const { return reinterpret_cast<const uint8_t *>(&mTtl/;"	f	class:ot::Dns::OptRecord	typeref:typename:uint8_t
GetTtlByteAt	core/net/dns_types.hpp	/^    uint8_t &GetTtlByteAt(uint8_t aIndex) { return reinterpret_cast<uint8_t *>(&mTtl)[aIndex]; }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:uint8_t &
GetTtlConfig	core/net/srp_server.hpp	/^        const TtlConfig         &GetTtlConfig(void) const { return mTtlConfig; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:const TtlConfig &
GetTtlConfig	core/net/srp_server.hpp	/^    void GetTtlConfig(TtlConfig &aTtlConfig) const { aTtlConfig = mTtlConfig; }$/;"	f	class:ot::Srp::Server	typeref:typename:void
GetTwoWayLinkQuality	core/thread/router.cpp	/^LinkQuality Router::GetTwoWayLinkQuality(void) const { return Min(GetLinkQualityIn(), GetLinkQua/;"	f	class:ot::Router	typeref:typename:LinkQuality
GetTxFrame	core/mac/mac_links.cpp	/^TxFrame &TxFrames::GetTxFrame(RadioType aRadioType)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:TxFrame &
GetTxFrame	core/mac/mac_links.cpp	/^TxFrame &TxFrames::GetTxFrame(RadioTypes aRadioTypes)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:TxFrame &
GetTxFrames	core/mac/mac_links.hpp	/^    TxFrames &GetTxFrames(void) { return mTxFrames; }$/;"	f	class:ot::Mac::Links	typeref:typename:TxFrames &
GetTxRadioEndUs	lib/spinel/radio_spinel.hpp	/^    uint64_t GetTxRadioEndUs(void) const { return mTxRadioEndUs; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:uint64_t
GetTxSuccess	core/common/message.hpp	/^    bool GetTxSuccess(void) const { return GetMetadata().mTxSuccess; }$/;"	f	class:ot::Message	typeref:typename:bool
GetTxtBuffer	core/utils/srp_client_buffers.hpp	/^        uint8_t *GetTxtBuffer(uint16_t &aSize)$/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:uint8_t *
GetTxtData	core/net/dns_types.hpp	/^        const char *GetTxtData(void) const { return reinterpret_cast<const char *>(mPtr); }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:const char *
GetTxtData	core/net/srp_server.hpp	/^        const uint8_t *GetTxtData(void) const { return mTxtData.GetBytes(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:const uint8_t *
GetTxtData	core/radio/trel_interface.hpp	/^            const uint8_t       *GetTxtData(void) const { return mTxtData; }$/;"	f	class:ot::Trel::Interface::Peer::Info	typeref:typename:const uint8_t *
GetTxtDataEnd	core/net/dns_types.hpp	/^        const char *GetTxtDataEnd(void) const { return GetTxtData() + GetTxtDataLength(); }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:const char *
GetTxtDataLength	core/net/dns_types.hpp	/^        uint16_t    GetTxtDataLength(void) const { return mData[kIndexTxtLength]; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:uint16_t
GetTxtDataLength	core/net/srp_server.hpp	/^        uint16_t GetTxtDataLength(void) const { return mTxtData.GetLength(); }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint16_t
GetTxtDataPosition	core/net/dns_types.hpp	/^        uint16_t    GetTxtDataPosition(void) const { return mData[kIndexTxtPosition]; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:uint16_t
GetTxtEntries	core/net/srp_client.hpp	/^        const Dns::TxtEntry *GetTxtEntries(void) const { return AsCoreTypePtr(mTxtEntries); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:const Dns::TxtEntry *
GetTxtLength	core/radio/trel_interface.hpp	/^            uint16_t             GetTxtLength(void) const { return mTxtLength; }$/;"	f	class:ot::Trel::Interface::Peer::Info	typeref:typename:uint16_t
GetType	core/border_router/routing_manager.hpp	/^            Type                 GetType(void) const { return static_cast<Type>(mData2); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:Type
GetType	core/coap/coap_message.hpp	/^    uint8_t GetType(void) const { return (GetHelpData().mHeader.mVersionTypeToken & kTypeMask) >/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t
GetType	core/common/appender.hpp	/^    Type GetType(void) const { return mType; }$/;"	f	class:ot::Appender	typeref:typename:Type
GetType	core/common/message.hpp	/^    Type GetType(void) const { return static_cast<Type>(GetMetadata().mType); }$/;"	f	class:ot::Message	typeref:typename:Type
GetType	core/common/tlvs.hpp	/^    uint8_t GetType(void) const { return mType; }$/;"	f	class:ot::Tlv	typeref:typename:uint8_t
GetType	core/mac/mac_frame.hpp	/^    uint8_t GetType(void) const { return GetPsdu()[0] & kFcfFrameTypeMask; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
GetType	core/mac/mac_types.hpp	/^    Type GetType(void) const { return mType; }$/;"	f	class:ot::Mac::Address	typeref:typename:Type
GetType	core/meshcop/meshcop_tlvs.hpp	/^    MeshCoP::Tlv::Type GetType(void) const { return static_cast<MeshCoP::Tlv::Type>(ot::Extended/;"	f	class:ot::MeshCoP::ExtendedTlv	typeref:typename:MeshCoP::Tlv::Type
GetType	core/meshcop/meshcop_tlvs.hpp	/^    Type GetType(void) const { return static_cast<Type>(ot::Tlv::GetType()); }$/;"	f	class:ot::MeshCoP::Tlv	typeref:typename:Type
GetType	core/net/dhcp6.hpp	/^    Type GetType(void) const { return mType; }$/;"	f	class:ot::Dhcp6::Header	typeref:typename:Type
GetType	core/net/dns_dso.hpp	/^        Type GetType(void) const { return BigEndian::HostSwap16(mType); }$/;"	f	class:ot::Dns::Dso::Tlv	typeref:typename:Type
GetType	core/net/dns_types.hpp	/^    Type GetType(void) const { return static_cast<Type>((mFlags[0] & kQrFlagMask) >> kQrFlagOffs/;"	f	class:ot::Dns::Header	typeref:typename:Type
GetType	core/net/dns_types.hpp	/^    uint16_t GetType(void) const { return BigEndian::HostSwap16(mType); }$/;"	f	class:ot::Dns::Question	typeref:typename:uint16_t
GetType	core/net/dns_types.hpp	/^    uint16_t GetType(void) const { return BigEndian::HostSwap16(mType); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:uint16_t
GetType	core/net/icmp6.hpp	/^        Type GetType(void) const { return static_cast<Type>(mType); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:Type
GetType	core/net/ip4_types.hpp	/^        uint8_t GetType(void) const { return mType; }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:uint8_t
GetType	core/net/ip6_headers.hpp	/^    uint8_t GetType(void) const { return mType; }$/;"	f	class:ot::Ip6::Option	typeref:typename:uint8_t
GetType	core/net/mdns.hpp	/^        Type          GetType(void) const { return mType; }$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:Type
GetType	core/net/nd6.hpp	/^        Icmp::Header::Type GetType(void) const { return static_cast<Icmp::Header::Type>(mType); /;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:Icmp::Header::Type
GetType	core/net/nd6.hpp	/^    uint8_t GetType(void) const { return mType; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:uint8_t
GetType	core/radio/trel_packet.hpp	/^    Type GetType(void) const { return static_cast<Type>(mControl & kTypeMask); }$/;"	f	class:ot::Trel::Header	typeref:typename:Type
GetType	core/thread/mle_tlvs.hpp	/^    Type GetType(void) const { return static_cast<Type>(ot::Tlv::GetType()); }$/;"	f	class:ot::Mle::Tlv	typeref:typename:Type
GetType	core/thread/network_data_publisher.hpp	/^            Type                GetType(void) const { return mType; }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:Type
GetType	core/thread/network_data_publisher.hpp	/^        Type GetType(void) const { return mInfo.GetType(); }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:Type
GetType	core/thread/network_data_tlvs.hpp	/^    Type GetType(void) const { return static_cast<Type>(mType >> kTypeOffset); }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:Type
GetType	core/thread/network_diagnostic_tlvs.hpp	/^    Type GetType(void) const { return static_cast<Type>(ot::Tlv::GetType()); }$/;"	f	class:ot::NetworkDiagnostic::Tlv	typeref:typename:Type
GetType	core/thread/thread_tlvs.hpp	/^    Type GetType(void) const { return static_cast<Type>(ot::Tlv::GetType()); }$/;"	f	class:ot::ThreadTlv	typeref:typename:Type
GetTypeCovered	core/net/dns_types.hpp	/^    uint16_t GetTypeCovered(void) const { return BigEndian::HostSwap16(mTypeCovered); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:uint16_t
GetTypeIds	core/thread/link_metrics_tlvs.hpp	/^    uint8_t *GetTypeIds(void) { return mTypeIds; }$/;"	f	class:ot::LinkMetrics::EnhAckConfigSubTlv	typeref:typename:uint8_t *
GetTypeIds	core/thread/link_metrics_tlvs.hpp	/^    uint8_t *GetTypeIds(void) { return mTypeIds; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:uint8_t *
GetTypicalRssForLinkQuality	core/thread/link_quality.cpp	/^int8_t GetTypicalRssForLinkQuality(int8_t aNoiseFloor, LinkQuality aLinkQuality)$/;"	f	namespace:ot	typeref:typename:int8_t
GetUdpHeader	core/net/ip6.hpp	/^    const Udp::Header &GetUdpHeader(void) const { return mHeader.mUdp; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:const Udp::Header &
GetUdpPayloadSize	core/net/dns_types.hpp	/^    uint16_t GetUdpPayloadSize(void) const { return GetClass(); }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:uint16_t
GetUdpPort	core/coap/coap_secure.hpp	/^    uint16_t GetUdpPort(void) const { return mDtls.GetUdpPort(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:uint16_t
GetUdpPort	core/meshcop/border_agent.cpp	/^uint16_t BorderAgent::GetUdpPort(void) const { return Get<Tmf::SecureAgent>().GetUdpPort(); }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:uint16_t
GetUdpPort	core/meshcop/secure_transport.cpp	/^uint16_t SecureTransport::GetUdpPort(void) const { return mSocket.GetSockName().GetPort(); }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:uint16_t
GetUdpProxyPort	core/meshcop/border_agent.hpp	/^    uint16_t GetUdpProxyPort(void) const { return mUdpProxyPort; }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:uint16_t
GetUdpSockets	core/net/udp6.hpp	/^    SocketHandle *GetUdpSockets(void) { return mSockets.GetHead(); }$/;"	f	class:ot::Ip6::Udp	typeref:typename:SocketHandle *
GetUint16	core/common/random.hpp	/^inline uint16_t GetUint16(void) { return static_cast<uint16_t>(GetUint32() & 0xffff); }$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint16_t
GetUint16InRange	core/common/random.cpp	/^uint16_t GetUint16InRange(uint16_t aMin, uint16_t aMax)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint16_t
GetUint32	core/common/random.hpp	/^inline uint32_t GetUint32(void) { return Manager::NonCryptoGetUint32(); }$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint32_t
GetUint32InRange	core/common/random.cpp	/^uint32_t GetUint32InRange(uint32_t aMin, uint32_t aMax)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint32_t
GetUint8	core/common/random.hpp	/^inline uint8_t GetUint8(void) { return static_cast<uint8_t>(GetUint32() & 0xff); }$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint8_t
GetUint8InRange	core/common/random.cpp	/^uint8_t GetUint8InRange(uint8_t aMin, uint8_t aMax)$/;"	f	namespace:ot::Random::NonCrypto	typeref:typename:uint8_t
GetUlaPrefix	core/border_router/routing_manager.hpp	/^        static const Ip6::Prefix &GetUlaPrefix(void) { return AsCoreType(&kUlaPrefix); }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:const Ip6::Prefix &
GetUnallocatedId	core/thread/network_data_leader_ftd.cpp	/^Error Leader::ContextIds::GetUnallocatedId(uint8_t &aId)$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:Error
GetUncertainty	core/mac/mac_types.hpp	/^    uint8_t GetUncertainty(void) const { return mUncertainty; }$/;"	f	class:ot::Mac::CslAccuracy	typeref:typename:uint8_t
GetUncertaintyInMicrosec	core/mac/mac_types.hpp	/^    uint16_t GetUncertaintyInMicrosec(void) const { return static_cast<uint16_t>(mUncertainty) */;"	f	class:ot::Mac::CslAccuracy	typeref:typename:uint16_t
GetUnicastAddresses	core/net/netif.hpp	/^    LinkedList<UnicastAddress> &GetUnicastAddresses(void) { return mUnicastAddresses; }$/;"	f	class:ot::Ip6::Netif	typeref:typename:LinkedList<UnicastAddress> &
GetUnicastAddresses	core/net/netif.hpp	/^    const LinkedList<UnicastAddress> &GetUnicastAddresses(void) const { return mUnicastAddresses/;"	f	class:ot::Ip6::Netif	typeref:typename:const LinkedList<UnicastAddress> &
GetUnixEra	core/net/sntp_client.hpp	/^    uint32_t GetUnixEra(void) const { return mUnixEra; }$/;"	f	class:ot::Sntp::Client	typeref:typename:uint32_t
GetUnsecurePorts	core/net/ip6_filter.hpp	/^    const uint16_t *GetUnsecurePorts(uint8_t &aNumEntries) const$/;"	f	class:ot::Ip6::Filter	typeref:typename:const uint16_t *
GetUnusedJoinerEntry	core/meshcop/commissioner.cpp	/^Commissioner::Joiner *Commissioner::GetUnusedJoinerEntry(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Commissioner::Joiner *
GetUpdateRecordCount	core/net/dns_types.hpp	/^    uint16_t GetUpdateRecordCount(void) const { return GetAuthorityRecordCount(); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:uint16_t
GetUpdateTime	core/meshcop/dataset.hpp	/^    TimeMilli GetUpdateTime(void) const { return mUpdateTime; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:TimeMilli
GetUpdateTime	core/thread/network_data_publisher.hpp	/^        const TimeMilli &GetUpdateTime(void) const { return mUpdateTime; }$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:const TimeMilli &
GetUpdatedBufPtr	lib/spinel/spinel_buffer.cpp	/^uint8_t *Buffer::GetUpdatedBufPtr(uint8_t *aBufPtr, uint16_t aOffset, Direction aDirection) cons/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint8_t *
GetUptime	core/common/uptime.cpp	/^uint64_t Uptime::GetUptime(void) const$/;"	f	class:ot::Uptime	typeref:typename:uint64_t
GetUptime	core/common/uptime.cpp	/^void Uptime::GetUptime(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Uptime	typeref:typename:void
GetUrgentPointer	core/net/tcp6.hpp	/^        uint16_t GetUrgentPointer(void) const { return BigEndian::HostSwap16(mUrgentPointer); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetUriPath	core/coap/coap.hpp	/^    const char *GetUriPath(void) const { return mUriPath; }$/;"	f	class:ot::Coap::Resource	typeref:typename:const char *
GetUriPath	core/coap/coap.hpp	/^    const char *GetUriPath(void) const { return mUriPath; }$/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:const char *
GetUseFlags	core/net/dns_types.hpp	/^    UseFlags GetUseFlags(void) const { return static_cast<UseFlags>(mFlags[0] & kUseFlagsMask); /;"	f	class:ot::Dns::KeyRecord	typeref:typename:UseFlags
GetUseShortLeaseOption	core/net/srp_client.hpp	/^    bool GetUseShortLeaseOption(void) const { return mUseShortLeaseOption; }$/;"	f	class:ot::Srp::Client	typeref:typename:bool
GetValidLifetime	core/border_router/routing_manager.hpp	/^        uint32_t           GetValidLifetime(void) const { return mValidLifetime; }$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:uint32_t
GetValidLifetime	core/net/dhcp6.hpp	/^    uint32_t GetValidLifetime(void) const { return BigEndian::HostSwap32(mValidLifetime); }$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:uint32_t
GetValidLifetime	core/net/nd6.hpp	/^    uint32_t GetValidLifetime(void) const { return BigEndian::HostSwap32(mValidLifetime); }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:uint32_t
GetValue	core/common/time.hpp	/^    uint32_t GetValue(void) const { return mValue; }$/;"	f	class:ot::Time	typeref:typename:uint32_t
GetValue	core/common/tlvs.cpp	/^const uint8_t *Tlv::GetValue(void) const$/;"	f	class:ot::Tlv	typeref:typename:const uint8_t *
GetValue	core/common/tlvs.cpp	/^uint8_t *Tlv::GetValue(void)$/;"	f	class:ot::Tlv	typeref:typename:uint8_t *
GetValue	core/meshcop/meshcop.hpp	/^    uint64_t GetValue(void) const { return mValue; }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:uint64_t
GetValue	core/net/checksum.hpp	/^    uint16_t GetValue(void) const { return mValue; }$/;"	f	class:ot::Checksum	typeref:typename:uint16_t
GetValue	core/thread/network_data_tlvs.hpp	/^    const uint8_t *GetValue(void) const { return reinterpret_cast<const uint8_t *>(this) + sizeo/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:const uint8_t *
GetValue	core/thread/network_data_tlvs.hpp	/^    uint8_t *GetValue(void) { return reinterpret_cast<uint8_t *>(this) + sizeof(NetworkDataTlv);/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:uint8_t *
GetValue	lib/url/url.cpp	/^const char *Url::GetValue(const char *aName, const char *aLastValue) const$/;"	f	class:ot::Url::Url	typeref:typename:const char *
GetValueLength	core/thread/link_metrics_types.hpp	/^    static uint8_t GetValueLength(uint8_t aTypeId)$/;"	f	class:ot::LinkMetrics::TypeId	typeref:typename:uint8_t
GetVendorAppUrl	core/thread/network_diagnostic.hpp	/^    const char *GetVendorAppUrl(void) const { return kVendorAppUrl; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorAppUrl	core/thread/network_diagnostic.hpp	/^    const char *GetVendorAppUrl(void) const { return mVendorAppUrl; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorModel	core/thread/network_diagnostic.hpp	/^    const char *GetVendorModel(void) const { return kVendorModel; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorModel	core/thread/network_diagnostic.hpp	/^    const char *GetVendorModel(void) const { return mVendorModel; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorName	core/thread/network_diagnostic.hpp	/^    const char *GetVendorName(void) const { return kVendorName; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorName	core/thread/network_diagnostic.hpp	/^    const char *GetVendorName(void) const { return mVendorName; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorOui	core/mac/mac_frame.hpp	/^    uint32_t GetVendorOui(void) const { return LittleEndian::ReadUint24(mOui); }$/;"	f	class:ot::Mac::VendorIeHeader	typeref:typename:uint32_t
GetVendorSwVersion	core/thread/network_diagnostic.hpp	/^    const char *GetVendorSwVersion(void) const { return kVendorSwVersion; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVendorSwVersion	core/thread/network_diagnostic.hpp	/^    const char *GetVendorSwVersion(void) const { return mVendorSwVersion; }$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:const char *
GetVerionTrafficClassFlow	core/net/ip6_headers.hpp	/^    uint32_t GetVerionTrafficClassFlow(void) const { return BigEndian::HostSwap32(mVerTcFlow.m32/;"	f	class:ot::Ip6::Header	typeref:typename:uint32_t
GetVersion	core/coap/coap_message.hpp	/^    uint8_t GetVersion(void) const$/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t
GetVersion	core/common/settings.hpp	/^        uint16_t GetVersion(void) const { return LittleEndian::HostSwap16(mVersion); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:uint16_t
GetVersion	core/common/settings.hpp	/^        uint16_t GetVersion(void) const { return LittleEndian::HostSwap16(mVersion); }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:uint16_t
GetVersion	core/common/settings.hpp	/^        uint16_t GetVersion(void) const { return LittleEndian::HostSwap16(mVersion); }$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:uint16_t
GetVersion	core/mac/mac_frame.hpp	/^    uint16_t GetVersion(void) const { return GetFrameControlField() & kFcfFrameVersionMask; }$/;"	f	class:ot::Mac::Frame	typeref:typename:uint16_t
GetVersion	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetVersion(void) const { return mFlags >> kVersionOffset; }$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:uint8_t
GetVersion	core/meshcop/meshcop_tlvs.hpp	/^    uint8_t GetVersion(void) const { return mFlags >> kVersionOffset; }$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:uint8_t
GetVersion	core/net/dns_types.hpp	/^    uint8_t GetVersion(void) const { return GetTtlByteAt(kVersionByteIndex); }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:uint8_t
GetVersion	core/thread/neighbor.hpp	/^    uint16_t GetVersion(void) const { return mVersion; }$/;"	f	class:ot::Neighbor	typeref:typename:uint16_t
GetVersion	core/thread/network_data_leader.hpp	/^    uint8_t GetVersion(Type aType) const { return (aType == kFullSet) ? mVersion : mStableVersio/;"	f	class:ot::NetworkData::Leader	typeref:typename:uint8_t
GetVersion	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetVersion(void) const { return BigEndian::HostSwap16(mVersion); }$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:uint16_t
GetVersion	core/thread/network_diagnostic_tlvs.hpp	/^    uint16_t GetVersion(void) const { return BigEndian::HostSwap16(mVersion); }$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:uint16_t
GetVersion	lib/spinel/radio_spinel.hpp	/^    const char *GetVersion(void) const { return mSpinelDriver->GetVersion(); }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:const char *
GetVersion	lib/spinel/spinel_driver.hpp	/^    const char *GetVersion(void) const { return mVersion; }$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:const char *
GetVersionString	core/radio/radio.hpp	/^inline const char *Radio::GetVersionString(void) { return otPlatRadioGetVersionString(GetInstanc/;"	f	class:ot::Radio	typeref:typename:const char *
GetWeight	core/net/dns_types.hpp	/^    uint16_t GetWeight(void) const { return BigEndian::HostSwap16(mWeight); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:uint16_t
GetWeight	core/net/srp_client.hpp	/^        uint16_t GetWeight(void) const { return mWeight; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:uint16_t
GetWeight	core/net/srp_server.hpp	/^        uint16_t GetWeight(void) const { return mWeight; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:uint16_t
GetWeighting	core/thread/mle_types.hpp	/^    uint8_t GetWeighting(void) const { return mWeighting; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:uint8_t
GetWindow	core/net/tcp6.hpp	/^        uint16_t GetWindow(void) const { return BigEndian::HostSwap16(mWindow); }$/;"	f	class:ot::Ip6::Tcp::Header	typeref:typename:uint16_t
GetWindow	core/utils/jam_detector.hpp	/^    uint8_t GetWindow(void) const { return mWindow; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:uint8_t
GetWithParam	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::GetWithParam(spinel_prop_key_t aKey,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
GetWrappedResponseQueueIndex	ncp/ncp_base.cpp	/^uint8_t NcpBase::GetWrappedResponseQueueIndex(uint8_t aPosition)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:uint8_t
GetXtalThreshold	core/thread/mle_tlvs.hpp	/^    uint16_t GetXtalThreshold(void) const { return BigEndian::HostSwap16(mXtalThreshold); }$/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:uint16_t
GetXtalThreshold	core/thread/time_sync_service.hpp	/^    uint16_t GetXtalThreshold(void) const { return mXtalThreshold; }$/;"	f	class:ot::TimeSync	typeref:typename:uint16_t
GetZoneRecordCount	core/net/dns_types.hpp	/^    uint16_t GetZoneRecordCount(void) const { return GetQuestionCount(); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:uint16_t
GrantKeyLease	core/net/srp_server.cpp	/^uint32_t Server::LeaseConfig::GrantKeyLease(uint32_t aKeyLease) const$/;"	f	class:ot::Srp::Server::LeaseConfig	typeref:typename:uint32_t
GrantLease	core/net/srp_server.cpp	/^uint32_t Server::LeaseConfig::GrantLease(uint32_t aLease) const$/;"	f	class:ot::Srp::Server::LeaseConfig	typeref:typename:uint32_t
GrantTtl	core/net/srp_server.cpp	/^uint32_t Server::TtlConfig::GrantTtl(uint32_t aLease, uint32_t aTtl) const$/;"	f	class:ot::Srp::Server::TtlConfig	typeref:typename:uint32_t
GrowRetryWaitInterval	core/net/srp_client.cpp	/^void Client::GrowRetryWaitInterval(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleAck	core/radio/trel_link.cpp	/^void Link::HandleAck(Packet &aAckPacket)$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleActiveDatasetChanged	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleActiveDatasetChanged(void)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleActiveScanResult	cli/cli.cpp	/^void Interpreter::HandleActiveScanResult(otActiveScanResult *aResult)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleActiveScanResult	cli/cli.cpp	/^void Interpreter::HandleActiveScanResult(otActiveScanResult *aResult, void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleActiveScanResult	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleActiveScanResult(otActiveScanResult *aResult)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleActiveScanResult_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleActiveScanResult_Jump(otActiveScanResult *aResult, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleAddressResult	cli/cli_mdns.cpp	/^void Mdns::HandleAddressResult(const otMdnsAddressResult &aResult, IpAddressType aType)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleAddressSolicitResponse	core/thread/mle_router.cpp	/^void MleRouter::HandleAddressSolicitResponse(Coap::Message          *aMessage,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleAddressSolicitResponse	core/thread/mle_router.cpp	/^void MleRouter::HandleAddressSolicitResponse(void                *aContext,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleAdvertiseTrickleTimer	core/thread/mle_router.cpp	/^void MleRouter::HandleAdvertiseTrickleTimer(TrickleTimer &aTimer)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleAdvertiseTrickleTimer	core/thread/mle_router.cpp	/^void MleRouter::HandleAdvertiseTrickleTimer(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleAdvertisement	core/thread/mle.cpp	/^void Mle::HandleAdvertisement(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleAdvertisement	core/thread/mle_router.cpp	/^Error MleRouter::HandleAdvertisement(RxInfo &aRxInfo, uint16_t aSourceAddress, const LeaderData /;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
HandleAnnounce	core/thread/mle.cpp	/^void Mle::HandleAnnounce(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleAnswerResponse	core/thread/network_diagnostic.cpp	/^void Server::HandleAnswerResponse(Coap::Message          &aNextAnswer,$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
HandleAnswerResponse	core/thread/network_diagnostic.cpp	/^void Server::HandleAnswerResponse(void *aContext, otMessage *aMessage, const otMessageInfo *aMes/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
HandleAttachTimer	core/thread/mle.cpp	/^void Mle::HandleAttachTimer(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleBackboneMulticastListenerEvent	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::HandleBackboneMulticastListenerEvent(otBackboneRouterMulticastList/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
HandleBackboneMulticastListenerEvent	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::HandleBackboneMulticastListenerEvent(void                         /;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
HandleBackboneRouterPrimaryUpdate	core/backbone_router/bbr_local.cpp	/^void Local::HandleBackboneRouterPrimaryUpdate(Leader::State aState, const Config &aConfig)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
HandleBackboneRouterPrimaryUpdate	core/thread/dua_manager.cpp	/^void DuaManager::HandleBackboneRouterPrimaryUpdate(BackboneRouter::Leader::State aState,$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleBackboneRouterPrimaryUpdate	core/thread/mlr_manager.cpp	/^void MlrManager::HandleBackboneRouterPrimaryUpdate(BackboneRouter::Leader::State aState,$/;"	f	class:ot::MlrManager	typeref:typename:void
HandleBackboneStateChange	posix/platform/infra_if.cpp	/^void InfraNetif::HandleBackboneStateChange(otInstance *aInstance, otChangedFlags aFlags)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
HandleBleConnected	core/radio/ble_secure.cpp	/^void BleSecure::HandleBleConnected(uint16_t aConnectionId)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleBleDisconnected	core/radio/ble_secure.cpp	/^void BleSecure::HandleBleDisconnected(uint16_t aConnectionId)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleBleMtuUpdate	core/radio/ble_secure.cpp	/^Error BleSecure::HandleBleMtuUpdate(uint16_t aMtu)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
HandleBleReceive	core/radio/ble_secure.cpp	/^Error BleSecure::HandleBleReceive(uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
HandleBleSecureReceive	cli/cli_tcat.cpp	/^static void HandleBleSecureReceive(otInstance               *aInstance,$/;"	f	namespace:ot::Cli	typeref:typename:void	file:
HandleBlockReceive	core/coap/coap.hpp	/^    Error HandleBlockReceive(const uint8_t *aBlock,$/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:Error
HandleBlockTransmit	core/coap/coap.hpp	/^    Error HandleBlockTransmit(uint8_t *aBlock, uint32_t aPosition, uint16_t *aBlockLength, bool /;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:Error
HandleBorderAgentEphemeralKeyStateChange	cli/cli.cpp	/^void Interpreter::HandleBorderAgentEphemeralKeyStateChange(void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleBorderAgentEphemeralKeyStateChange	cli/cli.cpp	/^void Interpreter::HandleBorderAgentEphemeralKeyStateChange(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleBrowseResult	cli/cli_mdns.cpp	/^void Mdns::HandleBrowseResult(const otMdnsBrowseResult &aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleBrowseResult	cli/cli_mdns.cpp	/^void Mdns::HandleBrowseResult(otInstance *aInstance, const otMdnsBrowseResult *aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleCacheTask	core/net/mdns.cpp	/^void Core::HandleCacheTask(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleCacheTimer	core/net/mdns.cpp	/^void Core::HandleCacheTimer(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleCallback	cli/cli_joiner.cpp	/^void Joiner::HandleCallback(otError aError)$/;"	f	class:ot::Cli::Joiner	typeref:typename:void
HandleCallback	cli/cli_joiner.cpp	/^void Joiner::HandleCallback(otError aError, void *aContext) { static_cast<Joiner *>(aContext)->H/;"	f	class:ot::Cli::Joiner	typeref:typename:void
HandleCallback	cli/cli_srp_client.cpp	/^void SrpClient::HandleCallback(otError                    aError,$/;"	f	class:ot::Cli::SrpClient	typeref:typename:void
HandleChildDuaAddressEvent	core/thread/dua_manager.cpp	/^void DuaManager::HandleChildDuaAddressEvent(const Child &aChild, ChildDuaAddressEvent aEvent)$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleChildIdRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleChildIdRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleChildIdRequestTxDone	core/thread/mle.cpp	/^void Mle::HandleChildIdRequestTxDone(Message &aMessage)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleChildIdResponse	core/thread/mle.cpp	/^void Mle::HandleChildIdResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleChildModeChange	core/thread/indirect_sender.cpp	/^void IndirectSender::HandleChildModeChange(Child &aChild, Mle::DeviceMode aOldMode)$/;"	f	class:ot::IndirectSender	typeref:typename:void
HandleChildStart	core/thread/mle_router.cpp	/^void MleRouter::HandleChildStart(AttachMode aMode)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleChildUpdateRequest	core/thread/mle.cpp	/^void Mle::HandleChildUpdateRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleChildUpdateRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleChildUpdateRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleChildUpdateResponse	core/thread/mle.cpp	/^void Mle::HandleChildUpdateResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleChildUpdateResponse	core/thread/mle_router.cpp	/^void MleRouter::HandleChildUpdateResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleCoapResponse	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleCoapResponse(const ForwardContext &aForwardContext,$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleCoapResponse	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleCoapResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleCoapResponse	core/thread/network_data_notifier.cpp	/^void Notifier::HandleCoapResponse(Error aResult)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleCoapResponse	core/thread/network_data_notifier.cpp	/^void Notifier::HandleCoapResponse(void *aContext, otMessage *aMessage, const otMessageInfo *aMes/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleCommand	ncp/ncp_base.cpp	/^otError NcpBase::HandleCommand(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandleCommandPropertyInsertRemove	ncp/ncp_base.cpp	/^otError NcpBase::HandleCommandPropertyInsertRemove(uint8_t aHeader, spinel_prop_key_t aKey, unsi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandleCommandPropertySet	ncp/ncp_base.cpp	/^otError NcpBase::HandleCommandPropertySet(uint8_t aHeader, spinel_prop_key_t aKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandleCommissionerEnergyReport	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleCommissionerEnergyReport(uint32_t aChannelMask, const uint8_t *aEnergyData, /;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleCommissionerEnergyReport_Jump	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleCommissionerEnergyReport_Jump(uint32_t       aChannelMask,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleCommissionerPanIdConflict	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleCommissionerPanIdConflict(uint16_t aPanId, uint32_t aChannelMask)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleCommissionerPanIdConflict_Jump	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleCommissionerPanIdConflict_Jump(uint16_t aPanId, uint32_t aChannelMask, void /;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleConflict	core/net/mdns.cpp	/^void Core::HostEntry::HandleConflict(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
HandleConflict	core/net/mdns.cpp	/^void Core::ServiceEntry::HandleConflict(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
HandleConnected	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleConnected(bool aConnected)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleConnected	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleConnected(bool aConnected, void *aContext)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleConnected	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleConnected(bool aConnected)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleConnected	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleConnected(bool aConnected, void *aContext)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleConnected	core/net/dns_dso.cpp	/^void Dso::Connection::HandleConnected(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
HandleCslTimer	core/mac/sub_mac.cpp	/^void SubMac::HandleCslTimer(Timer &aTimer) { aTimer.Get<SubMac>().HandleCslTimer(); }$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleCslTimer	core/mac/sub_mac.cpp	/^void SubMac::HandleCslTimer(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleDadBackboneAnswer	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleDadBackboneAnswer(const Ip6::Address &aDua, const Ip6::InterfaceIdentifier &/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleDataPoll	core/mac/data_poll_handler.cpp	/^void DataPollHandler::HandleDataPoll(Mac::RxFrame &aFrame)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
HandleDataRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleDataRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleDataResponse	core/thread/mle.cpp	/^void Mle::HandleDataResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleDatagram	core/net/ip6.cpp	/^Error Ip6::HandleDatagram(OwnedPtr<Message> aMessagePtr, bool aIsReassembled)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
HandleDatagram	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::HandleDatagram(Message &aMessage, const Mac::Address &aMacSource)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
HandleDatagramFromStack	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleDatagramFromStack(otMessage *aMessage)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleDatagramFromStack	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleDatagramFromStack(otMessage *aMessage, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleDatasetUpdateDone	core/utils/channel_manager.cpp	/^void ChannelManager::HandleDatasetUpdateDone(Error aError)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
HandleDatasetUpdateDone	core/utils/channel_manager.cpp	/^void ChannelManager::HandleDatasetUpdateDone(Error aError, void *aContext)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
HandleDatasetUpdater	cli/cli_dataset.cpp	/^void Dataset::HandleDatasetUpdater(otError aError)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
HandleDatasetUpdater	cli/cli_dataset.cpp	/^void Dataset::HandleDatasetUpdater(otError aError, void *aContext)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
HandleDeferredAck	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleDeferredAck(Neighbor &aNeighbor, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleDelayTimer	core/meshcop/dataset_manager.cpp	/^void PendingDatasetManager::HandleDelayTimer(void)$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
HandleDelayedResponseTimer	core/thread/mle.cpp	/^void Mle::HandleDelayedResponseTimer(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleDetach	core/meshcop/dataset_manager.cpp	/^void DatasetManager::HandleDetach(void) { IgnoreError(Restore()); }$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
HandleDetachGracefullyResult	cli/cli.cpp	/^void Interpreter::HandleDetachGracefullyResult(void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDetachGracefullyResult	cli/cli.cpp	/^void Interpreter::HandleDetachGracefullyResult(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDetachGracefullyTimer	core/thread/mle.cpp	/^void Mle::HandleDetachGracefullyTimer(void) { Stop(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleDetachStart	core/thread/mle_router.cpp	/^void MleRouter::HandleDetachStart(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleDiagGetResponse	core/utils/mesh_diag.cpp	/^void MeshDiag::HandleDiagGetResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMessageIn/;"	f	class:ot::Utils::MeshDiag	typeref:typename:void
HandleDiagGetResponse	core/utils/mesh_diag.cpp	/^void MeshDiag::HandleDiagGetResponse(void                *aContext,$/;"	f	class:ot::Utils::MeshDiag	typeref:typename:void
HandleDiagnosticGetAnswer	core/utils/mesh_diag.cpp	/^bool MeshDiag::HandleDiagnosticGetAnswer(Coap::Message &aMessage, const Ip6::MessageInfo &aMessa/;"	f	class:ot::Utils::MeshDiag	typeref:typename:bool
HandleDiagnosticGetResponse	cli/cli.cpp	/^void Interpreter::HandleDiagnosticGetResponse(otError                 aError,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDiagnosticGetResponse	cli/cli.cpp	/^void Interpreter::HandleDiagnosticGetResponse(otError              aError,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDiagsReceiveDone	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleDiagsReceiveDone(Mac::RxFrame *aFrame, Error aError)$/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleDiagsTransmitDone	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleDiagsTransmitDone(Mac::TxFrame &aFrame, Error aError)$/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleDisconnected	core/net/dns_dso.cpp	/^void Dso::Connection::HandleDisconnected(DisconnectMode aMode)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
HandleDiscoverComplete	core/thread/discover_scanner.cpp	/^void DiscoverScanner::HandleDiscoverComplete(void)$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
HandleDiscoverDone	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::HandleDiscoverDone(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
HandleDiscoverNat64PrefixDone	core/border_router/routing_manager.hpp	/^    void HandleDiscoverNat64PrefixDone(const Ip6::Prefix &aPrefix) { mNat64PrefixManager.HandleD/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleDiscoverResult	core/meshcop/joiner.cpp	/^void Joiner::HandleDiscoverResult(Mle::DiscoverScanner::ScanResult *aResult)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleDiscoverResult	core/meshcop/joiner.cpp	/^void Joiner::HandleDiscoverResult(Mle::DiscoverScanner::ScanResult *aResult, void *aContext)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleDiscoveredHost	core/net/dnssd_server.cpp	/^void Server::HandleDiscoveredHost(const char *aHostFullName, const HostInfo &aHostInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
HandleDiscoveredPeerInfo	core/radio/trel_interface.cpp	/^void Interface::HandleDiscoveredPeerInfo(const Peer::Info &aInfo)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
HandleDiscoveredServiceInstance	core/net/dnssd_server.cpp	/^void Server::HandleDiscoveredServiceInstance(const char *aServiceFullName, const ServiceInstance/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
HandleDiscoveryRequest	cli/cli.cpp	/^void Interpreter::HandleDiscoveryRequest(const otThreadDiscoveryRequestInfo &aInfo)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDiscoveryRequest	cli/cli.cpp	/^void Interpreter::HandleDiscoveryRequest(const otThreadDiscoveryRequestInfo *aInfo, void *aConte/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleDiscoveryRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleDiscoveryRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleDiscoveryRequestFrameTxDone	core/thread/discover_scanner.cpp	/^void DiscoverScanner::HandleDiscoveryRequestFrameTxDone(Message &aMessage, Error aError)$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
HandleDiscoveryResponse	core/thread/discover_scanner.cpp	/^void DiscoverScanner::HandleDiscoveryResponse(Mle::RxInfo &aRxInfo) const$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
HandleDnsAddressResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsAddressResponse(otError aError, const otDnsAddressResponse *aResponse)$/;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnsAddressResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsAddressResponse(otError aError, const otDnsAddressResponse *aResponse, void */;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnsBrowseResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsBrowseResponse(otError aError, const otDnsBrowseResponse *aResponse)$/;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnsBrowseResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsBrowseResponse(otError aError, const otDnsBrowseResponse *aResponse, void *aC/;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnsServiceResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsServiceResponse(otError aError, const otDnsServiceResponse *aResponse)$/;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnsServiceResponse	cli/cli_dns.cpp	/^void Dns::HandleDnsServiceResponse(otError aError, const otDnsServiceResponse *aResponse, void */;"	f	class:ot::Cli::Dns	typeref:typename:void
HandleDnssdPlatformStateChange	core/net/srp_advertising_proxy.hpp	/^    void HandleDnssdPlatformStateChange(void) { UpdateState(); }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleDnssdServerStateChange	core/net/srp_server.cpp	/^void Server::HandleDnssdServerStateChange(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleDnssdServerUdpReceive	core/net/srp_server.cpp	/^Error Server::HandleDnssdServerUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInf/;"	f	class:ot::Srp::Server	typeref:typename:Error
HandleDomainPrefixUpdate	core/backbone_router/bbr_local.cpp	/^void Local::HandleDomainPrefixUpdate(DomainPrefixEvent aEvent)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
HandleDomainPrefixUpdate	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::HandleDomainPrefixUpdate(DomainPrefixEvent aEvent)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
HandleDomainPrefixUpdate	core/thread/dua_manager.cpp	/^void DuaManager::HandleDomainPrefixUpdate(BackboneRouter::DomainPrefixEvent aEvent)$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleDtlsAutoClose	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsAutoClose(void *aContext)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDtlsAutoClose	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsAutoClose(void)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDtlsConnected	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsConnected(bool aConnected) { mConnectedCallback.InvokeIfSet(aConnecte/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDtlsConnected	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsConnected(void *aContext, bool aConnected)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDtlsReceive	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsReceive(uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDtlsReceive	core/coap/coap_secure.cpp	/^void CoapSecure::HandleDtlsReceive(void *aContext, uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleDuaRegistration	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleDuaRegistration(const Coap::Message &aMessage, const Ip6::MessageInfo &aMess/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleDuaResponse	core/thread/dua_manager.cpp	/^void DuaManager::HandleDuaResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMessageInfo/;"	f	class:ot::DuaManager	typeref:typename:void
HandleDuaResponse	core/thread/dua_manager.cpp	/^void DuaManager::HandleDuaResponse(void                *aContext,$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleEchoRequest	core/net/icmp6.cpp	/^Error Icmp::HandleEchoRequest(Message &aRequestMessage, const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Icmp	typeref:typename:Error
HandleEnergyReport	cli/cli_commissioner.cpp	/^void Commissioner::HandleEnergyReport(uint32_t       aChannelMask,$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleEnergyReport	cli/cli_commissioner.cpp	/^void Commissioner::HandleEnergyReport(uint32_t aChannelMask, const uint8_t *aEnergyList, uint8_t/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleEnergyScanDone	core/mac/sub_mac.cpp	/^void SubMac::HandleEnergyScanDone(int8_t aMaxRssi)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleEnergyScanDone	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleEnergyScanDone(int8_t aMaxRssi) { Get<Mac::SubMac>().HandleEnergySc/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleEnergyScanResult	cli/cli.cpp	/^void Interpreter::HandleEnergyScanResult(otEnergyScanResult *aResult)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleEnergyScanResult	cli/cli.cpp	/^void Interpreter::HandleEnergyScanResult(otEnergyScanResult *aResult, void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleEnergyScanResult	core/utils/channel_monitor.cpp	/^void ChannelMonitor::HandleEnergyScanResult(Mac::EnergyScanResult *aResult)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:void
HandleEnergyScanResult	core/utils/channel_monitor.cpp	/^void ChannelMonitor::HandleEnergyScanResult(Mac::EnergyScanResult *aResult, void *aContext)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:void
HandleEnergyScanResult	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleEnergyScanResult(otEnergyScanResult *aResult)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleEnergyScanResult_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleEnergyScanResult_Jump(otEnergyScanResult *aResult, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleEnhAckIe	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::HandleEnhAckIe(otShortAddress             aShortAddress,$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
HandleEntryTask	core/net/mdns.cpp	/^void Core::HandleEntryTask(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleEntryTimer	core/net/mdns.cpp	/^void Core::HandleEntryTimer(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleEphemeralKeyTimeout	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleEphemeralKeyTimeout(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleError	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleError(otError aError, uint8_t *aBuf, uint16_t aBufLength)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleExpirationTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::HandleExpirationTimer(void) { RemoveExpiredEntries(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
HandleExtAddressChange	core/radio/trel_interface.cpp	/^void Interface::HandleExtAddressChange(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
HandleExtAddressChange	core/radio/trel_link.hpp	/^    void HandleExtAddressChange(void) { mInterface.HandleExtAddressChange(); }$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleExtPanIdChange	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::HandleExtPanIdChange(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
HandleExtPanIdChange	core/radio/trel_interface.cpp	/^void Interface::HandleExtPanIdChange(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
HandleExtendedBackboneAnswer	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleExtendedBackboneAnswer(const Ip6::Address             &aDua,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleExtensionHeaders	core/net/ip6.cpp	/^Error Ip6::HandleExtensionHeaders(OwnedPtr<Message> &aMessagePtr,$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
HandleForwardProgress	core/net/tcp6_ext.cpp	/^void TcpCircularSendBuffer::HandleForwardProgress(size_t aInSendBuffer)$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:void
HandleFragment	core/net/ip6.cpp	/^Error Ip6::HandleFragment(Message &aMessage)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
HandleFragment	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleFragment(FrameData            &aFrameData,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleFrame	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleFrame(otError aError)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleFrame	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleFrame(void *aContext, otError aError) { static_cast<NcpHdlc *>(aContext)->Ha/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleFrameAddedToNcpBuffer	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleFrameAddedToNcpBuffer(void                    *aContext,$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleFrameAddedToNcpBuffer	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleFrameAddedToNcpBuffer(void)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleFrameAddedToTxBuffer	ncp/ncp_spi.cpp	/^void NcpSpi::HandleFrameAddedToTxBuffer(void                    *aContext,$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
HandleFrameChangeDone	core/mac/data_poll_handler.cpp	/^inline void DataPollHandler::Callbacks::HandleFrameChangeDone(Child &aChild)$/;"	f	class:ot::DataPollHandler::Callbacks	typeref:typename:void
HandleFrameChangeDone	core/thread/indirect_sender.cpp	/^void IndirectSender::HandleFrameChangeDone(Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:void
HandleFrameRemovedFromNcpBuffer	ncp/ncp_base.cpp	/^void NcpBase::HandleFrameRemovedFromNcpBuffer(Spinel::Buffer::FrameTag aFrameTag)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleFrameRemovedFromNcpBuffer	ncp/ncp_base.cpp	/^void NcpBase::HandleFrameRemovedFromNcpBuffer(void                    *aContext,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleFrameRequest	core/mac/data_poll_handler.cpp	/^Mac::TxFrame *DataPollHandler::HandleFrameRequest(Mac::TxFrames &aTxFrames)$/;"	f	class:ot::DataPollHandler	typeref:typename:Mac::TxFrame *
HandleFrameRequest	core/thread/csl_tx_scheduler.cpp	/^Mac::TxFrame *CslTxScheduler::HandleFrameRequest(Mac::TxFrames &) { return nullptr; }$/;"	f	class:ot::CslTxScheduler	typeref:typename:Mac::TxFrame *
HandleFrameRequest	core/thread/csl_tx_scheduler.cpp	/^Mac::TxFrame *CslTxScheduler::HandleFrameRequest(Mac::TxFrames &aTxFrames)$/;"	f	class:ot::CslTxScheduler	typeref:typename:Mac::TxFrame *
HandleFrameRequest	core/thread/mesh_forwarder.cpp	/^Mac::TxFrame *MeshForwarder::HandleFrameRequest(Mac::TxFrames &aTxFrames)$/;"	f	class:ot::MeshForwarder	typeref:typename:Mac::TxFrame *
HandleGet	core/meshcop/dataset_manager.cpp	/^void DatasetManager::HandleGet(const Coap::Message &aMessage, const Ip6::MessageInfo &aMessageIn/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
HandleGetResponse	core/thread/network_diagnostic.cpp	/^void Client::HandleGetResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMessageInfo, Er/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:void
HandleGetResponse	core/thread/network_diagnostic.cpp	/^void Client::HandleGetResponse(void *aContext, otMessage *aMessage, const otMessageInfo *aMessag/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:void
HandleHdlcFrame	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::HandleHdlcFrame(otError aError)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
HandleHdlcFrame	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::HandleHdlcFrame(void *aContext, otError aError)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
HandleHdlcReceiveDone	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleHdlcReceiveDone(const uint8_t *aBuf, uint16_t aBufLength)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleHdlcSendDone	ncp/ncp_hdlc.cpp	/^void NcpHdlc::HandleHdlcSendDone(void)$/;"	f	class:ot::Ncp::NcpHdlc	typeref:typename:void
HandleIcmpReceive	core/thread/address_resolver.cpp	/^void AddressResolver::HandleIcmpReceive(Message                 &aMessage,$/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleIcmpReceive	core/thread/address_resolver.cpp	/^void AddressResolver::HandleIcmpReceive(void                *aContext,$/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleIcmpReceive	core/utils/ping_sender.cpp	/^void PingSender::HandleIcmpReceive(const Message           &aMessage,$/;"	f	class:ot::Utils::PingSender	typeref:typename:void
HandleIcmpReceive	core/utils/ping_sender.cpp	/^void PingSender::HandleIcmpReceive(void                *aContext,$/;"	f	class:ot::Utils::PingSender	typeref:typename:void
HandleInfraIfStateChanged	core/border_router/routing_manager.hpp	/^    void HandleInfraIfStateChanged(void) { EvaluateState(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleInfraIfStateChanged	core/net/mdns.cpp	/^void Core::HandleInfraIfStateChanged(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleInfraIfStateChanged	core/net/srp_advertising_proxy.hpp	/^    void HandleInfraIfStateChanged(void) { UpdateState(); }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleInitialFrame	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::HandleInitialFrame(const uint8_t *aFrame, uint16_t aLength, uint8_t aHeader, /;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
HandleInitialFrame	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::HandleInitialFrame(const uint8_t *aFrame,$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
HandleIp4AddressResult	cli/cli_mdns.cpp	/^void Mdns::HandleIp4AddressResult(otInstance *aInstance, const otMdnsAddressResult *aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleIp6AddressResult	cli/cli_mdns.cpp	/^void Mdns::HandleIp6AddressResult(otInstance *aInstance, const otMdnsAddressResult *aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleIp6Receive	cli/cli.cpp	/^void Interpreter::HandleIp6Receive(otMessage *aMessage, void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleJamStateChange	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleJamStateChange(bool aJamState)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleJamStateChange_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleJamStateChange_Jump(bool aJamState, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleJoinerCallback	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleJoinerCallback(otError aError)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleJoinerCallback_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleJoinerCallback_Jump(otError aError, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleJoinerEntrustResponse	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleJoinerEntrustResponse(Coap::Message          *aMessage,$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleJoinerEntrustResponse	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleJoinerEntrustResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleJoinerEvent	cli/cli_commissioner.cpp	/^void Commissioner::HandleJoinerEvent(otCommissionerJoinerEvent aEvent,$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleJoinerExpirationTimer	core/meshcop/commissioner.cpp	/^void Commissioner::HandleJoinerExpirationTimer(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleJoinerFinalizeResponse	core/meshcop/joiner.cpp	/^void Joiner::HandleJoinerFinalizeResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMess/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleJoinerFinalizeResponse	core/meshcop/joiner.cpp	/^void Joiner::HandleJoinerFinalizeResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleJoinerSessionTimer	core/meshcop/commissioner.cpp	/^void Commissioner::HandleJoinerSessionTimer(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleKeyRotationTimer	core/thread/key_manager.cpp	/^void KeyManager::HandleKeyRotationTimer(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
HandleLeaderData	core/thread/mle.cpp	/^Error Mle::HandleLeaderData(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
HandleLeaderKeepAliveResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleLeaderKeepAliveResponse(Coap::Message          *aMessage,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleLeaderKeepAliveResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleLeaderKeepAliveResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleLeaderPetitionResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleLeaderPetitionResponse(Coap::Message          *aMessage,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleLeaderPetitionResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleLeaderPetitionResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleLeaseTimer	core/net/srp_server.cpp	/^void Server::HandleLeaseTimer(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleLinkAccept	core/thread/mle_router.cpp	/^Error MleRouter::HandleLinkAccept(RxInfo &aRxInfo, bool aRequest)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
HandleLinkAccept	core/thread/mle_router.cpp	/^void MleRouter::HandleLinkAccept(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleLinkAcceptAndRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleLinkAcceptAndRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleLinkMetricsEnhAckProbingIe	cli/cli_link_metrics.cpp	/^void LinkMetrics::HandleLinkMetricsEnhAckProbingIe(otShortAddress             aShortAddress,$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
HandleLinkMetricsEnhAckProbingIeReport	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsEnhAckProbingIeReport(otShortAddress             aShortAddress,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkMetricsEnhAckProbingIeReport_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsEnhAckProbingIeReport_Jump(otShortAddress             aShortAddre/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkMetricsManagementRequest	core/thread/mle.cpp	/^void Mle::HandleLinkMetricsManagementRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleLinkMetricsManagementResponse	core/thread/mle.cpp	/^void Mle::HandleLinkMetricsManagementResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleLinkMetricsMgmtResponse	cli/cli_link_metrics.cpp	/^void LinkMetrics::HandleLinkMetricsMgmtResponse(const otIp6Address *aAddress, otLinkMetricsStatu/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
HandleLinkMetricsMgmtResponse	cli/cli_link_metrics.cpp	/^void LinkMetrics::HandleLinkMetricsMgmtResponse(const otIp6Address *aAddress,$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
HandleLinkMetricsMgmtResponse	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsMgmtResponse(const otIp6Address *aSource, otLinkMetricsStatus aSt/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkMetricsMgmtResponse_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsMgmtResponse_Jump(const otIp6Address *aSource,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkMetricsReport	cli/cli_link_metrics.cpp	/^void LinkMetrics::HandleLinkMetricsReport(const otIp6Address        *aAddress,$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
HandleLinkMetricsReport	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsReport(const otIp6Address        *aSource,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkMetricsReport_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleLinkMetricsReport_Jump(const otIp6Address        *aSource,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleLinkPcapReceive	cli/cli.cpp	/^void Interpreter::HandleLinkPcapReceive(const otRadioFrame *aFrame, bool aIsTx)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleLinkPcapReceive	cli/cli.cpp	/^void Interpreter::HandleLinkPcapReceive(const otRadioFrame *aFrame, bool aIsTx, void *aContext)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleLinkProbe	core/thread/link_metrics.cpp	/^Error Subject::HandleLinkProbe(const Message &aMessage, uint8_t &aSeriesId)$/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Error
HandleLinkProbe	core/thread/mle.cpp	/^void Mle::HandleLinkProbe(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleLinkRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleLinkRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleLocateResult	cli/cli.cpp	/^void Interpreter::HandleLocateResult(otError aError, const otIp6Address *aMeshLocalAddress, uint/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleLocateResult	cli/cli.cpp	/^void Interpreter::HandleLocateResult(void               *aContext,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleLowpanHC	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleLowpanHC(const FrameData      &aFrameData,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleMacCommand	core/mac/mac.cpp	/^bool Mac::HandleMacCommand(RxFrame &aFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
HandleManagementRequest	core/thread/link_metrics.cpp	/^Error Subject::HandleManagementRequest(const Message &aMessage, Neighbor &aNeighbor, Status &aSt/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Error
HandleManagementResponse	core/thread/link_metrics.cpp	/^Error Initiator::HandleManagementResponse(const Message &aMessage, const Ip6::Address &aAddress)$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
HandleMappingExpirerTimer	core/net/nat64_translator.cpp	/^void Translator::HandleMappingExpirerTimer(void)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
HandleMbedtlsDebug	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsDebug(int aLevel, const char *aFile, int aLine, const char *a/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsDebug	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsDebug(void *aContext, int aLevel, const char *aFile, int aLin/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsExportKeys	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsExportKeys(const unsigned char *aMasterSecret,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsExportKeys	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsExportKeys(void                *aContext,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsExportKeys	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsExportKeys(mbedtls_ssl_key_export_type aType,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsExportKeys	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsExportKeys(void                       *aContext,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsGetTimer	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsGetTimer(void *aContext)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsGetTimer	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsGetTimer(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsReceive	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsReceive(unsigned char *aBuf, size_t aLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsReceive	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsReceive(void *aContext, unsigned char *aBuf, size_t aLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsSetTimer	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsSetTimer(uint32_t aIntermediate, uint32_t aFinish)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsSetTimer	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleMbedtlsSetTimer(void *aContext, uint32_t aIntermediate, uint32_t aFi/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleMbedtlsTransmit	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsTransmit(const unsigned char *aBuf, size_t aLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMbedtlsTransmit	core/meshcop/secure_transport.cpp	/^int SecureTransport::HandleMbedtlsTransmit(void *aContext, const unsigned char *aBuf, size_t aLe/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
HandleMdnsCoreStateChange	core/net/dnssd.cpp	/^void Dnssd::HandleMdnsCoreStateChange(void)$/;"	f	class:ot::Dnssd	typeref:typename:void
HandleMesh	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::HandleMesh(FrameData &aFrameData, const Mac::Address &aMacSource, const Thre/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleMeshDiagDiscoverDone	cli/cli.cpp	/^void Interpreter::HandleMeshDiagDiscoverDone(otError aError, otMeshDiagRouterInfo *aRouterInfo)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMeshDiagDiscoverDone	cli/cli.cpp	/^void Interpreter::HandleMeshDiagDiscoverDone(otError aError, otMeshDiagRouterInfo *aRouterInfo, /;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMeshDiagQueryChildIp6Addrs	cli/cli.cpp	/^void Interpreter::HandleMeshDiagQueryChildIp6Addrs(otError                    aError,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMeshDiagQueryChildTableResult	cli/cli.cpp	/^void Interpreter::HandleMeshDiagQueryChildTableResult(otError                     aError,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMeshDiagQueryChildTableResult	cli/cli.cpp	/^void Interpreter::HandleMeshDiagQueryChildTableResult(otError aError, const otMeshDiagChildEntry/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMeshDiagQueryRouterNeighborTableResult	cli/cli.cpp	/^void Interpreter::HandleMeshDiagQueryRouterNeighborTableResult(otError                          /;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMessage	core/net/icmp6.cpp	/^Error Icmp::HandleMessage(Message &aMessage, MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Icmp	typeref:typename:Error
HandleMessage	core/net/mdns.cpp	/^void Core::HandleMessage(Message &aMessage, bool aIsUnicast, const AddressInfo &aSenderAddress)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleMessage	core/net/tcp6.cpp	/^Error Tcp::HandleMessage(ot::Ip6::Header &aIp6Header, Message &aMessage, MessageInfo &aMessageIn/;"	f	class:ot::Ip6::Tcp	typeref:typename:Error
HandleMessage	core/net/udp6.cpp	/^Error Udp::HandleMessage(Message &aMessage, MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
HandleMessage	core/net/udp6.hpp	/^        bool HandleMessage(Message &aMessage, const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp::Receiver	typeref:typename:bool
HandleMessageTransmissionTimer	core/thread/mle.cpp	/^void Mle::HandleMessageTransmissionTimer(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleMgmtCommissionerGetResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleMgmtCommissionerGetResponse(Coap::Message          *aMessage,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleMgmtCommissionerGetResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleMgmtCommissionerGetResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleMgmtCommissionerSetResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleMgmtCommissionerSetResponse(Coap::Message          *aMessage,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleMgmtCommissionerSetResponse	core/meshcop/commissioner.cpp	/^void Commissioner::HandleMgmtCommissionerSetResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleMgmtResponse	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::HandleMgmtResponse(const otIp6Address *aAddress, otLinkMetricsStatus aS/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
HandleMgmtSetResponse	core/meshcop/dataset_manager.cpp	/^void DatasetManager::HandleMgmtSetResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMes/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
HandleMgmtSetResponse	core/meshcop/dataset_manager.cpp	/^void DatasetManager::HandleMgmtSetResponse(void                *aContext,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
HandleMlrRegResult	cli/cli.cpp	/^void Interpreter::HandleMlrRegResult(otError             aError,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMlrRegResult	cli/cli.cpp	/^void Interpreter::HandleMlrRegResult(void               *aContext,$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleMlrRegResult	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleMlrRegResult(otError             aError,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleMlrRegResult_Jump	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleMlrRegResult_Jump(void               *aContext,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleMlrResponse	core/thread/mlr_manager.cpp	/^void MlrManager::HandleMlrResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMessageInfo/;"	f	class:ot::MlrManager	typeref:typename:void
HandleMlrResponse	core/thread/mlr_manager.cpp	/^void MlrManager::HandleMlrResponse(void                *aContext,$/;"	f	class:ot::MlrManager	typeref:typename:void
HandleMultiPacketTimer	core/net/mdns.hpp	/^    void HandleMultiPacketTimer(void) { mMultiPacketRxMessages.HandleTimer(); }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleMulticastListenerRegistration	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleMulticastListenerRegistration(const Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleNat64PrefixManagerTimer	core/border_router/routing_manager.hpp	/^    void HandleNat64PrefixManagerTimer(void) { mNat64PrefixManager.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleNeighborAdvertisement	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleNeighborAdvertisement(const InfraIf::Icmp6Packet &aPacket)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleNeighborTableChanged	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleNeighborTableChanged(otNeighborTableEvent aEvent, const otNeighborTableEntry/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleNetDataChange	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::HandleNetDataChange(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
HandleNetDataChange	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::HandleNetDataChange(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
HandleNetDataFull	core/thread/network_data_notifier.cpp	/^void Notifier::HandleNetDataFull(void) { mNetDataFullCallback.InvokeIfSet(); }$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleNetDataPublisherEvent	core/net/srp_server.cpp	/^void Server::HandleNetDataPublisherEvent(NetworkData::Publisher::Event aEvent)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleNetdataFull	cli/cli_network_data.hpp	/^    static void HandleNetdataFull(void *aContext) { static_cast<NetworkData *>(aContext)->Handle/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
HandleNetdataFull	cli/cli_network_data.hpp	/^    void        HandleNetdataFull(void) { mFullCallbackWasCalled = true; }$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
HandleNetlinkResponse	posix/platform/netif.cpp	/^static void HandleNetlinkResponse(struct nlmsghdr *msg)$/;"	f	typeref:typename:void	file:
HandleNetworkDataRestoredAfterReset	core/thread/network_data_leader_ftd.cpp	/^void Leader::HandleNetworkDataRestoredAfterReset(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
HandleNetworkDataUpdateRouter	core/thread/mle_router.cpp	/^void MleRouter::HandleNetworkDataUpdateRouter(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleNewFrame	core/mac/data_poll_handler.cpp	/^void DataPollHandler::HandleNewFrame(Child &aChild)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
HandleNotification	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleNotification(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleNotification	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleNotification(const uint8_t *aFrame, uint16_t aLength, bool &aShouldSaveF/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleNotificationResponse	cli/cli_coap.cpp	/^void Coap::HandleNotificationResponse(otMessage *aMessage, const otMessageInfo *aMessageInfo, ot/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleNotificationResponse	cli/cli_coap.cpp	/^void Coap::HandleNotificationResponse(void                *aContext,$/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleNotifierEvents	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleNotifierEvents	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleNotifierEvents	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
HandleNotifierEvents	core/instance/extension_example.cpp	/^void ExtensionBase::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Extension::ExtensionBase	typeref:typename:void
HandleNotifierEvents	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleNotifierEvents	core/meshcop/dataset_updater.cpp	/^void DatasetUpdater::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:void
HandleNotifierEvents	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleNotifierEvents	core/net/srp_client.cpp	/^void Client::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleNotifierEvents	core/radio/trel_link.cpp	/^void Link::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleNotifierEvents	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleNotifierEvents	core/thread/child_supervision.cpp	/^void ChildSupervisor::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::ChildSupervisor	typeref:typename:void
HandleNotifierEvents	core/thread/dua_manager.cpp	/^void DuaManager::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleNotifierEvents	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::EnergyScanServer	typeref:typename:void
HandleNotifierEvents	core/thread/mle.cpp	/^void Mle::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleNotifierEvents	core/thread/mlr_manager.cpp	/^void MlrManager::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::MlrManager	typeref:typename:void
HandleNotifierEvents	core/thread/network_data_notifier.cpp	/^void Notifier::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleNotifierEvents	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
HandleNotifierEvents	core/thread/network_data_publisher.cpp	/^void Publisher::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
HandleNotifierEvents	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
HandleNotifierEvents	core/thread/time_sync_service.cpp	/^void TimeSync::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::TimeSync	typeref:typename:void
HandleNotifierEvents	core/utils/history_tracker.cpp	/^void HistoryTracker::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
HandleNotifierEvents	core/utils/jam_detector.cpp	/^void JamDetector::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
HandleNotifierEvents	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
HandleNotifierEvents	core/utils/otns.cpp	/^void Otns::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Utils::Otns	typeref:typename:void
HandleNotifierEvents	core/utils/slaac_address.cpp	/^void Slaac::HandleNotifierEvents(Events aEvents)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
HandleOnLinkPrefixManagerTimer	core/border_router/routing_manager.hpp	/^    void HandleOnLinkPrefixManagerTimer(void) { mOnLinkPrefixManager.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleOptions	core/net/ip6.cpp	/^Error Ip6::HandleOptions(Message &aMessage, Header &aHeader, bool &aReceive)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
HandleOutstandingUpdatesTimer	core/net/srp_server.cpp	/^void Server::HandleOutstandingUpdatesTimer(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandlePanIdConflict	cli/cli_commissioner.cpp	/^void Commissioner::HandlePanIdConflict(uint16_t aPanId, uint32_t aChannelMask)$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandlePanIdConflict	cli/cli_commissioner.cpp	/^void Commissioner::HandlePanIdConflict(uint16_t aPanId, uint32_t aChannelMask, void *aContext)$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleParentRequest	core/thread/mle_router.cpp	/^void MleRouter::HandleParentRequest(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleParentResponse	core/thread/mle.cpp	/^void Mle::HandleParentResponse(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleParentResponseInfo	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleParentResponseInfo(const otThreadParentResponseInfo &aInfo)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleParentResponseInfo	ncp/ncp_base_ftd.cpp	/^void NcpBase::HandleParentResponseInfo(otThreadParentResponseInfo *aInfo, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleParentSearchTimer	core/thread/mle.hpp	/^    void HandleParentSearchTimer(void) { mParentSearch.HandleTimer(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandlePartitionChange	core/thread/mle_router.cpp	/^void MleRouter::HandlePartitionChange(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandlePayload	core/net/ip6.cpp	/^Error Ip6::HandlePayload(Header            &aIp6Header,$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
HandlePayload	core/net/udp6.cpp	/^void Udp::HandlePayload(Message &aMessage, MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp	typeref:typename:void
HandlePcapFrame	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandlePcapFrame(const otRadioFrame *aFrame, bool aIsTx)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandlePcapFrame	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandlePcapFrame(const otRadioFrame *aFrame, bool aIsTx, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandlePdPrefixManagerTimer	core/border_router/routing_manager.hpp	/^    void HandlePdPrefixManagerTimer(void) { mPdPrefixManager.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandlePingReply	cli/cli_ping.cpp	/^void PingSender::HandlePingReply(const otPingSenderReply *aReply)$/;"	f	class:ot::Cli::PingSender	typeref:typename:void
HandlePingReply	cli/cli_ping.cpp	/^void PingSender::HandlePingReply(const otPingSenderReply *aReply, void *aContext)$/;"	f	class:ot::Cli::PingSender	typeref:typename:void
HandlePingStatistics	cli/cli_ping.cpp	/^void PingSender::HandlePingStatistics(const otPingSenderStatistics *aStatistics)$/;"	f	class:ot::Cli::PingSender	typeref:typename:void
HandlePingStatistics	cli/cli_ping.cpp	/^void PingSender::HandlePingStatistics(const otPingSenderStatistics *aStatistics, void *aContext)$/;"	f	class:ot::Cli::PingSender	typeref:typename:void
HandlePollSent	core/mac/data_poll_sender.cpp	/^void DataPollSender::HandlePollSent(Mac::TxFrame &aFrame, Error aError)$/;"	f	class:ot::DataPollSender	typeref:typename:void
HandlePollTimeout	core/mac/data_poll_sender.cpp	/^void DataPollSender::HandlePollTimeout(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
HandlePollTimer	core/mac/data_poll_sender.hpp	/^    void            HandlePollTimer(void) { IgnoreError(SendDataPoll()); }$/;"	f	class:ot::DataPollSender	typeref:typename:void
HandleProactiveBackboneNotification	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleProactiveBackboneNotification(const Ip6::Address             &aDua,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CAPS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_DEBUG_LOG_TIMESTAMP_BASE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_DEBUG_NCP_LOG_LEVEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_DEBUG_TEST_ASSERT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_DEBUG_TEST_WATCHDOG>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_HOST_POWER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_HWADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_INTERFACE_COUNT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_INTERFACE_TYPE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_LAST_STATUS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_LOCK>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_15_4_LADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_15_4_PANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_15_4_SADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_PROMISCUOUS_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_RAW_STREAM_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_SCAN_MASK>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_SCAN_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_SCAN_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MCU_POWER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NCP_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_CCA_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_CHAN>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_CHAN_PREFERRED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_CHAN_SUPPORTED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_FEM_LNA_GAIN>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_FREQ>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_REGION_CODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_RSSI>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_RX_SENSITIVITY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_TX_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_POWER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PROTOCOL_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RADIO_COEX_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RADIO_COEX_METRICS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_CSL_ACCURACY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_CSL_UNCERTAINTY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_UNSOL_UPDATE_FILTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_UNSOL_UPDATE_LIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_VENDOR_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_AUTO_SELECT_ENABLED>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_AUTO_SELECT_INTERVAL>/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_CHANNEL_SELECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_DELAY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_FAVORED_CHANNELS>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_NEW_CHANNEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MANAGER_SUPPORTED_CHANNELS>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHILD_SUPERVISION_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_MAX_RETRY_NUMBER_INDIRECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_COMMISSIONER_JOINERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_COMMISSIONER_PROVISIONING_URL/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_COMMISSIONER_SESSION_ID>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_COMMISSIONER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_PSKC>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ADDRESS_CACHE_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_CONFIG>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_REGISTRA/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_STATE>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CHILD_COUNT_MAX>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CHILD_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CHILD_TABLE_ADDRESSES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_COMMISSIONER_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CONTEXT_REUSE_DELAY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_DOMAIN_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_DUA_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_LEADER_WEIGHT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_LOCAL_LEADER_WEIGHT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NETWORK_ID_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NEW_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_PREFERRED_ROUTER_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ROUTER_DOWNGRADE_THRESHOLD>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ROUTER_ROLE_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ROUTER_SELECTION_JITTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ROUTER_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ROUTER_UPGRADE_THRESHOLD>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_STEERING_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_TIME_SYNC_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_TIME_SYNC_XTAL_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MONITOR_CHANNEL_OCCUPANCY>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MONITOR_RSSI_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MONITOR_SAMPLE_COUNT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MONITOR_SAMPLE_INTERVAL>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHANNEL_MONITOR_SAMPLE_WINDOW>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CHILD_SUPERVISION_CHECK_TIMEOUT>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_ALL_IP_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_ALL_MAC_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_IP_RX_FAILURE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_IP_RX_SUCCESS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_IP_TX_FAILURE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_IP_TX_SUCCESS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_MAC_RETRY_HISTOGRAM>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_MLE_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_BAD_FCS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_EMPTY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_NVLD_SADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_OTHER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_SECURITY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_ERR_UKWN_NBR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_IP_DROPPED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_IP_INSEC_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_IP_SEC_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_BEACON>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_BEACON_REQ>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_BROADCAST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_DATA_POLL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_DUP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_FILT_DA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_FILT_WL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_OTHER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_PKT_UNICAST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_SPINEL_ERR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_SPINEL_OUT_OF_ORDER_TID>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_RX_SPINEL_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_ERR_ABORT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_ERR_CCA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_IP_DROPPED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_IP_INSEC_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_IP_SEC_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_ACKED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_ACK_REQ>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_BEACON>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_BEACON_REQ>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_BROADCAST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_DATA_POLL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_NO_ACK_REQ>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_OTHER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_RETRY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_PKT_UNICAST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_CNTR_TX_SPINEL_TOTAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_DEBUG_TREL_TEST_MODE_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ADDRESS_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ICMP_PING_OFFLOAD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ICMP_PING_OFFLOAD_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_LL_ADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ML_ADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ML_PREFIX>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_MULTICAST_ADDRESS_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_IPV6_ROUTE_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECTED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECT_BUSY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECT_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECT_HISTORY_BITMAP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECT_RSSI_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_JAM_DETECT_WINDOW>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_ALLOWLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_ALLOWLIST_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_CCA_FAILURE_RATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_DATA_POLL_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_DENYLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_DENYLIST_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_EXTENDED_ADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_FIXED_RSS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_MAX_RETRY_NUMBER_DIRECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_JOINER_DISCERNER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MESHCOP_JOINER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MSG_BUFFER_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NEIGHBOR_TABLE_MULTI_RADIO_INFO>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_IF_UP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_KEY_SEQUENCE_COUNTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_KEY_SWITCH_GUARDTIME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_NETWORK_KEY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_NETWORK_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_PARTITION_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_REQUIRE_JOIN_EXISTING>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_ROLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_SAVED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_STACK_UP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_NET_XPANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_PHY_PCAP_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SERVER_ALLOW_LOCAL_DATA_CHANGE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SERVER_LEADER_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SERVER_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SLAAC_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_HOST_ADDRESSES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_HOST_INFO>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_HOST_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_KEY_LEASE_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_LEASE_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SRP_CLIENT_SERVICE_KEY_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_SUPPORTED_RADIO_LINKS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ACTIVE_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ALLOW_LOCAL_NET_DATA_CHANGE>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ASSISTING_PORTS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_PRIMARY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CHILD_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CSL_CHANNEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CSL_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_CSL_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_ENABLE_FILTERIN/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_JOINER_FLAG>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_PANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_LEADER_ADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_LEADER_NETWORK_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_LEADER_RID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NEIGHBOR_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NEIGHBOR_TABLE_ERROR_RATES>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NETWORK_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NETWORK_DATA_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_NETWORK_TIME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_OFF_MESH_ROUTES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_ON_MESH_NETS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_PARENT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_PENDING_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_RLOC16>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_RLOC16_DEBUG_PASSTHRU>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_STABLE_LEADER_NETWORK_DATA>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_STABLE_NETWORK_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_THREAD_STABLE_NETWORK_DATA_VERSION>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MAC_SRC_MATCH_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_MULTIPAN_ACTIVE_INTERFACE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RADIO_CAPS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_API_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_MIN_HOST_API_VERSION>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyGet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyGet<SPINEL_PROP_RCP_TIMESTAMP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_PHY_CALIBRATED_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_UNSOL_UPDATE_FILTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MESHCOP_COMMISSIONER_JOINERS>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_THREAD_JOINERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_IPV6_ADDRESS_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_IPV6_MULTICAST_ADDRESS_TABLE>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MAC_ALLOWLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MAC_DENYLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MAC_FIXED_RSS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_SERVER_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_SRP_CLIENT_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_THREAD_ASSISTING_PORTS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_THREAD_OFF_MESH_ROUTES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_THREAD_ON_MESH_NETS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MAC_SRC_MATCH_EXTENDED_ADDRESSES>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyInsert	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyInsert<SPINEL_PROP_MAC_SRC_MATCH_SHORT_ADDRESSES>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_UNSOL_UPDATE_FILTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MESHCOP_COMMISSIONER_JOINERS>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_THREAD_ACTIVE_ROUTER_IDS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_IPV6_ADDRESS_TABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_IPV6_MULTICAST_ADDRESS_TABLE>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MAC_ALLOWLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MAC_DENYLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MAC_FIXED_RSS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_SERVER_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_SRP_CLIENT_SERVICES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_THREAD_ASSISTING_PORTS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_THREAD_OFF_MESH_ROUTES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_THREAD_ON_MESH_NETS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MAC_SRC_MATCH_EXTENDED_ADDRESSES>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertyRemove	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertyRemove<SPINEL_PROP_MAC_SRC_MATCH_SHORT_ADDRESSES>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_DEBUG_LOG_TIMESTAMP_BASE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_DEBUG_NCP_LOG_LEVEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_15_4_LADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_15_4_PANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_PROMISCUOUS_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_RAW_STREAM_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_RX_ON_WHEN_IDLE_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SCAN_MASK>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SCAN_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SCAN_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MCU_POWER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CALIBRATED_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CCA_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CHAN>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CHAN_MAX_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CHAN_TARGET_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_FEM_LNA_GAIN>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_REGION_CODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_TX_POWER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_POWER_STATE>(void) { return OT_ERROR_/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_RADIO_COEX_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_UNSOL_UPDATE_FILTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_AUTO_SELECT_ENABLED>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_AUTO_SELECT_INTERVAL>/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_CHANNEL_SELECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_DELAY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_FAVORED_CHANNELS>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_NEW_CHANNEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHANNEL_MANAGER_SUPPORTED_CHANNELS>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHILD_SUPERVISION_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_MAX_RETRY_NUMBER_INDIRECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_ANNOUNCE_BEGIN>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_ENERGY_SCAN>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_MGMT_GET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_MGMT_SET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_PAN_ID_QUERY>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_PROVISIONING_URL/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_COMMISSIONER_STATE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_PARTITION_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_PSKC>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_CONFIG>(/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_REGISTER/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_REGISTRA/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_BACKBONE_ROUTER_LOCAL_STATE>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CHILD_COUNT_MAX>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CONTEXT_REUSE_DELAY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_DOMAIN_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_DUA_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_LOCAL_LEADER_WEIGHT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_NETWORK_ID_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_PREFERRED_ROUTER_ID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ROUTER_DOWNGRADE_THRESHOLD>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ROUTER_ROLE_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ROUTER_SELECTION_JITTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ROUTER_UPGRADE_THRESHOLD>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_STEERING_DATA>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_TIME_SYNC_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_ftd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_TIME_SYNC_XTAL_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CHILD_SUPERVISION_CHECK_TIMEOUT>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CNTR_ALL_IP_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CNTR_ALL_MAC_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CNTR_MAC_RETRY_HISTOGRAM>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CNTR_MLE_COUNTERS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_CNTR_RESET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_DEBUG_TREL_TEST_MODE_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_IPV6_ICMP_PING_OFFLOAD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_IPV6_ICMP_PING_OFFLOAD_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_IPV6_ML_PREFIX>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_JAM_DETECT_BUSY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_JAM_DETECT_ENABLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_JAM_DETECT_RSSI_THRESHOLD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_JAM_DETECT_WINDOW>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_ALLOWLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_ALLOWLIST_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_DATA_POLL_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_DENYLIST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_DENYLIST_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_FIXED_RSS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_MAX_RETRY_NUMBER_DIRECT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_JOINER_COMMISSIONING>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MESHCOP_JOINER_DISCERNER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_IF_UP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_KEY_SEQUENCE_COUNTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_KEY_SWITCH_GUARDTIME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_NETWORK_KEY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_NETWORK_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_REQUIRE_JOIN_EXISTING>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_ROLE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_STACK_UP>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_NET_XPANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_CHAN_SUPPORTED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_PCAP_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SERVER_ALLOW_LOCAL_DATA_CHANGE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SLAAC_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_HOST_ADDRESSES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_HOST_NAME>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_HOST_SERVICES_CLEAR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_HOST_SERVICES_REMOVE>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_KEY_LEASE_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_LEASE_INTERVAL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_SERVICE_KEY_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_SRP_CLIENT_START>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_STREAM_NET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_STREAM_NET_INSECURE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ACTIVE_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ALLOW_LOCAL_NET_DATA_CHANGE>(v/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_ASSISTING_PORTS>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CHILD_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CSL_CHANNEL>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CSL_PERIOD>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_CSL_TIMEOUT>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_ENABLE_FILTERIN/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_JOINER_FLAG>(vo/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_DISCOVERY_SCAN_PANID>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_LINK_METRICS_MGMT_ENH_ACK>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_LINK_METRICS_MGMT_FORWARD>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_LINK_METRICS_PROBE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_LINK_METRICS_QUERY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MGMT_GET_ACTIVE_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MGMT_GET_PENDING_DATASET>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MGMT_SET_ACTIVE_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MGMT_SET_PENDING_DATASET>(void/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MLR_REQUEST>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_MODE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_PENDING_DATASET>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_RLOC16_DEBUG_PASSTHRU>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_mtd.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_THREAD_UDP_FORWARD_STREAM>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_15_4_SADDR>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SRC_MATCH_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SRC_MATCH_EXTENDED_ADDRESSES>(voi/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MAC_SRC_MATCH_SHORT_ADDRESSES>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_MULTIPAN_ACTIVE_INTERFACE>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_PHY_ENABLED>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_RCP_ENH_ACK_PROBING>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_RCP_LOG_CRASH_DUMP>(void) { return ot/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_RCP_MAC_FRAME_COUNTER>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet	ncp/ncp_base_radio.cpp	/^template <> otError NcpBase::HandlePropertySet<SPINEL_PROP_RCP_MAC_KEY>(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySetForSpecialProperties	ncp/ncp_base.cpp	/^bool NcpBase::HandlePropertySetForSpecialProperties(uint8_t aHeader, spinel_prop_key_t aKey, otE/;"	f	class:ot::Ncp::NcpBase	typeref:typename:bool
HandlePropertySet_SPINEL_PROP_HOST_POWER_STATE	ncp/ncp_base.cpp	/^otError NcpBase::HandlePropertySet_SPINEL_PROP_HOST_POWER_STATE(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet_SPINEL_PROP_MESHCOP_COMMISSIONER_GENERATE_PSKC	ncp/ncp_base_ftd.cpp	/^otError NcpBase::HandlePropertySet_SPINEL_PROP_MESHCOP_COMMISSIONER_GENERATE_PSKC(uint8_t aHeade/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet_SPINEL_PROP_NEST_STREAM_MFG	ncp/ncp_base.cpp	/^otError NcpBase::HandlePropertySet_SPINEL_PROP_NEST_STREAM_MFG(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet_SPINEL_PROP_STREAM_RAW	ncp/ncp_base_radio.cpp	/^otError NcpBase::HandlePropertySet_SPINEL_PROP_STREAM_RAW(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandlePropertySet_SPINEL_PROP_THREAD_COMMISSIONER_ENABLED	ncp/ncp_base_ftd.cpp	/^otError NcpBase::HandlePropertySet_SPINEL_PROP_THREAD_COMMISSIONER_ENABLED(uint8_t aHeader)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
HandleRaPrefixTableChanged	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleRaPrefixTableChanged(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRaPrefixTableChanged	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::HandleRaPrefixTableChanged(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
HandleRcpTimeout	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleRcpTimeout(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleRcpUnexpectedReset	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleRcpUnexpectedReset(spinel_status_t aStatus)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleReceive	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleReceive	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aM/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleReceive	core/net/dns_dso.cpp	/^void Dso::Connection::HandleReceive(Message &aMessage)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
HandleReceive	ncp/ncp_base.cpp	/^void NcpBase::HandleReceive(const uint8_t *aBuf, uint16_t aBufLength)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleReceiveAt	core/radio/radio.cpp	/^void RadioStatistics::HandleReceiveAt(uint32_t aDurationUs)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
HandleReceiveDone	core/mac/sub_mac.cpp	/^void SubMac::HandleReceiveDone(RxFrame *aFrame, Error aError)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleReceiveDone	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleReceiveDone(Mac::RxFrame *aFrame, Error aError)$/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleReceiveMessage	core/net/icmp6.hpp	/^        void HandleReceiveMessage(Message &aMessage, const MessageInfo &aMessageInfo, const Head/;"	f	class:ot::Ip6::Icmp::Handler	typeref:typename:void
HandleReceived	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleReceived(const InfraIf::Icmp6Packet &aPacket, const Ip6::Address &aSr/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleReceived	core/radio/trel_interface.cpp	/^void Interface::HandleReceived(uint8_t *aBuffer, uint16_t aLength)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
HandleReceivedFrame	core/mac/mac.cpp	/^void Mac::HandleReceivedFrame(RxFrame *aFrame, Error aError)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
HandleReceivedFrame	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleReceivedFrame(Mac::RxFrame &aFrame)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleReceivedFrame	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleReceivedFrame(const uint8_t *aFrame, uint16_t aLength, uint8_t aHeader, /;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleReceivedFrame	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleReceivedFrame(const uint8_t *aFrame,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleReceivedFrame	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::HandleReceivedFrame(void *aContext) { static_cast<SpinelDriver *>(aContext)->/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
HandleReceivedFrame	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::HandleReceivedFrame(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
HandleRegisterResponse	core/thread/mlr_manager.cpp	/^void MlrManager::HandleRegisterResponse(otMessage *aMessage, const otMessageInfo *aMessageInfo, /;"	f	class:ot::MlrManager	typeref:typename:void
HandleRegisterResponse	core/thread/mlr_manager.cpp	/^void MlrManager::HandleRegisterResponse(void                *aContext,$/;"	f	class:ot::MlrManager	typeref:typename:void
HandleRegisterationDone	cli/cli_mdns.cpp	/^void Mdns::HandleRegisterationDone(otInstance *aInstance, otMdnsRequestId aRequestId, otError aE/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleRegisterationDone	cli/cli_mdns.cpp	/^void Mdns::HandleRegisterationDone(otMdnsRequestId aRequestId, otError aError)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleRegistered	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::HandleRegistered(RequestId aRequestId, Error aError)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleRegistered	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::HandleRegistered(otInstance *aInstance, otPlatDnssdRequestId aRequestId, /;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleRegisteredRequestIdOn	core/net/srp_advertising_proxy.cpp	/^bool AdvertisingProxy::HandleRegisteredRequestIdOn(Host &aHost, RequestId aRequestId, Error aErr/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
HandleReport	core/thread/link_metrics.cpp	/^void Initiator::HandleReport(const Message &aMessage, uint16_t aOffset, uint16_t aLength, const /;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:void
HandleRequest	cli/cli_coap.cpp	/^void Coap::HandleRequest(otMessage *aMessage, const otMessageInfo *aMessageInfo)$/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleRequest	cli/cli_coap.cpp	/^void Coap::HandleRequest(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageInfo)$/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleRequest	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleRequest(otMessage *aMessage, const otMessageInfo *aMessageInfo)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleRequest	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleRequest(void *aContext, otMessage *aMessage, const otMessageInfo *aMessag/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleRequest	core/coap/coap.hpp	/^    void HandleRequest(Message &aMessage, const Ip6::MessageInfo &aMessageInfo) const$/;"	f	class:ot::Coap::Resource	typeref:typename:void
HandleRequest	core/coap/coap.hpp	/^    void HandleRequest(Message &aMessage, const Ip6::MessageInfo &aMessageInfo) const$/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:void
HandleResolved	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::HandleResolved(const Ip6::Address &aEid, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleResource	core/backbone_router/backbone_tmf.cpp	/^bool BackboneTmfAgent::HandleResource(CoapBase               &aCoapBase,$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:bool
HandleResource	core/backbone_router/backbone_tmf.cpp	/^bool BackboneTmfAgent::HandleResource(const char             *aUriPath,$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:bool
HandleResource	core/thread/tmf.cpp	/^bool Agent::HandleResource(CoapBase               &aCoapBase,$/;"	f	class:ot::Tmf::Agent	typeref:typename:bool
HandleResource	core/thread/tmf.cpp	/^bool Agent::HandleResource(const char *aUriPath, Message &aMessage, const Ip6::MessageInfo &aMes/;"	f	class:ot::Tmf::Agent	typeref:typename:bool
HandleResource	core/thread/tmf.cpp	/^bool SecureAgent::HandleResource(CoapBase               &aCoapBase,$/;"	f	class:ot::Tmf::SecureAgent	typeref:typename:bool
HandleResource	core/thread/tmf.cpp	/^bool SecureAgent::HandleResource(const char *aUriPath, Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::Tmf::SecureAgent	typeref:typename:bool
HandleResponse	cli/cli_coap.cpp	/^void Coap::HandleResponse(otMessage *aMessage, const otMessageInfo *aMessageInfo, otError aError/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleResponse	cli/cli_coap.cpp	/^void Coap::HandleResponse(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageInfo/;"	f	class:ot::Cli::Coap	typeref:typename:void
HandleResponse	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleResponse(otMessage *aMessage, const otMessageInfo *aMessageInfo, otError /;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleResponse	cli/cli_coap_secure.cpp	/^void CoapSecure::HandleResponse(void *aContext, otMessage *aMessage, const otMessageInfo *aMessa/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
HandleResponse	core/thread/anycast_locator.cpp	/^void AnycastLocator::HandleResponse(Coap::Message *aMessage, const Ip6::MessageInfo *aMessageInf/;"	f	class:ot::AnycastLocator	typeref:typename:void
HandleResponse	core/thread/anycast_locator.cpp	/^void AnycastLocator::HandleResponse(void                *aContext,$/;"	f	class:ot::AnycastLocator	typeref:typename:void
HandleResponse	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleResponse(const uint8_t *aBuffer, uint16_t aLength)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleRetransmissionTimer	core/coap/coap.cpp	/^void CoapBase::HandleRetransmissionTimer(Timer &aTimer)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
HandleRetransmissionTimer	core/coap/coap.cpp	/^void CoapBase::HandleRetransmissionTimer(void)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
HandleRetransmissionTimer	core/net/ip6_mpl.cpp	/^void Mpl::HandleRetransmissionTimer(void)$/;"	f	class:ot::Ip6::Mpl	typeref:typename:void
HandleRetransmissionTimer	core/net/sntp_client.cpp	/^void Client::HandleRetransmissionTimer(void)$/;"	f	class:ot::Sntp::Client	typeref:typename:void
HandleRioAdvertiserimer	core/border_router/routing_manager.hpp	/^    void HandleRioAdvertiserimer(void) { mRioAdvertiser.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRoleChanged	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::HandleRoleChanged(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
HandleRoleChanged	core/net/srp_client.cpp	/^void Client::HandleRoleChanged(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleRoleChanged	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleRoleChanged(void)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleRoutePublisherTimer	core/border_router/routing_manager.hpp	/^    void HandleRoutePublisherTimer(void) { mRoutePublisher.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRouterAdvertisement	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleRouterAdvertisement(const InfraIf::Icmp6Packet &aPacket, const Ip6::A/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRouterSolicit	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleRouterSolicit(const InfraIf::Icmp6Packet &aPacket, const Ip6::Address/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRouterTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::HandleRouterTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
HandleRsSenderFinished	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleRsSenderFinished(TimeMilli aStartTime)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRsSenderTimer	core/border_router/routing_manager.hpp	/^    void HandleRsSenderTimer(void) { mRsSender.HandleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRxFrame	ncp/ncp_spi.cpp	/^void NcpSpi::HandleRxFrame(void)$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
HandleRxRaTrackerExpirationTimer	core/border_router/routing_manager.hpp	/^    void HandleRxRaTrackerExpirationTimer(void) { mRxRaTracker.HandleExpirationTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRxRaTrackerRouterTimer	core/border_router/routing_manager.hpp	/^    void HandleRxRaTrackerRouterTimer(void) { mRxRaTracker.HandleRouterTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRxRaTrackerSignalTask	core/border_router/routing_manager.hpp	/^    void HandleRxRaTrackerSignalTask(void) { mRxRaTracker.HandleSignalTask(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleRxRaTrackerStaleTimer	core/border_router/routing_manager.hpp	/^    void HandleRxRaTrackerStaleTimer(void) { mRxRaTracker.HandleStaleTimer(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleSavedFrame	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleSavedFrame(const uint8_t *aFrame, uint16_t aLength) { HandleNotification/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleSavedFrame	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleSavedFrame(const uint8_t *aFrame, uint16_t aLength, void *aContext)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleScanDoneTask	core/thread/discover_scanner.cpp	/^void DiscoverScanner::HandleScanDoneTask(void)$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
HandleScanResult	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::HandleScanResult(Mac::EnergyScanResult *aResult)$/;"	f	class:ot::EnergyScanServer	typeref:typename:void
HandleScanResult	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::HandleScanResult(Mac::EnergyScanResult *aResult, void *aContext)$/;"	f	class:ot::EnergyScanServer	typeref:typename:void
HandleScanResult	core/thread/panid_query_server.cpp	/^void PanIdQueryServer::HandleScanResult(Mac::ActiveScanResult *aScanResult)$/;"	f	class:ot::PanIdQueryServer	typeref:typename:void
HandleScanResult	core/thread/panid_query_server.cpp	/^void PanIdQueryServer::HandleScanResult(Mac::ActiveScanResult *aScanResult, void *aContext)$/;"	f	class:ot::PanIdQueryServer	typeref:typename:void
HandleSecureAgentConnected	core/meshcop/commissioner.cpp	/^void Commissioner::HandleSecureAgentConnected(bool aConnected)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleSecureAgentConnected	core/meshcop/commissioner.cpp	/^void Commissioner::HandleSecureAgentConnected(bool aConnected, void *aContext)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleSecureAgentStopped	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleSecureAgentStopped(void *aContext)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleSecureAgentStopped	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleSecureAgentStopped(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleSecureCoapClientConnect	core/meshcop/joiner.cpp	/^void Joiner::HandleSecureCoapClientConnect(bool aConnected)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleSecureCoapClientConnect	core/meshcop/joiner.cpp	/^void Joiner::HandleSecureCoapClientConnect(bool aConnected, void *aContext)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleSecureTransportSend	core/meshcop/secure_transport.cpp	/^Error SecureTransport::HandleSecureTransportSend(const uint8_t   *aBuf,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
HandleSecurityPolicyChanged	core/thread/mle_router.cpp	/^void MleRouter::HandleSecurityPolicyChanged(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleSendQueue	core/net/ip6.cpp	/^void Ip6::HandleSendQueue(void)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
HandleSentFrame	core/mac/data_poll_handler.cpp	/^void DataPollHandler::HandleSentFrame(const Mac::TxFrame &aFrame, Error aError)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
HandleSentFrame	core/mac/data_poll_handler.cpp	/^void DataPollHandler::HandleSentFrame(const Mac::TxFrame &aFrame, Error aError, Child &aChild)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
HandleSentFrame	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::HandleSentFrame(const Mac::TxFrame &aFrame, Error aError)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
HandleSentFrame	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::HandleSentFrame(const Mac::TxFrame &aFrame, Error aError, Child &aChild)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
HandleSentFrame	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleSentFrame(Mac::TxFrame &aFrame, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleSentFrameToChild	core/mac/data_poll_handler.cpp	/^inline void DataPollHandler::Callbacks::HandleSentFrameToChild(const Mac::TxFrame &aFrame,$/;"	f	class:ot::DataPollHandler::Callbacks	typeref:typename:void
HandleSentFrameToChild	core/thread/csl_tx_scheduler.cpp	/^inline void CslTxScheduler::Callbacks::HandleSentFrameToChild(const Mac::TxFrame &aFrame,$/;"	f	class:ot::CslTxScheduler::Callbacks	typeref:typename:void
HandleSentFrameToChild	core/thread/indirect_sender.cpp	/^void IndirectSender::HandleSentFrameToChild(const Mac::TxFrame &aFrame,$/;"	f	class:ot::IndirectSender	typeref:typename:void
HandleServerDataUpdated	core/thread/network_data_notifier.cpp	/^void Notifier::HandleServerDataUpdated(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleServerStateChange	core/net/srp_advertising_proxy.hpp	/^    void HandleServerStateChange(void) { UpdateState(); }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleServiceUpdateResult	core/net/srp_server.cpp	/^void Server::HandleServiceUpdateResult(ServiceUpdateId aId, Error aError)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleSetActiveOperationalDataset	core/meshcop/tcat_agent.cpp	/^Error TcatAgent::HandleSetActiveOperationalDataset(const Message &aIncommingMessage, uint16_t aO/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:Error
HandleSetOrReplace	core/meshcop/dataset_manager_ftd.cpp	/^Error DatasetManager::HandleSetOrReplace(MgmtCommand             aCommand,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
HandleSignalTask	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::HandleSignalTask(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
HandleSingleTlv	core/meshcop/tcat_agent.cpp	/^Error TcatAgent::HandleSingleTlv(const Message &aIncommingMessage, Message &aOutgoingMessage)$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:Error
HandleSntpResponse	cli/cli.cpp	/^void Interpreter::HandleSntpResponse(uint64_t aTime, otError aResult)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleSntpResponse	cli/cli.cpp	/^void Interpreter::HandleSntpResponse(void *aContext, uint64_t aTime, otError aResult)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleSrpClientCallback	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleSrpClientCallback(otError                    aError,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleSrpServerAutoEnableMode	core/border_router/routing_manager.cpp	/^void RoutingManager::HandleSrpServerAutoEnableMode(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
HandleSrvResult	cli/cli_mdns.cpp	/^void Mdns::HandleSrvResult(const otMdnsSrvResult &aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleSrvResult	cli/cli_mdns.cpp	/^void Mdns::HandleSrvResult(otInstance *aInstance, const otMdnsSrvResult *aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleStaleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::HandleStaleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
HandleStartThreadInterface	core/meshcop/tcat_agent.cpp	/^Error TcatAgent::HandleStartThreadInterface(void)$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:Error
HandleStateChange	core/net/dnssd.cpp	/^void Dnssd::HandleStateChange(void)$/;"	f	class:ot::Dnssd	typeref:typename:void
HandleStateChange	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::HandleStateChange(otInstance *aInstance, otChangedFlags aFlags)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
HandleStateChanged	cli/cli_commissioner.cpp	/^void Commissioner::HandleStateChanged(otCommissionerState aState)$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleStateChanged	cli/cli_commissioner.cpp	/^void Commissioner::HandleStateChanged(otCommissionerState aState, void *aContext)$/;"	f	class:ot::Cli::Commissioner	typeref:typename:void
HandleStateChanged	core/border_router/infra_if.cpp	/^Error InfraIf::HandleStateChanged(uint32_t aIfIndex, bool aIsRunning)$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:Error
HandleStateChanged	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleStateChanged(otChangedFlags aFlags, void *aContext)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleTableChanged	core/thread/router_table.cpp	/^void RouterTable::HandleTableChanged(void)$/;"	f	class:ot::RouterTable	typeref:typename:void
HandleTasklet	core/common/locator_getters.hpp	/^void TaskletIn<Owner, HandleTaskletPtr>::HandleTasklet(Tasklet &aTasklet)$/;"	f	class:ot::TaskletIn	typeref:typename:void
HandleTasklet	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::HandleTasklet(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleTcpAcceptDone	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpAcceptDone(otTcpListener *aListener, otTcpEndpoint *aEndpoint, const o/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpAcceptDoneCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpAcceptDoneCallback(otTcpListener    *aListener,$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpAcceptReady	cli/cli_tcp.cpp	/^otTcpIncomingConnectionAction TcpExample::HandleTcpAcceptReady(otTcpListener    *aListener,$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otTcpIncomingConnectionAction
HandleTcpAcceptReadyCallback	cli/cli_tcp.cpp	/^otTcpIncomingConnectionAction TcpExample::HandleTcpAcceptReadyCallback(otTcpListener    *aListen/;"	f	class:ot::Cli::TcpExample	typeref:typename:otTcpIncomingConnectionAction
HandleTcpDisconnected	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpDisconnected(otTcpEndpoint *aEndpoint, otTcpDisconnectedReason aReason/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpDisconnected	core/net/dns_client.cpp	/^void Client::HandleTcpDisconnected(otTcpEndpoint *aEndpoint, otTcpDisconnectedReason aReason)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpDisconnectedCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpDisconnectedCallback(otTcpEndpoint *aEndpoint, otTcpDisconnectedReason/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpDisconnectedCallback	core/net/dns_client.cpp	/^void Client::HandleTcpDisconnectedCallback(otTcpEndpoint *aEndpoint, otTcpDisconnectedReason aRe/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpEstablished	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpEstablished(otTcpEndpoint *aEndpoint)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpEstablished	core/net/dns_client.cpp	/^void Client::HandleTcpEstablished(otTcpEndpoint *aEndpoint)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpEstablishedCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpEstablishedCallback(otTcpEndpoint *aEndpoint)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpEstablishedCallback	core/net/dns_client.cpp	/^void Client::HandleTcpEstablishedCallback(otTcpEndpoint *aEndpoint)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpForwardProgress	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpForwardProgress(otTcpEndpoint *aEndpoint, size_t aInSendBuffer, size_t/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpForwardProgressCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpForwardProgressCallback(otTcpEndpoint *aEndpoint, size_t aInSendBuffer/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpReceiveAvailable	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpReceiveAvailable(otTcpEndpoint *aEndpoint,$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpReceiveAvailable	core/net/dns_client.cpp	/^void Client::HandleTcpReceiveAvailable(otTcpEndpoint *aEndpoint,$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpReceiveAvailableCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpReceiveAvailableCallback(otTcpEndpoint *aEndpoint,$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpReceiveAvailableCallback	core/net/dns_client.cpp	/^void Client::HandleTcpReceiveAvailableCallback(otTcpEndpoint *aEndpoint,$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpSendDone	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpSendDone(otTcpEndpoint *aEndpoint, otLinkedBuffer *aData)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpSendDone	core/net/dns_client.cpp	/^void Client::HandleTcpSendDone(otTcpEndpoint *aEndpoint, otLinkedBuffer *aData)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTcpSendDoneCallback	cli/cli_tcp.cpp	/^void TcpExample::HandleTcpSendDoneCallback(otTcpEndpoint *aEndpoint, otLinkedBuffer *aData)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
HandleTcpSendDoneCallback	core/net/dns_client.cpp	/^void Client::HandleTcpSendDoneCallback(otTcpEndpoint *aEndpoint, otLinkedBuffer *aData)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleThreadChannelChanged	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleThreadChannelChanged(void)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleTimeSync	core/thread/mle.cpp	/^void Mle::HandleTimeSync(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleTimeSyncMessage	core/thread/time_sync_service.cpp	/^void TimeSync::HandleTimeSyncMessage(const Message &aMessage)$/;"	f	class:ot::TimeSync	typeref:typename:void
HandleTimeSyncUpdate	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleTimeSyncUpdate(void *aContext) { static_cast<NcpBase *>(aContext)->HandleTim/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleTimeSyncUpdate	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleTimeSyncUpdate(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleTimeTick	core/backbone_router/bbr_local.cpp	/^void Local::HandleTimeTick(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
HandleTimeTick	core/net/ip6.cpp	/^void Ip6::HandleTimeTick(void)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
HandleTimeTick	core/net/ip6_mpl.cpp	/^void Mpl::HandleTimeTick(void)$/;"	f	class:ot::Ip6::Mpl	typeref:typename:void
HandleTimeTick	core/thread/address_resolver.cpp	/^void AddressResolver::HandleTimeTick(void)$/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleTimeTick	core/thread/child_supervision.cpp	/^void ChildSupervisor::HandleTimeTick(void)$/;"	f	class:ot::ChildSupervisor	typeref:typename:void
HandleTimeTick	core/thread/dua_manager.cpp	/^void DuaManager::HandleTimeTick(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
HandleTimeTick	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleTimeTick(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleTimeTick	core/thread/mle_router.cpp	/^bool MleRouter::RouterRoleTransition::HandleTimeTick(void)$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:bool
HandleTimeTick	core/thread/mle_router.cpp	/^void MleRouter::HandleTimeTick(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleTimeTick	core/thread/mlr_manager.cpp	/^void MlrManager::HandleTimeTick(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
HandleTimeTick	core/thread/network_data_notifier.cpp	/^void Notifier::HandleTimeTick(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleTimeTick	core/thread/router_table.cpp	/^void RouterTable::HandleTimeTick(void)$/;"	f	class:ot::RouterTable	typeref:typename:void
HandleTimeTick	core/thread/router_table.cpp	/^void RouterTable::RouterIdMap::HandleTimeTick(void)$/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:void
HandleTimeout	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleTimeout(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTimeout	core/thread/time_sync_service.cpp	/^void TimeSync::HandleTimeout(void) { CheckAndHandleChanges(false); }$/;"	f	class:ot::TimeSync	typeref:typename:void
HandleTimer	cli/cli.cpp	/^void Interpreter::HandleTimer(Timer &aTimer)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleTimer	cli/cli.cpp	/^void Interpreter::HandleTimer(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
HandleTimer	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleTimer(void)$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleTimer	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::HandleTimer(void)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
HandleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::HandleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
HandleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::HandleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
HandleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::HandleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
HandleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::HandleTimer(void) { SetPreferenceBasedOnRole(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
HandleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RsSender::HandleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender	typeref:typename:void
HandleTimer	core/border_router/routing_manager.hpp	/^        void  HandleTimer(void) { WithdrawPrefix(); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
HandleTimer	core/coap/coap.cpp	/^void ResponsesQueue::HandleTimer(Timer &aTimer)$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
HandleTimer	core/coap/coap.cpp	/^void ResponsesQueue::HandleTimer(void)$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
HandleTimer	core/common/locator_getters.hpp	/^void TimerMicroIn<Owner, HandleTimertPtr>::HandleTimer(Timer &aTimer)$/;"	f	class:ot::TimerMicroIn	typeref:typename:void
HandleTimer	core/common/locator_getters.hpp	/^void TimerMilliIn<Owner, HandleTimertPtr>::HandleTimer(Timer &aTimer)$/;"	f	class:ot::TimerMilliIn	typeref:typename:void
HandleTimer	core/common/time_ticker.cpp	/^void TimeTicker::HandleTimer(void)$/;"	f	class:ot::TimeTicker	typeref:typename:void
HandleTimer	core/common/trickle_timer.cpp	/^void TrickleTimer::HandleTimer(Timer &aTimer) { static_cast<TrickleTimer *>(&aTimer)->HandleTime/;"	f	class:ot::TrickleTimer	typeref:typename:void
HandleTimer	core/common/trickle_timer.cpp	/^void TrickleTimer::HandleTimer(void)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
HandleTimer	core/common/uptime.cpp	/^void Uptime::HandleTimer(void)$/;"	f	class:ot::Uptime	typeref:typename:void
HandleTimer	core/mac/mac.cpp	/^void Mac::HandleTimer(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
HandleTimer	core/mac/sub_mac.cpp	/^void SubMac::HandleTimer(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleTimer	core/meshcop/commissioner.cpp	/^void Commissioner::HandleTimer(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleTimer	core/meshcop/dataset_manager.cpp	/^void ActiveDatasetManager::HandleTimer(Timer &aTimer) { aTimer.Get<ActiveDatasetManager>().Handl/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
HandleTimer	core/meshcop/dataset_manager.cpp	/^void DatasetManager::HandleTimer(void)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
HandleTimer	core/meshcop/dataset_manager.cpp	/^void PendingDatasetManager::HandleTimer(Timer &aTimer) { aTimer.Get<PendingDatasetManager>().Han/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
HandleTimer	core/meshcop/dataset_manager.hpp	/^    void        HandleTimer(void) { DatasetManager::HandleTimer(); }$/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
HandleTimer	core/meshcop/dataset_manager.hpp	/^    void        HandleTimer(void) { DatasetManager::HandleTimer(); }$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
HandleTimer	core/meshcop/dataset_updater.cpp	/^void DatasetUpdater::HandleTimer(void) { PreparePendingDataset(); }$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:void
HandleTimer	core/meshcop/joiner.cpp	/^void Joiner::HandleTimer(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleTimer	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleTimer(void) { SendDelayedJoinerEntrust(); }$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleTimer	core/meshcop/meshcop_leader.cpp	/^void Leader::HandleTimer(void)$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
HandleTimer	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleTimer(Timer &aTimer)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleTimer	core/meshcop/secure_transport.cpp	/^void SecureTransport::HandleTimer(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
HandleTimer	core/net/dns_client.cpp	/^void Client::HandleTimer(void)$/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleTimer	core/net/dns_dso.cpp	/^void Dso::Connection::HandleTimer(TimeMilli aNow, TimeMilli &aNextTime)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
HandleTimer	core/net/dns_dso.cpp	/^void Dso::HandleTimer(void)$/;"	f	class:ot::Dns::Dso	typeref:typename:void
HandleTimer	core/net/dnssd_server.cpp	/^void Server::HandleTimer(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^template <typename EntryType> void Core::Entry::HandleTimer(EntryTimerContext &aContext)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::CacheEntry::HandleTimer(CacheTimerContext &aContext)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::HostEntry::HandleTimer(EntryTimerContext &aContext) { Entry::HandleTimer<HostEntry>(a/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::MultiPacketRxMessages::HandleTimer(void)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::ServiceEntry::HandleTimer(EntryTimerContext &aContext) { Entry::HandleTimer<ServiceEn/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::ServiceType::HandleTimer(EntryTimerContext &aContext)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
HandleTimer	core/net/mdns.cpp	/^void Core::TxMessageHistory::HandleTimer(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory	typeref:typename:void
HandleTimer	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::HandleTimer(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
HandleTimer	core/net/srp_client.cpp	/^void Client::HandleTimer(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleTimer	core/net/tcp6.cpp	/^void Tcp::HandleTimer(void)$/;"	f	class:ot::Ip6::Tcp	typeref:typename:void
HandleTimer	core/radio/trel_link.cpp	/^void Link::HandleTimer(Neighbor &aNeighbor)$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleTimer	core/radio/trel_link.cpp	/^void Link::HandleTimer(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleTimer	core/thread/announce_begin_server.cpp	/^void AnnounceBeginServer::HandleTimer(Timer &aTimer)$/;"	f	class:ot::AnnounceBeginServer	typeref:typename:void
HandleTimer	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleTimer(Timer &aTimer) { aTimer.Get<AnnounceSender>().AnnounceSenderBas/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleTimer	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::HandleTimer(void)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
HandleTimer	core/thread/child_supervision.cpp	/^void SupervisionListener::HandleTimer(void)$/;"	f	class:ot::SupervisionListener	typeref:typename:void
HandleTimer	core/thread/discover_scanner.cpp	/^void DiscoverScanner::HandleTimer(void)$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
HandleTimer	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::HandleTimer(void)$/;"	f	class:ot::EnergyScanServer	typeref:typename:void
HandleTimer	core/thread/mle.cpp	/^void Mle::ParentSearch::HandleTimer(void)$/;"	f	class:ot::Mle::Mle::ParentSearch	typeref:typename:void
HandleTimer	core/thread/network_data_leader_ftd.cpp	/^void Leader::ContextIds::HandleTimer(void)$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
HandleTimer	core/thread/network_data_leader_ftd.cpp	/^void Leader::HandleTimer(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
HandleTimer	core/thread/network_data_notifier.cpp	/^void Notifier::HandleTimer(void) { SynchronizeServerData(); }$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
HandleTimer	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::HandleTimer(void)$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
HandleTimer	core/thread/network_data_publisher.cpp	/^void Publisher::HandleTimer(void)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
HandleTimer	core/thread/network_data_publisher.hpp	/^        void      HandleTimer(void) { Entry::HandleTimer(); }$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
HandleTimer	core/thread/network_data_publisher.hpp	/^        void HandleTimer(void) { Entry::HandleTimer(); }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
HandleTimer	core/thread/panid_query_server.cpp	/^void PanIdQueryServer::HandleTimer(void)$/;"	f	class:ot::PanIdQueryServer	typeref:typename:void
HandleTimer	core/utils/channel_manager.cpp	/^void ChannelManager::HandleTimer(void)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
HandleTimer	core/utils/channel_monitor.cpp	/^void ChannelMonitor::HandleTimer(void)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:void
HandleTimer	core/utils/history_tracker.cpp	/^void HistoryTracker::HandleTimer(void)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
HandleTimer	core/utils/jam_detector.cpp	/^void JamDetector::HandleTimer(void)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
HandleTimer	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::HandleTimer(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
HandleTimer	core/utils/mesh_diag.cpp	/^void MeshDiag::HandleTimer(void) { Finalize(kErrorResponseTimeout); }$/;"	f	class:ot::Utils::MeshDiag	typeref:typename:void
HandleTimer	core/utils/ping_sender.cpp	/^void PingSender::HandleTimer(void)$/;"	f	class:ot::Utils::PingSender	typeref:typename:void
HandleTimer	core/utils/slaac_address.cpp	/^void Slaac::HandleTimer(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
HandleTlsConnected	core/radio/ble_secure.cpp	/^void BleSecure::HandleTlsConnected(bool aConnected)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleTlsConnected	core/radio/ble_secure.cpp	/^void BleSecure::HandleTlsConnected(void *aContext, bool aConnected)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleTlsReceive	core/radio/ble_secure.cpp	/^void BleSecure::HandleTlsReceive(uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleTlsReceive	core/radio/ble_secure.cpp	/^void BleSecure::HandleTlsReceive(void *aContext, uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleTmf	core/backbone_router/bbr_manager.cpp	/^template <> void Manager::HandleTmf<kUriBackboneAnswer>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleTmf	core/backbone_router/bbr_manager.cpp	/^template <> void Manager::HandleTmf<kUriBackboneQuery>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleTmf	core/backbone_router/bbr_manager.cpp	/^template <> void Manager::HandleTmf<kUriMlr>(Coap::Message &aMessage, const Ip6::MessageInfo &aM/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleTmf	core/backbone_router/bbr_manager.cpp	/^void Manager::HandleTmf<kUriDuaRegistrationRequest>(Coap::Message &aMessage, const Ip6::MessageI/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriActiveGet>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriActiveSet>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriPendingGet>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriPendingSet>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriProxyTx>(Coap::Message &aMessage, const Ip6::Message/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriRelayRx>(Coap::Message &aMessage, const Ip6::Message/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^template <> void BorderAgent::HandleTmf<kUriRelayTx>(Coap::Message &aMessage, const Ip6::Message/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleTmf<kUriCommissionerGet>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleTmf<kUriCommissionerKeepAlive>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleTmf<kUriCommissionerPetition>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/border_agent.cpp	/^void BorderAgent::HandleTmf<kUriCommissionerSet>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
HandleTmf	core/meshcop/commissioner.cpp	/^template <> void Commissioner::HandleTmf<kUriRelayRx>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleTmf	core/meshcop/commissioner.cpp	/^void Commissioner::HandleTmf<kUriDatasetChanged>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleTmf	core/meshcop/commissioner.cpp	/^void Commissioner::HandleTmf<kUriJoinerFinalize>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
HandleTmf	core/meshcop/dataset_manager.cpp	/^void ActiveDatasetManager::HandleTmf<kUriActiveGet>(Coap::Message &aMessage, const Ip6::MessageI/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
HandleTmf	core/meshcop/dataset_manager.cpp	/^void PendingDatasetManager::HandleTmf<kUriPendingGet>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
HandleTmf	core/meshcop/dataset_manager_ftd.cpp	/^void ActiveDatasetManager::HandleTmf<kUriActiveReplace>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
HandleTmf	core/meshcop/dataset_manager_ftd.cpp	/^void ActiveDatasetManager::HandleTmf<kUriActiveSet>(Coap::Message &aMessage, const Ip6::MessageI/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
HandleTmf	core/meshcop/dataset_manager_ftd.cpp	/^void PendingDatasetManager::HandleTmf<kUriPendingSet>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
HandleTmf	core/meshcop/energy_scan_client.cpp	/^void EnergyScanClient::HandleTmf<kUriEnergyReport>(Coap::Message &aMessage, const Ip6::MessageIn/;"	f	class:ot::EnergyScanClient	typeref:typename:void
HandleTmf	core/meshcop/joiner.cpp	/^template <> void Joiner::HandleTmf<kUriJoinerEntrust>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
HandleTmf	core/meshcop/joiner_router.cpp	/^template <> void JoinerRouter::HandleTmf<kUriRelayTx>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleTmf	core/meshcop/meshcop_leader.cpp	/^template <> void Leader::HandleTmf<kUriLeaderKeepAlive>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
HandleTmf	core/meshcop/meshcop_leader.cpp	/^template <> void Leader::HandleTmf<kUriLeaderPetition>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
HandleTmf	core/meshcop/panid_query_client.cpp	/^void PanIdQueryClient::HandleTmf<kUriPanIdConflict>(Coap::Message &aMessage, const Ip6::MessageI/;"	f	class:ot::PanIdQueryClient	typeref:typename:void
HandleTmf	core/thread/address_resolver.cpp	/^void AddressResolver::HandleTmf<kUriAddressError>(Coap::Message &aMessage, const Ip6::MessageInf/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleTmf	core/thread/address_resolver.cpp	/^void AddressResolver::HandleTmf<kUriAddressNotify>(Coap::Message &aMessage, const Ip6::MessageIn/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleTmf	core/thread/address_resolver.cpp	/^void AddressResolver::HandleTmf<kUriAddressQuery>(Coap::Message &aMessage, const Ip6::MessageInf/;"	f	class:ot::AddressResolver	typeref:typename:void
HandleTmf	core/thread/announce_begin_server.cpp	/^void AnnounceBeginServer::HandleTmf<kUriAnnounceBegin>(Coap::Message &aMessage, const Ip6::Messa/;"	f	class:ot::AnnounceBeginServer	typeref:typename:void
HandleTmf	core/thread/anycast_locator.cpp	/^void AnycastLocator::HandleTmf<kUriAnycastLocate>(Coap::Message &aMessage, const Ip6::MessageInf/;"	f	class:ot::AnycastLocator	typeref:typename:void
HandleTmf	core/thread/dua_manager.cpp	/^void DuaManager::HandleTmf<kUriDuaRegistrationNotify>(Coap::Message &aMessage, const Ip6::Messag/;"	f	class:ot::DuaManager	typeref:typename:void
HandleTmf	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::HandleTmf<kUriEnergyScan>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::EnergyScanServer	typeref:typename:void
HandleTmf	core/thread/mle_router.cpp	/^template <> void MleRouter::HandleTmf<kUriAddressRelease>(Coap::Message &aMessage, const Ip6::Me/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleTmf	core/thread/mle_router.cpp	/^template <> void MleRouter::HandleTmf<kUriAddressSolicit>(Coap::Message &aMessage, const Ip6::Me/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
HandleTmf	core/thread/network_data_leader_ftd.cpp	/^template <> void Leader::HandleTmf<kUriCommissionerGet>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
HandleTmf	core/thread/network_data_leader_ftd.cpp	/^template <> void Leader::HandleTmf<kUriCommissionerSet>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
HandleTmf	core/thread/network_data_leader_ftd.cpp	/^template <> void Leader::HandleTmf<kUriServerData>(Coap::Message &aMessage, const Ip6::MessageIn/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
HandleTmf	core/thread/network_diagnostic.cpp	/^template <> void Server::HandleTmf<kUriDiagnosticReset>(Coap::Message &aMessage, const Ip6::Mess/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
HandleTmf	core/thread/network_diagnostic.cpp	/^void Client::HandleTmf<kUriDiagnosticGetAnswer>(Coap::Message &aMessage, const Ip6::MessageInfo /;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:void
HandleTmf	core/thread/network_diagnostic.cpp	/^void Server::HandleTmf<kUriDiagnosticGetQuery>(Coap::Message &aMessage, const Ip6::MessageInfo &/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
HandleTmf	core/thread/network_diagnostic.cpp	/^void Server::HandleTmf<kUriDiagnosticGetRequest>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
HandleTmf	core/thread/panid_query_server.cpp	/^void PanIdQueryServer::HandleTmf<kUriPanIdQuery>(Coap::Message &aMessage, const Ip6::MessageInfo/;"	f	class:ot::PanIdQueryServer	typeref:typename:void
HandleTmf	core/thread/tmf.cpp	/^template <> void Agent::HandleTmf<kUriRelayRx>(Message &aMessage, const Ip6::MessageInfo &aMessa/;"	f	class:ot::Tmf::Agent	typeref:typename:void
HandleTransmit	core/coap/coap_secure.cpp	/^void CoapSecure::HandleTransmit(Tasklet &aTasklet)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleTransmit	core/coap/coap_secure.cpp	/^void CoapSecure::HandleTransmit(void)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleTransmit	core/radio/ble_secure.cpp	/^void BleSecure::HandleTransmit(void)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
HandleTransmitDone	core/mac/mac.cpp	/^void Mac::HandleTransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aError)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
HandleTransmitDone	core/mac/sub_mac.cpp	/^void SubMac::HandleTransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aError)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleTransmitDone	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleTransmitDone(Mac::TxFrame &aFrame, Mac::RxFrame *aAckFrame, Error a/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleTransmitDone	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleTransmitDone(uint32_t          aCommand,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleTransmitStarted	core/mac/sub_mac.cpp	/^void SubMac::HandleTransmitStarted(TxFrame &aFrame)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
HandleTransmitStarted	core/radio/radio_callbacks.cpp	/^void Radio::Callbacks::HandleTransmitStarted(Mac::TxFrame &aFrame) { Get<Mac::SubMac>().HandleTr/;"	f	class:ot::Radio::Callbacks	typeref:typename:void
HandleTransport	core/radio/ble_secure.cpp	/^Error BleSecure::HandleTransport(ot::Message &aMessage)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
HandleTransport	core/radio/ble_secure.cpp	/^Error BleSecure::HandleTransport(void *aContext, ot::Message &aMessage, const Ip6::MessageInfo &/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
HandleTrickleTimer	core/net/dhcp6_client.cpp	/^void Client::HandleTrickleTimer(TrickleTimer &aTrickleTimer) { aTrickleTimer.Get<Client>().Handl/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
HandleTrickleTimer	core/net/dhcp6_client.cpp	/^void Client::HandleTrickleTimer(void)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
HandleTrickleTimer	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleTrickleTimer(TrickleTimer &aTimer) { aTimer.Get<AnnounceSender>().Han/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleTrickleTimer	core/thread/announce_sender.cpp	/^void AnnounceSender::HandleTrickleTimer(void)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
HandleTxDelayTimer	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::HandleTxDelayTimer(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
HandleTxMessageHistoryTimer	core/net/mdns.hpp	/^    void HandleTxMessageHistoryTimer(void) { mTxMessageHistory.HandleTimer(); }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
HandleTxTasklet	core/radio/trel_link.cpp	/^void Link::HandleTxTasklet(void) { BeginTransmit(); }$/;"	f	class:ot::Trel::Link	typeref:typename:void
HandleTxtResult	cli/cli_mdns.cpp	/^void Mdns::HandleTxtResult(const otMdnsTxtResult &aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleTxtResult	cli/cli_mdns.cpp	/^void Mdns::HandleTxtResult(otInstance *aInstance, const otMdnsTxtResult *aResult)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
HandleUdpForwardStream	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleUdpForwardStream(otMessage    *aMessage,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleUdpForwardStream	ncp/ncp_base_mtd.cpp	/^void NcpBase::HandleUdpForwardStream(otMessage *aMessage, uint16_t aPeerPort, otIp6Address &aPee/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
HandleUdpReceive	cli/cli_udp.cpp	/^void UdpExample::HandleUdpReceive(otMessage *aMessage, const otMessageInfo *aMessageInfo)$/;"	f	class:ot::Cli::UdpExample	typeref:typename:void
HandleUdpReceive	cli/cli_udp.cpp	/^void UdpExample::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMes/;"	f	class:ot::Cli::UdpExample	typeref:typename:void
HandleUdpReceive	core/coap/coap.cpp	/^void Coap::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageIn/;"	f	class:ot::Coap::Coap	typeref:typename:void
HandleUdpReceive	core/coap/coap_secure.hpp	/^    void HandleUdpReceive(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
HandleUdpReceive	core/meshcop/border_agent.cpp	/^bool BorderAgent::HandleUdpReceive(const Message &aMessage, const Ip6::MessageInfo &aMessageInfo/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:bool
HandleUdpReceive	core/meshcop/border_agent.cpp	/^bool BorderAgent::HandleUdpReceive(void *aContext, const otMessage *aMessage, const otMessageInf/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:bool
HandleUdpReceive	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleUdpReceive	core/meshcop/joiner_router.cpp	/^void JoinerRouter::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aM/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
HandleUdpReceive	core/net/dhcp6_client.cpp	/^void Client::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
HandleUdpReceive	core/net/dhcp6_client.cpp	/^void Client::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
HandleUdpReceive	core/net/dhcp6_server.cpp	/^void Server::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
HandleUdpReceive	core/net/dhcp6_server.cpp	/^void Server::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
HandleUdpReceive	core/net/dns_client.cpp	/^void Client::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMsgInfo/;"	f	class:ot::Dns::Client	typeref:typename:void
HandleUdpReceive	core/net/dnssd_server.cpp	/^void Server::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
HandleUdpReceive	core/net/dnssd_server.cpp	/^void Server::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
HandleUdpReceive	core/net/sntp_client.cpp	/^void Client::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Sntp::Client	typeref:typename:void
HandleUdpReceive	core/net/sntp_client.cpp	/^void Client::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Sntp::Client	typeref:typename:void
HandleUdpReceive	core/net/srp_client.cpp	/^void Client::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleUdpReceive	core/net/srp_server.cpp	/^void Server::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleUdpReceive	core/net/srp_server.cpp	/^void Server::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessage/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleUdpReceive	core/net/udp6.hpp	/^        void HandleUdpReceive(Message &aMessage, const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:void
HandleUdpReceive	core/thread/mle.cpp	/^void Mle::HandleUdpReceive(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleUdpReceive	core/thread/mle.cpp	/^void Mle::HandleUdpReceive(void *aContext, otMessage *aMessage, const otMessageInfo *aMessageInf/;"	f	class:ot::Mle::Mle	typeref:typename:void
HandleUpdate	core/net/srp_server.cpp	/^void Server::HandleUpdate(Host &aHost, const MessageMetadata &aMetadata)$/;"	f	class:ot::Srp::Server	typeref:typename:void
HandleUpdateDone	core/net/srp_client.cpp	/^void Client::HandleUpdateDone(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
HandleValueIs	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleValueIs(spinel_prop_key_t aKey, const uint8_t *aBuffer, uint16_t aLength/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandleWaitingResponse	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::HandleWaitingResponse(uint32_t          aCommand,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
HandledReceived	core/border_router/infra_if.cpp	/^void InfraIf::HandledReceived(uint32_t aIfIndex, const Ip6::Address &aSource, const Icmp6Packet /;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:void
Handler	core/net/icmp6.hpp	/^        Handler(otIcmp6ReceiveCallback aCallback, void *aContext)$/;"	f	class:ot::Ip6::Icmp::Handler
HardwareReset	posix/platform/hdlc_interface.hpp	/^    otError HardwareReset(void) { return OT_ERROR_NOT_IMPLEMENTED; }$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
HardwareReset	posix/platform/spi_interface.cpp	/^otError SpiInterface::HardwareReset(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
HardwareReset	posix/platform/vendor_interface_example.cpp	/^otError VendorInterface::HardwareReset(void)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:otError
HasAcceptableParentCandidate	core/thread/mle.cpp	/^bool Mle::HasAcceptableParentCandidate(void) const$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
HasAddedExternalRoute	posix/platform/netif.cpp	/^bool HasAddedExternalRoute(const otIp6Prefix &aExternalRoute)$/;"	f	typeref:typename:bool
HasAddedOmrRoute	posix/platform/netif.cpp	/^static bool HasAddedOmrRoute(const otIp6Prefix &aOmrPrefix)$/;"	f	typeref:typename:bool	file:
HasAddress	core/border_router/infra_if.cpp	/^bool InfraIf::HasAddress(const Ip6::Address &aAddress) const$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:bool
HasAdvertised	core/border_router/routing_manager.hpp	/^        bool            HasAdvertised(const Ip6::Prefix &aPrefix) const { return mPrefixes.Conta/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:bool
HasAny	core/common/bit_vector.hpp	/^    bool HasAny(void) const$/;"	f	class:ot::BitVector	typeref:typename:bool
HasAnyExternalMulticastAddress	core/net/netif.hpp	/^    bool HasAnyExternalMulticastAddress(void) const { return !ExternalMulticastAddress::Iterator/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
HasAnyMlrRegisteredAddress	core/thread/child.hpp	/^    bool HasAnyMlrRegisteredAddress(void) const { return mMlrRegisteredMask.HasAny(); }$/;"	f	class:ot::Child	typeref:typename:bool
HasAnyMlrToRegisterAddress	core/thread/child.hpp	/^    bool HasAnyMlrToRegisterAddress(void) const { return mMlrToRegisterMask.HasAny(); }$/;"	f	class:ot::Child	typeref:typename:bool
HasAnyTimedOut	core/net/dns_dso.cpp	/^bool Dso::Connection::PendingRequests::HasAnyTimedOut(TimeMilli aNow) const$/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:bool
HasAverage	core/thread/link_quality.hpp	/^    bool HasAverage(void) const { return (mCount != 0); }$/;"	f	class:ot::RssAverager	typeref:typename:bool
HasChildren	core/thread/child_table.cpp	/^bool ChildTable::HasChildren(Child::StateFilter aFilter) const$/;"	f	class:ot::ChildTable	typeref:typename:bool
HasChildren	core/thread/mle_router.cpp	/^bool MleRouter::HasChildren(void) { return mChildTable.HasChildren(Child::kInStateValidOrAttachi/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
HasDomainPrefix	core/backbone_router/bbr_leader.hpp	/^    bool HasDomainPrefix(void) const { return (mDomainPrefix.GetLength() > 0); }$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:bool
HasEntry	core/border_router/routing_manager.hpp	/^            bool HasEntry(void) const { return mPtr2 != nullptr; }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:bool
HasExternalRouteInNetData	posix/platform/netif.cpp	/^bool HasExternalRouteInNetData(otInstance *aInstance, const otIp6Prefix &aExternalRoute)$/;"	f	typeref:typename:bool
HasFireTime	core/net/mdns.hpp	/^        bool      HasFireTime(void) const { return mHasFireTime; }$/;"	f	class:ot::Dns::Multicast::Core::FireTime	typeref:typename:bool
HasFrame	lib/spinel/multi_frame_buffer.hpp	/^    bool HasFrame(void) const { return (mWritePointer != GetFrame()); }$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:bool
HasFrame	lib/spinel/spinel_buffer.cpp	/^bool Buffer::HasFrame(Priority aPriority) const { return mReadFrameStart[aPriority] != mWriteFra/;"	f	class:ot::Spinel::Buffer	typeref:typename:bool
HasIp6Address	core/thread/child.cpp	/^bool Child::HasIp6Address(const Ip6::Address &aAddress) const$/;"	f	class:ot::Child	typeref:typename:bool
HasKey	core/crypto/storage.hpp	/^inline bool HasKey(KeyRef aKeyRef) { return otPlatCryptoHasKey(aKeyRef); }$/;"	f	namespace:ot::Crypto::Storage	typeref:typename:bool
HasKey	posix/platform/config_file.cpp	/^bool ConfigFile::HasKey(const char *aKey) const$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:bool
HasKeyRecord	core/net/mdns.hpp	/^        bool  HasKeyRecord(void) const { return mKeyRecord.IsPresent(); }$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:bool
HasLinkLocalAddress	posix/platform/infra_if.cpp	/^bool InfraNetif::HasLinkLocalAddress(void) const$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:bool
HasMlrRegisteredAddress	core/thread/child.cpp	/^bool Child::HasMlrRegisteredAddress(const Ip6::Address &aAddress) const$/;"	f	class:ot::Child	typeref:typename:bool
HasMoreChannelsToAnnounce	core/thread/mle.cpp	/^bool Mle::HasMoreChannelsToAnnounce(void) const$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
HasMulticastListener	posix/platform/multicast_routing.cpp	/^bool MulticastRoutingManager::HasMulticastListener(const Ip6::Address &aAddress) const$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:bool
HasNameConflictsWith	core/net/srp_server.cpp	/^bool Server::HasNameConflictsWith(Host &aHost) const$/;"	f	class:ot::Srp::Server	typeref:typename:bool
HasNeighborWithGoodLinkQuality	core/thread/mle_router.cpp	/^bool MleRouter::HasNeighborWithGoodLinkQuality(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
HasOnly1BitSet	ncp/ncp_base.cpp	/^static bool HasOnly1BitSet(uint32_t aValue) { return aValue != 0 && ((aValue & (aValue - 1)) == /;"	f	namespace:ot::Ncp	typeref:typename:bool	file:
HasParam	lib/url/url.hpp	/^    bool HasParam(const char *aName) const { return (GetValue(aName) != nullptr); }$/;"	f	class:ot::Url::Url	typeref:typename:bool
HasParseErrored	core/coap/coap_message.hpp	/^        bool HasParseErrored(void) const { return mNextOptionOffset == kNextOptionOffsetParseErr/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:bool
HasPendingFrame	lib/spinel/radio_spinel.hpp	/^    bool HasPendingFrame(void) const { return mSpinelDriver->HasPendingFrame(); }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
HasPendingFrame	lib/spinel/spinel_driver.hpp	/^    bool HasPendingFrame(void) const { return mRxFrameBuffer.HasSavedFrame(); }$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:bool
HasPrefix	core/border_router/routing_manager.hpp	/^        bool               HasPrefix(void) const { return IsValidOmrPrefix(mPrefix.GetPrefix());/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:bool
HasPrefix	core/net/netif.hpp	/^        bool HasPrefix(const Prefix &aPrefix) const$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:bool
HasPrimary	core/backbone_router/bbr_leader.hpp	/^    bool HasPrimary(void) const { return mConfig.mServer16 != Mac::kShortAddrInvalid; }$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:bool
HasRestored	core/thread/mle.hpp	/^    bool HasRestored(void) const { return mHasRestored; }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
HasSavedFrame	lib/spinel/multi_frame_buffer.hpp	/^    bool HasSavedFrame(void) const { return (mWriteFrameStart != mBuffer); }$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:bool
HasSelectedServer	core/net/srp_client.cpp	/^bool Client::AutoStart::HasSelectedServer(void) const$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:bool
HasService	core/net/srp_server.cpp	/^bool Server::Host::HasService(const char *aInstanceName) const { return mServices.ContainsMatchi/;"	f	class:ot::Srp::Server::Host	typeref:typename:bool
HasSignaled	core/common/notifier.hpp	/^    bool HasSignaled(Event aEvent) const { return mSignaledEvents.Contains(aEvent); }$/;"	f	class:ot::Notifier	typeref:typename:bool
HasSleepyChildWithAddress	core/thread/child_table.cpp	/^bool ChildTable::HasSleepyChildWithAddress(const Ip6::Address &aIp6Address) const$/;"	f	class:ot::ChildTable	typeref:typename:bool
HasSubType	core/net/srp_client.hpp	/^        bool HasSubType(void) const { return (mSubTypeLabels != nullptr); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:bool
HasSubTypeServiceName	core/net/srp_server.cpp	/^bool Server::Service::HasSubTypeServiceName(const char *aSubTypeServiceName) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:bool
HasUnicastAddress	core/net/netif.cpp	/^bool Netif::HasUnicastAddress(const Address &aAddress) const { return mUnicastAddresses.Contains/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
HasUnicastAddress	core/net/netif.hpp	/^    bool HasUnicastAddress(const UnicastAddress &aAddress) const { return mUnicastAddresses.Cont/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
HasUnregisteredAddress	core/thread/mle.cpp	/^bool Mle::HasUnregisteredAddress(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
HdlcByteNeedsEscape	lib/hdlc/hdlc.cpp	/^static bool HdlcByteNeedsEscape(uint8_t aByte)$/;"	f	namespace:ot::Hdlc	typeref:typename:bool	file:
HdlcInterface	posix/platform/hdlc_interface.cpp	/^HdlcInterface::HdlcInterface(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::HdlcInterface
Header	core/crypto/aes_ccm.cpp	/^void AesCcm::Header(const void *aHeader, uint32_t aHeaderLength)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
Header	core/crypto/aes_ccm.hpp	/^    template <typename ObjectType> void Header(const ObjectType &aObject)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
Header	core/net/dns_types.hpp	/^    Header(void) { Clear(); }$/;"	f	class:ot::Dns::Header
Header	core/net/nd6.hpp	/^        Header(void) { SetToDefault(); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header
Heap	core/utils/heap.cpp	/^Heap::Heap(void)$/;"	f	class:ot::Utils::Heap
History	cli/cli_history.hpp	/^    History(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::History
HistoryTracker	core/utils/history_tracker.cpp	/^HistoryTracker::HistoryTracker(Instance &aInstance)$/;"	f	class:ot::Utils::HistoryTracker
HkdfSha256	core/crypto/hkdf_sha256.cpp	/^HkdfSha256::HkdfSha256(void)$/;"	f	class:ot::Crypto::HkdfSha256
HmacSha256	core/crypto/hmac_sha256.cpp	/^HmacSha256::HmacSha256(void)$/;"	f	class:ot::Crypto::HmacSha256
Host	core/net/srp_server.cpp	/^Server::Host::Host(Instance &aInstance, TimeMilli aUpdateTime)$/;"	f	class:ot::Srp::Server::Host
HostEntry	core/net/mdns.cpp	/^Core::HostEntry::HostEntry(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry
HostMask	core/net/ip4_types.hpp	/^    uint32_t HostMask(void) const$/;"	f	class:ot::Ip4::Cidr	typeref:typename:uint32_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint16_t HostSwap(uint16_t aValue) { return HostSwap16(aValue); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint16_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint16_t HostSwap(uint16_t aValue) { return HostSwap16(aValue); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint16_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint32_t HostSwap(uint32_t aValue) { return HostSwap32(aValue); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint32_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint32_t HostSwap(uint32_t aValue) { return HostSwap32(aValue); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint32_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint64_t HostSwap(uint64_t aValue) { return HostSwap64(aValue); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint64_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint64_t HostSwap(uint64_t aValue) { return HostSwap64(aValue); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint64_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint8_t  HostSwap(uint8_t aValue) { return aValue; }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint8_t
HostSwap	core/common/encoding.hpp	/^template <> inline uint8_t  HostSwap(uint8_t aValue) { return aValue; }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint8_t
HostSwap16	core/common/encoding.hpp	/^inline uint16_t HostSwap16(uint16_t v) { return Swap16(v); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint16_t
HostSwap16	core/common/encoding.hpp	/^inline uint16_t HostSwap16(uint16_t v) { return v; }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint16_t
HostSwap32	core/common/encoding.hpp	/^inline uint32_t HostSwap32(uint32_t v) { return Swap32(v); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint32_t
HostSwap32	core/common/encoding.hpp	/^inline uint32_t HostSwap32(uint32_t v) { return v; }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint32_t
HostSwap64	core/common/encoding.hpp	/^inline uint64_t HostSwap64(uint64_t v) { return Swap64(v); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint64_t
HostSwap64	core/common/encoding.hpp	/^inline uint64_t HostSwap64(uint64_t v) { return v; }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint64_t
Icmp	core/net/icmp6.cpp	/^Icmp::Icmp(Instance &aInstance)$/;"	f	class:ot::Ip6::Icmp
IgnoreError	core/common/code_utils.hpp	/^static inline void IgnoreError(otError aError) { OT_UNUSED_VARIABLE(aError); }$/;"	f	typeref:typename:void
IgnoreError	lib/spinel/multi_frame_buffer.hpp	/^    static void IgnoreError(otError aError) { (void)(aError); }$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:void
IidToInstance	ncp/ncp_base.cpp	/^Instance *NcpBase::IidToInstance(uint8_t aIid)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:Instance *
ImportKey	core/crypto/storage.hpp	/^inline Error ImportKey(KeyRef        &aKeyRef,$/;"	f	namespace:ot::Crypto::Storage	typeref:typename:Error
ImportKeyPair	core/crypto/ecdsa.hpp	/^        Error ImportKeyPair(const KeyPair &aKeyPair)$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:Error
InFrameAppend	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameAppend(uint8_t aByte)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameBegin	lib/spinel/spinel_buffer.cpp	/^void Buffer::InFrameBegin(Priority aPriority)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
InFrameBeginSegment	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameBeginSegment(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameDiscard	lib/spinel/spinel_buffer.cpp	/^void Buffer::InFrameDiscard(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
InFrameEnd	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameEnd(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameEndSegment	lib/spinel/spinel_buffer.cpp	/^void Buffer::InFrameEndSegment(uint16_t aSegmentHeaderFlags)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
InFrameFeedByte	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameFeedByte(uint8_t aByte)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameFeedData	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameFeedData(const uint8_t *aDataBuffer, uint16_t aDataBufferLength)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameFeedMessage	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameFeedMessage(otMessage *aMessage)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameGetDistance	lib/spinel/spinel_buffer.cpp	/^uint16_t Buffer::InFrameGetDistance(const WritePosition &aPosition) const$/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint16_t
InFrameGetLastTag	lib/spinel/spinel_buffer.cpp	/^Buffer::FrameTag Buffer::InFrameGetLastTag(void) const { return mWriteFrameTag; }$/;"	f	class:ot::Spinel::Buffer	typeref:typename:Buffer::FrameTag
InFrameGetPosition	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameGetPosition(WritePosition &aPosition)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameIsWriting	lib/spinel/spinel_buffer.cpp	/^bool Buffer::InFrameIsWriting(Priority aPriority) const$/;"	f	class:ot::Spinel::Buffer	typeref:typename:bool
InFrameOverwrite	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameOverwrite(const WritePosition &aPosition, const uint8_t *aDataBuffer, uin/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
InFrameReset	lib/spinel/spinel_buffer.cpp	/^otError Buffer::InFrameReset(const WritePosition &aPosition)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
IncResourceRecordCount	core/net/dnssd_server.cpp	/^void Server::Response::IncResourceRecordCount(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
IncreaseDadAttempts	core/backbone_router/ndproxy_table.hpp	/^        void IncreaseDadAttempts(void) { mDadAttempts++; }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:void
IncreaseLength	core/thread/network_data_tlvs.hpp	/^    void IncreaseLength(uint8_t aIncrement) { mLength += aIncrement; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
IncreaseTimeout	core/thread/mle_router.hpp	/^        void    IncreaseTimeout(uint8_t aIncrement) { mTimeout += aIncrement; }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:void
IncreaseTxtDataPosition	core/net/dns_types.hpp	/^        void        IncreaseTxtDataPosition(uint16_t aIncrement) { mData[kIndexTxtPosition] += a/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:void
Increment	core/net/mdns.hpp	/^        void     Increment(Section aSection) { mCounts[aSection]++; }$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts	typeref:typename:void
IncrementCslTxAttempts	core/thread/csl_tx_scheduler.hpp	/^        void    IncrementCslTxAttempts(void) { mCslTxAttempts++; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
IncrementEntryNumber	core/utils/history_tracker.hpp	/^        void      IncrementEntryNumber(void) { mData16++; }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:void
IncrementFrameErrorCounter	ncp/ncp_base.cpp	/^void NcpBase::IncrementFrameErrorCounter(void) { mFramingErrorCounter++; }$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
IncrementIndirectMessageCount	core/thread/indirect_sender.hpp	/^        void IncrementIndirectMessageCount(void) { mQueuedMessageCount++; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
IncrementIndirectTxAttempts	core/mac/data_poll_handler.hpp	/^        void    IncrementIndirectTxAttempts(void) { mIndirectTxAttempts++; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
IncrementKekFrameCounter	core/thread/key_manager.hpp	/^    void IncrementKekFrameCounter(void) { mKekFrameCounter++; }$/;"	f	class:ot::KeyManager	typeref:typename:void
IncrementLinkFailures	core/thread/neighbor.hpp	/^    void IncrementLinkFailures(void) { mLinkFailures++; }$/;"	f	class:ot::Neighbor	typeref:typename:void
IncrementLinkQuality	core/thread/mle_tlvs.cpp	/^void ConnectivityTlv::IncrementLinkQuality(LinkQuality aLinkQuality)$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
IncrementMessageCount	core/thread/src_match_controller.cpp	/^void SourceMatchController::IncrementMessageCount(Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
IncrementMleFrameCounter	core/thread/key_manager.cpp	/^void KeyManager::IncrementMleFrameCounter(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
IncrementNumEntries	core/net/mdns.hpp	/^        void     IncrementNumEntries(void) { mNumEntries++; }$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
IncrementRecordCount	core/net/mdns.hpp	/^        void          IncrementRecordCount(Section aSection) { mRecordCounts.Increment(aSection)/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
IncrementRetainCount	core/common/retain_ptr.hpp	/^    void IncrementRetainCount(void) { ++mRetainCount; }$/;"	f	class:ot::RetainCountable	typeref:typename:void
IncrementRetainCount	core/common/retain_ptr.hpp	/^    void IncrementRetainCount(void)$/;"	f	class:ot::RetainPtr	typeref:typename:void
IncrementSecondsSinceLastSupervision	core/thread/child.hpp	/^    void IncrementSecondsSinceLastSupervision(void) { mSecondsSinceSupervision++; }$/;"	f	class:ot::Child	typeref:typename:void
IncrementSequenceNumber	core/backbone_router/bbr_local.cpp	/^void Local::IncrementSequenceNumber(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
IncrementTimeSyncSeq	core/thread/time_sync_service.cpp	/^void TimeSync::IncrementTimeSyncSeq(void)$/;"	f	class:ot::TimeSync	typeref:typename:void
IncrementTimeoutFailureCount	core/net/srp_client.hpp	/^        void    IncrementTimeoutFailureCount(void)$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
IncrementTrel	core/mac/mac_types.hpp	/^    void IncrementTrel(void) { mTrelCounter++; }$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
IncrementTrelMacFrameCounter	core/thread/key_manager.cpp	/^void KeyManager::IncrementTrelMacFrameCounter(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
IncrementTxCountAndSaveHash	core/border_router/routing_manager.cpp	/^void RoutingManager::TxRaInfo::IncrementTxCountAndSaveHash(const InfraIf::Icmp6Packet &aRaMessag/;"	f	class:ot::BorderRouter::RoutingManager::TxRaInfo	typeref:typename:void
IncrementVersion	core/thread/network_data_leader_ftd.cpp	/^void Leader::IncrementVersion(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
IncrementVersionAndStableVersion	core/thread/network_data_leader_ftd.cpp	/^void Leader::IncrementVersionAndStableVersion(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
IncrementVersions	core/thread/network_data_leader_ftd.cpp	/^void Leader::IncrementVersions(bool aIncludeStable)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
IncrementVersions	core/thread/network_data_leader_ftd.cpp	/^void Leader::IncrementVersions(const ChangedFlags &aFlags)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
IndexOf	core/common/array.hpp	/^    IndexType IndexOf(const Type &aElement) const { return static_cast<IndexType>(&aElement - &m/;"	f	class:ot::Array	typeref:typename:IndexType
IndexOf	core/common/heap_array.hpp	/^    IndexType IndexOf(const Type &aElement) const { return static_cast<IndexType>(&aElement - mA/;"	f	class:ot::Heap::Array	typeref:typename:IndexType
IndexOfMSB	ncp/ncp_base.cpp	/^static uint8_t IndexOfMSB(uint32_t aValue)$/;"	f	namespace:ot::Ncp	typeref:typename:uint8_t	file:
IndicateConsistent	core/common/trickle_timer.cpp	/^void TrickleTimer::IndicateConsistent(void)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
IndicateInconsistent	core/common/trickle_timer.cpp	/^void TrickleTimer::IndicateInconsistent(void)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
IndirectSender	core/thread/indirect_sender.cpp	/^IndirectSender::IndirectSender(Instance &aInstance)$/;"	f	class:ot::IndirectSender
Info	core/thread/network_data_publisher.cpp	/^Publisher::DnsSrpServiceEntry::Info::Info(Type aType, uint16_t aPortOrSeqNumber, const Ip6::Addr/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info
Info	core/thread/network_data_publisher.hpp	/^            Info(void) { Clear(); }$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info
InfoAnycast	core/thread/network_data_publisher.hpp	/^            static Info InfoAnycast(uint8_t aSequenceNumber) { return Info(kTypeAnycast, aSequen/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:Info
InfoUnicast	core/thread/network_data_publisher.hpp	/^            static Info InfoUnicast(Type aType, const Ip6::Address &aAddress, uint16_t aPort)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:Info
InformPreviousChannel	core/thread/mle.cpp	/^void Mle::InformPreviousChannel(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
InformPreviousParent	core/thread/mle.cpp	/^void Mle::InformPreviousParent(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
InformUpdateHandlerOrCommit	core/net/srp_server.cpp	/^void Server::InformUpdateHandlerOrCommit(Error aError, Host &aHost, const MessageMetadata &aMeta/;"	f	class:ot::Srp::Server	typeref:typename:void
InfraIf	core/border_router/infra_if.cpp	/^InfraIf::InfraIf(Instance &aInstance)$/;"	f	class:ot::BorderRouter::InfraIf
Init	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::NdProxy::Init(const Ip6::InterfaceIdentifier &aAddressIid,$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:void
Init	core/border_router/infra_if.cpp	/^Error InfraIf::Init(uint32_t aIfIndex)$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:Error
Init	core/border_router/routing_manager.cpp	/^Error RoutingManager::Init(uint32_t aInfraIfIndex, bool aInfraIfIsRunning)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
Init	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::Init(const Ip6::Prefix &aBrUlaPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
Init	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::Init(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
Init	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::Iterator::Init(const Entry<Router> *aRoutersHead)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
Init	core/border_router/routing_manager.hpp	/^            void Init(Instance &aInstance) { InstanceLocatorInit::Init(aInstance); }$/;"	f	struct:ot::BorderRouter::RoutingManager::RxRaTracker::Entry	typeref:typename:void
Init	core/coap/coap_message.cpp	/^Error Message::Init(Type aType, Code aCode, Uri aUri)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
Init	core/coap/coap_message.cpp	/^Error Option::Iterator::Init(const Message &aMessage)$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
Init	core/coap/coap_message.cpp	/^void Message::Init(Type aType, Code aCode)$/;"	f	class:ot::Coap::Message	typeref:typename:void
Init	core/coap/coap_message.cpp	/^void Message::Init(void)$/;"	f	class:ot::Coap::Message	typeref:typename:void
Init	core/coap/coap_message.hpp	/^        Error Init(const Message &aMessage, uint16_t aNumber) { return InitOrAdvance(&aMessage, /;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
Init	core/common/crc16.hpp	/^    void Init(void) { mCrc = 0; }$/;"	f	class:ot::Crc16	typeref:typename:void
Init	core/common/data.hpp	/^    void Init(const void *aBuffer, LengthType aLength)$/;"	f	class:ot::Data	typeref:typename:void
Init	core/common/data.hpp	/^    void Init(void *aBuffer, LengthType aLength) { Base::Init(aBuffer, aLength); }$/;"	f	class:ot::MutableData	typeref:typename:void
Init	core/common/frame_builder.cpp	/^void FrameBuilder::Init(void *aBuffer, uint16_t aLength)$/;"	f	class:ot::FrameBuilder	typeref:typename:void
Init	core/common/locator.hpp	/^    void Init(Instance &aInstance)$/;"	f	class:ot::InstanceLocatorInit	typeref:typename:void
Init	core/common/random.cpp	/^void Manager::NonCryptoPrng::Init(uint32_t aSeed)$/;"	f	class:ot::Random::Manager::NonCryptoPrng	typeref:typename:void
Init	core/common/settings.cpp	/^void Settings::Init(void) { Get<SettingsDriver>().Init(kSensitiveKeys, GetArrayLength(kSensitive/;"	f	class:ot::Settings	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void) { Clear(); }$/;"	f	class:ot::SettingsBase::BrOnLinkPrefix	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void) { Clear(); }$/;"	f	class:ot::SettingsBase::DadInfo	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void) { Clear(); }$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void) { Clear(); }$/;"	f	class:ot::SettingsBase::SrpServerInfo	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void) { ClearAllBytes(mId); }$/;"	f	class:ot::SettingsBase::BorderAgentId	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void)$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void)$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
Init	core/common/settings.hpp	/^        void Init(void)$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:void
Init	core/common/settings_driver.hpp	/^    void Init(const uint16_t *aSensitiveKeys, uint16_t aSensitiveKeysLength)$/;"	f	class:ot::SettingsDriver	typeref:typename:void
Init	core/crypto/aes_ccm.cpp	/^void AesCcm::Init(uint32_t    aHeaderLength,$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
Init	core/instance/extension_example.cpp	/^ExtensionBase &ExtensionBase::Init(Instance &aInstance)$/;"	f	class:ot::Extension::ExtensionBase	typeref:typename:ExtensionBase &
Init	core/instance/instance.cpp	/^Instance *Instance::Init(void *aBuffer, size_t *aBufferSize)$/;"	f	class:ot::Instance	typeref:typename:Instance *
Init	core/mac/link_raw.cpp	/^void LinkRaw::Init(void)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
Init	core/mac/mac_frame.cpp	/^void HeaderIe::Init(uint16_t aId, uint8_t aLen)$/;"	f	class:ot::Mac::HeaderIe	typeref:typename:void
Init	core/mac/mac_frame.hpp	/^    void Init(void) { mFields.m16 = 0; }$/;"	f	class:ot::Mac::HeaderIe	typeref:typename:void
Init	core/mac/mac_frame.hpp	/^    void Init(void)$/;"	f	class:ot::Mac::Beacon	typeref:typename:void
Init	core/mac/mac_frame.hpp	/^    void Init(void)$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
Init	core/mac/mac_frame.hpp	/^    void Init(void)$/;"	f	class:ot::Mac::TimeIe	typeref:typename:void
Init	core/mac/mac_types.hpp	/^    void Init(void)$/;"	f	class:ot::Mac::CslAccuracy	typeref:typename:void
Init	core/mac/sub_mac.cpp	/^void SubMac::Init(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
Init	core/meshcop/border_agent.cpp	/^Error BorderAgent::ForwardContext::Init(Instance            &aInstance,$/;"	f	class:ot::MeshCoP::BorderAgent::ForwardContext	typeref:typename:Error
Init	core/meshcop/meshcop.cpp	/^void SteeringData::Init(uint8_t aLength)$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
Init	core/meshcop/meshcop_leader.cpp	/^void Leader::CommissioningData::Init(uint16_t aBorderAgentRloc16, uint16_t aSessionId)$/;"	f	class:ot::MeshCoP::Leader::CommissioningData	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::BorderAgentLocatorTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::CommissionerSessionIdTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::EnergyListTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::NetworkNameTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::SteeringDataTlv	typeref:typename:void
Init	core/meshcop/meshcop_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::ElapsedTime	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::Option	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::RapidCommit	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:void
Init	core/net/dhcp6.hpp	/^    void Init(void)$/;"	f	class:ot::Dhcp6::StatusCode	typeref:typename:void
Init	core/net/dns_dso.cpp	/^void Dso::Connection::Init(bool aIsServer)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
Init	core/net/dns_dso.hpp	/^        void Init(Type aType, uint16_t aLength)$/;"	f	class:ot::Dns::Dso::Tlv	typeref:typename:void
Init	core/net/dns_dso.hpp	/^        void Init(uint16_t aPaddingLength) { Tlv::Init(kType, aPaddingLength); }$/;"	f	class:ot::Dns::Dso::EncryptionPaddingTlv	typeref:typename:void
Init	core/net/dns_dso.hpp	/^        void Init(void) { Tlv::Init(kType, sizeof(*this) - sizeof(Tlv)); }$/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:void
Init	core/net/dns_dso.hpp	/^        void Init(void) { Tlv::Init(kType, sizeof(*this) - sizeof(Tlv)); }$/;"	f	class:ot::Dns::Dso::RetryDelayTlv	typeref:typename:void
Init	core/net/dns_types.cpp	/^void Ecdsa256KeyRecord::Init(void)$/;"	f	class:ot::Dns::Ecdsa256KeyRecord	typeref:typename:void
Init	core/net/dns_types.cpp	/^void TxtEntry::Iterator::Init(const uint8_t *aTxtData, uint16_t aTxtDataLength)$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(const char *aKey, const uint8_t *aValue, uint8_t aValueLength)$/;"	f	class:ot::Dns::TxtEntry	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypeCname, aClass); }$/;"	f	class:ot::Dns::CnameRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypeKey, aClass); }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypeNsec, aClass); }$/;"	f	class:ot::Dns::NsecRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypePtr, aClass); }$/;"	f	class:ot::Dns::PtrRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypeSrv, aClass); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass = kClassInternet) { ResourceRecord::Init(kTypeTxt, aClass); }$/;"	f	class:ot::Dns::TxtRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aClass) { ResourceRecord::Init(kTypeSig, aClass); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(uint16_t aType, uint16_t aClass = kClassInternet)$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(void)$/;"	f	class:ot::Dns::ARecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(void)$/;"	f	class:ot::Dns::AaaaRecord	typeref:typename:void
Init	core/net/dns_types.hpp	/^    void Init(void)$/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
Init	core/net/dnssd_server.cpp	/^void Server::UpstreamQueryTransaction::Init(const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::UpstreamQueryTransaction	typeref:typename:void
Init	core/net/ip6_headers.hpp	/^    void Init(void)$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
Init	core/net/ip6_mpl.cpp	/^void MplOption::Init(SeedIdLength aSeedIdLength)$/;"	f	class:ot::Ip6::MplOption	typeref:typename:void
Init	core/net/mdns.cpp	/^Error Core::AddrCache::Init(Instance &aInstance, Type aType, const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::AddrCache::Init(Instance &aInstance, Type aType, const char *aHostName)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::BrowseCache::Init(Instance &aInstance, const Browser &aBrowser)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::BrowseCache::Init(Instance &aInstance, const char *aServiceType, const char *aSubTyp/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::BrowseCache::PtrEntry::Init(const char *aServiceInstance)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache::PtrEntry	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::HostEntry::Init(Instance &aInstance, const char *aName)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::Ip4AddrCache::Init(Instance &aInstance, const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::Ip4AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::Ip4AddrCache::Init(Instance &aInstance, const char *aHostName)$/;"	f	class:ot::Dns::Multicast::Core::Ip4AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::Ip6AddrCache::Init(Instance &aInstance, const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::Ip6AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::Ip6AddrCache::Init(Instance &aInstance, const char *aHostName)$/;"	f	class:ot::Dns::Multicast::Core::Ip6AddrCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::RxMessage::Init(Instance          &aInstance,$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceCache::Init(Instance &aInstance, Type aType, const char *aServiceInstance, co/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceEntry::Init(Instance &aInstance, const Key &aKey)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceEntry::Init(Instance &aInstance, const Service &aService)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceEntry::Init(Instance &aInstance, const char *aServiceInstance, const char *aS/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceEntry::SubType::Init(const char *aLabel)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry::SubType	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::ServiceType::Init(Instance &aInstance, const char *aServiceType)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::SrvCache::Init(Instance &aInstance, const ServiceName &aServiceName)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::SrvCache::Init(Instance &aInstance, const SrvResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::SrvCache::Init(Instance &aInstance, const char *aServiceInstance, const char *aServi/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::TxtCache::Init(Instance &aInstance, const ServiceName &aServiceName)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::TxtCache::Init(Instance &aInstance, const TxtResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^Error Core::TxtCache::Init(Instance &aInstance, const char *aServiceInstance, const char *aServi/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:Error
Init	core/net/mdns.cpp	/^void Core::CacheEntry::Init(Instance &aInstance, Type aType)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
Init	core/net/mdns.cpp	/^void Core::Entry::Init(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
Init	core/net/mdns.cpp	/^void Core::TxMessage::Init(Type aType)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
Init	core/net/mdns.hpp	/^        Error Init(Instance &aInstance, const Host &aHost) { return Init(aInstance, aHost.mHostN/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:Error
Init	core/net/mdns.hpp	/^        Error Init(Instance &aInstance, const Key &aKey) { return Init(aInstance, aKey.mName); }$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:Error
Init	core/net/nd6.cpp	/^void PrefixInfoOption::Init(void)$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
Init	core/net/nd6.cpp	/^void RaFlagsExtOption::Init(void)$/;"	f	class:ot::Ip6::Nd::RaFlagsExtOption	typeref:typename:void
Init	core/net/nd6.cpp	/^void RouteInfoOption::Init(void)$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:void
Init	core/net/sntp_client.hpp	/^        void Init(void)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
Init	core/net/srp_client.cpp	/^Error Client::Service::Init(void)$/;"	f	class:ot::Srp::Client::Service	typeref:typename:Error
Init	core/net/srp_client.cpp	/^void Client::HostInfo::Init(void)$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
Init	core/net/srp_server.cpp	/^Error Server::Service::Init(const char *aInstanceName, const char *aInstanceLabel, Host &aHost, /;"	f	class:ot::Srp::Server::Service	typeref:typename:Error
Init	core/radio/radio.cpp	/^void Radio::Init(void)$/;"	f	class:ot::Radio	typeref:typename:void
Init	core/radio/trel_interface.cpp	/^void Interface::Init(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
Init	core/radio/trel_packet.cpp	/^void Packet::Init(Header::Type aType, uint8_t *aPayload, uint16_t aPayloadLength)$/;"	f	class:ot::Trel::Packet	typeref:typename:void
Init	core/radio/trel_packet.hpp	/^    void Init(Type aType) { mControl = aType + kVersion; }$/;"	f	class:ot::Trel::Header	typeref:typename:void
Init	core/radio/trel_packet.hpp	/^    void Init(uint8_t *aBuffer, uint16_t aLength) { Base::Init(aBuffer, aLength); }$/;"	f	class:ot::Trel::Packet	typeref:typename:void
Init	core/thread/address_resolver.cpp	/^void AddressResolver::CacheEntry::Init(Instance &aInstance)$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
Init	core/thread/child.hpp	/^    void Init(Instance &aInstance) { Neighbor::Init(aInstance); }$/;"	f	class:ot::Child	typeref:typename:void
Init	core/thread/link_metrics_tlvs.hpp	/^    void Init(void) { SetType(SubTlv::kReport); }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:void
Init	core/thread/link_metrics_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::LinkMetrics::EnhAckConfigSubTlv	typeref:typename:void
Init	core/thread/link_metrics_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:void
Init	core/thread/link_metrics_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::LinkMetrics::QueryOptionsSubTlv	typeref:typename:void
Init	core/thread/link_metrics_types.cpp	/^void SeriesInfo::Init(uint8_t aSeriesId, uint8_t aSeriesFlagsMask, const Metrics &aMetrics)$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:void
Init	core/thread/link_quality.hpp	/^    void Init(Instance &aInstance) { InstanceLocatorInit::Init(aInstance); }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
Init	core/thread/lowpan.cpp	/^void MeshHeader::Init(uint16_t aSource, uint16_t aDestination, uint8_t aHopsLeft)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:void
Init	core/thread/lowpan.hpp	/^        void Init(uint16_t aSize, uint16_t aTag)$/;"	f	class:ot::Lowpan::FragmentHeader::FirstFrag	typeref:typename:void
Init	core/thread/lowpan.hpp	/^        void Init(uint16_t aSize, uint16_t aTag, uint16_t aOffset)$/;"	f	class:ot::Lowpan::FragmentHeader::NextFrag	typeref:typename:void
Init	core/thread/mle.hpp	/^        void Init(Instance &aInstance) { Parent::Init(aInstance); }$/;"	f	class:ot::Mle::Mle::ParentCandidate	typeref:typename:void
Init	core/thread/mle_tlvs.cpp	/^void RouteTlv::Init(void)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
Init	core/thread/mle_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
Init	core/thread/mle_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:void
Init	core/thread/mle_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::Mle::LeaderDataTlv	typeref:typename:void
Init	core/thread/mle_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
Init	core/thread/mle_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:void
Init	core/thread/neighbor.cpp	/^void Neighbor::Init(Instance &aInstance)$/;"	f	class:ot::Neighbor	typeref:typename:void
Init	core/thread/network_data_publisher.hpp	/^        void             Init(Instance &aInstance) { InstanceLocatorInit::Init(aInstance); }$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
Init	core/thread/network_data_publisher.hpp	/^        void      Init(Instance &aInstance) { Entry::Init(aInstance); }$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Init	core/thread/network_data_tlvs.cpp	/^void ServiceTlv::Init(uint8_t aServiceId, uint32_t aEnterpriseNumber, const ServiceData &aServic/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(uint16_t aServer16, const ServerData &aServerData)$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(uint8_t aContextId, uint8_t aContextLength)$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(uint8_t aDomainId, const Ip6::Prefix aPrefix)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(uint8_t aDomainId, uint8_t aPrefixLength, const uint8_t *aPrefix)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::BorderRouterTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::CommissioningDataTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::HasRouteTlv	typeref:typename:void
Init	core/thread/network_data_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.cpp	/^void AnswerTlv::Init(uint16_t aIndex, bool aIsLast)$/;"	f	class:ot::NetworkDiagnostic::AnswerTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.cpp	/^void MleCountersTlv::Init(const Mle::Counters &aMleCounters)$/;"	f	class:ot::NetworkDiagnostic::MleCountersTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::ChannelPagesTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::ConnectivityTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::LeaderDataTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::RouteTlv	typeref:typename:void
Init	core/thread/network_diagnostic_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::NetworkDiagnostic::TypeListTlv	typeref:typename:void
Init	core/thread/router.hpp	/^    void Init(Instance &aInstance) { Neighbor::Init(aInstance); }$/;"	f	class:ot::Router	typeref:typename:void
Init	core/thread/router.hpp	/^    void Init(Instance &aInstance)$/;"	f	class:ot::Parent	typeref:typename:void
Init	core/thread/thread_tlvs.hpp	/^    void Init(void) { SetType(kIp6Addresses); }$/;"	f	class:ot::Ip6AddressesTlv	typeref:typename:void
Init	core/thread/thread_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::ThreadNetworkDataTlv	typeref:typename:void
Init	core/thread/thread_tlvs.hpp	/^    void Init(void)$/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:void
Init	core/utils/flash.cpp	/^void Flash::Init(void)$/;"	f	class:ot::Flash	typeref:typename:void
Init	core/utils/flash.hpp	/^        void Init(uint16_t aKey, bool aFirst)$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
Init	core/utils/history_tracker.hpp	/^        void Init(void) { ResetEntryNumber(), SetInitTime(); }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:void
Init	core/utils/power_calibration.cpp	/^void PowerCalibration::CalibratedPowerEntry::Init(int16_t        aActualPower,$/;"	f	class:ot::Utils::PowerCalibration::CalibratedPowerEntry	typeref:typename:void
Init	lib/hdlc/hdlc.cpp	/^void Decoder::Init(Spinel::FrameWritePointer &aFrameWritePointer, FrameHandler aFrameHandler, vo/;"	f	class:ot::Hdlc::Decoder	typeref:typename:void
Init	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::Init(bool aSkipRcpCompatibilityCheck, bool aSoftwareReset, SpinelDriver *aSpin/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
Init	lib/spinel/spinel_decoder.cpp	/^void Decoder::Init(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:void
Init	lib/spinel/spinel_driver.cpp	/^CoprocessorType SpinelDriver::Init(SpinelInterface    &aSpinelInterface,$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:CoprocessorType
Init	lib/url/url.cpp	/^otError Url::Init(char *aUrl)$/;"	f	class:ot::Url::Url	typeref:typename:otError
Init	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContext, RxFrameBuffe/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
Init	posix/platform/infra_if.cpp	/^void InfraNetif::Init(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
Init	posix/platform/mdns_socket.cpp	/^void MdnsSocket::Init(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
Init	posix/platform/radio.cpp	/^void Radio::Init(const char *aUrl)$/;"	f	class:ot::Posix::Radio	typeref:typename:void
Init	posix/platform/radio_url.cpp	/^void RadioUrl::Init(const char *aUrl)$/;"	f	class:ot::Posix::RadioUrl	typeref:typename:void
Init	posix/platform/resolver.cpp	/^void Resolver::Init(void)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
Init	posix/platform/spi_interface.cpp	/^otError SpiInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContext, RxFrameBuffer/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
Init	posix/platform/spinel_manager.cpp	/^CoprocessorType SpinelManager::Init(const char *aUrl)$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:CoprocessorType
Init	posix/platform/udp.cpp	/^void Udp::Init(const char *aIfName)$/;"	f	class:ot::Posix::Udp	typeref:typename:void
Init	posix/platform/vendor_interface_example.cpp	/^otError VendorInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContext, RxFrameBuf/;"	f	class:ot::Posix::VendorInterface	typeref:typename:otError
InitAddressMappingIterator	core/net/nat64_translator.cpp	/^void Translator::InitAddressMappingIterator(AddressMappingIterator &aIterator)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
InitAsEmpty	core/thread/network_diagnostic_tlvs.hpp	/^    void InitAsEmpty(void)$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:void
InitAsEmpty	core/thread/network_diagnostic_tlvs.hpp	/^    void InitAsEmpty(void)$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:void
InitAsLongVariant	core/net/dns_types.cpp	/^void LeaseOption::InitAsLongVariant(uint32_t aLeaseInterval, uint32_t aKeyLeaseInterval)$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:void
InitAsPost	core/coap/coap_message.cpp	/^Error Message::InitAsPost(const Ip6::Address &aDestination, Uri aUri)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
InitAsShortVariant	core/net/dns_types.cpp	/^void LeaseOption::InitAsShortVariant(uint32_t aLeaseInterval)$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:void
InitAsSlaacOrigin	core/net/netif.cpp	/^void Netif::UnicastAddress::InitAsSlaacOrigin(uint8_t aPrefixLength, bool aPreferred)$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:void
InitAsThreadOrigin	core/net/netif.cpp	/^void Netif::UnicastAddress::InitAsThreadOrigin(void)$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:void
InitAsThreadOriginGlobalScope	core/net/netif.cpp	/^void Netif::UnicastAddress::InitAsThreadOriginGlobalScope(void)$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:void
InitAsThreadOriginMeshLocal	core/net/netif.cpp	/^void Netif::UnicastAddress::InitAsThreadOriginMeshLocal(void)$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:void
InitForPadSize	core/net/ip6_headers.cpp	/^void PadOption::InitForPadSize(uint8_t aPadSize)$/;"	f	class:ot::Ip6::PadOption	typeref:typename:void
InitFormRange	core/common/data.hpp	/^    void InitFormRange(uint8_t *aStart, uint8_t *aEnd) { Base::InitFormRange(aStart, aEnd); }$/;"	f	class:ot::MutableData	typeref:typename:void
InitFrameRequestAhead	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::InitFrameRequestAhead(void)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
InitFrom	core/common/data.hpp	/^    template <typename ObjectType> void InitFrom(ObjectType &aObject)$/;"	f	class:ot::MutableData	typeref:typename:void
InitFrom	core/common/data.hpp	/^    template <typename ObjectType> void InitFrom(const ObjectType &aObject)$/;"	f	class:ot::Data	typeref:typename:void
InitFrom	core/net/dnssd_server.cpp	/^void Server::Response::InitFrom(ProxyQuery &aQuery, const ProxyQueryInfo &aInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
InitFrom	core/thread/network_diagnostic_tlvs.cpp	/^void ChildTlv::InitFrom(const Child &aChild)$/;"	f	class:ot::NetworkDiagnostic::ChildTlv	typeref:typename:void
InitFrom	core/thread/network_diagnostic_tlvs.cpp	/^void RouterNeighborTlv::InitFrom(const Router &aRouter)$/;"	f	class:ot::NetworkDiagnostic::RouterNeighborTlv	typeref:typename:void
InitFrom	core/utils/mesh_diag.cpp	/^Error MeshDiag::ChildIterator::InitFrom(const Message &aMessage, uint16_t aParentRloc16)$/;"	f	class:ot::Utils::MeshDiag::ChildIterator	typeref:typename:Error
InitFrom	core/utils/mesh_diag.cpp	/^Error MeshDiag::Ip6AddrIterator::InitFrom(const Message &aMessage)$/;"	f	class:ot::Utils::MeshDiag::Ip6AddrIterator	typeref:typename:Error
InitFromRange	core/common/data.hpp	/^    void InitFromRange(const uint8_t *aStart, const uint8_t *aEnd)$/;"	f	class:ot::Data	typeref:typename:void
InitIeContentAt	core/mac/mac_frame.cpp	/^template <> void Frame::InitIeContentAt<CslIe>(uint8_t &aIndex) { aIndex += sizeof(CslIe); }$/;"	f	class:ot::Mac::Frame	typeref:typename:void
InitIeContentAt	core/mac/mac_frame.cpp	/^template <> void Frame::InitIeContentAt<Termination2Ie>(uint8_t &aIndex) { OT_UNUSED_VARIABLE(aI/;"	f	class:ot::Mac::Frame	typeref:typename:void
InitIeContentAt	core/mac/mac_frame.cpp	/^template <> void Frame::InitIeContentAt<TimeIe>(uint8_t &aIndex)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
InitIeHeaderAt	core/mac/mac_frame.cpp	/^Error Frame::InitIeHeaderAt(uint8_t &aIndex, uint8_t ieId, uint8_t ieContentSize)$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
InitInstance	posix/main.c	/^static otInstance *InitInstance(PosixConfig *aConfig)$/;"	f	typeref:typename:otInstance *	file:
InitIntPin	posix/platform/spi_interface.cpp	/^void SpiInterface::InitIntPin(const char *aCharDev, uint8_t aLine)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
InitIterator	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::InitIterator(PrefixTableIterator &aIterator) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
InitIterator	core/radio/trel_interface.hpp	/^    void InitIterator(PeerIterator &aIterator) const { aIterator = 0; }$/;"	f	class:ot::Trel::Interface	typeref:typename:void
InitMacHeader	core/mac/mac_frame.cpp	/^void Frame::InitMacHeader(Type             aType,$/;"	f	class:ot::Mac::Frame	typeref:typename:void
InitMessage	core/coap/coap.cpp	/^Message *CoapBase::InitMessage(Message *aMessage, Type aType, Uri aUri)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
InitMulticastRouterSock	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::InitMulticastRouterSock(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
InitMultiple	core/instance/instance.cpp	/^Instance *Instance::InitMultiple(uint8_t aIdx)$/;"	f	class:ot::Instance	typeref:typename:Instance *
InitNeighbor	core/thread/mle.cpp	/^void Mle::InitNeighbor(Neighbor &aNeighbor, const RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
InitNetaskWithPrefixLength	posix/platform/netif.cpp	/^static void InitNetaskWithPrefixLength(struct in6_addr *address, uint8_t prefixLen)$/;"	f	typeref:typename:void	file:
InitOption	core/net/ip6_mpl.cpp	/^void Mpl::InitOption(MplOption &aOption, const Address &aAddress)$/;"	f	class:ot::Ip6::Mpl	typeref:typename:void
InitOrAdvance	core/coap/coap_message.cpp	/^Error Option::Iterator::InitOrAdvance(const Message *aMessage, uint16_t aNumber)$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
InitPacketQueue	posix/platform/trel.cpp	/^static void InitPacketQueue(void)$/;"	f	typeref:typename:void	file:
InitPort	core/net/srp_server.cpp	/^void Server::InitPort(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
InitPrefixTableIterator	core/border_router/routing_manager.hpp	/^    void InitPrefixTableIterator(PrefixTableIterator &aIterator) const { mRxRaTracker.InitIterat/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
InitResetPin	posix/platform/spi_interface.cpp	/^void SpiInterface::InitResetPin(const char *aCharDev, uint8_t aLine)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
InitResponse	core/coap/coap.cpp	/^Message *CoapBase::InitResponse(Message *aMessage, const Message &aResponse)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
InitSecurityControl	core/thread/mle.hpp	/^        void InitSecurityControl(void) { mSecurityControl = kKeyIdMode2Mic32; }$/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:void
InitServiceInfo	core/net/dns_client.cpp	/^void Client::Response::InitServiceInfo(ServiceInfo &aServiceInfo) const$/;"	f	class:ot::Dns::Client::Response	typeref:typename:void
InitSingle	core/instance/instance.cpp	/^Instance &Instance::InitSingle(void)$/;"	f	class:ot::Instance	typeref:typename:Instance &
InitSpiDev	posix/platform/spi_interface.cpp	/^void SpiInterface::InitSpiDev(const char *aPath, uint8_t aMode, uint32_t aSpeed)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
InitTcpSocket	core/net/dns_client.cpp	/^Error Client::InitTcpSocket(void)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
InitToPadHeaderWithSize	core/net/ip6_headers.cpp	/^Error PadOption::InitToPadHeaderWithSize(uint16_t aHeaderSize)$/;"	f	class:ot::Ip6::PadOption	typeref:typename:Error
InitVersionIhl	core/net/ip4_types.hpp	/^    void InitVersionIhl(void) { SetVersionIhl(kVersIhlInit); }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
InitVersionTrafficClassFlow	core/net/ip6_headers.hpp	/^    void InitVersionTrafficClassFlow(void) { SetVerionTrafficClassFlow(kVersTcFlowInit); }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
Initialize	cli/cli.cpp	/^void Interpreter::Initialize(otInstance *aInstance, otCliOutputCallback aCallback, void *aContex/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
Initialize	core/net/tcp6.cpp	/^Error Tcp::Endpoint::Initialize(Instance &aInstance, const otTcpEndpointInitializeArgs &aArgs)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
Initialize	core/net/tcp6.cpp	/^Error Tcp::Listener::Initialize(Instance &aInstance, const otTcpListenerInitializeArgs &aArgs)$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Error
Initialize	core/net/tcp6_ext.cpp	/^void TcpCircularSendBuffer::Initialize(void *aDataBuffer, size_t aCapacity)$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:void
InitializeCaps	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::InitializeCaps(bool &aSupportsRcpApiVersion, bool &aSupportsRcpMinHostApiVersi/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
InitializeSessionSocket	posix/platform/daemon.cpp	/^void Daemon::InitializeSessionSocket(void)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
Initiator	core/thread/link_metrics.cpp	/^Initiator::Initiator(Instance &aInstance)$/;"	f	class:ot::LinkMetrics::Initiator
InputCallback	posix/cli_readline.cpp	/^static void InputCallback(char *aLine)$/;"	f	typeref:typename:void	file:
InputCallback	posix/client.cpp	/^void InputCallback(char *aLine)$/;"	f	namespace:__anon7e280f770111	typeref:typename:void
Insert	core/common/frame_builder.hpp	/^    template <typename ObjectType> Error Insert(uint16_t aOffset, const ObjectType &aObject)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
Insert	core/thread/network_data.cpp	/^void MutableNetworkData::Insert(void *aStart, uint8_t aLength)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
Insert	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Insert(spinel_prop_key_t aKey, const char *aFormat, ...)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
InsertBytes	core/common/frame_builder.cpp	/^Error FrameBuilder::InsertBytes(uint16_t aOffset, const void *aBuffer, uint16_t aLength)$/;"	f	class:ot::FrameBuilder	typeref:typename:Error
InsertHeader	core/common/message.cpp	/^Error Message::InsertHeader(uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:Error
InsertMplOption	core/net/ip6.cpp	/^Error Ip6::InsertMplOption(Message &aMessage, Header &aHeader)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
Instance	core/instance/instance.cpp	/^Instance::Instance(void)$/;"	f	class:ot::Instance
InstanceLocator	core/common/locator.hpp	/^    explicit InstanceLocator(Instance &aInstance)$/;"	f	class:ot::InstanceLocator
InstanceLocatorInit	core/common/locator.hpp	/^    InstanceLocatorInit(void)$/;"	f	class:ot::InstanceLocatorInit
InstanceToIid	ncp/ncp_base.cpp	/^uint8_t NcpBase::InstanceToIid(Instance *aInstance)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:uint8_t
Interface	core/radio/trel_interface.cpp	/^Interface::Interface(Instance &aInstance)$/;"	f	class:ot::Trel::Interface
Interpreter	cli/cli.cpp	/^Interpreter::Interpreter(Instance *aInstance, otCliOutputCallback aCallback, void *aContext)$/;"	f	class:ot::Cli::Interpreter
Intersect	core/mac/channel_mask.hpp	/^    void Intersect(const ChannelMask &aOtherMask) { mMask &= aOtherMask.mMask; }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:void
InvalidatPrevRios	core/border_router/routing_manager.cpp	/^Error RoutingManager::RioAdvertiser::InvalidatPrevRios(RouterAdvert::TxMessage &aRaMessage)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:Error
InverseOf	core/utils/verhoeff_checksum.cpp	/^uint8_t VerhoeffChecksum::InverseOf(uint8_t aValue)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:uint8_t
Invoke	core/common/callback.hpp	/^    template <typename... Args> ReturnType Invoke(Args &&...aArgs) const$/;"	f	class:ot::Callback	typeref:typename:ReturnType
Invoke	core/net/mdns.cpp	/^void Core::ResultCallback::Invoke(Instance &aInstance, const AddressResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:void
Invoke	core/net/mdns.cpp	/^void Core::ResultCallback::Invoke(Instance &aInstance, const BrowseResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:void
Invoke	core/net/mdns.cpp	/^void Core::ResultCallback::Invoke(Instance &aInstance, const SrvResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:void
Invoke	core/net/mdns.cpp	/^void Core::ResultCallback::Invoke(Instance &aInstance, const TxtResult &aResult) const$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:void
InvokeAndClear	core/net/mdns.cpp	/^void Core::Callback::InvokeAndClear(Instance &aInstance, Error aError)$/;"	f	class:ot::Dns::Multicast::Core::Callback	typeref:typename:void
InvokeAndClearIfSet	core/common/callback.hpp	/^    template <typename... Args> void InvokeAndClearIfSet(Args &&...aArgs)$/;"	f	class:ot::Callback	typeref:typename:void
InvokeCallback	core/net/srp_client.cpp	/^void Client::AutoStart::InvokeCallback(const Ip6::SockAddr *aServerSockAddr) const$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
InvokeCallback	core/net/srp_client.cpp	/^void Client::InvokeCallback(Error aError) const { InvokeCallback(aError, mHostInfo, nullptr); }$/;"	f	class:ot::Srp::Client	typeref:typename:void
InvokeCallback	core/net/srp_client.cpp	/^void Client::InvokeCallback(Error aError, const HostInfo &aHostInfo, const Service *aRemovedServ/;"	f	class:ot::Srp::Client	typeref:typename:void
InvokeCallbacks	core/net/mdns.cpp	/^template <typename ResultType> void Core::CacheEntry::InvokeCallbacks(const ResultType &aResult)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
InvokeCallbacks	core/net/mdns.cpp	/^void Core::Entry::InvokeCallbacks(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
InvokeConflictCallback	core/net/mdns.cpp	/^void Core::InvokeConflictCallback(const char *aName, const char *aServiceType)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
InvokeEnergyScanDone	core/mac/link_raw.cpp	/^void LinkRaw::InvokeEnergyScanDone(int8_t aEnergyScanMaxRssi)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
InvokeEphemeralKeyCallback	core/meshcop/border_agent.cpp	/^void BorderAgent::InvokeEphemeralKeyCallback(void) { mEphemeralKeyCallback.InvokeIfSet(); }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
InvokeIfSet	core/common/callback.hpp	/^    template <typename... Args> void InvokeIfSet(Args &&...aArgs) const$/;"	f	class:ot::Callback	typeref:typename:void
InvokeReceiveDone	core/mac/link_raw.cpp	/^void LinkRaw::InvokeReceiveDone(RxFrame *aFrame, Error aError)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
InvokeReplyCallback	core/utils/ping_sender.cpp	/^void PingSender::Config::InvokeReplyCallback(const Reply &aReply) const$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:void
InvokeSendDone	core/radio/trel_link.cpp	/^void Link::InvokeSendDone(Error aError, Mac::RxFrame *aAckFrame)$/;"	f	class:ot::Trel::Link	typeref:typename:void
InvokeSendDone	core/radio/trel_link.hpp	/^    void InvokeSendDone(Error aError) { InvokeSendDone(aError, nullptr); }$/;"	f	class:ot::Trel::Link	typeref:typename:void
InvokeStatisticsCallback	core/utils/ping_sender.cpp	/^void PingSender::Config::InvokeStatisticsCallback(const Statistics &aStatistics) const$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:void
InvokeTransmitDone	core/mac/link_raw.cpp	/^void LinkRaw::InvokeTransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aError)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
Ip6	core/net/ip6.cpp	/^Ip6::Ip6(Instance &aInstance)$/;"	f	class:ot::Ip6::Ip6
Ip6AddrToString	posix/platform/trel.cpp	/^static const char *Ip6AddrToString(const void *aAddress)$/;"	f	typeref:typename:const char *	file:
Ip6AddressString	posix/platform/ip6_utils.hpp	/^    Ip6AddressString(const void *aAddress)$/;"	f	class:ot::Posix::Ip6Utils::Ip6AddressString
IpProtoToString	core/net/ip6.cpp	/^const char *Ip6::IpProtoToString(uint8_t aIpProto)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:const char *
Is2BitUintValid	core/common/preference.hpp	/^    static bool Is2BitUintValid(uint8_t a2BitUint) { return ((a2BitUint & k2BitMask) != k2BitRes/;"	f	class:ot::Preference	typeref:typename:bool
IsADnsSrpServiceEntry	core/thread/network_data_publisher.hpp	/^    bool IsADnsSrpServiceEntry(const Entry &aEntry) const { return (&aEntry == &mDnsSrpServiceEn/;"	f	class:ot::NetworkData::Publisher	typeref:typename:bool
IsAPrefixEntry	core/thread/network_data_publisher.cpp	/^bool Publisher::IsAPrefixEntry(const Entry &aEntry) const$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:bool
IsARetransmission	core/mac/mac_frame.hpp	/^    bool IsARetransmission(void) const { return mInfo.mTxInfo.mIsARetx; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:bool
IsAck	core/coap/coap_message.hpp	/^    bool IsAck(void) const { return (GetType() == kTypeAck); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsAck	core/mac/mac_frame.hpp	/^    bool IsAck(void) const { return GetType() == kTypeAck; }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsAckedWithFramePending	core/mac/mac_frame.hpp	/^    bool IsAckedWithFramePending(void) const { return mInfo.mRxInfo.mAckedWithFramePending; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:bool
IsActive	core/meshcop/commissioner.hpp	/^    bool IsActive(void) const { return mState == kStateActive; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:bool
IsActive	core/net/mdns.hpp	/^        bool  IsActive(void) const { return mIsActive; }$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:bool
IsActiveDataset	core/meshcop/dataset_manager.hpp	/^    bool  IsActiveDataset(void) const { return (mType == Dataset::kActive); }$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:bool
IsActiveOrPending	core/mac/mac.cpp	/^bool Mac::IsActiveOrPending(Operation aOperation) const { return (mOperation == aOperation) || I/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsActiveRouter	core/thread/mle_types.hpp	/^inline bool IsActiveRouter(uint16_t aRloc16) { return ChildIdFromRloc16(aRloc16) == 0; }$/;"	f	namespace:ot::Mle	typeref:typename:bool
IsActiveScanInProgress	core/mac/mac.hpp	/^    bool IsActiveScanInProgress(void) const { return IsActiveOrPending(kOperationActiveScan); }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsAddBeginSet	core/utils/flash.hpp	/^        bool IsAddBeginSet(void) const { return (mFlags & kFlagAddBegin) == 0; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:bool
IsAddCompleteSet	core/utils/flash.hpp	/^        bool IsAddCompleteSet(void) const { return (mFlags & kFlagAddComplete) == 0; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:bool
IsAdded	core/thread/network_data_publisher.hpp	/^        bool IsAdded(void) const { return (mState == kAdded); }$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:bool
IsAddressGlobalUnicast	posix/platform/infra_if.cpp	/^bool IsAddressGlobalUnicast(const in6_addr &aAddress) { return (aAddress.s6_addr[0] & 0xe0) == 0/;"	f	namespace:ot::Posix	typeref:typename:bool
IsAddressLinkLocal	posix/platform/infra_if.cpp	/^bool IsAddressLinkLocal(const in6_addr &aAddress)$/;"	f	namespace:ot::Posix	typeref:typename:bool
IsAddressMlrRegisteredByAnyChild	core/thread/mlr_manager.hpp	/^    bool IsAddressMlrRegisteredByAnyChild(const Ip6::Address &aAddress) const$/;"	f	class:ot::MlrManager	typeref:typename:bool
IsAddressMlrRegisteredByAnyChildExcept	core/thread/mlr_manager.cpp	/^bool MlrManager::IsAddressMlrRegisteredByAnyChildExcept(const Ip6::Address &aAddress, const Chil/;"	f	class:ot::MlrManager	typeref:typename:bool
IsAddressMlrRegisteredByNetif	core/thread/mlr_manager.cpp	/^bool MlrManager::IsAddressMlrRegisteredByNetif(const Ip6::Address &aAddress) const$/;"	f	class:ot::MlrManager	typeref:typename:bool
IsAddressUniqueLocal	posix/platform/infra_if.cpp	/^bool IsAddressUniqueLocal(const in6_addr &aAddress) { return (aAddress.s6_addr[0] & 0xfe) == 0xf/;"	f	namespace:ot::Posix	typeref:typename:bool
IsAdvPio	core/thread/network_data_tlvs.hpp	/^    bool IsAdvPio(void) const { return (mFlags & kAdvPioFlag) != 0; }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:bool
IsAllRead	lib/spinel/spinel_decoder.hpp	/^    bool IsAllRead(void) const { return (mIndex == mLength); }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:bool
IsAllReadInStruct	lib/spinel/spinel_decoder.hpp	/^    bool IsAllReadInStruct(void) const { return (mIndex == mEnd); }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:bool
IsAllocated	core/thread/router_table.hpp	/^        bool    IsAllocated(uint8_t aRouterId) const { return (mIndexes[aRouterId] & kAllocatedF/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:bool
IsAllocated	core/thread/router_table.hpp	/^    bool IsAllocated(uint8_t aRouterId) const { return mRouterIdMap.IsAllocated(aRouterId); }$/;"	f	class:ot::RouterTable	typeref:typename:bool
IsAlocInUse	core/net/nd_agent.hpp	/^    bool IsAlocInUse(void) const { return mAloc.mNext != &mAloc; }$/;"	f	class:ot::NeighborDiscovery::Agent	typeref:typename:bool
IsAnnounceAttach	core/thread/mle.hpp	/^    bool       IsAnnounceAttach(void) const { return mAlternatePanId != Mac::kPanIdBroadcast; }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsAnycastLocator	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsAnycastLocator(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsAnycastLocator	core/thread/mle.cpp	/^bool Mle::IsAnycastLocator(const Ip6::Address &aAddress) const$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsAnycastServiceLocator	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsAnycastServiceLocator(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsAppended	core/net/mdns.cpp	/^bool Core::RecordInfo::IsAppended(void) const$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
IsAppendedInMessage	core/net/srp_client.hpp	/^        bool      IsAppendedInMessage(void) const { return mLease & kAppendedInMsgFlag; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:bool
IsAttached	core/thread/mle.cpp	/^bool Mle::IsAttached(void) const { return (IsChild() || IsRouter() || IsLeader()); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsAttaching	core/thread/mle.hpp	/^    bool IsAttaching(void) const { return (mAttachState != kAttachStateIdle); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsAuthoritativeAnswerFlagSet	core/net/dns_types.hpp	/^    bool IsAuthoritativeAnswerFlagSet(void) const { return (mFlags[0] & kAaFlagMask) == kAaFlagM/;"	f	class:ot::Dns::Header	typeref:typename:bool
IsAutoAddrConfigFlagSet	core/net/nd6.hpp	/^    bool IsAutoAddrConfigFlagSet(void) const { return (mFlags & kAutoConfigFlagMask) != 0; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:bool
IsAutoAddressEnabled	core/net/srp_client.hpp	/^        bool IsAutoAddressEnabled(void) const { return mAutoAddress; }$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:bool
IsAutoEnableMode	core/net/srp_server.hpp	/^    bool IsAutoEnableMode(void) const { return mAutoEnable; }$/;"	f	class:ot::Srp::Server	typeref:typename:bool
IsAutoStartModeEnabled	core/net/srp_client.hpp	/^    bool IsAutoStartModeEnabled(void) const { return mAutoStart.GetState() != AutoStart::kDisabl/;"	f	class:ot::Srp::Client	typeref:typename:bool
IsBackboneRouterPreferredTo	core/thread/network_data_service.cpp	/^bool Manager::IsBackboneRouterPreferredTo(const ServerTlv                  &aServerTlv,$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:bool
IsBackboneSocket	core/net/udp6.cpp	/^bool Udp::IsBackboneSocket(const SocketHandle &aSocket) const$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
IsBackboneTmfMessage	core/backbone_router/backbone_tmf.cpp	/^bool BackboneTmfAgent::IsBackboneTmfMessage(const Ip6::MessageInfo &aMessageInfo) const$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:bool
IsBeaconEnabled	core/mac/mac.hpp	/^    bool IsBeaconEnabled(void) const { return mBeaconsEnabled; }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsBetterParent	core/thread/mle.cpp	/^bool Mle::IsBetterParent(uint16_t                aRloc16,$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsBitSet	ncp/changed_props_set.hpp	/^    static bool IsBitSet(uint64_t aBitset, uint8_t aBitIndex) { return (aBitset & (1ULL << aBitI/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:bool
IsBound	core/net/udp6.hpp	/^        bool IsBound(void) const { return mSockName.mPort != 0; }$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:bool
IsBroadcast	core/mac/mac_types.hpp	/^    bool IsBroadcast(void) const { return ((mType == kTypeShort) && (GetShort() == kShortAddrBro/;"	f	class:ot::Mac::Address	typeref:typename:bool
IsChannelValid	core/utils/power_calibration.hpp	/^    bool IsChannelValid(uint8_t aChannel) const$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:bool
IsChild	core/thread/mle.hpp	/^    bool IsChild(void) const { return (mRole == kRoleChild); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsChildPending	core/common/message.cpp	/^bool Message::IsChildPending(void) const { return GetMetadata().mChildMask.HasAny(); }$/;"	f	class:ot::Message	typeref:typename:bool
IsClean	core/utils/heap.hpp	/^    bool IsClean(void) const$/;"	f	class:ot::Utils::Heap	typeref:typename:bool
IsClient	core/net/dns_dso.hpp	/^        bool IsClient(void) const { return !mIsServer; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:bool
IsClosed	core/coap/coap_secure.hpp	/^    bool IsClosed(void) const { return mDtls.IsClosed(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:bool
IsClosed	core/meshcop/secure_transport.hpp	/^    bool IsClosed(void) const { return mState == kStateClosed; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsClosed	core/net/tcp6.cpp	/^bool Tcp::Endpoint::IsClosed(void) const { return GetTcb().t_state == TCP6S_CLOSED; }$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:bool
IsClosed	core/net/tcp6.cpp	/^bool Tcp::Listener::IsClosed(void) const { return GetTcbListen().t_state == TCP6S_CLOSED; }$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:bool
IsCoexEnabled	lib/spinel/radio_spinel.cpp	/^bool RadioSpinel::IsCoexEnabled(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsCommandClassAuthorized	core/meshcop/tcat_agent.cpp	/^bool TcatAgent::IsCommandClassAuthorized(CommandClass aCommandClass) const$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:bool
IsCommandClassAuthorized	core/radio/ble_secure.hpp	/^    bool IsCommandClassAuthorized(CommandClass aCommandClass) const$/;"	f	class:ot::Ble::BleSecure	typeref:typename:bool
IsCommercialCommissioningMode	core/meshcop/meshcop_tlvs.hpp	/^    bool IsCommercialCommissioningMode(void) const { return (mFlags & kCcmMask) != 0; }$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:bool
IsCommissioned	core/meshcop/dataset_manager.cpp	/^bool ActiveDatasetManager::IsCommissioned(void) const$/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:bool
IsComplete	core/meshcop/dataset_manager.cpp	/^bool ActiveDatasetManager::IsComplete(void) const { return mLocalSaved && mNetworkTimestampValid/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:bool
IsCompleted	core/net/srp_advertising_proxy.cpp	/^bool AdvertisingProxy::AdvInfo::IsCompleted(void) const$/;"	f	class:ot::Srp::AdvertisingProxy::AdvInfo	typeref:typename:bool
IsCompress	core/thread/network_data_tlvs.hpp	/^    bool IsCompress(void) const { return (mFlags & kCompressFlag) != 0; }$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:bool
IsConfigure	core/thread/network_data_tlvs.hpp	/^    bool IsConfigure(void) const { return (BigEndian::HostSwap16(mFlags) & kConfigureFlag) != 0;/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsConfirmable	core/coap/coap_message.hpp	/^    bool IsConfirmable(void) const { return (GetType() == kTypeConfirmable); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsConfirmablePostRequest	core/coap/coap_message.cpp	/^bool Message::IsConfirmablePostRequest(void) const { return IsConfirmable() && IsPostRequest(); /;"	f	class:ot::Coap::Message	typeref:typename:bool
IsConnected	core/coap/coap_secure.hpp	/^    bool IsConnected(void) const { return mDtls.IsConnected(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:bool
IsConnected	core/meshcop/secure_transport.hpp	/^    bool IsConnected(void) const { return mState == kStateConnected; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsConnected	core/meshcop/tcat_agent.hpp	/^    bool IsConnected(void) const { return mState == kStateConnected; }$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:bool
IsConnected	core/radio/ble_secure.hpp	/^    bool IsConnected(void) const { return mTls.IsConnected(); }$/;"	f	class:ot::Ble::BleSecure	typeref:typename:bool
IsConnectionActive	core/coap/coap_secure.hpp	/^    bool IsConnectionActive(void) const { return mDtls.IsConnectionActive(); }$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:bool
IsConnectionActive	core/meshcop/secure_transport.hpp	/^    bool IsConnectionActive(void) const { return mState >= kStateConnecting; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsConnectionActive	core/radio/ble_secure.hpp	/^    bool IsConnectionActive(void) const { return mTls.IsConnectionActive(); }$/;"	f	class:ot::Ble::BleSecure	typeref:typename:bool
IsContainedIn	core/net/mdns.cpp	/^bool Core::ServiceEntry::SubType::IsContainedIn(const Service &aService) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry::SubType	typeref:typename:bool
IsCslCapable	core/mac/mac.cpp	/^bool Mac::IsCslCapable(void) const { return (GetCslPeriod() > 0) && IsCslSupported(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsCslChannelValid	core/radio/radio.hpp	/^    static bool IsCslChannelValid(uint8_t aCslChannel)$/;"	f	class:ot::Radio	typeref:typename:bool
IsCslEnabled	core/mac/mac.cpp	/^bool Mac::IsCslEnabled(void) const { return !Get<Mle::Mle>().IsRxOnWhenIdle() && IsCslCapable();/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsCslIePresent	core/mac/mac_frame.hpp	/^    bool IsCslIePresent(void) const { return mInfo.mTxInfo.mCslPresent; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:bool
IsCslSupported	core/mac/mac.cpp	/^bool Mac::IsCslSupported(void) const$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsCslSynchronized	core/thread/csl_tx_scheduler.hpp	/^        bool IsCslSynchronized(void) const { return mCslSynchronized && mCslPeriod > 0; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:bool
IsCsmaCaEnabled	core/mac/mac_frame.hpp	/^    bool IsCsmaCaEnabled(void) const { return mInfo.mTxInfo.mCsmaCaEnabled; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:bool
IsDadAttemptsComplete	core/backbone_router/ndproxy_table.hpp	/^        bool IsDadAttemptsComplete(void) const { return mDadAttempts == kDuaDadRepeats; }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:bool
IsDataPollPending	core/mac/data_poll_handler.hpp	/^        bool IsDataPollPending(void) const { return mDataPollPending; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:bool
IsDataRequestCommand	core/mac/mac_frame.cpp	/^bool Frame::IsDataRequestCommand(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsDefaultRoute	core/thread/network_data_tlvs.hpp	/^    bool IsDefaultRoute(void) const { return (BigEndian::HostSwap16(mFlags) & kDefaultRouteFlag)/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsDefaultRss	cli/cli_mac_filter.cpp	/^bool MacFilter::IsDefaultRss(const otExtAddress &aExtAddress)$/;"	f	class:ot::Cli::MacFilter	typeref:typename:bool
IsDeleteRequest	core/coap/coap_message.hpp	/^    bool IsDeleteRequest(void) const { return GetCode() == kCodeDelete; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsDeleted	core/net/srp_server.hpp	/^        bool IsDeleted(void) const { return (mLease == 0); }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:bool
IsDeleted	core/net/srp_server.hpp	/^        bool IsDeleted(void) const { return mIsDeleted; }$/;"	f	class:ot::Srp::Server::Service	typeref:typename:bool
IsDeleted	core/utils/flash.hpp	/^        bool IsDeleted(void) const { return (mFlags & kFlagDelete) == 0; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:bool
IsDeprecated	core/border_router/routing_manager.cpp	/^bool RoutingManager::OnLinkPrefix::IsDeprecated(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:bool
IsDeprecating	core/utils/slaac_address.hpp	/^        bool      IsDeprecating(void) const { return (mExpirationTime.GetValue() != kNotDeprecat/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:bool
IsDestinationPresent	core/mac/mac_types.hpp	/^    bool IsDestinationPresent(void) const { return mIsDestinationPresent; }$/;"	f	class:ot::Mac::PanIds	typeref:typename:bool
IsDetached	core/thread/mle.hpp	/^    bool IsDetached(void) const { return (mRole == kRoleDetached); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsDetachingGracefully	core/thread/mle.hpp	/^    bool       IsDetachingGracefully(void) { return mDetachGracefullyTimer.IsRunning(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsDhcp	core/thread/network_data_tlvs.hpp	/^    bool IsDhcp(void) const { return (BigEndian::HostSwap16(mFlags) & kDhcpFlag) != 0; }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsDiagEnabled	lib/spinel/radio_spinel.hpp	/^    bool IsDiagEnabled(void) const { return mDiagMode; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsDigit	core/common/string.cpp	/^bool IsDigit(char aChar) { return ('0' <= aChar && aChar <= '9'); }$/;"	f	namespace:ot	typeref:typename:bool
IsDirectRxFromClient	core/net/srp_server.hpp	/^        bool                     IsDirectRxFromClient(void) const { return mIsDirectRxFromClient/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:bool
IsDirectRxFromClient	core/net/srp_server.hpp	/^        bool IsDirectRxFromClient(void) const { return (mMessageInfo != nullptr); }$/;"	f	struct:ot::Srp::Server::MessageMetadata	typeref:typename:bool
IsDirectTransmission	core/common/message.hpp	/^    bool IsDirectTransmission(void) const { return GetMetadata().mDirectTx; }$/;"	f	class:ot::Message	typeref:typename:bool
IsDirectTxQueueOverMaxFrameThreshold	core/thread/mesh_forwarder.cpp	/^bool MeshForwarder::IsDirectTxQueueOverMaxFrameThreshold(void) const$/;"	f	class:ot::MeshForwarder	typeref:typename:bool
IsDisabled	core/meshcop/commissioner.hpp	/^    bool IsDisabled(void) const { return mState == kStateDisabled; }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:bool
IsDisabled	core/thread/mle.hpp	/^    bool IsDisabled(void) const { return (mRole == kRoleDisabled); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsDistantPast	core/utils/history_tracker.hpp	/^        bool     IsDistantPast(void) const { return (mTime.GetValue() == kDistantPast); }$/;"	f	class:ot::Utils::HistoryTracker::Timestamp	typeref:typename:bool
IsDnsNameCompressionEnabled	core/instance/instance.hpp	/^    static bool IsDnsNameCompressionEnabled(void) { return sDnsNameCompressionEnabled; }$/;"	f	class:ot::Instance	typeref:typename:bool
IsDnsSecurityFlagSet	core/net/dns_types.hpp	/^    bool IsDnsSecurityFlagSet(void) const { return (GetTtlByteAt(kFlagByteIndex) & kDnsSecFlag) /;"	f	class:ot::Dns::OptRecord	typeref:typename:bool
IsDnsSrpServiceAdded	core/thread/network_data_publisher.hpp	/^    bool IsDnsSrpServiceAdded(void) const { return mDnsSrpServiceEntry.IsAdded(); }$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:bool
IsDomainPrefix	core/border_router/routing_manager.hpp	/^        bool               IsDomainPrefix(void) const { return mIsDomainPrefix; }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefix	typeref:typename:bool
IsDomainUnicast	core/backbone_router/bbr_leader.cpp	/^bool Leader::IsDomainUnicast(const Ip6::Address &aAddress) const$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:bool
IsDone	core/coap/coap_message.hpp	/^        bool IsDone(void) const { return mOption.mLength == kIteratorDoneLength; }$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:bool
IsDone	core/common/iterator_utils.hpp	/^    bool IsDone(void) const { return mItem == nullptr; }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:bool
IsDone	core/common/settings.hpp	/^        bool IsDone(void) const { return mIsDone; }$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:bool
IsDone	core/thread/child.hpp	/^        bool IsDone(void) const { return (mIndex >= kMaxIndex); }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:bool
IsDp	core/thread/network_data_tlvs.hpp	/^    bool IsDp(void) const { return (BigEndian::HostSwap16(mFlags) & kDpFlag) != 0; }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsDstAddrPresent	core/mac/mac_frame.hpp	/^    bool IsDstAddrPresent() const { return IsDstAddrPresent(GetFrameControlField()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsDstAddrPresent	core/mac/mac_frame.hpp	/^    static bool IsDstAddrPresent(uint16_t aFcf) { return (aFcf & kFcfDstAddrMask) != kFcfDstAddr/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsDstPanIdBroadcast	core/common/message.hpp	/^    bool IsDstPanIdBroadcast(void) const { return GetMetadata().mIsDstPanIdBroadcast; }$/;"	f	class:ot::Message	typeref:typename:bool
IsDstPanIdBroadcast	core/thread/mesh_forwarder.hpp	/^    bool IsDstPanIdBroadcast(void) const { return mIsDstPanIdBroadcast; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:bool
IsDstPanIdPresent	core/mac/mac_frame.cpp	/^bool Frame::IsDstPanIdPresent(uint16_t aFcf)$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsDstPanIdPresent	core/mac/mac_frame.hpp	/^    bool IsDstPanIdPresent(void) const { return IsDstPanIdPresent(GetFrameControlField()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsEligibleForRouterRoleUpgradeAsBorderRouter	core/thread/network_data_notifier.cpp	/^bool Notifier::IsEligibleForRouterRoleUpgradeAsBorderRouter(void) const$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:bool
IsEmpty	core/border_router/routing_manager.hpp	/^            bool IsEmpty(void) const { return (GetPrefix().GetLength() == 0); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager::PrefixEntry	typeref:typename:bool
IsEmpty	core/border_router/routing_manager.hpp	/^        bool               IsEmpty(void) const { return (mPrefix.GetLength() == 0); }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefix	typeref:typename:bool
IsEmpty	core/coap/coap_message.hpp	/^    bool IsEmpty(void) const { return (GetCode() == kCodeEmpty); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsEmpty	core/common/array.hpp	/^    bool IsEmpty(void) const { return (mLength == 0); }$/;"	f	class:ot::Array	typeref:typename:bool
IsEmpty	core/common/linked_list.hpp	/^    bool IsEmpty(void) const { return (mHead == nullptr); }$/;"	f	class:ot::LinkedList	typeref:typename:bool
IsEmpty	core/common/notifier.hpp	/^    bool IsEmpty(void) const { return (mEventFlags == 0); }$/;"	f	class:ot::Events	typeref:typename:bool
IsEmpty	core/mac/channel_mask.hpp	/^    bool IsEmpty(void) const { return (mMask == 0); }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:bool
IsEmpty	core/mac/mac_frame.hpp	/^    bool IsEmpty(void) const { return (mLength == 0); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsEmpty	core/mac/mac_types.hpp	/^    bool IsEmpty(void) const { return (mBitMask == 0); }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:bool
IsEmpty	core/meshcop/meshcop.hpp	/^    bool IsEmpty(void) const { return DoesAllMatch(0); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
IsEmpty	core/meshcop/meshcop.hpp	/^    bool IsEmpty(void) const { return mLength == 0; }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:bool
IsEmpty	core/net/dns_dso.hpp	/^            bool      IsEmpty(void) const { return mRequests.IsEmpty(); }$/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:bool
IsEmpty	core/net/dns_types.hpp	/^    bool IsEmpty(void) const { return (mString == nullptr) && (mMessage == nullptr); }$/;"	f	class:ot::Dns::Name	typeref:typename:bool
IsEmpty	core/net/dnssd.hpp	/^        bool IsEmpty(void) const { return (mStart == mEnd); }$/;"	f	struct:ot::Dnssd::RequestIdRange	typeref:typename:bool
IsEmpty	core/net/mdns.cpp	/^bool Core::HostEntry::IsEmpty(void) const { return !mAddrRecord.IsPresent() && !mKeyRecord.IsPre/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
IsEmpty	core/net/mdns.cpp	/^bool Core::RecordCounts::IsEmpty(void) const$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts	typeref:typename:bool
IsEmpty	core/net/mdns.cpp	/^bool Core::ServiceEntry::IsEmpty(void) const { return !mPtrRecord.IsPresent() && !mKeyRecord.IsP/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
IsEmpty	core/net/mdns.hpp	/^        bool IsEmpty(void) const { return (mCallback == nullptr); }$/;"	f	class:ot::Dns::Multicast::Core::Callback	typeref:typename:bool
IsEmpty	core/thread/mle_types.hpp	/^    bool IsEmpty(void) const { return mArray.GetLength() == 0; }$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:bool
IsEmpty	core/utils/parse_cmdline.hpp	/^    bool IsEmpty(void) const { return (mString == nullptr); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:bool
IsEmpty	lib/spinel/multi_frame_buffer.hpp	/^    bool IsEmpty(void) const { return (mWritePointer == mBuffer); }$/;"	f	class:ot::Spinel::FrameBuffer	typeref:typename:bool
IsEmpty	lib/spinel/spinel_buffer.cpp	/^bool Buffer::IsEmpty(void) const { return !HasFrame(kPriorityHigh) && !HasFrame(kPriorityLow); }$/;"	f	class:ot::Spinel::Buffer	typeref:typename:bool
IsEmpty	ncp/changed_props_set.hpp	/^    bool IsEmpty(void) const { return (mChangedSet == 0); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:bool
IsEmpty	ncp/ncp_hdlc.cpp	/^bool NcpHdlc::BufferEncrypterReader::IsEmpty(void) const { return mTxFrameBuffer.IsEmpty() && !m/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:bool
IsEmptyOrContains	core/thread/mlr_manager.hpp	/^        bool IsEmptyOrContains(const Ip6::Address &aAddress) const { return IsEmpty() || Contain/;"	f	class:ot::MlrManager::AddressArray	typeref:typename:bool
IsEnabled	core/backbone_router/bbr_local.hpp	/^    bool IsEnabled(void) const { return mState != kStateDisabled; }$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:bool
IsEnabled	core/border_router/routing_manager.hpp	/^    bool  IsEnabled(void) const { return mIsEnabled; }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsEnabled	core/diags/factory_diags.cpp	/^bool Diags::IsEnabled(void) { return otPlatDiagModeGet(); }$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:bool
IsEnabled	core/mac/link_raw.hpp	/^    bool IsEnabled(void) const { return mReceiveDoneCallback != nullptr; }$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:bool
IsEnabled	core/mac/mac.hpp	/^    bool IsEnabled(void) const { return mEnabled; }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsEnabled	core/meshcop/tcat_agent.hpp	/^    bool IsEnabled(void) const { return mState != kStateDisabled; }$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:bool
IsEnabled	core/net/mdns.hpp	/^    bool IsEnabled(void) const { return mIsEnabled; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
IsEnabled	core/radio/radio.hpp	/^inline bool Radio::IsEnabled(void) { return otPlatRadioIsEnabled(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:bool
IsEnabled	core/radio/radio.hpp	/^inline bool Radio::IsEnabled(void) { return true; }$/;"	f	class:ot::Radio	typeref:typename:bool
IsEnabled	core/radio/trel_interface.hpp	/^    bool IsEnabled(void) const { return mEnabled; }$/;"	f	class:ot::Trel::Interface	typeref:typename:bool
IsEnabled	core/thread/src_match_controller.hpp	/^    bool IsEnabled(void) const { return mEnabled; }$/;"	f	class:ot::SourceMatchController	typeref:typename:bool
IsEnabled	core/utils/jam_detector.hpp	/^    bool IsEnabled(void) const { return mEnabled; }$/;"	f	class:ot::Utils::JamDetector	typeref:typename:bool
IsEnabled	core/utils/link_metrics_manager.hpp	/^    bool IsEnabled(void) { return mEnabled; }$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:bool
IsEnabled	core/utils/slaac_address.hpp	/^    bool IsEnabled(void) const { return mEnabled; }$/;"	f	class:ot::Utils::Slaac	typeref:typename:bool
IsEnabled	lib/spinel/radio_spinel.hpp	/^    bool IsEnabled(void) const { return mState != kStateDisabled; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsEnabled	posix/platform/multicast_routing.hpp	/^    bool IsEnabled(void) const { return mMulticastRouterSock >= 0; }$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:bool
IsEndDeviceFlagSet	core/thread/mle_tlvs.hpp	/^    static bool IsEndDeviceFlagSet(uint8_t aMask) { return (aMask & kEndDeviceFlag) != 0; }$/;"	f	class:ot::Mle::ScanMaskTlv	typeref:typename:bool
IsEndOffsetSet	core/net/dns_types.hpp	/^        bool  IsEndOffsetSet(void) const { return (mNameEndOffset != kUnsetNameEndOffset); }$/;"	f	struct:ot::Dns::Name::LabelIterator	typeref:typename:bool
IsEnergyScanInProgress	core/mac/mac.hpp	/^    bool IsEnergyScanInProgress(void) const { return IsActiveOrPending(kOperationEnergyScan); }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsEnhAckProbingActive	core/thread/neighbor.hpp	/^    bool IsEnhAckProbingActive(void) const$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsEnhancedKeepAliveSupported	core/thread/neighbor.hpp	/^    bool IsEnhancedKeepAliveSupported(void) const$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsEntryChanged	ncp/changed_props_set.hpp	/^    bool IsEntryChanged(uint8_t aIndex) const { return IsBitSet(mChangedSet, aIndex); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:bool
IsEntryCompressed	core/thread/mle_tlvs.hpp	/^    static bool IsEntryCompressed(uint8_t aControlByte) { return (aControlByte & kCompressed); }$/;"	f	class:ot::Mle::AddressRegistrationTlv	typeref:typename:bool
IsEntryFiltered	ncp/changed_props_set.hpp	/^    bool IsEntryFiltered(uint8_t aIndex) const { return IsBitSet(mFilterSet, aIndex); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:bool
IsEphemeralKeyActive	core/meshcop/border_agent.hpp	/^    bool IsEphemeralKeyActive(void) const { return mUsingEphemeralKey; }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:bool
IsEqual	core/net/ip6_address.cpp	/^bool Prefix::IsEqual(const uint8_t *aPrefixBytes, uint8_t aPrefixLength) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsEqual	core/thread/network_data_tlvs.hpp	/^    bool IsEqual(Ip6::Prefix &aPrefix) const { return aPrefix.IsEqual(GetPrefix(), GetPrefixLeng/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:bool
IsEqual	core/thread/network_data_tlvs.hpp	/^    bool IsEqual(const uint8_t *aPrefix, uint8_t aPrefixLength) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:bool
IsError	core/net/icmp6.hpp	/^        bool IsError(void) const { return mType < OT_ICMP6_TYPE_ECHO_REQUEST; }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:bool
IsEscapable	core/utils/parse_cmdline.cpp	/^static bool IsEscapable(char aChar) { return IsSeparator(aChar) || (aChar == '\\\\'); }$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:bool	file:
IsExpectedToBecomeRouterSoon	core/thread/mle_router.cpp	/^bool MleRouter::IsExpectedToBecomeRouterSoon(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
IsExpired	core/net/dns_dso.hpp	/^            bool IsExpired(TimeMilli aNow) const { return (mExpirationTime <= aNow); }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:bool
IsExpired	core/thread/mesh_forwarder.hpp	/^            bool              IsExpired(void) const { return (mLifetime == 0); }$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:bool
IsExtended	core/common/tlvs.hpp	/^    bool IsExtended(void) const { return (mLength == kExtendedLength); }$/;"	f	class:ot::Tlv	typeref:typename:bool
IsExtended	core/mac/mac_types.hpp	/^    bool IsExtended(void) const { return (mType == kTypeExtended); }$/;"	f	class:ot::Mac::Address	typeref:typename:bool
IsExtended	core/thread/link_metrics_types.hpp	/^    static bool IsExtended(uint8_t aTypeId) { return (aTypeId & kExtendedFlag); }$/;"	f	class:ot::LinkMetrics::TypeId	typeref:typename:bool
IsFavoredOver	core/border_router/routing_manager.cpp	/^bool RoutingManager::FavoredOmrPrefix::IsFavoredOver(const NetworkData::OnMeshPrefixConfig &aOmr/;"	f	class:ot::BorderRouter::RoutingManager::FavoredOmrPrefix	typeref:typename:bool
IsFavoredOver	core/border_router/routing_manager.cpp	/^bool RoutingManager::PdPrefixManager::PrefixEntry::IsFavoredOver(const PrefixEntry &aOther) cons/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager::PrefixEntry	typeref:typename:bool
IsFilterEnabled	core/radio/trel_interface.hpp	/^    bool IsFilterEnabled(void) const { return mFiltered; }$/;"	f	class:ot::Trel::Interface	typeref:typename:bool
IsFiltered	core/utils/slaac_address.cpp	/^bool Slaac::IsFiltered(const NetworkData::OnMeshPrefixConfig &aConfig) const$/;"	f	class:ot::Utils::Slaac	typeref:typename:bool
IsFirst	core/utils/flash.hpp	/^        bool IsFirst(void) const { return (mFlags & kFlagFirst) == 0; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:bool
IsFixedDuaInterfaceIdentifierSet	core/thread/dua_manager.hpp	/^    bool IsFixedDuaInterfaceIdentifierSet(void) { return !mFixedDuaInterfaceIdentifier.IsUnspeci/;"	f	class:ot::DuaManager	typeref:typename:bool
IsFragmentHeader	core/thread/lowpan.cpp	/^bool FragmentHeader::IsFragmentHeader(const FrameData &aFrameData)$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:bool
IsFragmentHeader	core/thread/lowpan.cpp	/^bool FragmentHeader::IsFragmentHeader(const uint8_t *aFrame, uint16_t aFrameLength)$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:bool
IsFramePurgePending	core/mac/data_poll_handler.hpp	/^        bool IsFramePurgePending(void) const { return mFramePurgePending; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:bool
IsFrameReplacePending	core/mac/data_poll_handler.hpp	/^        bool IsFrameReplacePending(void) const { return mFrameReplacePending; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:bool
IsFrameTypeMatch	core/thread/link_metrics_types.cpp	/^bool SeriesInfo::IsFrameTypeMatch(uint8_t aFrameType) const$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:bool
IsFree	core/utils/heap.hpp	/^    bool IsFree(void) const { return mSize != kGuardBlockSize && GetNext() != 0; }$/;"	f	class:ot::Utils::Block	typeref:typename:bool
IsFromCString	core/net/dns_types.hpp	/^    bool IsFromCString(void) const { return mString != nullptr; }$/;"	f	class:ot::Dns::Name	typeref:typename:bool
IsFromMessage	core/net/dns_types.hpp	/^    bool IsFromMessage(void) const { return mMessage != nullptr; }$/;"	f	class:ot::Dns::Name	typeref:typename:bool
IsFull	core/common/array.hpp	/^    bool IsFull(void) const { return (mLength == GetMaxSize()); }$/;"	f	class:ot::Array	typeref:typename:bool
IsFull	lib/spinel/spinel_driver.hpp	/^        bool IsFull(void) const { return (mLength == GetMaxSize()); }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:bool
IsFullThreadDevice	core/thread/mle.hpp	/^    bool IsFullThreadDevice(void) const { return mDeviceMode.IsFullThreadDevice(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsFullThreadDevice	core/thread/mle_types.hpp	/^    bool IsFullThreadDevice(void) const { return (mMode & kModeFullThreadDevice) != 0; }$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:bool
IsFullThreadDevice	core/thread/neighbor.hpp	/^    bool IsFullThreadDevice(void) const { return GetDeviceMode().IsFullThreadDevice(); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsGetRequest	core/coap/coap_message.hpp	/^    bool IsGetRequest(void) const { return GetCode() == kCodeGet; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsGreater	core/common/serial_number.hpp	/^    template <typename UintType> static bool IsGreater(UintType aFirst, UintType aSecond)$/;"	f	class:ot::SerialNumber	typeref:typename:bool
IsGroup	core/mac/mac_types.hpp	/^    bool IsGroup(void) const { return (m8[0] & kGroupFlag) != 0; }$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:bool
IsHeaderUpdated	core/mac/mac_frame.hpp	/^    bool IsHeaderUpdated(void) const { return mInfo.mTxInfo.mIsHeaderUpdated; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:bool
IsHeaderValid	core/radio/trel_packet.cpp	/^bool Packet::IsHeaderValid(void) const$/;"	f	class:ot::Trel::Packet	typeref:typename:bool
IsHostInterface	core/net/socket.hpp	/^    bool IsHostInterface(void) const { return mIsHostInterface; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:bool
IsIcmp6	core/net/ip6.hpp	/^    bool IsIcmp6(void) const { return GetIpProto() == kProtoIcmp6; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:bool
IsIePresent	core/mac/mac_frame.hpp	/^    bool IsIePresent(void) const { return (GetFrameControlField() & kFcfIePresent) != 0; }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsInAQueue	core/common/message.hpp	/^    bool IsInAQueue(void) const { return (GetMetadata().mQueue != nullptr); }$/;"	f	class:ot::Message	typeref:typename:bool
IsInArrayBuffer	core/common/array.hpp	/^    bool IsInArrayBuffer(const Type *aEntry) const$/;"	f	class:ot::Array	typeref:typename:bool
IsInProgress	core/border_router/routing_manager.hpp	/^        bool IsInProgress(void) const { return mTimer.IsRunning(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender	typeref:typename:bool
IsInProgress	core/thread/anycast_locator.hpp	/^    bool IsInProgress(void) const { return mCallback.IsSet(); }$/;"	f	class:ot::AnycastLocator	typeref:typename:bool
IsInProgress	core/thread/discover_scanner.hpp	/^    bool IsInProgress(void) const { return (mState != kStateIdle); }$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:bool
IsInRampDown	core/thread/address_resolver.hpp	/^        bool IsInRampDown(void) const { return mInfo.mOther.mRampDown; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:bool
IsInTransmitState	core/mac/mac.cpp	/^bool Mac::IsInTransmitState(void) const$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsInUse	core/mac/mac_filter.hpp	/^        bool IsInUse(void) const { return mFiltered || (mRssIn != kFixedRssDisabled); }$/;"	f	struct:ot::Mac::Filter::FilterEntry	typeref:typename:bool
IsInUse	core/thread/mle.hpp	/^        bool     IsInUse(void) const { return GetAloc16() != kNotInUse; }$/;"	f	class:ot::Mle::Mle::ServiceAloc	typeref:typename:bool
IsInUse	core/thread/network_data_leader.hpp	/^        bool      IsInUse(uint8_t aId) const { return mRemoveTimes[aId - kMinId].GetValue() == k/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:bool
IsInUse	core/thread/network_data_publisher.hpp	/^        bool      IsInUse(void) const { return GetState() != kNoEntry; }$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:bool
IsInUse	core/utils/slaac_address.hpp	/^        bool      IsInUse(void) const { return mValid; }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:bool
IsIndirectSourceMatchPending	core/thread/indirect_sender.hpp	/^        bool IsIndirectSourceMatchPending(void) const { return mSourceMatchPending; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:bool
IsIndirectSourceMatchShort	core/thread/indirect_sender.hpp	/^        bool IsIndirectSourceMatchShort(void) const { return mUseShortAddress; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:bool
IsInfrastructureDerived	core/border_router/routing_manager.cpp	/^bool RoutingManager::FavoredOmrPrefix::IsInfrastructureDerived(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::FavoredOmrPrefix	typeref:typename:bool
IsInitalEvaluationDone	core/border_router/routing_manager.cpp	/^bool RoutingManager::OnLinkPrefixManager::IsInitalEvaluationDone(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:bool
IsInitalPolicyEvaluationDone	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsInitalPolicyEvaluationDone(void) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsInitialized	cli/cli.hpp	/^    static bool IsInitialized(void) { return sInterpreter != nullptr; }$/;"	f	class:ot::Cli::Interpreter	typeref:typename:bool
IsInitialized	core/border_router/infra_if.hpp	/^    bool IsInitialized(void) const { return mInitialized; }$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:bool
IsInitialized	core/border_router/routing_manager.hpp	/^    bool  IsInitialized(void) const { return mInfraIf.IsInitialized(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsInitialized	core/instance/instance.hpp	/^    bool IsInitialized(void) const { return mIsInitialized; }$/;"	f	class:ot::Instance	typeref:typename:bool
IsInitialized	core/net/tcp6.hpp	/^    bool IsInitialized(const Endpoint &aEndpoint) const { return mEndpoints.Contains(aEndpoint);/;"	f	class:ot::Ip6::Tcp	typeref:typename:bool
IsInitialized	core/net/tcp6.hpp	/^    bool IsInitialized(const Listener &aListener) const { return mListeners.Contains(aListener);/;"	f	class:ot::Ip6::Tcp	typeref:typename:bool
IsInterfaceNameMatch	posix/platform/hdlc_interface.hpp	/^    static bool IsInterfaceNameMatch(const char *aInterfaceName)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:bool
IsInterfaceNameMatch	posix/platform/spi_interface.hpp	/^    static bool IsInterfaceNameMatch(const char *aInterfaceName)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:bool
IsInterfaceNameMatch	posix/platform/vendor_interface.hpp	/^    static bool IsInterfaceNameMatch(const char *aInterfaceName)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:bool
IsIp4Mapped	core/net/ip6_address.cpp	/^bool Address::IsIp4Mapped(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsIp6AddressLinkLocal	posix/platform/ip6_utils.hpp	/^inline bool IsIp6AddressLinkLocal(const otIp6Address &aAddress)$/;"	f	namespace:ot::Posix::Ip6Utils	typeref:typename:bool
IsIp6AddressMulticast	posix/platform/ip6_utils.hpp	/^inline bool IsIp6AddressMulticast(const otIp6Address &aAddress) { return (aAddress.mFields.m8[0]/;"	f	namespace:ot::Posix::Ip6Utils	typeref:typename:bool
IsIp6AddressUnspecified	posix/platform/ip6_utils.hpp	/^inline bool IsIp6AddressUnspecified(const otIp6Address &aAddress) { return otIp6IsAddressUnspeci/;"	f	namespace:ot::Posix::Ip6Utils	typeref:typename:bool
IsJoinable	core/mac/mac.cpp	/^bool Mac::IsJoinable(void) const$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsJoiner	core/meshcop/meshcop_tlvs.hpp	/^    bool IsJoiner(void) const { return (mFlags & kJoinerMask) != 0; }$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:bool
IsJoinerUdpPortSet	core/meshcop/meshcop.hpp	/^    bool IsJoinerUdpPortSet(void) const { return mIsJoinerUdpPortSet; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:bool
IsJoiningAllowed	core/thread/network_data_leader.cpp	/^bool Leader::IsJoiningAllowed(void) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
IsJoiningPermitted	core/mac/mac_frame.hpp	/^    bool IsJoiningPermitted(void) const { return (mFlags & kJoiningFlag) != 0; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:bool
IsKeyForService	core/net/mdns.hpp	/^    static bool     IsKeyForService(const Key &aKey) { return aKey.mServiceType != nullptr; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
IsKeyRef	core/crypto/storage.hpp	/^    bool IsKeyRef(void) const { return (mKey == nullptr); }$/;"	f	class:ot::Crypto::Key	typeref:typename:bool
IsKeyRefValid	core/crypto/storage.hpp	/^inline bool IsKeyRefValid(KeyRef aKeyRef) { return (aKeyRef < kInvalidKeyRef); }$/;"	f	namespace:ot::Crypto::Storage	typeref:typename:bool
IsKeyRegisteredOrRegistering	core/net/srp_advertising_proxy.cpp	/^template <typename Entry> bool AdvertisingProxy::IsKeyRegisteredOrRegistering(const Entry &aEntr/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
IsLast	core/thread/network_diagnostic_tlvs.hpp	/^    bool IsLast(void) const { return GetFlagsIndex() & kIsLastFlag; }$/;"	f	class:ot::NetworkDiagnostic::AnswerTlv	typeref:typename:bool
IsLastAnswer	core/thread/network_diagnostic.cpp	/^bool Server::IsLastAnswer(const Coap::Message &aAnswer) const$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:bool
IsLastRxFragmentTagAfter	core/thread/neighbor.hpp	/^    bool IsLastRxFragmentTagAfter(uint16_t aTag) const { return SerialNumber::IsGreater(mLastRxF/;"	f	class:ot::Neighbor	typeref:typename:bool
IsLastRxFragmentTagSet	core/thread/neighbor.cpp	/^bool Neighbor::IsLastRxFragmentTagSet(void) const$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsLastTransactionTimeValid	core/thread/address_resolver.hpp	/^        bool     IsLastTransactionTimeValid(void) const { return GetLastTransactionTime() != kIn/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:bool
IsLeader	core/thread/mle.hpp	/^    bool IsLeader(void) const { return (mRole == kRoleLeader); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsLeftFree	core/utils/heap.hpp	/^    bool IsLeftFree(const Block &aBlock) { return (BlockOffset(aBlock) != kFirstBlockOffset && a/;"	f	class:ot::Utils::Heap	typeref:typename:bool
IsLeftFree	core/utils/heap.hpp	/^    bool IsLeftFree(void) const { return GetLeftNext() != 0; }$/;"	f	class:ot::Utils::Block	typeref:typename:bool
IsLess	core/common/serial_number.hpp	/^    template <typename UintType> static bool IsLess(UintType aFirst, UintType aSecond)$/;"	f	class:ot::SerialNumber	typeref:typename:bool
IsLinkLocal	core/net/ip6_address.cpp	/^bool Address::IsLinkLocal(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsLinkLocal	core/net/ip6_address.cpp	/^bool Prefix::IsLinkLocal(void) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsLinkLocalAllNodesMulticast	core/net/ip6_address.cpp	/^bool Address::IsLinkLocalAllNodesMulticast(void) const { return (*this == GetLinkLocalAllNodesMu/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsLinkLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^bool Address::IsLinkLocalAllRoutersMulticast(void) const { return (*this == GetLinkLocalAllRoute/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsLinkLocalMulticast	core/net/ip6_address.cpp	/^bool Address::IsLinkLocalMulticast(void) const { return IsMulticast() && (GetScope() == kLinkLoc/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsLinkProbeFlagSet	core/thread/link_metrics_types.hpp	/^    bool IsLinkProbeFlagSet(void) const { return mLinkProbe; }$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:bool
IsLinkSecurityEnabled	core/common/message.hpp	/^        bool IsLinkSecurityEnabled(void) const { return mLinkSecurityEnabled; }$/;"	f	class:ot::Message::Settings	typeref:typename:bool
IsLinkSecurityEnabled	core/common/message.hpp	/^    bool IsLinkSecurityEnabled(void) const { return GetMetadata().mLinkSecurity; }$/;"	f	class:ot::Message	typeref:typename:bool
IsLinkSecurityEnabled	core/thread/mesh_forwarder.hpp	/^    bool IsLinkSecurityEnabled(void) const { return mLinkSecurity; }$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:bool
IsLocal	core/mac/mac_types.hpp	/^    bool IsLocal(void) const { return (m8[0] & kLocalFlag) != 0; }$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:bool
IsLocator	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsLocator(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsLocatorSet	core/meshcop/meshcop.hpp	/^    bool IsLocatorSet(void) const { return mIsLocatorSet; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:bool
IsLoopback	core/net/ip6_address.cpp	/^bool Address::IsLoopback(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsLoopbackToHostAllowed	core/common/message.hpp	/^    bool IsLoopbackToHostAllowed(void) const { return GetMetadata().mAllowLookbackToHost; }$/;"	f	class:ot::Message	typeref:typename:bool
IsLowercase	core/common/string.cpp	/^bool IsLowercase(char aChar) { return ('a' <= aChar && aChar <= 'z'); }$/;"	f	namespace:ot	typeref:typename:bool
IsLowpanHc	core/thread/lowpan.hpp	/^    static bool IsLowpanHc(const FrameData &aFrameData)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:bool
IsLowpanHc	core/thread/lowpan.hpp	/^    static bool IsLowpanHc(const uint8_t *aHeader)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:bool
IsMacAckFlagSet	core/thread/link_metrics_types.hpp	/^    bool IsMacAckFlagSet(void) const { return mMacAck; }$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:bool
IsMacDataFlagSet	core/thread/link_metrics_types.hpp	/^    bool IsMacDataFlagSet(void) const { return mMacData; }$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:bool
IsMacDataRequestFlagSet	core/thread/link_metrics_types.hpp	/^    bool IsMacDataRequestFlagSet(void) const { return mMacDataRequest; }$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:bool
IsManagedAddressConfigFlagSet	core/net/nd6.hpp	/^        bool IsManagedAddressConfigFlagSet(void) const { return (mFlags & kManagedAddressConfigF/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:bool
IsMaxFlagSet	core/net/ip6_mpl.hpp	/^    bool IsMaxFlagSet(void) const { return (mControl & kMaxFlag) != 0; }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:bool
IsMeshHeader	core/thread/lowpan.cpp	/^bool MeshHeader::IsMeshHeader(const FrameData &aFrameData)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:bool
IsMeshLocalAddress	core/thread/mle.cpp	/^bool Mle::IsMeshLocalAddress(const Ip6::Address &aAddress) const { return (aAddress.GetPrefix() /;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsMinimalChild	core/thread/mle_router.cpp	/^bool MleRouter::IsMinimalChild(uint16_t aRloc16)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
IsMinimalEndDevice	core/thread/mle.hpp	/^    bool IsMinimalEndDevice(void) const { return mDeviceMode.IsMinimalEndDevice(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsMinimalEndDevice	core/thread/mle_types.hpp	/^    bool IsMinimalEndDevice(void) const$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:bool
IsMoreBlocksFlagSet	core/coap/coap_message.hpp	/^    bool IsMoreBlocksFlagSet(void) const { return GetHelpData().mBlockWiseData.mMoreBlocks; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsMoreFlagSet	core/net/ip6_headers.hpp	/^    bool IsMoreFlagSet(void) const { return BigEndian::HostSwap16(mOffsetMore) & kMoreFlag; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:bool
IsMulticast	core/net/ip6_address.cpp	/^bool Prefix::IsMulticast(void) const { return (mLength >= 8) && (mPrefix.mFields.m8[0] == 0xff);/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsMulticast	core/net/ip6_address.hpp	/^    bool IsMulticast(void) const { return mFields.m8[0] == 0xff; }$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsMulticastAddressExternal	core/net/netif.cpp	/^bool Netif::IsMulticastAddressExternal(const MulticastAddress &aAddress) const$/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
IsMulticastAddressMeshLocalPrefixBased	core/thread/mle.hpp	/^    bool IsMulticastAddressMeshLocalPrefixBased(const Ip6::Netif::MulticastAddress &aAddress) co/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsMulticastLargerThanRealmLocal	core/net/ip6_address.cpp	/^bool Address::IsMulticastLargerThanRealmLocal(void) const { return IsMulticast() && (GetScope() /;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsMulticastPromiscuousEnabled	core/net/netif.hpp	/^    bool IsMulticastPromiscuousEnabled(void) const { return mMulticastPromiscuous; }$/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
IsMulticastSubscribed	core/net/netif.cpp	/^bool Netif::IsMulticastSubscribed(const Address &aAddress) const$/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
IsNat64	core/thread/network_data_tlvs.hpp	/^    bool IsNat64(void) const { return (mFlags & kNat64Flag) != 0; }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:bool
IsNative	core/mac/mac_frame.hpp	/^    bool IsNative(void) const { return (mFlags & kNativeFlag) != 0; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:bool
IsNativeCommissioner	core/meshcop/meshcop_tlvs.hpp	/^    bool IsNativeCommissioner(void) const { return (mFlags & kNativeMask) != 0; }$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:bool
IsNdDns	core/thread/network_data_tlvs.hpp	/^    bool IsNdDns(void) const { return (BigEndian::HostSwap16(mFlags) & kNdDnsFlag) != 0; }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsNeighborStateValid	core/thread/mle.hpp	/^        bool IsNeighborStateValid(void) const { return (mNeighbor != nullptr) && mNeighbor->IsSt/;"	f	struct:ot::Mle::Mle::RxInfo	typeref:typename:bool
IsNetworkDataNewer	core/thread/mle.cpp	/^bool Mle::IsNetworkDataNewer(const LeaderData &aLeaderData)$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsNewEntry	core/thread/network_data.hpp	/^        bool IsNewEntry(void) const { return GetEntryIndex() == 0; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:bool
IsNonConfirmable	core/coap/coap_message.hpp	/^    bool IsNonConfirmable(void) const { return (GetType() == kTypeNonConfirmable); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsNonConfirmablePostRequest	core/coap/coap_message.cpp	/^bool Message::IsNonConfirmablePostRequest(void) const { return IsNonConfirmable() && IsPostReque/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsNone	core/mac/mac_types.hpp	/^    bool IsNone(void) const { return (mType == kTypeNone); }$/;"	f	class:ot::Mac::Address	typeref:typename:bool
IsNull	core/common/heap_data.hpp	/^    bool IsNull(void) const { return (mData.GetBytes() == nullptr); }$/;"	f	class:ot::Heap::Data	typeref:typename:bool
IsNull	core/common/heap_string.hpp	/^    bool IsNull(void) const { return (mStringBuffer == nullptr); }$/;"	f	class:ot::Heap::String	typeref:typename:bool
IsNull	core/common/ptr_wrapper.hpp	/^    bool IsNull(void) const { return (mPointer == nullptr); }$/;"	f	class:ot::Ptr	typeref:typename:bool
IsOmrAddress	posix/platform/netif.cpp	/^static bool IsOmrAddress(otInstance *aInstance, const otIp6AddressInfo &aAddressInfo)$/;"	f	typeref:typename:bool	file:
IsOnLink	core/net/ip6.cpp	/^bool Ip6::IsOnLink(const Address &aAddress) const$/;"	f	class:ot::Ip6::Ip6	typeref:typename:bool
IsOnLinkFlagSet	core/net/nd6.hpp	/^    bool IsOnLinkFlagSet(void) const { return (mFlags & kOnLinkFlagMask) != 0; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:bool
IsOnMesh	core/thread/network_data_leader.cpp	/^bool Leader::IsOnMesh(const Ip6::Address &aAddress) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
IsOnMesh	core/thread/network_data_tlvs.hpp	/^    bool IsOnMesh(void) const { return (BigEndian::HostSwap16(mFlags) & kOnMeshFlag) != 0; }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsOpen	core/net/udp6.cpp	/^bool Udp::Socket::IsOpen(void) const { return Get<Udp>().IsOpen(*this); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:bool
IsOpen	core/net/udp6.hpp	/^    bool IsOpen(const SocketHandle &aSocket) const { return mSockets.Contains(aSocket); }$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
IsOriginHostTrusted	core/common/message.hpp	/^    bool IsOriginHostTrusted(void) const { return GetOrigin() == kOriginHostTrusted; }$/;"	f	class:ot::Message	typeref:typename:bool
IsOriginHostUntrusted	core/common/message.hpp	/^    bool IsOriginHostUntrusted(void) const { return GetOrigin() == kOriginHostUntrusted; }$/;"	f	class:ot::Message	typeref:typename:bool
IsOriginThreadNetif	core/common/message.hpp	/^    bool IsOriginThreadNetif(void) const { return GetOrigin() == kOriginThreadNetif; }$/;"	f	class:ot::Message	typeref:typename:bool
IsOrphanTimestamp	core/meshcop/timestamp.hpp	/^    bool IsOrphanTimestamp(void) const { return GetSeconds() == 0 && GetTicks() == 0 && GetAutho/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:bool
IsOtherConfigFlagSet	core/net/nd6.hpp	/^        bool IsOtherConfigFlagSet(void) const { return (mFlags & kOtherConfigFlag) != 0; }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:bool
IsOverSizeLimit	core/net/mdns.cpp	/^bool Core::TxMessage::IsOverSizeLimit(void) const$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:bool
IsOverrideFlagSet	core/net/nd6.hpp	/^    bool IsOverrideFlagSet(void) const { return (mFlags & kOverrideFlag) != 0; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:bool
IsPadding	core/net/ip6_headers.hpp	/^    bool IsPadding(void) const { return (mType == kTypePad1) || (mType == kTypePadN); }$/;"	f	class:ot::Ip6::Option	typeref:typename:bool
IsPanIdCompressed	core/mac/mac_frame.hpp	/^    bool IsPanIdCompressed(void) const { return (GetFrameControlField() & kFcfPanidCompression) /;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsPartiallyComplete	core/meshcop/dataset_manager.cpp	/^bool ActiveDatasetManager::IsPartiallyComplete(void) const { return mLocalSaved && !mNetworkTime/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:bool
IsPending	core/common/notifier.hpp	/^    bool IsPending(void) const { return !mEventsToSignal.IsEmpty(); }$/;"	f	class:ot::Notifier	typeref:typename:bool
IsPending	core/mac/mac.hpp	/^    bool     IsPending(Operation aOperation) const { return mPendingOperations & (1U << aOperati/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsPending	core/thread/mle_router.hpp	/^        bool    IsPending(void) const { return (mTimeout != 0); }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:bool
IsPendingDataset	core/meshcop/dataset_manager.hpp	/^    bool  IsPendingDataset(void) const { return (mType == Dataset::kPending); }$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:bool
IsPerformingIndirectTransmit	core/mac/mac.hpp	/^    bool IsPerformingIndirectTransmit(void) const { return (mOperation == kOperationTransmitData/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsPetition	core/meshcop/border_agent.hpp	/^        bool     IsPetition(void) const { return mPetition; }$/;"	f	class:ot::MeshCoP::BorderAgent::ForwardContext	typeref:typename:bool
IsPoolEntry	core/common/pool.hpp	/^    bool IsPoolEntry(const Type &aObject) const { return (&mPool[0] <= &aObject) && (&aObject < /;"	f	class:ot::Pool	typeref:typename:bool
IsPortInUse	core/net/udp6.cpp	/^bool Udp::IsPortInUse(uint16_t aPort) const$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
IsPortReserved	core/net/udp6.cpp	/^bool Udp::IsPortReserved(uint16_t aPort)$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
IsPostRequest	core/coap/coap_message.hpp	/^    bool IsPostRequest(void) const { return GetCode() == kCodePost; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsPosted	core/common/tasklet.hpp	/^    bool IsPosted(void) const { return (mNext != nullptr); }$/;"	f	class:ot::Tasklet	typeref:typename:bool
IsPowerUpdated	core/utils/power_calibration.hpp	/^    bool IsPowerUpdated(void) const { return mCalibratedPowerIndex == kInvalidIndex; }$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:bool
IsPreferred	core/thread/network_data_publisher.cpp	/^bool Publisher::Entry::IsPreferred(uint16_t aRloc16) const$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:bool
IsPreferred	core/thread/network_data_tlvs.hpp	/^    bool IsPreferred(void) const { return (BigEndian::HostSwap16(mFlags) & kPreferredFlag) != 0;/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsPrefixAdded	core/thread/network_data_publisher.cpp	/^bool Publisher::IsPrefixAdded(const Ip6::Prefix &aPrefix) const$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:bool
IsPrefixMatch	core/net/dhcp6_server.hpp	/^        bool IsPrefixMatch(const Ip6::Address &aAddress) const { return aAddress.MatchesPrefix(G/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:bool
IsPrefixValid	core/thread/network_data_types.cpp	/^static bool IsPrefixValid(Instance &aInstance, const Ip6::Prefix &aPrefix)$/;"	f	namespace:ot::NetworkData	typeref:typename:bool	file:
IsPresent	core/meshcop/dataset.hpp	/^        template <Component kComponent> bool IsPresent(void) const { return GetComponents().IsPr/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:bool
IsPresent	core/net/mdns.hpp	/^        bool     IsPresent(void) const { return (mTtl > 0); }$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:bool
IsPresent	core/net/mdns.hpp	/^        bool     IsPresent(void) const { return mIsPresent; }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
IsPrimary	core/backbone_router/bbr_local.hpp	/^    bool IsPrimary(void) const { return mState == kStatePrimary; }$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:bool
IsPromiscuous	core/mac/mac.hpp	/^    bool IsPromiscuous(void) const { return mPromiscuous; }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsPromiscuous	lib/spinel/radio_spinel.hpp	/^    bool IsPromiscuous(void) const { return mIsPromiscuous; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsPropertyFiltered	ncp/changed_props_set.cpp	/^bool ChangedPropsSet::IsPropertyFiltered(spinel_prop_key_t aPropKey) const$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:bool
IsPskcSet	core/thread/key_manager.hpp	/^    bool IsPskcSet(void) const { return mIsPskcSet; }$/;"	f	class:ot::KeyManager	typeref:typename:bool
IsPskdValid	core/meshcop/meshcop.cpp	/^bool JoinerPskd::IsPskdValid(const char *aPskdString)$/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:bool
IsPublishingOrAdvertising	core/border_router/routing_manager.cpp	/^bool RoutingManager::OnLinkPrefixManager::IsPublishingOrAdvertising(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:bool
IsPutRequest	core/coap/coap_message.hpp	/^    bool IsPutRequest(void) const { return GetCode() == kCodePut; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsQuery	core/net/mdns.hpp	/^        bool                IsQuery(void) const { return mIsQuery; }$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
IsQuestionUnicastAllowed	core/net/mdns.hpp	/^    bool IsQuestionUnicastAllowed(void) const { return mIsQuestionUnicastAllowed; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
IsRaFromManager	core/border_router/routing_manager.cpp	/^bool RoutingManager::TxRaInfo::IsRaFromManager(const RouterAdvert::RxMessage &aRaMessage) const$/;"	f	class:ot::BorderRouter::RoutingManager::TxRaInfo	typeref:typename:bool
IsRadioFilterEnabled	core/mac/mac.hpp	/^    bool IsRadioFilterEnabled(void) const { return mLinks.GetSubMac().IsRadioFilterEnabled(); }$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
IsRadioFilterEnabled	core/mac/sub_mac.hpp	/^    bool IsRadioFilterEnabled(void) const { return mRadioFilterEnabled; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
IsRadioTypeSet	core/common/message.hpp	/^    bool IsRadioTypeSet(void) const { return GetMetadata().mIsRadioTypeSet; }$/;"	f	class:ot::Message	typeref:typename:bool
IsReady	core/net/dnssd.hpp	/^    bool IsReady(void) const { return GetState() == kReady; }$/;"	f	class:ot::Dnssd	typeref:typename:bool
IsRealmLocalAllMplForwarders	core/net/ip6_address.cpp	/^bool Address::IsRealmLocalAllMplForwarders(void) const { return (*this == GetRealmLocalAllMplFor/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsRealmLocalAllNodesMulticast	core/net/ip6_address.cpp	/^bool Address::IsRealmLocalAllNodesMulticast(void) const { return (*this == GetRealmLocalAllNodes/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsRealmLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^bool Address::IsRealmLocalAllRoutersMulticast(void) const { return (*this == GetRealmLocalAllRou/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsRealmLocalMulticast	core/net/ip6_address.cpp	/^bool Address::IsRealmLocalMulticast(void) const { return IsMulticast() && (GetScope() == kRealmL/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsReceiveIp6FilterEnabled	core/net/ip6.hpp	/^    bool IsReceiveIp6FilterEnabled(void) const { return mIsReceiveIp6FilterEnabled; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:bool
IsReceiverRegistered	core/common/time_ticker.hpp	/^    bool IsReceiverRegistered(Receiver aReceiver) const { return (mReceivers & Mask(aReceiver)) /;"	f	class:ot::TimeTicker	typeref:typename:bool
IsRecursionAvailableFlagSet	core/net/dns_types.hpp	/^    bool IsRecursionAvailableFlagSet(void) const { return (mFlags[1] & kRaFlagMask) == kRaFlagMa/;"	f	class:ot::Dns::Header	typeref:typename:bool
IsRecursionDesiredFlagSet	core/net/dns_types.hpp	/^    bool IsRecursionDesiredFlagSet(void) const { return (mFlags[0] & kRdFlagMask) == kRdFlagMask/;"	f	class:ot::Dns::Header	typeref:typename:bool
IsRegistered	core/backbone_router/ndproxy_table.hpp	/^    bool IsRegistered(const Ip6::InterfaceIdentifier &aAddressIid) { return FindByAddressIid(aAd/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:bool
IsRegisteredOrRegistering	core/net/srp_advertising_proxy.cpp	/^template <typename Entry> bool AdvertisingProxy::IsRegisteredOrRegistering(const Entry &aEntry) /;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
IsRemoved	core/radio/trel_interface.hpp	/^            bool                 IsRemoved(void) const { return mRemoved; }$/;"	f	class:ot::Trel::Interface::Peer::Info	typeref:typename:bool
IsRequest	core/coap/coap_message.hpp	/^    bool IsRequest(void) const { return (GetCode() >= kCodeGet) && (GetCode() <= kCodeDelete); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsReserved	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsReserved(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsReservedSubnetAnycast	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsReservedSubnetAnycast(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsReset	core/coap/coap_message.hpp	/^    bool IsReset(void) const { return (GetType() == kTypeReset); }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsResetFlagSet	lib/spinel/spi_frame.hpp	/^    bool IsResetFlagSet(void) const { return ((mBuffer[kIndexFlagByte] & kFlagReset) == kFlagRes/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:bool
IsResolvingAddress	core/common/message.hpp	/^    bool IsResolvingAddress(void) const { return GetMetadata().mResolvingAddress; }$/;"	f	class:ot::Message	typeref:typename:bool
IsResponse	core/coap/coap_message.hpp	/^    bool IsResponse(void) const { return GetCode() >= OT_COAP_CODE_RESPONSE_MIN; }$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsResponseQueueEmpty	ncp/ncp_base.hpp	/^    bool    IsResponseQueueEmpty(void) const { return (mResponseQueueHead == mResponseQueueTail)/;"	f	class:ot::Ncp::NcpBase	typeref:typename:bool
IsRoutePreferenceValid	core/thread/network_data_types.hpp	/^inline bool IsRoutePreferenceValid(int8_t aPref) { return Preference::IsValid(aPref); }$/;"	f	namespace:ot::NetworkData	typeref:typename:bool
IsRouteTlvIdSequenceMoreRecent	core/thread/router_table.cpp	/^bool RouterTable::IsRouteTlvIdSequenceMoreRecent(const Mle::RouteTlv &aRouteTlv) const$/;"	f	class:ot::RouterTable	typeref:typename:bool
IsRouter	core/thread/mle.hpp	/^    bool IsRouter(void) const { return (mRole == kRoleRouter); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsRouterEligible	core/thread/mle_router.cpp	/^bool MleRouter::IsRouterEligible(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
IsRouterFlagSet	core/net/nd6.hpp	/^    bool IsRouterFlagSet(void) const { return (mFlags & kRouterFlag) != 0; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:bool
IsRouterFlagSet	core/thread/mle_tlvs.hpp	/^    static bool IsRouterFlagSet(uint8_t aMask) { return (aMask & kRouterFlag) != 0; }$/;"	f	class:ot::Mle::ScanMaskTlv	typeref:typename:bool
IsRouterIdSet	core/thread/mle_tlvs.hpp	/^    bool IsRouterIdSet(uint8_t aRouterId) const { return mRouterIdMask.Contains(aRouterId); }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:bool
IsRouterIdValid	core/thread/mle_types.hpp	/^inline bool IsRouterIdValid(uint8_t aRouterId) { return aRouterId <= kMaxRouterId; }$/;"	f	namespace:ot::Mle	typeref:typename:bool
IsRouterOrLeader	core/thread/mle.cpp	/^bool Mle::IsRouterOrLeader(void) const { return (IsRouter() || IsLeader()); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsRouterRoleTransitionPending	core/thread/mle_router.hpp	/^    bool IsRouterRoleTransitionPending(void) const { return mRouterRoleTransition.IsPending(); }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
IsRoutingLocator	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsRoutingLocator(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsRoutingLocator	core/thread/mle.cpp	/^bool Mle::IsRoutingLocator(const Ip6::Address &aAddress) const$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsRunning	core/border_router/infra_if.hpp	/^    bool IsRunning(void) const { return mIsRunning; }$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:bool
IsRunning	core/border_router/routing_manager.hpp	/^        bool               IsRunning(void) const { return GetState() == kDhcp6PdStateRunning; }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:bool
IsRunning	core/border_router/routing_manager.hpp	/^    bool IsRunning(void) const { return mIsRunning; }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsRunning	core/common/timer.hpp	/^    bool IsRunning(void) const { return (mNext != this); }$/;"	f	class:ot::Timer	typeref:typename:bool
IsRunning	core/common/trickle_timer.hpp	/^    bool IsRunning(void) const { return TimerMilli::IsRunning(); }$/;"	f	class:ot::TrickleTimer	typeref:typename:bool
IsRunning	core/net/dnssd_server.hpp	/^    bool        IsRunning(void) const { return mSocket.IsBound(); }$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:bool
IsRunning	core/net/srp_advertising_proxy.hpp	/^    bool IsRunning(void) const { return mState == kStateRunning; }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:bool
IsRunning	core/net/srp_client.hpp	/^    bool IsRunning(void) const { return (mState != kStateStopped); }$/;"	f	class:ot::Srp::Client	typeref:typename:bool
IsRunning	core/thread/announce_sender.hpp	/^    bool IsRunning(void) const { return mTimer.IsRunning(); }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:bool
IsRunning	core/utils/channel_monitor.hpp	/^    bool IsRunning(void) const { return mTimer.IsRunning(); }$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:bool
IsRunning	posix/platform/infra_if.cpp	/^bool InfraNetif::IsRunning(void) const$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:bool
IsRxAckNumberValid	core/radio/trel_link.hpp	/^    bool IsRxAckNumberValid(uint32_t aAckNumber) const$/;"	f	class:ot::Trel::NeighborInfo	typeref:typename:bool
IsRxOnWhenIdle	core/thread/mle.hpp	/^    bool IsRxOnWhenIdle(void) const { return mDeviceMode.IsRxOnWhenIdle(); }$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
IsRxOnWhenIdle	core/thread/mle_types.hpp	/^    bool IsRxOnWhenIdle(void) const { return (mMode & kModeRxOnWhenIdle) != 0; }$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:bool
IsRxOnWhenIdle	core/thread/neighbor.hpp	/^    bool IsRxOnWhenIdle(void) const { return GetDeviceMode().IsRxOnWhenIdle(); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsSafeToHandleNow	lib/spinel/radio_spinel.hpp	/^    bool IsSafeToHandleNow(spinel_prop_key_t aKey) const$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsSameDomain	core/net/dns_types.cpp	/^bool Name::IsSameDomain(const char *aDomain1, const char *aDomain2)$/;"	f	class:ot::Dns::Name	typeref:typename:bool
IsSavedPositionValid	lib/spinel/spinel_decoder.hpp	/^    bool    IsSavedPositionValid(void) const { return (mSavedIndex < mLength); }$/;"	f	class:ot::Spinel::Decoder	typeref:typename:bool
IsSecurityControlValid	core/thread/mle.hpp	/^        bool IsSecurityControlValid(void) const { return (mSecurityControl == kKeyIdMode2Mic32);/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:bool
IsSecurityProcessed	core/mac/mac_frame.hpp	/^    bool IsSecurityProcessed(void) const { return mInfo.mTxInfo.mIsSecurityProcessed; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:bool
IsSedBufferingIncluded	core/thread/mle_tlvs.hpp	/^    bool IsSedBufferingIncluded(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv);/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:bool
IsSelfOriginating	core/net/mdns.hpp	/^        bool                IsSelfOriginating(void) const { return mIsSelfOriginating; }$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
IsSeparator	core/utils/parse_cmdline.cpp	/^static bool IsSeparator(char aChar) { return (aChar == ' ') || (aChar == '\\t') || (aChar == '\\/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:bool	file:
IsServer	core/net/dns_dso.hpp	/^        bool IsServer(void) const { return mIsServer; }$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:bool
IsServerSelectedByAutoStart	core/net/srp_client.hpp	/^    bool IsServerSelectedByAutoStart(void) const { return mAutoStart.HasSelectedServer(); }$/;"	f	class:ot::Srp::Client	typeref:typename:bool
IsServiceKeyRecordEnabled	core/net/srp_client.hpp	/^    bool IsServiceKeyRecordEnabled(void) const { return mServiceKeyRecordEnabled; }$/;"	f	class:ot::Srp::Client	typeref:typename:bool
IsSessionIdSet	core/meshcop/meshcop.hpp	/^    bool IsSessionIdSet(void) const { return mIsSessionIdSet; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:bool
IsSet	core/common/callback.hpp	/^    bool IsSet(void) const { return (mHandler != nullptr); }$/;"	f	class:ot::CallbackBase	typeref:typename:bool
IsShort	core/mac/mac_types.hpp	/^    bool IsShort(void) const { return (mType == kTypeShort); }$/;"	f	class:ot::Mac::Address	typeref:typename:bool
IsShortAddrInvalid	core/mac/mac_types.hpp	/^    bool IsShortAddrInvalid(void) const { return ((mType == kTypeShort) && (GetShort() == kShort/;"	f	class:ot::Mac::Address	typeref:typename:bool
IsShortVariant	core/net/dns_types.hpp	/^    bool IsShortVariant(void) const { return (GetOptionLength() == kShortLength); }$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:bool
IsSingleChannel	core/mac/channel_mask.hpp	/^    bool IsSingleChannel(void) const { return ((mMask != 0) && ((mMask & (mMask - 1)) == 0)); }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:bool
IsSingleton	core/thread/mle_router.cpp	/^bool MleRouter::IsSingleton(void) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
IsSingleton	core/thread/mle_tlvs.hpp	/^    bool IsSingleton(void) const { return IsValid() && (mRouterIdMask.GetNumberOfAllocatedIds() /;"	f	class:ot::Mle::RouteTlv	typeref:typename:bool
IsSlaac	core/thread/network_data_tlvs.hpp	/^    bool IsSlaac(void) const { return (BigEndian::HostSwap16(mFlags) & kSlaacFlag) != 0; }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:bool
IsSlaac	core/utils/slaac_address.cpp	/^bool Slaac::IsSlaac(const NetworkData::OnMeshPrefixConfig &aConfig) const$/;"	f	class:ot::Utils::Slaac	typeref:typename:bool
IsSolicitedFlagSet	core/net/nd6.hpp	/^    bool IsSolicitedFlagSet(void) const { return (mFlags & kSolicitedFlag) != 0; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:bool
IsSorted	core/common/binary_search.hpp	/^    template <typename Entry, uint16_t kLength> static constexpr bool IsSorted(const Entry (&aTa/;"	f	class:ot::BinarySearch	typeref:typename:bool
IsSorted	core/common/binary_search.hpp	/^    template <typename Entry> static constexpr bool IsSorted(const Entry *aTable, uint16_t aLeng/;"	f	class:ot::BinarySearch	typeref:typename:bool
IsSourcePresent	core/mac/mac_types.hpp	/^    bool IsSourcePresent(void) const { return mIsSourcePresent; }$/;"	f	class:ot::Mac::PanIds	typeref:typename:bool
IsSpinelResetCommand	lib/spinel/spinel_interface.hpp	/^    bool IsSpinelResetCommand(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Spinel::SpinelInterface	typeref:typename:bool
IsSrcAddrPresent	core/mac/mac_frame.hpp	/^    bool IsSrcAddrPresent(void) const { return IsSrcAddrPresent(GetFrameControlField()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsSrcAddrPresent	core/mac/mac_frame.hpp	/^    static bool IsSrcAddrPresent(uint16_t aFcf) { return (aFcf & kFcfSrcAddrMask) != kFcfSrcAddr/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsSrcPanIdPresent	core/mac/mac_frame.cpp	/^bool Frame::IsSrcPanIdPresent(uint16_t aFcf)$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsSrcPanIdPresent	core/mac/mac_frame.hpp	/^    bool IsSrcPanIdPresent(void) const { return IsSrcPanIdPresent(GetFrameControlField()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsStable	core/thread/network_data_tlvs.hpp	/^    bool IsStable(void) const { return (mType & kStableMask); }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:bool
IsStateChildIdRequest	core/thread/neighbor.hpp	/^    bool IsStateChildIdRequest(void) const { return (mState == kStateChildIdRequest); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateCloseNotify	core/meshcop/secure_transport.hpp	/^    bool IsStateCloseNotify(void) const { return mState == kStateCloseNotify; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateClosed	core/meshcop/secure_transport.hpp	/^    bool IsStateClosed(void) const { return mState == kStateClosed; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateConnected	core/meshcop/secure_transport.hpp	/^    bool IsStateConnected(void) const { return mState == kStateConnected; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateConnecting	core/meshcop/secure_transport.hpp	/^    bool IsStateConnecting(void) const { return mState == kStateConnecting; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateConnectingOrConnected	core/meshcop/secure_transport.hpp	/^    bool IsStateConnectingOrConnected(void) const { return mState == kStateConnecting || mState /;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateInitializing	core/meshcop/secure_transport.hpp	/^    bool IsStateInitializing(void) const { return mState == kStateInitializing; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateInvalid	core/thread/neighbor.hpp	/^    bool IsStateInvalid(void) const { return (mState == kStateInvalid); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateLinkRequest	core/thread/neighbor.hpp	/^    bool IsStateLinkRequest(void) const { return (mState == kStateLinkRequest); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateOpen	core/meshcop/secure_transport.hpp	/^    bool IsStateOpen(void) const { return mState == kStateOpen; }$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:bool
IsStateParentResponse	core/thread/neighbor.hpp	/^    bool IsStateParentResponse(void) const { return (mState == kStateParentResponse); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateRestored	core/thread/neighbor.hpp	/^    bool IsStateRestored(void) const { return (mState == kStateRestored); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateRestoring	core/thread/neighbor.hpp	/^    bool IsStateRestoring(void) const { return (mState == kStateRestored) || (mState == kStateCh/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateValid	core/thread/neighbor.hpp	/^    bool IsStateValid(void) const { return (mState == kStateValid); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateValidOrAttaching	core/thread/neighbor.cpp	/^bool Neighbor::IsStateValidOrAttaching(void) const$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsStateValidOrRestoring	core/thread/neighbor.hpp	/^    bool IsStateValidOrRestoring(void) const { return (mState == kStateValid) || IsStateRestorin/;"	f	class:ot::Neighbor	typeref:typename:bool
IsSteeringDataSet	core/meshcop/meshcop.hpp	/^    bool IsSteeringDataSet(void) const { return mIsSteeringDataSet; }$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:bool
IsStubRouterFlagSet	core/net/nd6.hpp	/^    bool IsStubRouterFlagSet(void) const { return (mFlags[0] & kStubRouterFlag) != 0; }$/;"	f	class:ot::Ip6::Nd::RaFlagsExtOption	typeref:typename:bool
IsSubDomainOf	core/net/dns_types.cpp	/^bool Name::IsSubDomainOf(const char *aName, const char *aDomain)$/;"	f	class:ot::Dns::Name	typeref:typename:bool
IsSubTypeMle	core/common/message.cpp	/^bool Message::IsSubTypeMle(void) const$/;"	f	class:ot::Message	typeref:typename:bool
IsSubnetRouterAnycast	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsSubnetRouterAnycast(void) const { return (mFields.m32[0] == 0) && (m/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsSubsetOf	core/meshcop/dataset.cpp	/^bool Dataset::Info::IsSubsetOf(const Info &aOther) const$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:bool
IsSystemDryRun	posix/platform/settings.cpp	/^bool IsSystemDryRun(void) { return false; }$/;"	f	typeref:typename:bool
IsSystemDryRun	posix/platform/system.cpp	/^bool IsSystemDryRun(void) { return gDryRun; }$/;"	f	typeref:typename:bool
IsTcatEnabled	core/radio/ble_secure.hpp	/^    bool IsTcatEnabled(void) const { return mTcatAgent.IsEnabled(); }$/;"	f	class:ot::Ble::BleSecure	typeref:typename:bool
IsTcp	core/net/ip6.hpp	/^    bool IsTcp(void) const { return GetIpProto() == kProtoTcp; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:bool
IsThreadEnterprise	core/thread/network_data_tlvs.hpp	/^    bool IsThreadEnterprise(void) const { return (mFlagsServiceId & kThreadEnterpriseFlag) != 0;/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:bool
IsThreadVersion1p1	core/thread/neighbor.hpp	/^    bool IsThreadVersion1p1(void) const { return mState != kStateInvalid && mVersion == kThreadV/;"	f	class:ot::Neighbor	typeref:typename:bool
IsThreadVersion1p2OrHigher	core/thread/neighbor.hpp	/^    bool IsThreadVersion1p2OrHigher(void) const { return mState != kStateInvalid && mVersion >= /;"	f	class:ot::Neighbor	typeref:typename:bool
IsThreadVersionCslCapable	core/thread/neighbor.hpp	/^    bool IsThreadVersionCslCapable(void) const { return IsThreadVersion1p2OrHigher() && !IsRxOnW/;"	f	class:ot::Neighbor	typeref:typename:bool
IsTimeSync	core/common/message.cpp	/^bool Message::IsTimeSync(void) const$/;"	f	class:ot::Message	typeref:typename:bool
IsTimeSyncEnabled	core/thread/neighbor.hpp	/^    bool IsTimeSyncEnabled(void) const { return mTimeSyncEnabled; }$/;"	f	class:ot::Neighbor	typeref:typename:bool
IsTimeoutZero	core/thread/address_resolver.hpp	/^        bool     IsTimeoutZero(void) const { return mInfo.mOther.mTimeout == 0; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:bool
IsTimerActive	core/net/tcp6.cpp	/^bool Tcp::Endpoint::IsTimerActive(uint8_t aTimerIndex)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:bool
IsTlvValid	core/meshcop/dataset.cpp	/^bool Dataset::IsTlvValid(const Tlv &aTlv)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:bool
IsTmfMessage	core/thread/tmf.cpp	/^bool Agent::IsTmfMessage(const Ip6::Address &aSourceAddress, const Ip6::Address &aDestAddress, u/;"	f	class:ot::Tmf::Agent	typeref:typename:bool
IsTmfOriginFilterEnabled	core/net/ip6.hpp	/^    bool IsTmfOriginFilterEnabled(void) { return mTmfOriginFilterEnabled; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:bool
IsTokenEqual	core/coap/coap_message.cpp	/^bool Message::IsTokenEqual(const Message &aMessage) const$/;"	f	class:ot::Coap::Message	typeref:typename:bool
IsTransmitDone	lib/spinel/radio_spinel.hpp	/^    bool IsTransmitDone(void) const { return mState == kStateTransmitDone; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsTransmitting	lib/spinel/radio_spinel.hpp	/^    bool IsTransmitting(void) const { return mState == kStateTransmitting; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:bool
IsTransmittingOrScanning	core/mac/sub_mac.hpp	/^    bool IsTransmittingOrScanning(void) const { return (mState == kStateTransmit) || (mState == /;"	f	class:ot::Mac::SubMac	typeref:typename:bool
IsTruncated	core/common/string.hpp	/^    bool IsTruncated(void) const { return mLength >= mSize; }$/;"	f	class:ot::StringWriter	typeref:typename:bool
IsTruncated	core/net/mdns.hpp	/^        bool                IsTruncated(void) const { return mTruncated; }$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
IsTruncationFlagSet	core/net/dns_types.hpp	/^    bool IsTruncationFlagSet(void) const { return (mFlags[0] & kTcFlagMask) == kTcFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:bool
IsUdp	core/net/ip6.hpp	/^    bool IsUdp(void) const { return GetIpProto() == kProtoUdp; }$/;"	f	class:ot::Ip6::Headers	typeref:typename:bool
IsUnallocated	core/thread/network_data_leader.hpp	/^        bool      IsUnallocated(uint8_t aId) const { return mRemoveTimes[aId - kMinId].GetValue(/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:bool
IsUnicastAddressExternal	core/net/netif.cpp	/^bool Netif::IsUnicastAddressExternal(const UnicastAddress &aAddress) const$/;"	f	class:ot::Ip6::Netif	typeref:typename:bool
IsUniqueLocal	core/net/ip6_address.cpp	/^bool Prefix::IsUniqueLocal(void) const { return (mLength >= 7) && ((mPrefix.mFields.m8[0] & 0xfe/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsUnsecurePort	core/net/ip6_filter.hpp	/^    bool IsUnsecurePort(uint16_t aPort) { return mUnsecurePorts.Contains(aPort); }$/;"	f	class:ot::Ip6::Filter	typeref:typename:bool
IsUnspecified	core/net/ip6_address.cpp	/^bool Address::IsUnspecified(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
IsUnspecified	core/net/ip6_address.cpp	/^bool InterfaceIdentifier::IsUnspecified(void) const { return (mFields.m32[0] == 0) && (mFields.m/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:bool
IsUp	core/thread/thread_netif.hpp	/^    bool IsUp(void) const { return mIsUp; }$/;"	f	class:ot::ThreadNetif	typeref:typename:bool
IsUpdateOngoing	core/meshcop/dataset_updater.hpp	/^    bool IsUpdateOngoing(void) const { return mDataset != nullptr; }$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:bool
IsUppercase	core/common/string.cpp	/^bool IsUppercase(char aChar) { return ('A' <= aChar && aChar <= 'Z'); }$/;"	f	namespace:ot	typeref:typename:bool
IsUpstreamQueryEnabled	core/net/dnssd_server.hpp	/^    bool IsUpstreamQueryEnabled(void) const { return mEnableUpstreamQuery; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:bool
IsUsed	core/net/dns_dso.hpp	/^            bool IsUsed(void) const { return (mInterval != kInfinite); }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:bool
IsValid	core/coap/coap.cpp	/^bool TxParameters::IsValid(void) const$/;"	f	class:ot::Coap::TxParameters	typeref:typename:bool
IsValid	core/common/preference.cpp	/^bool Preference::IsValid(int8_t aPrf) { return (aPrf == kHigh) || (aPrf == kMedium) || (aPrf == /;"	f	class:ot::Preference	typeref:typename:bool
IsValid	core/mac/mac_frame.hpp	/^    bool IsValid(void) const { return (mProtocolId == kProtocolId); }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:bool
IsValid	core/mac/mac_frame.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::Mac::Beacon	typeref:typename:bool
IsValid	core/meshcop/meshcop.hpp	/^    bool IsValid(void) const { return (0 < mLength) && (mLength <= kMaxLength); }$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:bool
IsValid	core/meshcop/meshcop.hpp	/^    bool IsValid(void) const { return IsPskdValid(m8); }$/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.cpp	/^bool ChannelMaskTlv::IsValid(void) const$/;"	f	class:ot::MeshCoP::ChannelMaskTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.cpp	/^bool NetworkNameTlv::IsValid(void) const { return IsValidUtf8String(mNetworkName, GetLength()); /;"	f	class:ot::MeshCoP::NetworkNameTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.cpp	/^bool SecurityPolicyTlv::IsValid(void) const$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() > 0; }$/;"	f	class:ot::MeshCoP::SteeringDataTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::MeshCoP::BorderAgentLocatorTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::MeshCoP::CommissionerSessionIdTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(mOui) && GetLength() <= sizeof(mOui)/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:bool
IsValid	core/meshcop/meshcop_tlvs.hpp	/^    bool IsValid(void) const { return true; }$/;"	f	class:ot::MeshCoP::EnergyListTlv	typeref:typename:bool
IsValid	core/meshcop/tcat_agent.cpp	/^bool TcatAgent::VendorInfo::IsValid(void) const$/;"	f	class:ot::MeshCoP::TcatAgent::VendorInfo	typeref:typename:bool
IsValid	core/net/dhcp6_server.hpp	/^        bool IsValid(void) const { return mAloc.mValid; }$/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:bool
IsValid	core/net/dns_dso.hpp	/^        bool IsValid(void) const { return GetSize() >= sizeof(*this); }$/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:bool
IsValid	core/net/dns_dso.hpp	/^        bool IsValid(void) const { return GetSize() >= sizeof(*this); }$/;"	f	class:ot::Dns::Dso::RetryDelayTlv	typeref:typename:bool
IsValid	core/net/dns_types.cpp	/^bool AaaaRecord::IsValid(void) const$/;"	f	class:ot::Dns::AaaaRecord	typeref:typename:bool
IsValid	core/net/dns_types.cpp	/^bool Ecdsa256KeyRecord::IsValid(void) const$/;"	f	class:ot::Dns::Ecdsa256KeyRecord	typeref:typename:bool
IsValid	core/net/dns_types.cpp	/^bool KeyRecord::IsValid(void) const { return GetType() == Dns::ResourceRecord::kTypeKey; }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:bool
IsValid	core/net/dns_types.cpp	/^bool LeaseOption::IsValid(void) const$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:bool
IsValid	core/net/dns_types.cpp	/^bool SigRecord::IsValid(void) const$/;"	f	class:ot::Dns::SigRecord	typeref:typename:bool
IsValid	core/net/dnssd_server.hpp	/^        bool IsValid(void) const { return mValid; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server::UpstreamQueryTransaction	typeref:typename:bool
IsValid	core/net/ip4_types.hpp	/^    bool IsValid(void) const { return IsVersion4(); }$/;"	f	class:ot::Ip4::Header	typeref:typename:bool
IsValid	core/net/ip6_address.hpp	/^    bool IsValid(void) const { return (mLength <= kMaxLength); }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsValid	core/net/ip6_headers.cpp	/^bool Header::IsValid(void) const$/;"	f	class:ot::Ip6::Header	typeref:typename:bool
IsValid	core/net/nd6.cpp	/^bool PrefixInfoOption::IsValid(void) const$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:bool
IsValid	core/net/nd6.cpp	/^bool RouteInfoOption::IsValid(void) const$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^        bool IsValid(void) const { return GetType() == Icmp::Header::kTypeRouterAdvert; }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^        bool IsValid(void) const$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^    bool IsValid(void) const { return (mType == Icmp::Header::kTypeNeighborAdvert) && (mCode == /;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^    bool IsValid(void) const { return (mType == Icmp::Header::kTypeNeighborSolicit) && (mCode ==/;"	f	class:ot::Ip6::Nd::NeighborSolicitMessage	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^    bool IsValid(void) const { return GetSize() >= sizeof(*this); }$/;"	f	class:ot::Ip6::Nd::RaFlagsExtOption	typeref:typename:bool
IsValid	core/net/nd6.hpp	/^    bool IsValid(void) const { return mLength > 0; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:bool
IsValid	core/net/srp_server.cpp	/^bool Server::LeaseConfig::IsValid(void) const$/;"	f	class:ot::Srp::Server::LeaseConfig	typeref:typename:bool
IsValid	core/net/srp_server.hpp	/^        bool     IsValid(void) const { return mMinTtl <= mMaxTtl; }$/;"	f	class:ot::Srp::Server::TtlConfig	typeref:typename:bool
IsValid	core/thread/link_metrics_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= kMinLength; }$/;"	f	class:ot::LinkMetrics::EnhAckConfigSubTlv	typeref:typename:bool
IsValid	core/thread/link_metrics_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= kMinLength; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:bool
IsValid	core/thread/link_metrics_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= kMinLength; }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:bool
IsValid	core/thread/link_metrics_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(uint8_t); }$/;"	f	class:ot::LinkMetrics::QueryOptionsSubTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.cpp	/^bool ChannelTlvValue::IsValid(void) const$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:bool
IsValid	core/thread/mle_tlvs.cpp	/^bool RouteTlv::IsValid(void) const$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::Mle::LeaderDataTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(mRouterIdSequence) + sizeof(mRouterI/;"	f	class:ot::Mle::RouteTlv	typeref:typename:bool
IsValid	core/thread/mle_tlvs.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:bool
IsValid	core/thread/mle_types.hpp	/^    bool IsValid(void) const { return !IsFullThreadDevice() || IsRxOnWhenIdle(); }$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:bool
IsValid	core/thread/network_data_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= (sizeof(*this) - sizeof(NetworkDataTlv)); }$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:bool
IsValid	core/thread/network_data_tlvs.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:bool
IsValid	core/thread/network_data_tlvs.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:bool
IsValid	core/thread/network_data_types.cpp	/^bool ExternalRouteConfig::IsValid(Instance &aInstance) const$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:bool
IsValid	core/thread/network_data_types.cpp	/^bool OnMeshPrefixConfig::IsValid(Instance &aInstance) const$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:bool
IsValid	core/thread/network_diagnostic_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:bool
IsValid	core/thread/network_diagnostic_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }$/;"	f	class:ot::NetworkDiagnostic::MleCountersTlv	typeref:typename:bool
IsValid	core/thread/network_diagnostic_tlvs.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::NetworkDiagnostic::ChannelPagesTlv	typeref:typename:bool
IsValid	core/thread/thread_tlvs.hpp	/^    bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(ThreadTlv); }$/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:bool
IsValid	core/thread/thread_tlvs.hpp	/^    bool IsValid(void) const { return true; }$/;"	f	class:ot::ThreadNetworkDataTlv	typeref:typename:bool
IsValid	core/thread/thread_tlvs.hpp	/^    bool IsValid(void) const$/;"	f	class:ot::Ip6AddressesTlv	typeref:typename:bool
IsValid	core/utils/flash.hpp	/^        bool IsValid(void) const { return ((mFlags & (kFlagAddComplete | kFlagDelete)) == kFlagD/;"	f	class:ot::Flash::RecordHeader	typeref:typename:bool
IsValid	lib/spinel/spi_frame.hpp	/^    bool IsValid(void) const { return ((mBuffer[kIndexFlagByte] & kFlagPatternMask) == kFlagPatt/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:bool
IsValid	posix/platform/configuration.cpp	/^bool Configuration::IsValid(void) const$/;"	f	class:ot::Posix::Configuration	typeref:typename:bool
IsValid	posix/platform/multicast_routing.hpp	/^        bool IsValid() const { return mIif != kMifIndexNone; }$/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache	typeref:typename:bool
IsValidBrUlaPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsValidBrUlaPrefix(const Ip6::Prefix &aBrUlaPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsValidDeleteAllRecord	core/net/srp_server.cpp	/^bool Server::IsValidDeleteAllRecord(const Dns::ResourceRecord &aRecord)$/;"	f	class:ot::Srp::Server	typeref:typename:bool
IsValidNat64	core/net/ip6_address.hpp	/^    bool IsValidNat64(void) const { return IsValidNat64PrefixLength(mLength); }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsValidNat64PrefixLength	core/net/ip6_address.cpp	/^bool Prefix::IsValidNat64PrefixLength(uint8_t aLength)$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
IsValidOmrPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsValidOmrPrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsValidOmrPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsValidOmrPrefix(const NetworkData::OnMeshPrefixConfig &aOnMeshPrefixConfig/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsValidOnLinkPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsValidOnLinkPrefix(const Ip6::Prefix &aOnLinkPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsValidOnLinkPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::IsValidOnLinkPrefix(const PrefixInfoOption &aPio)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
IsValidPdPrefix	core/border_router/routing_manager.cpp	/^bool RoutingManager::PdPrefixManager::PrefixEntry::IsValidPdPrefix(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager::PrefixEntry	typeref:typename:bool
IsValidUtf8String	core/common/string.cpp	/^bool IsValidUtf8String(const char *aString) { return IsValidUtf8String(aString, strlen(aString))/;"	f	namespace:ot	typeref:typename:bool
IsValidUtf8String	core/common/string.cpp	/^bool IsValidUtf8String(const char *aString, size_t aLength)$/;"	f	namespace:ot	typeref:typename:bool
IsVersion2015	core/mac/mac_frame.hpp	/^    bool IsVersion2015(void) const { return IsVersion2015(GetFrameControlField()); }$/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsVersion2015	core/mac/mac_frame.hpp	/^    static bool IsVersion2015(uint16_t aFcf) { return (aFcf & kFcfFrameVersionMask) == kVersion2/;"	f	class:ot::Mac::Frame	typeref:typename:bool
IsVersion4	core/net/ip4_types.hpp	/^    bool IsVersion4(void) const { return (mVersIhl & kVersionMask) == kVersion4; }$/;"	f	class:ot::Ip4::Header	typeref:typename:bool
IsVersion6	core/net/ip6_headers.hpp	/^    bool IsVersion6(void) const { return (mVerTcFlow.m8[0] & kVersionMask) == kVersion6; }$/;"	f	class:ot::Ip6::Header	typeref:typename:bool
IsVersionValid	core/radio/trel_packet.hpp	/^    bool IsVersionValid(void) const { return (mControl & kVersionMask) == kVersion; }$/;"	f	class:ot::Trel::Header	typeref:typename:bool
IsWaitingForMessageUpdate	core/thread/indirect_sender.hpp	/^        bool IsWaitingForMessageUpdate(void) const { return mWaitingForMessageUpdate; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:bool
ItemPtrIterator	core/common/iterator_utils.hpp	/^    ItemPtrIterator(void)$/;"	f	class:ot::ItemPtrIterator
ItemPtrIterator	core/common/iterator_utils.hpp	/^    explicit ItemPtrIterator(ItemType *item)$/;"	f	class:ot::ItemPtrIterator
ItemStateToString	core/net/srp_client.cpp	/^const char *Client::ItemStateToString(ItemState aState)$/;"	f	class:ot::Srp::Client	typeref:typename:const char *
Iterate	core/backbone_router/multicast_listeners_table.hpp	/^    IteratorBuilder Iterate(void) { return IteratorBuilder(GetInstance()); }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:IteratorBuilder
Iterate	core/backbone_router/ndproxy_table.hpp	/^    IteratorBuilder Iterate(Filter aFilter) { return IteratorBuilder(GetInstance(), aFilter); }$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:IteratorBuilder
Iterate	core/thread/child_table.hpp	/^    IteratorBuilder Iterate(Child::StateFilter aFilter) { return IteratorBuilder(GetInstance(), /;"	f	class:ot::ChildTable	typeref:typename:IteratorBuilder
Iterate	core/thread/network_data.cpp	/^Error NetworkData::Iterate(Iterator &aIterator, uint16_t aRloc16, Config &aConfig) const$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:Error
Iterate	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *TlvIterator::Iterate(NetworkDataTlv::Type aType)$/;"	f	class:ot::NetworkData::TlvIterator	typeref:typename:const NetworkDataTlv *
Iterate	core/thread/network_data_tlvs.cpp	/^const NetworkDataTlv *TlvIterator::Iterate(NetworkDataTlv::Type aType, bool aStable)$/;"	f	class:ot::NetworkData::TlvIterator	typeref:typename:const NetworkDataTlv *
Iterate	core/thread/network_data_tlvs.hpp	/^    template <typename TlvType> const TlvType *Iterate(bool aStable)$/;"	f	class:ot::NetworkData::TlvIterator	typeref:typename:const TlvType *
Iterate	core/thread/network_data_tlvs.hpp	/^    template <typename TlvType> const TlvType *Iterate(void) { return As<TlvType>(Iterate(TlvTyp/;"	f	class:ot::NetworkData::TlvIterator	typeref:typename:const TlvType *
Iterate	core/utils/history_tracker.cpp	/^Error HistoryTracker::List::Iterate(uint16_t        aMaxSize,$/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:Error
Iterate	core/utils/history_tracker.hpp	/^        const Entry *Iterate(Iterator &, uint32_t &) const { return nullptr; }$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:const Entry *
Iterate	core/utils/history_tracker.hpp	/^        const Entry *Iterate(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:const Entry *
IterateChildInfo	core/common/settings.hpp	/^    ChildInfoIteratorBuilder IterateChildInfo(void) { return ChildInfoIteratorBuilder(GetInstanc/;"	f	class:ot::Settings	typeref:typename:ChildInfoIteratorBuilder
IterateExternalMulticastAddresses	core/net/netif.hpp	/^    ExternalMulticastAddress::Iterator::Builder IterateExternalMulticastAddresses($/;"	f	class:ot::Ip6::Netif	typeref:typename:ExternalMulticastAddress::Iterator::Builder
IterateExternalRouteHistory	core/utils/history_tracker.hpp	/^    const ExternalRouteInfo *IterateExternalRouteHistory(Iterator &aIterator, uint32_t &aEntryAg/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const ExternalRouteInfo *
IterateIp6Addresses	core/thread/child.hpp	/^    AddressIteratorBuilder IterateIp6Addresses(Ip6::Address::TypeFilter aFilter = Ip6::Address::/;"	f	class:ot::Child	typeref:typename:AddressIteratorBuilder
IterateMulticastAddressHistory	core/utils/history_tracker.hpp	/^    const MulticastAddressInfo *IterateMulticastAddressHistory(Iterator &aIterator, uint32_t &aE/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const MulticastAddressInfo *
IterateNeighborHistory	core/utils/history_tracker.hpp	/^    const NeighborInfo *IterateNeighborHistory(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const NeighborInfo *
IterateNetInfoHistory	core/utils/history_tracker.hpp	/^    const NetworkInfo *IterateNetInfoHistory(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const NetworkInfo *
IterateOnAllRecordsInResponse	core/net/mdns.cpp	/^void Core::RxMessage::IterateOnAllRecordsInResponse(RecordProcessor aRecordProcessor)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
IterateOnMeshPrefixHistory	core/utils/history_tracker.hpp	/^    const OnMeshPrefixInfo *IterateOnMeshPrefixHistory(Iterator &aIterator, uint32_t &aEntryAge)/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const OnMeshPrefixInfo *
IterateRouterHistory	core/utils/history_tracker.hpp	/^    const RouterInfo *IterateRouterHistory(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const RouterInfo *
IterateRxHistory	core/utils/history_tracker.hpp	/^    const MessageInfo *IterateRxHistory(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const MessageInfo *
IterateToNextServer	core/thread/network_data_service.cpp	/^Error Manager::IterateToNextServer(Iterator &aIterator) const$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
IterateTxHistory	core/utils/history_tracker.hpp	/^    const MessageInfo *IterateTxHistory(Iterator &aIterator, uint32_t &aEntryAge) const$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const MessageInfo *
IterateUnicastAddressHistory	core/utils/history_tracker.hpp	/^    const UnicastAddressInfo *IterateUnicastAddressHistory(Iterator &aIterator, uint32_t &aEntry/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:const UnicastAddressInfo *
Iterator	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::Iterator::Iterator(Instance &aInstance, Filter aFilter)$/;"	f	class:ot::BackboneRouter::NdProxyTable::Iterator
Iterator	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::Iterator::Iterator(Instance &aInstance, NdProxyTable::Iterator::IteratorType)$/;"	f	class:ot::BackboneRouter::NdProxyTable::Iterator
Iterator	core/common/linked_list.hpp	/^        explicit Iterator(Type *aItem)$/;"	f	class:ot::LinkedList::Iterator
Iterator	core/common/message.hpp	/^        Iterator(void)$/;"	f	class:ot::Message::Iterator
Iterator	core/common/message.hpp	/^        explicit Iterator(Message *aMessage)$/;"	f	class:ot::Message::Iterator
Iterator	core/net/nd6.cpp	/^Option::Iterator::Iterator(const void *aStart, const void *aEnd)$/;"	f	class:ot::Ip6::Nd::Option::Iterator
Iterator	core/net/nd6.cpp	/^Option::Iterator::Iterator(void)$/;"	f	class:ot::Ip6::Nd::Option::Iterator
Iterator	core/net/netif.cpp	/^Netif::ExternalMulticastAddress::Iterator::Iterator(const Netif &aNetif, Address::TypeFilter aFi/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator
Iterator	core/net/netif.hpp	/^            Iterator(const Netif &aNetif, IteratorType)$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator
Iterator	core/thread/child_table.cpp	/^ChildTable::Iterator::Iterator(Instance &aInstance, Child::StateFilter aFilter)$/;"	f	class:ot::ChildTable::Iterator
Iterator	core/thread/child_table.hpp	/^        explicit Iterator(Instance &aInstance)$/;"	f	class:ot::ChildTable::Iterator
Iterator	core/thread/network_data_service.hpp	/^        Iterator(void)$/;"	f	class:ot::NetworkData::Service::Manager::Iterator
IteratorBuilder	core/backbone_router/multicast_listeners_table.hpp	/^        explicit IteratorBuilder(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::IteratorBuilder
IteratorBuilder	core/backbone_router/ndproxy_table.hpp	/^        IteratorBuilder(Instance &aInstance, Filter aFilter)$/;"	f	class:ot::BackboneRouter::NdProxyTable::IteratorBuilder
IteratorBuilder	core/thread/child_table.hpp	/^        IteratorBuilder(Instance &aInstance, Child::StateFilter aFilter)$/;"	f	class:ot::ChildTable::IteratorBuilder
JamDetector	core/utils/jam_detector.cpp	/^JamDetector::JamDetector(Instance &aInstance)$/;"	f	class:ot::Utils::JamDetector
JoinNetifMulticastGroup	core/net/udp6.cpp	/^Error Udp::Socket::JoinNetifMulticastGroup(NetifIdentifier aNetifIdentifier, const Address &aAdd/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
JoinOrLeaveIp4MulticastGroup	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::JoinOrLeaveIp4MulticastGroup(bool aJoin, uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
JoinOrLeaveIp6MulticastGroup	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::JoinOrLeaveIp6MulticastGroup(bool aJoin, uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
Joiner	cli/cli_joiner.hpp	/^    Joiner(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Joiner
Joiner	core/meshcop/joiner.cpp	/^Joiner::Joiner(Instance &aInstance)$/;"	f	class:ot::MeshCoP::Joiner
JoinerRouter	core/meshcop/joiner_router.cpp	/^JoinerRouter::JoinerRouter(Instance &aInstance)$/;"	f	class:ot::MeshCoP::JoinerRouter
KeyForDatasetType	core/common/settings.cpp	/^Settings::Key Settings::KeyForDatasetType(MeshCoP::Dataset::Type aType)$/;"	f	class:ot::Settings	typeref:typename:Settings::Key
KeyManager	core/thread/key_manager.cpp	/^KeyManager::KeyManager(Instance &aInstance)$/;"	f	class:ot::KeyManager
KeyMaterial	core/mac/mac_types.hpp	/^    KeyMaterial(void)$/;"	f	class:ot::Mac::KeyMaterial
KeyPair	core/crypto/ecdsa.hpp	/^        KeyPair(void) { mDerLength = 0; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair
KeyPairAsRef	core/crypto/ecdsa.hpp	/^        explicit KeyPairAsRef(otCryptoKeyRef aKeyRef = 0) { mKeyRef = aKeyRef; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef
KeyToString	core/common/settings.cpp	/^const char *SettingsBase::KeyToString(Key aKey)$/;"	f	class:ot::SettingsBase	typeref:typename:const char *
LabelIterator	core/net/dns_types.hpp	/^        LabelIterator(const Message &aMessage, uint16_t aLabelOffset)$/;"	f	struct:ot::Dns::Name::LabelIterator
Leader	core/backbone_router/bbr_leader.cpp	/^Leader::Leader(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::Leader
Leader	core/meshcop/meshcop_leader.cpp	/^Leader::Leader(Instance &aInstance)$/;"	f	class:ot::MeshCoP::Leader
Leader	core/thread/network_data_leader.cpp	/^Leader::Leader(Instance &aInstance)$/;"	f	class:ot::NetworkData::Leader
LeaseConfig	core/net/srp_server.cpp	/^Server::LeaseConfig::LeaseConfig(void)$/;"	f	class:ot::Srp::Server::LeaseConfig
LeaveNetifMulticastGroup	core/net/udp6.cpp	/^Error Udp::Socket::LeaveNetifMulticastGroup(NetifIdentifier aNetifIdentifier, const Address &aAd/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
LessThanHalfTtlRemains	core/net/mdns.cpp	/^bool Core::CacheRecordInfo::LessThanHalfTtlRemains(TimeMilli aNow) const$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:bool
LimitInterval	core/net/dns_dso.hpp	/^            uint32_t LimitInterval(uint32_t aInterval) const$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:uint32_t
Link	core/radio/trel_link.cpp	/^Link::Link(Instance &aInstance)$/;"	f	class:ot::Trel::Link
LinkFlagsToFlagByte	ncp/ncp_base_mtd.cpp	/^uint8_t NcpBase::LinkFlagsToFlagByte(bool aRxOnWhenIdle, bool aDeviceType, bool aNetworkData)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:uint8_t
LinkMetrics	cli/cli_link_metrics.cpp	/^LinkMetrics::LinkMetrics(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::LinkMetrics
LinkMetricsManager	core/utils/link_metrics_manager.cpp	/^LinkMetricsManager::LinkMetricsManager(Instance &aInstance)$/;"	f	class:ot::Utils::LinkMetricsManager
LinkMetricsStatusToStr	cli/cli_link_metrics.cpp	/^const char *LinkMetrics::LinkMetricsStatusToStr(otLinkMetricsStatus aStatus)$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:const char *
LinkModeToString	cli/cli_utils.cpp	/^const char *Utils::LinkModeToString(const otLinkModeConfig &aLinkMode, char (&aStringBuffer)[kLi/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
LinkQualityForLinkMargin	core/thread/link_quality.cpp	/^LinkQuality LinkQualityForLinkMargin(uint8_t aLinkMargin)$/;"	f	namespace:ot	typeref:typename:LinkQuality
LinkRaw	core/mac/link_raw.cpp	/^LinkRaw::LinkRaw(Instance &aInstance)$/;"	f	class:ot::Mac::LinkRaw
LinkRawEnergyScanDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawEnergyScanDone(otInstance *aInstance, int8_t aEnergyScanMaxRssi)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkRawEnergyScanDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawEnergyScanDone(uint8_t aIid, int8_t aEnergyScanMaxRssi)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkRawReceiveDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawReceiveDone(otInstance *aInstance, otRadioFrame *aFrame, otError aError)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkRawReceiveDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawReceiveDone(uint8_t aIid, otRadioFrame *aFrame, otError aError)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkRawTransmitDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawTransmitDone(otInstance *aInstance, otRadioFrame *aFrame, otRadioFrame *aAc/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkRawTransmitDone	ncp/ncp_base_radio.cpp	/^void NcpBase::LinkRawTransmitDone(uint8_t aIid, otRadioFrame *aFrame, otRadioFrame *aAckFrame, o/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LinkedList	core/common/linked_list.hpp	/^    LinkedList(void)$/;"	f	class:ot::LinkedList
Links	core/mac/mac_links.cpp	/^Links::Links(Instance &aInstance)$/;"	f	class:ot::Mac::Links
List	core/utils/history_tracker.cpp	/^HistoryTracker::List::List(void)$/;"	f	class:ot::Utils::HistoryTracker::List
ListToString	core/thread/address_resolver.cpp	/^const char *AddressResolver::ListToString(const CacheEntryList *aList) const$/;"	f	class:ot::AddressResolver	typeref:typename:const char *
Listen	core/net/tcp6.cpp	/^Error Tcp::Listener::Listen(const SockAddr &aSockName)$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Error
Listener	core/backbone_router/multicast_listeners_table.hpp	/^        Listener(void) { Clear(); }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener
LiteralKey	core/crypto/storage.cpp	/^LiteralKey::LiteralKey(const Key &aKey)$/;"	f	class:ot::Crypto::LiteralKey
LoadDnsServerListFromConf	posix/platform/resolver.cpp	/^void Resolver::LoadDnsServerListFromConf(void)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
LoadOrGenerateRandomBrUlaPrefix	core/border_router/routing_manager.cpp	/^Error RoutingManager::LoadOrGenerateRandomBrUlaPrefix(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
Local	core/backbone_router/bbr_local.cpp	/^Local::Local(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::Local
Local	core/thread/network_data_local.hpp	/^    explicit Local(Instance &aInstance)$/;"	f	class:ot::NetworkData::Local
LocalSave	core/meshcop/dataset_manager.cpp	/^void DatasetManager::LocalSave(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
LocalToString	core/border_router/routing_manager.cpp	/^RoutingManager::OmrPrefixManager::InfoString RoutingManager::OmrPrefixManager::LocalToString(voi/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:RoutingManager::OmrPrefixManager::InfoString
Locate	core/thread/anycast_locator.cpp	/^Error AnycastLocator::Locate(const Ip6::Address &aAnycastAddress, LocatorCallback aCallback, voi/;"	f	class:ot::AnycastLocator	typeref:typename:Error
Log	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::Log(Action              aAction,$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
Log	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::Log(Action, const Ip6::Address &, TimeMilli, Error) const {}$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
Log	core/common/settings.cpp	/^void Settings::BrOnLinkPrefix::Log(const char *aActionText) const$/;"	f	class:ot::Settings::BrOnLinkPrefix	typeref:typename:void
Log	core/common/settings.cpp	/^void Settings::Log(Action aAction, Error aError, Key aKey, const void *aValue)$/;"	f	class:ot::Settings	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::BorderAgentId::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::BorderAgentId	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::ChildInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::DadInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::DadInfo	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::NetworkInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::ParentInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::SrpClientInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:void
Log	core/common/settings.cpp	/^void SettingsBase::SrpServerInfo::Log(Action aAction) const$/;"	f	class:ot::SettingsBase::SrpServerInfo	typeref:typename:void
Log	core/net/dnssd_server.cpp	/^void Server::Response::Log(void) const$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
Log	core/net/srp_server.cpp	/^void Server::Service::Log(Action aAction) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:void
Log	core/net/srp_server.cpp	/^void Server::Service::Log(Action) const {}$/;"	f	class:ot::Srp::Server::Service	typeref:typename:void
Log	core/radio/trel_interface.cpp	/^void Interface::Peer::Log(const char *aAction) const$/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:void
Log	core/thread/mle.cpp	/^void Mle::Log(MessageAction aAction, MessageType aType, const Ip6::Address &aAddress)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
Log	core/thread/mle.cpp	/^void Mle::Log(MessageAction aAction, MessageType aType, const Ip6::Address &aAddress, uint16_t a/;"	f	class:ot::Mle::Mle	typeref:typename:void
Log	core/thread/mle.hpp	/^    static void Log(MessageAction, MessageType, const Ip6::Address &) {}$/;"	f	class:ot::Mle::Mle	typeref:typename:void
Log	core/thread/mle.hpp	/^    static void Log(MessageAction, MessageType, const Ip6::Address &, uint16_t) {}$/;"	f	class:ot::Mle::Mle	typeref:typename:void
Log	core/thread/radio_selector.cpp	/^void RadioSelector::Log(LogLevel        aLogLevel,$/;"	f	class:ot::RadioSelector	typeref:typename:void
Log	core/thread/radio_selector.cpp	/^void RadioSelector::Log(LogLevel, const char *, Mac::RadioType, const Neighbor &) {}$/;"	f	class:ot::RadioSelector	typeref:typename:void
Log	ncp/ncp_base.cpp	/^void NcpBase::Log(otLogLevel aLogLevel, otLogRegion aLogRegion, const char *aLogString)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
LogAddress	core/utils/slaac_address.cpp	/^void Slaac::LogAddress(Action aAction, const SlaacAddress &aAddress)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
LogAddress	core/utils/slaac_address.cpp	/^void Slaac::LogAddress(Action, const SlaacAddress &) {}$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
LogAtLevel	core/common/log.cpp	/^template <LogLevel kLogLevel> void Logger::LogAtLevel(const char *aModuleName, const char *aForm/;"	f	class:ot::Logger	typeref:typename:void
LogBackboneRouterPrimary	core/backbone_router/bbr_leader.cpp	/^void Leader::LogBackboneRouterPrimary(State aState, const Config &aConfig) const$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
LogBackboneRouterPrimary	core/backbone_router/bbr_leader.hpp	/^    void LogBackboneRouterPrimary(State, const Config &) const {}$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
LogBeacon	core/mac/mac.cpp	/^void Mac::LogBeacon(const char *) const {}$/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogBeacon	core/mac/mac.cpp	/^void Mac::LogBeacon(const char *aActionText) const { LogInfo("%s Beacon", aActionText); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogCacheEntryChange	core/thread/address_resolver.cpp	/^void AddressResolver::LogCacheEntryChange(EntryChange       aChange,$/;"	f	class:ot::AddressResolver	typeref:typename:void
LogCacheEntryChange	core/thread/address_resolver.cpp	/^void AddressResolver::LogCacheEntryChange(EntryChange, Reason, const CacheEntry &, CacheEntryLis/;"	f	class:ot::AddressResolver	typeref:typename:void
LogCertMessage	core/meshcop/joiner.cpp	/^void Joiner::LogCertMessage(const char *aText, const Coap::Message &aMessage) const$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
LogCrit	lib/spinel/logger.cpp	/^void Logger::LogCrit(const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogCrit	posix/platform/logger.hpp	/^    static void LogCrit(const char *aFormat, ...) OT_TOOL_PRINTF_STYLE_FORMAT_ARG_CHECK(1, 2)$/;"	f	class:ot::Posix::Logger	typeref:typename:void
LogCrit	posix/platform/netif.cpp	/^static void LogCrit(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogCrit	posix/platform/trel.cpp	/^static void LogCrit(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogDebg	lib/spinel/logger.cpp	/^void Logger::LogDebg(const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogDebg	posix/platform/logger.hpp	/^    static void LogDebg(const char *aFormat, ...) OT_TOOL_PRINTF_STYLE_FORMAT_ARG_CHECK(1, 2)$/;"	f	class:ot::Posix::Logger	typeref:typename:void
LogDebg	posix/platform/netif.cpp	/^static void LogDebg(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogDebg	posix/platform/trel.cpp	/^static void LogDebg(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogDomainPrefix	core/backbone_router/bbr_local.cpp	/^void Local::LogDomainPrefix(Action aAction, Error aError)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
LogDomainPrefix	core/backbone_router/bbr_local.hpp	/^    void LogDomainPrefix(Action, Error) {}$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
LogError	core/backbone_router/backbone_tmf.cpp	/^void BackboneTmfAgent::LogError(const char *aText, const Ip6::Address &aAddress, Error aError) c/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:void
LogError	core/backbone_router/bbr_manager.cpp	/^void Manager::LogError(const char *aText, Error aError) const$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
LogError	core/thread/mle.cpp	/^void Mle::LogError(MessageAction aAction, MessageType aType, Error aError)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
LogError	posix/platform/spi_interface.cpp	/^void SpiInterface::LogError(const char *aString)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
LogEvents	core/common/notifier.cpp	/^void Notifier::LogEvents(Events aEvents) const$/;"	f	class:ot::Notifier	typeref:typename:void
LogEvents	core/common/notifier.cpp	/^void Notifier::LogEvents(Events) const {}$/;"	f	class:ot::Notifier	typeref:typename:void
LogFragmentFrameDrop	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogFragmentFrameDrop(Error                         aError,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogFragmentFrameDrop	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogFragmentFrameDrop(Error, uint16_t, const Mac::Addresses &, const Lowpan::/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogFrame	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogFrame(const char *, const Mac::Frame &, Error) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogFrame	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogFrame(const char *aActionText, const Mac::Frame &aFrame, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogFrameRxFailure	core/mac/mac.cpp	/^void Mac::LogFrameRxFailure(const RxFrame *, Error) const {}$/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogFrameRxFailure	core/mac/mac.cpp	/^void Mac::LogFrameRxFailure(const RxFrame *aFrame, Error aError) const$/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogFrameTxFailure	core/mac/mac.cpp	/^void Mac::LogFrameTxFailure(const TxFrame &, Error, uint8_t, bool) const {}$/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogFrameTxFailure	core/mac/mac.cpp	/^void Mac::LogFrameTxFailure(const TxFrame &aFrame, Error aError, uint8_t aRetryCount, bool aWill/;"	f	class:ot::Mac::Mac	typeref:typename:void
LogIfFail	lib/spinel/logger.cpp	/^void Logger::LogIfFail(const char *aText, otError aError)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogInModule	core/common/log.cpp	/^void Logger::LogInModule(const char *aModuleName, LogLevel aLogLevel, const char *aFormat, ...)$/;"	f	class:ot::Logger	typeref:typename:void
LogInfo	lib/spinel/logger.cpp	/^void Logger::LogInfo(const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogInfo	posix/platform/logger.hpp	/^    static void LogInfo(const char *aFormat, ...) OT_TOOL_PRINTF_STYLE_FORMAT_ARG_CHECK(1, 2)$/;"	f	class:ot::Posix::Logger	typeref:typename:void
LogInfo	posix/platform/netif.cpp	/^static void LogInfo(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogInfo	posix/platform/trel.cpp	/^static void LogInfo(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogInput	cli/cli_utils.cpp	/^void Utils::LogInput(const Arg *aArgs)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
LogInput	cli/cli_utils.hpp	/^    void LogInput(const Arg *) {}$/;"	f	class:ot::Cli::Utils	typeref:typename:void
LogIp6Message	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogIp6Message(MessageAction       aAction,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogIp6SourceDestAddresses	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogIp6SourceDestAddresses(const Ip6::Headers &, LogLevel) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogIp6SourceDestAddresses	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogIp6SourceDestAddresses(const Ip6::Headers &aHeaders, LogLevel aLogLevel)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogJoinerEntry	core/meshcop/commissioner.cpp	/^void Commissioner::LogJoinerEntry(const char *, const Joiner &) const {}$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
LogJoinerEntry	core/meshcop/commissioner.cpp	/^void Commissioner::LogJoinerEntry(const char *aAction, const Joiner &aJoiner) const$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
LogLowpanHcFrameDrop	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogLowpanHcFrameDrop(Error                 aError,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogLowpanHcFrameDrop	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogLowpanHcFrameDrop(Error, uint16_t, const Mac::Addresses &, bool) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMeshFragmentHeader	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::LogMeshFragmentHeader(MessageAction       aAction,$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
LogMeshIpHeader	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::LogMeshIpHeader(const Message        &aMessage,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMeshMessage	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::LogMeshMessage(MessageAction       aAction,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction       aAction,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction aAction, const Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction aAction, const Message &aMessage, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction, const Message &) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction, const Message &, Error) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::LogMessage(MessageAction, const Message &, Error, const Mac::Address *) {}$/;"	f	class:ot::MeshForwarder	typeref:typename:void
LogMlrResponse	core/thread/mlr_manager.cpp	/^void MlrManager::LogMlrResponse(Error aResult, Error aError, uint8_t aStatus, const AddressArray/;"	f	class:ot::MlrManager	typeref:typename:void
LogMulticastAddresses	core/thread/mlr_manager.cpp	/^void MlrManager::LogMulticastAddresses(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
LogNote	lib/spinel/logger.cpp	/^void Logger::LogNote(const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogNote	posix/platform/logger.hpp	/^    static void LogNote(const char *aFormat, ...) OT_TOOL_PRINTF_STYLE_FORMAT_ARG_CHECK(1, 2)$/;"	f	class:ot::Posix::Logger	typeref:typename:void
LogNote	posix/platform/netif.cpp	/^static void LogNote(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogNote	posix/platform/trel.cpp	/^static void LogNote(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogOnError	core/common/log.cpp	/^void Logger::LogOnError(const char *aModuleName, Error aError, const char *aText)$/;"	f	class:ot::Logger	typeref:typename:void
LogPrefix	core/common/settings.cpp	/^void SettingsBase::LogPrefix(Action aAction, Key aKey, const Ip6::Prefix &aPrefix)$/;"	f	class:ot::SettingsBase	typeref:typename:void
LogPrefixInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::LogPrefixInfoOption(const Ip6::Prefix &, uint32_t, uint32_t) {}$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
LogPrefixInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::LogPrefixInfoOption(const Ip6::Prefix &aPrefix,$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
LogProcessError	core/thread/mle.cpp	/^void Mle::LogProcessError(MessageType aType, Error aError) { LogError(kMessageReceive, aType, aE/;"	f	class:ot::Mle::Mle	typeref:typename:void
LogProcessError	core/thread/mle.hpp	/^    static void LogProcessError(MessageType, Error) {}$/;"	f	class:ot::Mle::Mle	typeref:typename:void
LogReceived	core/mac/sub_mac.cpp	/^void SubMac::LogReceived(RxFrame *aFrame)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
LogResults	core/utils/channel_monitor.cpp	/^void ChannelMonitor::LogResults(void)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:void
LogRetryWaitInterval	core/net/srp_client.cpp	/^void Client::LogRetryWaitInterval(void) const$/;"	f	class:ot::Srp::Client	typeref:typename:void
LogRetryWaitInterval	core/net/srp_client.hpp	/^    void LogRetryWaitInterval(void) const {}$/;"	f	class:ot::Srp::Client	typeref:typename:void
LogRouteInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::LogRouteInfoOption(const Ip6::Prefix &, uint32_t, RoutePreference) {}$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
LogRouteInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::LogRouteInfoOption(const Ip6::Prefix &aPrefix, uint32_t aLifetime, RoutePre/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
LogRouteTable	core/thread/router_table.cpp	/^void RouterTable::LogRouteTable(void) const$/;"	f	class:ot::RouterTable	typeref:typename:void
LogSendError	core/thread/mle.cpp	/^void Mle::LogSendError(MessageType aType, Error aError) { LogError(kMessageSend, aType, aError);/;"	f	class:ot::Mle::Mle	typeref:typename:void
LogSendError	core/thread/mle.hpp	/^    static void LogSendError(MessageType, Error) {}$/;"	f	class:ot::Mle::Mle	typeref:typename:void
LogService	core/backbone_router/bbr_local.cpp	/^void Local::LogService(Action aAction, Error aError)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
LogService	core/backbone_router/bbr_local.hpp	/^    void LogService(Action, Error) {}$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
LogSpinelFrame	lib/spinel/logger.cpp	/^void Logger::LogSpinelFrame(const uint8_t *aFrame, uint16_t aLength, bool aTx)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogStats	posix/platform/spi_interface.cpp	/^void SpiInterface::LogStats(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
LogUpdateTime	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::LogUpdateTime(void) const$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
LogVarArgs	core/common/log.cpp	/^void Logger::LogVarArgs(const char *aModuleName, LogLevel aLogLevel, const char *aFormat, va_lis/;"	f	class:ot::Logger	typeref:typename:void
LogWarn	lib/spinel/logger.cpp	/^void Logger::LogWarn(const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:void
LogWarn	posix/platform/logger.hpp	/^    static void LogWarn(const char *aFormat, ...) OT_TOOL_PRINTF_STYLE_FORMAT_ARG_CHECK(1, 2)$/;"	f	class:ot::Posix::Logger	typeref:typename:void
LogWarn	posix/platform/netif.cpp	/^static void LogWarn(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
LogWarn	posix/platform/trel.cpp	/^static void LogWarn(const char *aFormat, ...)$/;"	f	typeref:typename:void	file:
Logger	lib/spinel/logger.cpp	/^Logger::Logger(const char *aModuleName)$/;"	f	class:ot::Spinel::Logger
LookUp	core/thread/address_resolver.cpp	/^Mac::ShortAddress AddressResolver::LookUp(const Ip6::Address &aEid)$/;"	f	class:ot::AddressResolver	typeref:typename:Mac::ShortAddress
Lookup	core/common/string.hpp	/^    static const char *Lookup(uint16_t aKey, const Entry (&aTable)[kLength], const char *aNotFou/;"	f	class:ot::Stringify	typeref:typename:const char *
Lookup	core/utils/verhoeff_checksum.cpp	/^uint8_t VerhoeffChecksum::Lookup(uint8_t aIndex, const uint8_t aCompressedArray[])$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:uint8_t
LookupMapper	cli/cli_dataset.cpp	/^const Dataset::ComponentMapper *Dataset::LookupMapper(const char *aName) const$/;"	f	class:ot::Cli::Dataset	typeref:typename:const Dataset::ComponentMapper *
Lowpan	core/thread/lowpan.cpp	/^Lowpan::Lowpan(Instance &aInstance)$/;"	f	class:ot::Lowpan::Lowpan
Mac	core/mac/mac.cpp	/^Mac::Mac(Instance &aInstance)$/;"	f	class:ot::Mac::Mac
MacFilter	cli/cli_mac_filter.hpp	/^    MacFilter(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::MacFilter
MacFrameCounterUsed	core/thread/key_manager.cpp	/^void KeyManager::MacFrameCounterUsed(uint32_t aMacFrameCounter)$/;"	f	class:ot::KeyManager	typeref:typename:void
MacFrameCounterUsed	core/thread/key_manager.cpp	/^void KeyManager::MacFrameCounterUsed(uint32_t) {}$/;"	f	class:ot::KeyManager	typeref:typename:void
MakeDivisibleByEight	core/net/ip6_headers.hpp	/^    static inline uint16_t MakeDivisibleByEight(uint16_t aLength) { return aLength & 0xfff8; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:uint16_t
Manager	core/backbone_router/bbr_manager.cpp	/^Manager::Manager(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::Manager
Manager	core/common/random.cpp	/^Manager::Manager(void)$/;"	f	class:ot::Random::Manager
Manager	core/thread/network_data_service.hpp	/^    explicit Manager(Instance &aInstance)$/;"	f	class:ot::NetworkData::Service::Manager
MapEntryNumberToListIndex	core/utils/history_tracker.cpp	/^uint16_t HistoryTracker::List::MapEntryNumberToListIndex(uint16_t aEntryNumber, uint16_t aMaxSiz/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:uint16_t
MapEnum	core/common/as_core_type.hpp	/^template <typename EnumType> const typename MappedEnum<EnumType>::Type MapEnum(EnumType aValue)$/;"	f	namespace:ot	typeref:typename:const typename MappedEnum<EnumType>::Type
MapError	core/crypto/mbedtls.cpp	/^Error MbedTls::MapError(int aMbedTlsError)$/;"	f	class:ot::Crypto::MbedTls	typeref:typename:Error
MarkAsAppended	core/net/mdns.cpp	/^void Core::RecordInfo::MarkAsAppended(TxMessage &aTxMessage, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
MarkAsAppendedInMessage	core/net/srp_client.hpp	/^        void      MarkAsAppendedInMessage(void) { mLease |= kAppendedInMsgFlag; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:void
MarkAsClone	core/thread/network_data_leader.hpp	/^        void MarkAsClone(void) { mIsClone = true; }$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
MarkAsClone	core/thread/network_data_leader_ftd.cpp	/^void Leader::MarkAsClone(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
MarkAsConnecting	core/net/dns_dso.cpp	/^void Dso::Connection::MarkAsConnecting(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
MarkAsDisconnected	core/net/dns_dso.cpp	/^void Dso::Connection::MarkAsDisconnected(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
MarkAsDistantPast	core/utils/history_tracker.hpp	/^        void     MarkAsDistantPast(void) { return mTime.SetValue(kDistantPast); }$/;"	f	class:ot::Utils::HistoryTracker::Timestamp	typeref:typename:void
MarkAsDone	core/coap/coap_message.hpp	/^        void MarkAsDone(void) { mOption.mLength = kIteratorDoneLength; }$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:void
MarkAsInUse	core/thread/network_data_leader.hpp	/^        void     MarkAsInUse(uint8_t aId) { mRemoveTimes[aId - kMinId].SetValue(kInUse); }$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
MarkAsNotAppended	core/net/mdns.hpp	/^        void MarkAsNotAppended(void) { mAppendState = kNotAppended; }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
MarkAsNotDeprecating	core/utils/slaac_address.hpp	/^        void      MarkAsNotDeprecating(void) { mExpirationTime.SetValue(kNotDeprecated); }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:void
MarkAsNotInUse	core/thread/mle.hpp	/^        void     MarkAsNotInUse(void) { SetAloc16(kNotInUse); }$/;"	f	class:ot::Mle::Mle::ServiceAloc	typeref:typename:void
MarkAsNotInUse	core/utils/slaac_address.hpp	/^        void      MarkAsNotInUse(void) { mValid = false; }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:void
MarkAsParseErrored	core/coap/coap_message.hpp	/^        void MarkAsParseErrored(void) { MarkAsDone(), mNextOptionOffset = kNextOptionOffsetParse/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:void
MarkAsReserved	core/thread/link_metrics_types.hpp	/^    static void MarkAsReserved(uint8_t &aTypeId) { aTypeId = (aTypeId & ~kTypeMask) | kTypeReser/;"	f	class:ot::LinkMetrics::TypeId	typeref:typename:void
MarkAsUnallocated	core/thread/network_data_leader.hpp	/^        void      MarkAsUnallocated(uint8_t aId) { mRemoveTimes[aId - kMinId].SetValue(kUnalloca/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
MarkCompressedEcn	core/thread/lowpan.cpp	/^void Lowpan::MarkCompressedEcn(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Lowpan::Lowpan	typeref:typename:void
MarkEntryAsNotNew	core/thread/network_data.hpp	/^        void MarkEntryAsNotNew(void) { SetEntryIndex(1); }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
MarkLastTransactionTimeAsInvalid	core/thread/address_resolver.hpp	/^        void     MarkLastTransactionTimeAsInvalid(void) { SetLastTransactionTime(kInvalidLastTra/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
MarkSessionEstablished	core/net/dns_dso.cpp	/^void Dso::Connection::MarkSessionEstablished(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
MarkToAppendInAdditionalData	core/net/mdns.cpp	/^void Core::RecordInfo::MarkToAppendInAdditionalData(void)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
MarkToDrop	core/thread/mesh_forwarder.hpp	/^            void MarkToDrop(void) { mShouldDrop = true; }$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:void
MarkToInvokeCallbackUnconditionally	core/net/mdns.cpp	/^void Core::Entry::MarkToInvokeCallbackUnconditionally(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
Mask	core/common/time_ticker.hpp	/^    constexpr static uint32_t Mask(Receiver aReceiver) { return static_cast<uint32_t>(1U) << aRe/;"	f	class:ot::TimeTicker	typeref:typename:uint32_t
MaskFor	core/thread/mle_types.hpp	/^    static uint8_t MaskFor(uint8_t aRouterId) { return (0x80 >> (aRouterId % 8)); }$/;"	f	class:ot::Mle::RouterIdSet	typeref:typename:uint8_t
Match	core/common/string.cpp	/^MatchType Match(const char *aString, const char *aPrefixString, StringMatchMode aMode)$/;"	f	namespace:ot::__anon5eeda53d0111	typeref:typename:MatchType
MatchBytes	core/common/data.cpp	/^bool DataUtils::MatchBytes(const uint8_t *aFirstBuffer,$/;"	f	class:ot::DataUtils	typeref:typename:bool
MatchLength	core/net/ip6_address.cpp	/^uint8_t Prefix::MatchLength(const uint8_t *aPrefixA, const uint8_t *aPrefixB, uint8_t aMaxSize)$/;"	f	class:ot::Ip6::Prefix	typeref:typename:uint8_t
MatchNetifAddressWithPrefix	core/net/dhcp6_client.cpp	/^bool Client::MatchNetifAddressWithPrefix(const Ip6::Netif::UnicastAddress &aNetifAddress, const /;"	f	class:ot::Dhcp6::Client	typeref:typename:bool
MatchService	core/thread/network_data.cpp	/^bool NetworkData::MatchService(const ServiceTlv  &aServiceTlv,$/;"	f	class:ot::NetworkData::NetworkData	typeref:typename:bool
Matches	core/border_router/routing_manager.cpp	/^bool RoutingManager::RxRaTracker::Router::Matches(EmptyChecker aChecker) const$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Router	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^            bool Matches(const Ip6::Address &aAddress) const { return aAddress == mAddress; }$/;"	f	struct:ot::BorderRouter::RoutingManager::RxRaTracker::Router	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^            bool Matches(const Ip6::Prefix &aPrefix) const { return (mPrefix == aPrefix); }$/;"	f	struct:ot::BorderRouter::RoutingManager::RioAdvertiser::RioPrefix	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^            bool Matches(const Ip6::Prefix &aPrefix) const { return mPrefix == aPrefix; }$/;"	f	struct:ot::BorderRouter::RoutingManager::OnLinkPrefixManager::OldPrefix	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^        bool Matches(const ExpirationChecker &aChecker) const { return (GetExpireTime() <= aChec/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^        bool Matches(const Ip6::Prefix &aPrefix) const { return (mPrefix == aPrefix); }$/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:bool
Matches	core/border_router/routing_manager.hpp	/^        bool Matches(const UlaChecker &aIsUla) const { return (mPrefix.IsUniqueLocal() == aIsUla/;"	f	class:ot::BorderRouter::RoutingManager::LifetimedPrefix	typeref:typename:bool
Matches	core/common/callback.hpp	/^    bool Matches(HandlerType aHandler, void *aContext) const$/;"	f	class:ot::CallbackBase	typeref:typename:bool
Matches	core/common/heap_data.cpp	/^bool Data::Matches(const uint8_t *aBuffer, uint16_t aLength) const$/;"	f	class:ot::Heap::Data	typeref:typename:bool
Matches	core/meshcop/meshcop.cpp	/^bool JoinerDiscerner::Matches(const Mac::ExtAddress &aJoinerId) const$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:bool
Matches	core/net/dns_dso.hpp	/^                bool Matches(MessageId aMessageId) const { return mMessageId == aMessageId; }$/;"	f	struct:ot::Dns::Dso::Connection::PendingRequests::Entry	typeref:typename:bool
Matches	core/net/dns_dso.hpp	/^        bool Matches(const Ip6::SockAddr &aPeerSockAddr) const { return mPeerSockAddr == aPeerSo/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:bool
Matches	core/net/dns_types.cpp	/^bool Name::Matches(const char *aFirstLabel, const char *aLabels, const char *aDomain) const$/;"	f	class:ot::Dns::Name	typeref:typename:bool
Matches	core/net/dns_types.hpp	/^    bool Matches(uint16_t aType, uint16_t aClass = kClassInternet) const$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::AddrEntry::Matches(EmptyChecker aChecker) const$/;"	f	class:ot::Dns::Multicast::Core::AddrCache::AddrEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::AddrEntry::Matches(const ExpireChecker &aExpireChecker) const$/;"	f	class:ot::Dns::Multicast::Core::AddrCache::AddrEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::Matches(const AddressResolver &aResolver) const { return Matches(aResolver/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::Matches(const ExpireChecker &aExpireChecker) const { return ShouldDelete(a/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::Matches(const Name &aFullName) const$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddrCache::Matches(const char *aName) const { return NameMatch(mName, aName); }$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::AddressArray::Matches(const Ip6::Address *aAddresses, uint16_t aNumAddresses) const$/;"	f	class:ot::Dns::Multicast::Core::AddressArray	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::BrowseCache::Matches(const Browser &aBrowser) const$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::BrowseCache::Matches(const ExpireChecker &aExpireChecker) const { return ShouldDelete/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::BrowseCache::Matches(const Name &aFullName) const$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::BrowseCache::Matches(const char *aServiceType, const char *aSubTypeLabel) const$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::BrowseCache::PtrEntry::Matches(const ExpireChecker &aExpireChecker) const$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache::PtrEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::HostEntry::Matches(const Heap::String &aName) const { return NameMatch(mName, aName);/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::HostEntry::Matches(const Host &aHost) const { return NameMatch(mName, aHost.mHostName/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::HostEntry::Matches(const Key &aKey) const { return !IsKeyForService(aKey) && NameMatc/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::HostEntry::Matches(const Name &aName) const$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::MultiPacketRxMessages::RxMsgEntry::Matches(const AddressInfo &aAddress) const$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages::RxMsgEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::MultiPacketRxMessages::RxMsgEntry::Matches(const ExpireChecker &aExpireChecker) const$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages::RxMsgEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceCache::Matches(const Name &aFullName) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceCache::Matches(const char *aServiceInstance, const char *aServiceType) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceEntry::Matches(const Key &aKey) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceEntry::Matches(const Name &aFullName) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceEntry::Matches(const Service &aService) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceEntry::SubType::Matches(const EmptyChecker &aChecker) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry::SubType	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceType::Matches(const Heap::String &aServiceType) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::ServiceType::Matches(const Name &aServiceTypeName) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::SrvCache::Matches(const ExpireChecker &aExpireChecker) const { return ShouldDelete(aE/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::SrvCache::Matches(const Name &aFullName) const { return ServiceCache::Matches(aFullNa/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::SrvCache::Matches(const ServiceName &aServiceName) const$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::SrvCache::Matches(const SrvResolver &aResolver) const$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::TxtCache::Matches(const ExpireChecker &aExpireChecker) const { return ShouldDelete(aE/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::TxtCache::Matches(const Name &aFullName) const { return ServiceCache::Matches(aFullNa/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::TxtCache::Matches(const ServiceName &aServiceName) const$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:bool
Matches	core/net/mdns.cpp	/^bool Core::TxtCache::Matches(const TxtResolver &aResolver) const$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:bool
Matches	core/net/mdns.hpp	/^            bool     Matches(const Ip6::Address &aAddress) const { return (mAddress == aAddress)/;"	f	struct:ot::Dns::Multicast::Core::AddrCache::AddrEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^            bool  Matches(const char *aLabel) const { return NameMatch(mLabel, aLabel); }$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry::SubType	typeref:typename:bool
Matches	core/net/mdns.hpp	/^            bool  Matches(const char *aServiceInstance) const { return NameMatch(mServiceInstanc/;"	f	struct:ot::Dns::Multicast::Core::BrowseCache::PtrEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^            bool Matches(const ExpireChecker &aExpireChecker) const { return mExpireTime <= aExp/;"	f	struct:ot::Dns::Multicast::Core::TxMessageHistory::HashEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^            bool Matches(const Hash &aHash) const { return aHash == mHash; }$/;"	f	struct:ot::Dns::Multicast::Core::TxMessageHistory::HashEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool     Matches(const ServiceType &aServiceType) const { return (this == &aServiceType)/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool  Matches(State aState) const { return GetState() == aState; }$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool  Matches(State aState) const { return GetState() == aState; }$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool  Matches(const HostEntry &aEntry) const { return (this == &aEntry); }$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool  Matches(const ServiceEntry &aEntry) const { return (this == &aEntry); }$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool Matches(AddressCallback aCallback) const { return mSharedCallback.mAddress == aCall/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool Matches(BrowseCallback aCallback) const { return mSharedCallback.mBrowse == aCallba/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool Matches(EmptyChecker) const { return (mSharedCallback.mSrv == nullptr); }$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool Matches(SrvCallback aCallback) const { return mSharedCallback.mSrv == aCallback; }$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:bool
Matches	core/net/mdns.hpp	/^        bool Matches(TxtCallback aCallback) const { return mSharedCallback.mTxt == aCallback; }$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback	typeref:typename:bool
Matches	core/net/nat64_translator.hpp	/^        bool Matches(const Ip4::Address &aIp4) const { return mIp4 == aIp4; }$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:bool
Matches	core/net/nat64_translator.hpp	/^        bool Matches(const Ip6::Address &aIp6) const { return mIp6 == aIp6; }$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:bool
Matches	core/net/nat64_translator.hpp	/^        bool Matches(const TimeMilli aNow) const { return mExpiry < aNow; }$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:bool
Matches	core/net/netif.hpp	/^        bool Matches(const Address &aAddress) const { return GetAddress() == aAddress; }$/;"	f	class:ot::Ip6::Netif::MulticastAddress	typeref:typename:bool
Matches	core/net/netif.hpp	/^        bool Matches(const Address &aAddress) const { return GetAddress() == aAddress; }$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:bool
Matches	core/net/srp_advertising_proxy.hpp	/^        bool      Matches(const CompletionChecker &) const { return IsCompleted(); }$/;"	f	struct:ot::Srp::AdvertisingProxy::AdvInfo	typeref:typename:bool
Matches	core/net/srp_advertising_proxy.hpp	/^        bool      Matches(const ExpirationChecker &aChecker) const { return (mExpireTime <= aChe/;"	f	struct:ot::Srp::AdvertisingProxy::AdvInfo	typeref:typename:bool
Matches	core/net/srp_client.cpp	/^bool Client::Service::Matches(const Service &aOther) const$/;"	f	class:ot::Srp::Client::Service	typeref:typename:bool
Matches	core/net/srp_client.hpp	/^        bool      Matches(ItemState aState) const { return GetState() == aState; }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:bool
Matches	core/net/srp_server.cpp	/^bool Server::Host::Matches(const char *aFullName) const$/;"	f	class:ot::Srp::Server::Host	typeref:typename:bool
Matches	core/net/srp_server.cpp	/^bool Server::Service::Matches(const char *aInstanceName) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:bool
Matches	core/net/srp_server.hpp	/^        bool                     Matches(ServiceUpdateId aId) const { return mId == aId; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:bool
Matches	core/net/tcp6.cpp	/^bool Tcp::Endpoint::Matches(const MessageInfo &aMessageInfo) const$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:bool
Matches	core/net/tcp6.cpp	/^bool Tcp::Listener::Matches(const MessageInfo &aMessageInfo) const$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:bool
Matches	core/net/udp6.cpp	/^bool Udp::SocketHandle::Matches(const MessageInfo &aMessageInfo) const$/;"	f	class:ot::Ip6::Udp::SocketHandle	typeref:typename:bool
Matches	core/radio/trel_interface.hpp	/^        bool Matches(const Ip6::SockAddr &aSockAddr) const { return GetSockAddr() == aSockAddr; /;"	f	class:ot::Trel::Interface::Peer	typeref:typename:bool
Matches	core/radio/trel_interface.hpp	/^        bool Matches(const Mac::ExtAddress &aExtAddress) const { return GetExtAddress() == aExtA/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:bool
Matches	core/thread/address_resolver.hpp	/^        bool Matches(const Ip6::Address &aEid) const { return GetTarget() == aEid; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:bool
Matches	core/thread/link_metrics_types.hpp	/^    bool Matches(const uint8_t &aSeriesId) const { return mSeriesId == aSeriesId; }$/;"	f	class:ot::LinkMetrics::SeriesInfo	typeref:typename:bool
Matches	core/thread/mesh_forwarder.hpp	/^            bool Matches(uint16_t aSrcRloc16, uint16_t aTag) const$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:bool
Matches	core/thread/neighbor.cpp	/^bool Neighbor::AddressMatcher::Matches(const Neighbor &aNeighbor) const$/;"	f	class:ot::Neighbor::AddressMatcher	typeref:typename:bool
Matches	core/thread/neighbor.hpp	/^    bool Matches(const AddressMatcher &aMatcher) const { return aMatcher.Matches(*this); }$/;"	f	class:ot::Neighbor	typeref:typename:bool
Matches	core/thread/network_data_publisher.hpp	/^        bool      Matches(const Ip6::Prefix &aPrefix) const { return mPrefix == aPrefix; }$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:bool
Matches	core/utils/link_metrics_manager.cpp	/^bool LinkMetricsManager::Subject::Matches(const LinkMetricsManager &aLinkMetricsMgr)$/;"	f	class:ot::Utils::LinkMetricsManager::Subject	typeref:typename:bool
Matches	core/utils/link_metrics_manager.hpp	/^        bool Matches(const Mac::ExtAddress &aExtAddress) const { return mExtAddress == aExtAddre/;"	f	struct:ot::Utils::LinkMetricsManager::Subject	typeref:typename:bool
Matches	core/utils/power_calibration.hpp	/^        bool    Matches(int16_t aActualPower) const { return aActualPower == mActualPower; }$/;"	f	class:ot::Utils::PowerCalibration::CalibratedPowerEntry	typeref:typename:bool
MatchesBytesIn	core/common/data.hpp	/^    bool MatchesBytesIn(const void *aBuffer) const { return memcmp(mBuffer, aBuffer, mLength) ==/;"	f	class:ot::Data	typeref:typename:bool
MatchesBytesIn	core/common/data.hpp	/^    bool MatchesBytesIn(const void *aBuffer, ByteMatcher aMatcher)$/;"	f	class:ot::Data	typeref:typename:bool
MatchesFilter	core/backbone_router/ndproxy_table.cpp	/^bool NdProxyTable::MatchesFilter(const NdProxy &aProxy, Filter aFilter)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:bool
MatchesFilter	core/net/ip6_address.cpp	/^bool Address::MatchesFilter(TypeFilter aFilter) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
MatchesFilter	core/thread/neighbor.cpp	/^bool Neighbor::MatchesFilter(StateFilter aFilter) const$/;"	f	class:ot::Neighbor	typeref:typename:bool
MatchesInstanceName	core/net/srp_server.cpp	/^bool Server::Service::MatchesInstanceName(const char *aInstanceName) const { return Matches(aIns/;"	f	class:ot::Srp::Server::Service	typeref:typename:bool
MatchesPrefix	core/net/ip6_address.cpp	/^bool Address::MatchesPrefix(const Prefix &aPrefix) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
MatchesPrefix	core/net/ip6_address.cpp	/^bool Address::MatchesPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength) const$/;"	f	class:ot::Ip6::Address	typeref:typename:bool
MatchesServiceName	core/net/srp_server.cpp	/^bool Server::Service::MatchesServiceName(const char *aServiceName) const$/;"	f	class:ot::Srp::Server::Service	typeref:typename:bool
MatchesServiceType	core/net/mdns.cpp	/^bool Core::ServiceEntry::MatchesServiceType(const Name &aServiceType) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
Max	core/common/num_utils.hpp	/^template <typename Type> Type Max(Type aFirst, Type aSecond) { return (aFirst < aSecond) ? aSeco/;"	f	namespace:ot	typeref:typename:Type
Max	lib/utils/math.hpp	/^template <typename Type> Type Max(Type aFirst, Type aSecond) { return (aFirst < aSecond) ? aSeco/;"	f	namespace:ot::Lib::Utils	typeref:typename:Type
MaxPowerTable	core/radio/max_power_table.hpp	/^    MaxPowerTable(void) { memset(mPowerTable, kPowerDefault, sizeof(mPowerTable)); }$/;"	f	class:ot::MaxPowerTable
MbedTls	core/crypto/mbedtls.cpp	/^MbedTls::MbedTls(void)$/;"	f	class:ot::Crypto::MbedTls
MbedTlsDebugOutput	cli/cli_tcp.cpp	/^void TcpExample::MbedTlsDebugOutput(void *ctx, int level, const char *file, int line, const char/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
Mdns	cli/cli_mdns.hpp	/^    Mdns(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Mdns
MeshDiag	core/utils/mesh_diag.cpp	/^MeshDiag::MeshDiag(Instance &aInstance)$/;"	f	class:ot::Utils::MeshDiag
MeshForwarder	core/thread/mesh_forwarder.cpp	/^MeshForwarder::MeshForwarder(Instance &aInstance)$/;"	f	class:ot::MeshForwarder
MessageActionToString	core/thread/mesh_forwarder.cpp	/^const char *MeshForwarder::MessageActionToString(MessageAction aAction, Error aError)$/;"	f	class:ot::MeshForwarder	typeref:typename:const char *
MessageActionToString	core/thread/mle.cpp	/^const char *Mle::MessageActionToString(MessageAction aAction)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
MessageInfo	core/net/socket.hpp	/^    MessageInfo(void) { Clear(); }$/;"	f	class:ot::Ip6::MessageInfo
MessageInfo	core/thread/tmf.hpp	/^    explicit MessageInfo(Instance &aInstance)$/;"	f	class:ot::Tmf::MessageInfo
MessagePool	core/common/message.cpp	/^MessagePool::MessagePool(Instance &aInstance)$/;"	f	class:ot::MessagePool
MessagePriorityToString	cli/cli_history.cpp	/^const char *History::MessagePriorityToString(uint8_t aPriority)$/;"	f	class:ot::Cli::History	typeref:typename:const char *
MessagePriorityToString	core/thread/mesh_forwarder.cpp	/^const char *MeshForwarder::MessagePriorityToString(const Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:const char *
MessageQueue	core/common/message.hpp	/^    MessageQueue(void) { SetTail(nullptr); }$/;"	f	class:ot::MessageQueue
MessageTypeActionToSuffixString	core/thread/mle.cpp	/^const char *Mle::MessageTypeActionToSuffixString(MessageType aType, MessageAction aAction)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
MessageTypeToString	cli/cli_history.cpp	/^const char *History::MessageTypeToString(const otHistoryTrackerMessageInfo &aInfo)$/;"	f	class:ot::Cli::History	typeref:typename:const char *
MessageTypeToString	core/net/dns_dso.cpp	/^const char *Dso::Connection::MessageTypeToString(MessageType aMessageType)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:const char *
MessageTypeToString	core/thread/mle.cpp	/^const char *Mle::MessageTypeToString(MessageType aType)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
MifIndexToString	posix/platform/multicast_routing.cpp	/^const char *MulticastRoutingManager::MifIndexToString(MifIndex aMif)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:const char *
Min	core/common/num_utils.hpp	/^template <typename Type> Type Min(Type aFirst, Type aSecond) { return (aFirst < aSecond) ? aFirs/;"	f	namespace:ot	typeref:typename:Type
Min	lib/utils/math.hpp	/^template <typename Type> Type Min(Type aFirst, Type aSecond) { return (aFirst < aSecond) ? aFirs/;"	f	namespace:ot::Lib::Utils	typeref:typename:Type
Mle	core/thread/mle.cpp	/^Mle::Mle(Instance &aInstance)$/;"	f	class:ot::Mle::Mle
MleRouter	core/thread/mle_router.cpp	/^MleRouter::MleRouter(Instance &aInstance)$/;"	f	class:ot::Mle::MleRouter
MlrManager	core/thread/mlr_manager.cpp	/^MlrManager::MlrManager(Instance &aInstance)$/;"	f	class:ot::MlrManager
MoveKeysToSecureStorage	core/meshcop/dataset_manager.cpp	/^void DatasetManager::MoveKeysToSecureStorage(Dataset &aDataset) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
MoveOffset	core/common/message.cpp	/^void Message::MoveOffset(int aDelta)$/;"	f	class:ot::Message	typeref:typename:void
Mpl	core/net/ip6_mpl.cpp	/^Mpl::Mpl(Instance &aInstance)$/;"	f	class:ot::Ip6::Mpl
MsecToSec	core/common/time.hpp	/^    static uint32_t constexpr MsecToSec(uint32_t aMilliseconds) { return aMilliseconds \/ 1000u;/;"	f	class:ot::Time	typeref:typename:uint32_t 
MsecToSec	core/common/uptime.hpp	/^    static uint32_t MsecToSec(uint64_t aUptimeInMilliseconds)$/;"	f	class:ot::Uptime	typeref:typename:uint32_t
MultiFrameBuffer	lib/spinel/multi_frame_buffer.hpp	/^    MultiFrameBuffer(void)$/;"	f	class:ot::Spinel::MultiFrameBuffer
MultiPacketRxMessages	core/net/mdns.cpp	/^Core::MultiPacketRxMessages::MultiPacketRxMessages(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages
MulticastForwardingCache	posix/platform/multicast_routing.hpp	/^        MulticastForwardingCache()$/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache
MulticastListenersTable	core/backbone_router/multicast_listeners_table.hpp	/^    explicit MulticastListenersTable(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable
MulticastRoutingManager	posix/platform/multicast_routing.hpp	/^    explicit MulticastRoutingManager()$/;"	f	class:ot::Posix::MulticastRoutingManager
Multiply	core/coap/coap.cpp	/^static uint32_t Multiply(uint32_t aValueA, uint32_t aValueB)$/;"	f	namespace:ot::Coap	typeref:typename:uint32_t	file:
Multiply	core/utils/verhoeff_checksum.cpp	/^uint8_t VerhoeffChecksum::Multiply(uint8_t aFirst, uint8_t aSecond)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:uint8_t
MutableNetworkData	core/thread/network_data.hpp	/^    MutableNetworkData(Instance &aInstance, uint8_t *aTlvs, uint8_t aLength, uint8_t aSize)$/;"	f	class:ot::NetworkData::MutableNetworkData
Name	core/net/dns_types.hpp	/^    Name(const Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dns::Name
Name	core/net/dns_types.hpp	/^    Name(const char *aString, const Message *aMessage, uint16_t aOffset)$/;"	f	class:ot::Dns::Name
Name	core/net/dns_types.hpp	/^    Name(void)$/;"	f	class:ot::Dns::Name
Name	core/net/dns_types.hpp	/^    explicit Name(const char *aString)$/;"	f	class:ot::Dns::Name
NameData	core/meshcop/network_name.hpp	/^    NameData(const char *aBuffer, uint8_t aLength) { Init(aBuffer, aLength); }$/;"	f	class:ot::MeshCoP::NameData
NameMatch	core/net/mdns.cpp	/^bool Core::NameMatch(const Heap::String &aFirst, const Heap::String &aSecond)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
NameMatch	core/net/mdns.cpp	/^bool Core::NameMatch(const Heap::String &aHeapString, const char *aName)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
Nat64PrefixManager	core/border_router/routing_manager.cpp	/^RoutingManager::Nat64PrefixManager::Nat64PrefixManager(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager
NcpBase	ncp/ncp_base.cpp	/^NcpBase::NcpBase(Instance **aInstances, uint8_t aCount)$/;"	f	class:ot::Ncp::NcpBase
NcpBase	ncp/ncp_base.cpp	/^NcpBase::NcpBase(Instance *aInstance)$/;"	f	class:ot::Ncp::NcpBase
NcpHdlc	ncp/ncp_hdlc.cpp	/^NcpHdlc::NcpHdlc(Instance **aInstances, uint8_t aCount, otNcpHdlcSendCallback aSendCallback)$/;"	f	class:ot::Ncp::NcpHdlc
NcpHdlc	ncp/ncp_hdlc.cpp	/^NcpHdlc::NcpHdlc(Instance *aInstance, otNcpHdlcSendCallback aSendCallback)$/;"	f	class:ot::Ncp::NcpHdlc
NcpSpi	ncp/ncp_spi.cpp	/^NcpSpi::NcpSpi(Instance *aInstance)$/;"	f	class:ot::Ncp::NcpSpi
NcpVendorUart	ncp/example_vendor_hook.cpp	/^    NcpVendorUart(ot::Instance **aInstances, uint8_t count)$/;"	f	class:NcpVendorUart	file:
NcpVendorUart	ncp/example_vendor_hook.cpp	/^    NcpVendorUart(ot::Instance *aInstance)$/;"	f	class:NcpVendorUart	file:
NdProxy	core/backbone_router/ndproxy_table.hpp	/^        NdProxy(void) { Clear(); }$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy
NdProxyTable	core/backbone_router/ndproxy_table.hpp	/^    explicit NdProxyTable(Instance &aInstance)$/;"	f	class:ot::BackboneRouter::NdProxyTable
NeighborAdvertMessage	core/net/nd6.cpp	/^NeighborAdvertMessage::NeighborAdvertMessage(void)$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage
NeighborHasComparableConnectivity	core/thread/mle_router.cpp	/^bool MleRouter::NeighborHasComparableConnectivity(const RouteTlv &aRouteTlv, uint8_t aNeighborId/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
NeighborSolicitMessage	core/net/nd6.cpp	/^NeighborSolicitMessage::NeighborSolicitMessage(void)$/;"	f	class:ot::Ip6::Nd::NeighborSolicitMessage
NeighborTable	core/thread/neighbor_table.cpp	/^NeighborTable::NeighborTable(Instance &aInstance)$/;"	f	class:ot::NeighborTable
Netif	core/net/netif.cpp	/^Netif::Netif(Instance &aInstance)$/;"	f	class:ot::Ip6::Netif
NetmaskToPrefixLength	posix/platform/netif.cpp	/^static uint8_t NetmaskToPrefixLength(const struct sockaddr_in6 *netmask)$/;"	f	typeref:typename:uint8_t	file:
NetworkData	cli/cli_network_data.cpp	/^NetworkData::NetworkData(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::NetworkData
NetworkData	core/thread/network_data.hpp	/^    NetworkData(Instance &aInstance, const NetworkDataTlv *aStartTlv, const NetworkDataTlv *aEnd/;"	f	class:ot::NetworkData::NetworkData
NetworkData	core/thread/network_data.hpp	/^    explicit NetworkData(Instance &aInstance, const uint8_t *aTlvs = nullptr, uint8_t aLength = /;"	f	class:ot::NetworkData::NetworkData
NetworkDataContainsUlaRoute	core/border_router/routing_manager.cpp	/^bool RoutingManager::NetworkDataContainsUlaRoute(void) const$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:bool
NetworkDataIterator	core/thread/network_data.hpp	/^        explicit NetworkDataIterator(Iterator &aIterator)$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator
NetworkName	core/meshcop/network_name.hpp	/^    NetworkName(void) { m8[0] = '\\0'; }$/;"	f	class:ot::MeshCoP::NetworkName
NetworkNameManager	core/meshcop/network_name.cpp	/^NetworkNameManager::NetworkNameManager(Instance &aInstance)$/;"	f	class:ot::MeshCoP::NetworkNameManager
NewBuffer	core/common/message.cpp	/^Buffer *MessagePool::NewBuffer(Message::Priority aPriority)$/;"	f	class:ot::MessagePool	typeref:typename:Buffer *
NewCacheEntry	core/thread/address_resolver.cpp	/^AddressResolver::CacheEntry *AddressResolver::NewCacheEntry(bool aSnoopedEntry)$/;"	f	class:ot::AddressResolver	typeref:typename:AddressResolver::CacheEntry *
NewConfirmablePostMessage	core/coap/coap.cpp	/^Message *CoapBase::NewConfirmablePostMessage(Uri aUri) { return InitMessage(NewMessage(), kTypeC/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewIp4Message	core/net/nat64_translator.cpp	/^Message *Translator::NewIp4Message(const Message::Settings &aSettings)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Message *
NewMessage	core/coap/coap.cpp	/^Message *CoapBase::NewMessage(const Message::Settings &aSettings)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewMessage	core/coap/coap.cpp	/^Message *CoapBase::NewMessage(void) { return NewMessage(Message::Settings::GetDefault()); }$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewMessage	core/net/dns_dso.cpp	/^Message *Dso::Connection::NewMessage(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Message *
NewMessage	core/net/icmp6.cpp	/^Message *Icmp::NewMessage(void) { return Get<Ip6>().NewMessage(sizeof(Header)); }$/;"	f	class:ot::Ip6::Icmp	typeref:typename:Message *
NewMessage	core/net/ip6.cpp	/^Message *Ip6::NewMessage(uint16_t aReserved) { return NewMessage(aReserved, Message::Settings::G/;"	f	class:ot::Ip6::Ip6	typeref:typename:Message *
NewMessage	core/net/ip6.cpp	/^Message *Ip6::NewMessage(uint16_t aReserved, const Message::Settings &aSettings)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Message *
NewMessage	core/net/ip6.cpp	/^Message *Ip6::NewMessage(void) { return NewMessage(0); }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Message *
NewMessage	core/net/sntp_client.cpp	/^Message *Client::NewMessage(const Header &aHeader)$/;"	f	class:ot::Sntp::Client	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::NewMessage(uint16_t aReserved) { return NewMessage(aReserved, Message::Settings::G/;"	f	class:ot::Ip6::Udp	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::NewMessage(uint16_t aReserved, const Message::Settings &aSettings)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::NewMessage(void) { return NewMessage(0); }$/;"	f	class:ot::Ip6::Udp	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::Socket::NewMessage(uint16_t aReserved) { return NewMessage(aReserved, Message::Set/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::Socket::NewMessage(uint16_t aReserved, const Message::Settings &aSettings)$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Message *
NewMessage	core/net/udp6.cpp	/^Message *Udp::Socket::NewMessage(void) { return NewMessage(0); }$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Message *
NewMessageFromData	core/net/ip6.cpp	/^Message *Ip6::NewMessageFromData(const uint8_t *aData, uint16_t aDataLength, const Message::Sett/;"	f	class:ot::Ip6::Ip6	typeref:typename:Message *
NewMleMessage	core/thread/mle.cpp	/^Mle::TxMessage *Mle::NewMleMessage(Command aCommand)$/;"	f	class:ot::Mle::Mle	typeref:typename:Mle::TxMessage *
NewNonConfirmablePostMessage	core/coap/coap.cpp	/^Message *CoapBase::NewNonConfirmablePostMessage(Uri aUri)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewPriorityConfirmablePostMessage	core/coap/coap.cpp	/^Message *CoapBase::NewPriorityConfirmablePostMessage(Uri aUri)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewPriorityMessage	core/coap/coap.cpp	/^Message *CoapBase::NewPriorityMessage(void)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewPriorityNonConfirmablePostMessage	core/coap/coap.cpp	/^Message *CoapBase::NewPriorityNonConfirmablePostMessage(Uri aUri)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewPriorityResponseMessage	core/coap/coap.cpp	/^Message *CoapBase::NewPriorityResponseMessage(const Message &aRequest)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
NewResponseMessage	core/coap/coap.cpp	/^Message *CoapBase::NewResponseMessage(const Message &aRequest) { return InitResponse(NewMessage(/;"	f	class:ot::Coap::CoapBase	typeref:typename:Message *
Next	core/common/message.hpp	/^    Message       *&Next(void) { return GetMetadata().mNext; }$/;"	f	class:ot::Message	typeref:typename:Message * &
Next	core/common/message.hpp	/^    Message *const &Next(void) const { return GetMetadata().mNext; }$/;"	f	class:ot::Message	typeref:typename:Message * const &
Next	core/net/nd6.cpp	/^const Option *Option::Iterator::Next(const Option *aOption)$/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:const Option *
NextMessage	core/common/message.hpp	/^        static Message *NextMessage(Message *aMessage) { return (aMessage != nullptr) ? aMessage/;"	f	class:ot::Message::Iterator	typeref:typename:Message *
NextOf	core/common/message.hpp	/^    static Message       *NextOf(Message *aMessage) { return (aMessage != nullptr) ? aMessage->N/;"	f	class:ot::Message	typeref:typename:Message *
NextOf	core/common/message.hpp	/^    static const Message *NextOf(const Message *aMessage) { return (aMessage != nullptr) ? aMess/;"	f	class:ot::Message	typeref:typename:const Message *
NonCryptoGetUint32	core/common/random.cpp	/^uint32_t Manager::NonCryptoGetUint32(void)$/;"	f	class:ot::Random::Manager	typeref:typename:uint32_t
Notifier	core/common/notifier.cpp	/^Notifier::Notifier(Instance &aInstance)$/;"	f	class:ot::Notifier
Notifier	core/thread/network_data_notifier.cpp	/^Notifier::Notifier(Instance &aInstance)$/;"	f	class:ot::NetworkData::Notifier
Notify	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Notify(Event aEvent) const$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
NotifyDadComplete	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::NotifyDadComplete(NdProxyTable::NdProxy &aNdProxy, bool aDuplicated)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
NotifyDuaRegistrationOnBackboneLink	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::NotifyDuaRegistrationOnBackboneLink(NdProxyTable::NdProxy &aNdProxy, bool aIs/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
NotifyDuplicateDomainUnicastAddress	core/thread/dua_manager.cpp	/^void DuaManager::NotifyDuplicateDomainUnicastAddress(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
NotifyPrefixEntryChange	core/thread/network_data_publisher.cpp	/^void Publisher::NotifyPrefixEntryChange(Event aEvent, const Ip6::Prefix &aPrefix) const$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
NotifySwitchoverDone	ncp/ncp_base_radio.cpp	/^void NcpBase::NotifySwitchoverDone(bool aSuccess)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
NotifySwitchoverDone	ncp/ncp_base_radio.cpp	/^void NcpBase::NotifySwitchoverDone(otInstance *aInstance, bool aSuccess)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
NotifyTimeSyncCallback	core/thread/time_sync_service.cpp	/^void TimeSync::NotifyTimeSyncCallback(void) { mTimeSyncCallback.InvokeIfSet(); }$/;"	f	class:ot::TimeSync	typeref:typename:void
OmrPrefix	core/border_router/routing_manager.hpp	/^        OmrPrefix(void) { Clear(); }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefix
OmrPrefixManager	core/border_router/routing_manager.cpp	/^RoutingManager::OmrPrefixManager::OmrPrefixManager(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager
OnLinkPrefixManager	core/border_router/routing_manager.cpp	/^RoutingManager::OnLinkPrefixManager::OnLinkPrefixManager(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager
OnUpstreamQueryDone	core/net/dnssd_server.cpp	/^void Server::OnUpstreamQueryDone(UpstreamQueryTransaction &aQueryTransaction, Message *aResponse/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
Open	core/coap/coap_secure.cpp	/^Error CoapSecure::Open(uint16_t aMaxAttempts, AutoStopCallback aCallback, void *aContext)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Open	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Open(ReceiveHandler aReceiveHandler, ConnectedHandler aConnectedHandler, /;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
Open	core/net/udp6.cpp	/^Error Udp::Open(SocketHandle &aSocket, otUdpReceive aHandler, void *aContext)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
Open	core/net/udp6.cpp	/^Error Udp::Socket::Open(otUdpReceive aHandler, void *aContext) { return Get<Udp>().Open(*this, a/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
OpenFile	posix/platform/hdlc_interface.cpp	/^int HdlcInterface::OpenFile(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:int
OpenIp4Socket	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::OpenIp4Socket(uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
OpenIp6Socket	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::OpenIp6Socket(uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
OpenStruct	lib/spinel/spinel_decoder.cpp	/^otError Decoder::OpenStruct(void)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
OpenStruct	lib/spinel/spinel_encoder.cpp	/^otError Encoder::OpenStruct(void)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
OperationToString	core/mac/mac.cpp	/^const char *Mac::OperationToString(Operation aOperation)$/;"	f	class:ot::Mac::Mac	typeref:typename:const char *
OptionLengthForPrefix	core/net/nd6.cpp	/^uint8_t RouteInfoOption::OptionLengthForPrefix(uint8_t aPrefixLength)$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:uint8_t
OptionSizeForPrefix	core/net/nd6.hpp	/^    static uint16_t OptionSizeForPrefix(uint8_t aPrefixLength)$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:uint16_t
Otns	core/utils/otns.hpp	/^    explicit Otns(Instance &aInstance)$/;"	f	class:ot::Utils::Otns
OutFrameBegin	lib/spinel/spinel_buffer.cpp	/^otError Buffer::OutFrameBegin(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
OutFrameBegin	ncp/ncp_hdlc.cpp	/^otError NcpHdlc::BufferEncrypterReader::OutFrameBegin(void)$/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:otError
OutFrameFillMessageBuffer	lib/spinel/spinel_buffer.cpp	/^otError Buffer::OutFrameFillMessageBuffer(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
OutFrameGetLength	lib/spinel/spinel_buffer.cpp	/^uint16_t Buffer::OutFrameGetLength(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint16_t
OutFrameGetTag	lib/spinel/spinel_buffer.cpp	/^Buffer::FrameTag Buffer::OutFrameGetTag(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:Buffer::FrameTag
OutFrameHasEnded	lib/spinel/spinel_buffer.cpp	/^bool Buffer::OutFrameHasEnded(void) { return (mReadState == kReadStateDone) || (mReadState == kR/;"	f	class:ot::Spinel::Buffer	typeref:typename:bool
OutFrameHasEnded	ncp/ncp_hdlc.cpp	/^bool NcpHdlc::BufferEncrypterReader::OutFrameHasEnded(void) { return (mDataBufferReadIndex >= mO/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:bool
OutFramePrepareMessage	lib/spinel/spinel_buffer.cpp	/^otError Buffer::OutFramePrepareMessage(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
OutFramePrepareSegment	lib/spinel/spinel_buffer.cpp	/^otError Buffer::OutFramePrepareSegment(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
OutFrameRead	lib/spinel/spinel_buffer.cpp	/^uint16_t Buffer::OutFrameRead(uint16_t aReadLength, uint8_t *aDataBuffer)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint16_t
OutFrameReadByte	lib/spinel/spinel_buffer.cpp	/^uint8_t Buffer::OutFrameReadByte(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint8_t
OutFrameReadByte	ncp/ncp_hdlc.cpp	/^uint8_t NcpHdlc::BufferEncrypterReader::OutFrameReadByte(void) { return mDataBuffer[mDataBufferR/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:uint8_t
OutFrameRemove	lib/spinel/spinel_buffer.cpp	/^otError Buffer::OutFrameRemove(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:otError
OutFrameRemove	ncp/ncp_hdlc.cpp	/^otError NcpHdlc::BufferEncrypterReader::OutFrameRemove(void) { return mTxFrameBuffer.OutFrameRem/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:otError
OutFrameSelectReadDirection	lib/spinel/spinel_buffer.cpp	/^void Buffer::OutFrameSelectReadDirection(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
OutputActiveTimestamp	cli/cli_dataset.cpp	/^void Dataset::OutputActiveTimestamp(const otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputBenchmarkResult	cli/cli_tcp.cpp	/^void TcpExample::OutputBenchmarkResult(void)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
OutputBinary	cli/cli_network_data.cpp	/^otError NetworkData::OutputBinary(bool aLocal)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
OutputBorderRouterCounters	cli/cli.cpp	/^void Interpreter::OutputBorderRouterCounters(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputBytes	cli/cli_utils.cpp	/^void Utils::OutputBytes(const uint8_t *aBytes, uint16_t aLength)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputBytes	cli/cli_utils.hpp	/^    template <uint8_t kBytesLength> void OutputBytes(const uint8_t (&aBytes)[kBytesLength])$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputBytesLine	cli/cli_utils.cpp	/^void Utils::OutputBytesLine(const uint8_t *aBytes, uint16_t aLength)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputBytesLine	cli/cli_utils.hpp	/^    template <uint8_t kBytesLength> void OutputBytesLine(const uint8_t (&aBytes)[kBytesLength])$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputCallback	posix/cli_readline.cpp	/^static int OutputCallback(void *aContext, const char *aFormat, va_list aArguments)$/;"	f	typeref:typename:int	file:
OutputCallback	posix/cli_stdio.cpp	/^int OutputCallback(void *aContext, const char *aFormat, va_list aArguments)$/;"	f	namespace:__anon2e64ed520111	typeref:typename:int
OutputChannel	cli/cli_dataset.cpp	/^void Dataset::OutputChannel(const otOperationalDataset &aDataset) { OutputLine("%u", aDataset.mC/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputChannelMask	cli/cli_dataset.cpp	/^void Dataset::OutputChannelMask(const otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputChildTableEntry	cli/cli.cpp	/^void Interpreter::OutputChildTableEntry(uint8_t aIndentSize, const otNetworkDiagChildEntry &aChi/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputCommandTable	cli/cli_utils.hpp	/^    template <typename Cli, uint16_t kLength> void OutputCommandTable(const CommandEntry<Cli> (&/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputConfig	cli/cli_bbr.cpp	/^void Bbr::OutputConfig(const otBackboneRouterConfig &aConfig)$/;"	f	class:ot::Cli::Bbr	typeref:typename:void
OutputConnectivity	cli/cli.cpp	/^void Interpreter::OutputConnectivity(uint8_t aIndentSize, const otNetworkDiagConnectivity &aConn/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputDelay	cli/cli_dataset.cpp	/^void Dataset::OutputDelay(const otOperationalDataset &aDataset) { OutputLine("%lu", ToUlong(aDat/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputDnsServiceInfo	cli/cli_dns.cpp	/^void Dns::OutputDnsServiceInfo(uint8_t aIndentSize, const otDnsServiceInfo &aServiceInfo)$/;"	f	class:ot::Cli::Dns	typeref:typename:void
OutputDnsTxtData	cli/cli_utils.cpp	/^void Utils::OutputDnsTxtData(const uint8_t *aTxtData, uint16_t aTxtDataLength)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputEidCacheEntry	cli/cli.cpp	/^void Interpreter::OutputEidCacheEntry(const otCacheEntryInfo &aEntry)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputEnabledDisabledStatus	cli/cli_utils.cpp	/^void Utils::OutputEnabledDisabledStatus(bool aEnabled) { OutputLine(aEnabled ? "Enabled" : "Disa/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputEntry	cli/cli_mac_filter.cpp	/^void MacFilter::OutputEntry(const otMacFilterEntry &aEntry)$/;"	f	class:ot::Cli::MacFilter	typeref:typename:void
OutputExtAddress	cli/cli_utils.hpp	/^    void OutputExtAddress(const otExtAddress &aExtAddress) { OutputBytes(aExtAddress.m8); }$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputExtAddressLine	cli/cli_utils.hpp	/^    void OutputExtAddressLine(const otExtAddress &aExtAddress) { OutputBytesLine(aExtAddress.m8)/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputExtendedPanId	cli/cli_dataset.cpp	/^void Dataset::OutputExtendedPanId(const otOperationalDataset &aDataset) { OutputBytesLine(aDatas/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputFilter	cli/cli_mac_filter.cpp	/^void MacFilter::OutputFilter(uint8_t aFilters)$/;"	f	class:ot::Cli::MacFilter	typeref:typename:void
OutputFormat	cli/cli_utils.cpp	/^void Utils::OutputFormat(const char *aFormat, ...)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputFormat	cli/cli_utils.cpp	/^void Utils::OutputFormat(uint8_t aIndentSize, const char *aFormat, ...)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputFormat	posix/platform/daemon.cpp	/^int Daemon::OutputFormat(const char *aFormat, ...)$/;"	f	class:ot::Posix::Daemon	typeref:typename:int
OutputFormatV	cli/cli_utils.cpp	/^void Utils::OutputFormatV(const char *aFormat, va_list aArguments) { mImplementer.OutputV(aForma/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputFormatV	posix/platform/daemon.cpp	/^int Daemon::OutputFormatV(const char *aFormat, va_list aArguments)$/;"	f	class:ot::Posix::Daemon	typeref:typename:int
OutputHost	cli/cli_mdns.cpp	/^void Mdns::OutputHost(const otMdnsHost &aHost)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
OutputHostAddresses	cli/cli_srp_server.cpp	/^void SrpServer::OutputHostAddresses(const otSrpServerHost *aHost)$/;"	f	class:ot::Cli::SrpServer	typeref:typename:void
OutputHostInfo	cli/cli_srp_client.cpp	/^void SrpClient::OutputHostInfo(uint8_t aIndentSize, const otSrpClientHostInfo &aHostInfo)$/;"	f	class:ot::Cli::SrpClient	typeref:typename:void
OutputImplementer	cli/cli_utils.cpp	/^OutputImplementer::OutputImplementer(otCliOutputCallback aCallback, void *aCallbackContext)$/;"	f	class:ot::Cli::OutputImplementer
OutputIp6Address	cli/cli_utils.cpp	/^void Utils::OutputIp6Address(const otIp6Address &aAddress)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputIp6AddressLine	cli/cli_utils.cpp	/^void Utils::OutputIp6AddressLine(const otIp6Address &aAddress)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputIp6Prefix	cli/cli_utils.cpp	/^void Utils::OutputIp6Prefix(const otIp6NetworkPrefix &aPrefix)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputIp6Prefix	cli/cli_utils.cpp	/^void Utils::OutputIp6Prefix(const otIp6Prefix &aPrefix)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputIp6PrefixLine	cli/cli_utils.cpp	/^void Utils::OutputIp6PrefixLine(const otIp6NetworkPrefix &aPrefix)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputIp6PrefixLine	cli/cli_utils.cpp	/^void Utils::OutputIp6PrefixLine(const otIp6Prefix &aPrefix)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputKey	cli/cli_mdns.cpp	/^void Mdns::OutputKey(const otMdnsKey &aKey)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
OutputLeaderData	cli/cli.cpp	/^void Interpreter::OutputLeaderData(uint8_t aIndentSize, const otLeaderData &aLeaderData)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputLine	cli/cli_utils.cpp	/^void Utils::OutputLine(const char *aFormat, ...)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputLine	cli/cli_utils.cpp	/^void Utils::OutputLine(uint8_t aIndentSize, const char *aFormat, ...)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputMeshLocalPrefix	cli/cli_dataset.cpp	/^void Dataset::OutputMeshLocalPrefix(const otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputMode	cli/cli.cpp	/^void Interpreter::OutputMode(uint8_t aIndentSize, const otLinkModeConfig &aMode)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputMultiRadioInfo	cli/cli.cpp	/^void Interpreter::OutputMultiRadioInfo(const otMultiRadioNeighborInfo &aMultiRadioInfo)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputNat64Counters	cli/cli.cpp	/^void Interpreter::OutputNat64Counters(const otNat64Counters &aCounters)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputNetworkData	cli/cli_network_data.cpp	/^void NetworkData::OutputNetworkData(bool aLocal, uint16_t aRloc16)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
OutputNetworkDiagMacCounters	cli/cli.cpp	/^void Interpreter::OutputNetworkDiagMacCounters(uint8_t aIndentSize, const otNetworkDiagMacCounte/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputNetworkDiagMleCounters	cli/cli.cpp	/^void Interpreter::OutputNetworkDiagMleCounters(uint8_t aIndentSize, const otNetworkDiagMleCounte/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputNetworkKey	cli/cli_dataset.cpp	/^void Dataset::OutputNetworkKey(const otOperationalDataset &aDataset) { OutputBytesLine(aDataset./;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputNetworkName	cli/cli_dataset.cpp	/^void Dataset::OutputNetworkName(const otOperationalDataset &aDataset) { OutputLine("%s", aDatase/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputNewLine	cli/cli_utils.cpp	/^void Utils::OutputNewLine(void) { OutputFormat("\\r\\n"); }$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputPanId	cli/cli_dataset.cpp	/^void Dataset::OutputPanId(const otOperationalDataset &aDataset) { OutputLine("0x%04x", aDataset./;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputPendingTimestamp	cli/cli_dataset.cpp	/^void Dataset::OutputPendingTimestamp(const otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputPrefix	cli/cli_network_data.cpp	/^void NetworkData::OutputPrefix(const otBorderRouterConfig &aConfig)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
OutputPrompt	cli/cli.cpp	/^void Interpreter::OutputPrompt(void)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputPskc	cli/cli_dataset.cpp	/^void Dataset::OutputPskc(const otOperationalDataset &aDataset) { OutputBytesLine(aDataset.mPskc./;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputRadioStatsTime	cli/cli.cpp	/^void Interpreter::OutputRadioStatsTime(const char *aTimeName, uint64_t aTimeUs, uint64_t aTotalT/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputResult	cli/cli.cpp	/^void Interpreter::OutputResult(otError aError)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputResult	cli/cli_dns.cpp	/^void Dns::OutputResult(otError aError) { Interpreter::GetInterpreter().OutputResult(aError); }$/;"	f	class:ot::Cli::Dns	typeref:typename:void
OutputResult	cli/cli_link_metrics.cpp	/^void LinkMetrics::OutputResult(otError aError) { Interpreter::GetInterpreter().OutputResult(aErr/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
OutputResult	cli/cli_ping.cpp	/^void PingSender::OutputResult(otError aError) { Interpreter::GetInterpreter().OutputResult(aErro/;"	f	class:ot::Cli::PingSender	typeref:typename:void
OutputRoute	cli/cli.cpp	/^void Interpreter::OutputRoute(uint8_t aIndentSize, const otNetworkDiagRoute &aRoute)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputRoute	cli/cli_network_data.cpp	/^void NetworkData::OutputRoute(const otExternalRouteConfig &aConfig)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
OutputRouteData	cli/cli.cpp	/^void Interpreter::OutputRouteData(uint8_t aIndentSize, const otNetworkDiagRouteData &aRouteData)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputRouterInfo	cli/cli_br.cpp	/^void Br::OutputRouterInfo(const otBorderRoutingRouterEntry &aEntry, RouterOutputMode aMode)$/;"	f	class:ot::Cli::Br	typeref:typename:void
OutputRxTxEntryListFormat	cli/cli_history.cpp	/^void History::OutputRxTxEntryListFormat(const otHistoryTrackerMessageInfo &aInfo, uint32_t aEntr/;"	f	class:ot::Cli::History	typeref:typename:void
OutputRxTxEntryTableFormat	cli/cli_history.cpp	/^void History::OutputRxTxEntryTableFormat(const otHistoryTrackerMessageInfo &aInfo, uint32_t aEnt/;"	f	class:ot::Cli::History	typeref:typename:void
OutputSecurityPolicy	cli/cli_dataset.cpp	/^void Dataset::OutputSecurityPolicy(const otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputSecurityPolicy	cli/cli_dataset.cpp	/^void Dataset::OutputSecurityPolicy(const otSecurityPolicy &aSecurityPolicy)$/;"	f	class:ot::Cli::Dataset	typeref:typename:void
OutputService	cli/cli_mdns.cpp	/^void Mdns::OutputService(const otMdnsService &aService)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
OutputService	cli/cli_network_data.cpp	/^void NetworkData::OutputService(const otServiceConfig &aConfig)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
OutputService	cli/cli_srp_client.cpp	/^void SrpClient::OutputService(uint8_t aIndentSize, const otSrpClientService &aService)$/;"	f	class:ot::Cli::SrpClient	typeref:typename:void
OutputServiceList	cli/cli_srp_client.cpp	/^void SrpClient::OutputServiceList(uint8_t aIndentSize, const otSrpClientService *aServices)$/;"	f	class:ot::Cli::SrpClient	typeref:typename:void
OutputSockAddr	cli/cli_utils.cpp	/^void Utils::OutputSockAddr(const otSockAddr &aSockAddr)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputSockAddrLine	cli/cli_utils.cpp	/^void Utils::OutputSockAddrLine(const otSockAddr &aSockAddr)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputSpaces	cli/cli_utils.cpp	/^void Utils::OutputSpaces(uint8_t aCount) { OutputFormat("%*s", aCount, ""); }$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputState	cli/cli_mdns.cpp	/^void Mdns::OutputState(otMdnsEntryState aState)$/;"	f	class:ot::Cli::Mdns	typeref:typename:void
OutputTableHeader	cli/cli_utils.cpp	/^void Utils::OutputTableHeader(uint8_t aNumColumns, const char *const aTitles[], const uint8_t aW/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputTableHeader	cli/cli_utils.hpp	/^    void OutputTableHeader(const char *const (&aTitles)[kTableNumColumns], const uint8_t (&aWidt/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputTableSeparator	cli/cli_utils.cpp	/^void Utils::OutputTableSeparator(uint8_t aNumColumns, const uint8_t aWidths[])$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputTableSeparator	cli/cli_utils.hpp	/^    template <uint8_t kTableNumColumns> void OutputTableSeparator(const uint8_t (&aWidths)[kTabl/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputTrelCounters	cli/cli.cpp	/^void Interpreter::OutputTrelCounters(const otTrelCounters &aCounters)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
OutputUint64	cli/cli_utils.cpp	/^void Utils::OutputUint64(uint64_t aUint64)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputUint64Line	cli/cli_utils.cpp	/^void Utils::OutputUint64Line(uint64_t aUint64)$/;"	f	class:ot::Cli::Utils	typeref:typename:void
OutputV	cli/cli_utils.cpp	/^void OutputImplementer::OutputV(const char *aFormat, va_list aArguments)$/;"	f	class:ot::Cli::OutputImplementer	typeref:typename:void
OverwriteWithLastStatusError	lib/spinel/spinel_encoder.cpp	/^otError Encoder::OverwriteWithLastStatusError(spinel_status_t aStatus)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
OwnedPtr	core/common/owned_ptr.hpp	/^    OwnedPtr(OwnedPtr &&aOther)$/;"	f	class:ot::OwnedPtr
OwnedPtr	core/common/owned_ptr.hpp	/^    explicit OwnedPtr(Type *aPointer)$/;"	f	class:ot::OwnedPtr
PackRadioFrame	ncp/ncp_base_radio.cpp	/^otError NcpBase::PackRadioFrame(otRadioFrame *aFrame, otError aError)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
PanIdQueryClient	core/meshcop/panid_query_client.cpp	/^PanIdQueryClient::PanIdQueryClient(Instance &aInstance)$/;"	f	class:ot::PanIdQueryClient
PanIdQueryServer	core/thread/panid_query_server.cpp	/^PanIdQueryServer::PanIdQueryServer(Instance &aInstance)$/;"	f	class:ot::PanIdQueryServer
PanIds	core/mac/mac_types.hpp	/^    PanIds(void) { Clear(); }$/;"	f	class:ot::Mac::PanIds
ParentSearch	core/thread/mle.hpp	/^        explicit ParentSearch(Instance &aInstance)$/;"	f	class:ot::Mle::Mle::ParentSearch
Parse	core/meshcop/meshcop_tlvs.cpp	/^Error ChannelMaskTlv::EntriesData::Parse(uint32_t &aChannelMask)$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::EntriesData	typeref:typename:Error
ParseActiveTimestamp	cli/cli_dataset.cpp	/^otError Dataset::ParseActiveTimestamp(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseArg	posix/client.cpp	/^Config ParseArg(int &aArgCount, char **&aArgVector)$/;"	f	namespace:__anon7e280f770111	typeref:typename:Config
ParseArg	posix/main.c	/^static void ParseArg(int aArgCount, char *aArgVector[], PosixConfig *aConfig)$/;"	f	typeref:typename:void	file:
ParseArgs	cli/cli_history.cpp	/^otError History::ParseArgs(Arg aArgs[], bool &aIsList, uint16_t &aNumEntries) const$/;"	f	class:ot::Cli::History	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(bool &aValue) const { return ParseAsBool(aValue); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(const char *&aValue) const$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(int16_t &aValue) const { return ParseAsInt16(aValue); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(int32_t &aValue) const { return ParseAsInt32(aValue); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(int8_t &aValue) const { return ParseAsInt8(aValue); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(otIp6Address &aValue) const { return ParseAsIp6Address(a/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(otIp6Prefix &aValue) const { return ParseAsIp6Prefix(aVa/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(uint16_t &aValue) const { return ParseAsUint16(aValue); /;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(uint32_t &aValue) const { return ParseAsUint32(aValue); /;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(uint64_t &aValue) const { return ParseAsUint64(aValue); /;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAs	core/utils/parse_cmdline.hpp	/^template <> inline otError Arg::ParseAs(uint8_t &aValue) const { return ParseAsUint8(aValue); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsBool	core/utils/parse_cmdline.cpp	/^Error ParseAsBool(const char *aString, bool &aBool)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsBool	core/utils/parse_cmdline.hpp	/^    otError ParseAsBool(bool &aBool) const { return CmdLineParser::ParseAsBool(mString, aBool); /;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsHexString	core/utils/parse_cmdline.cpp	/^Error ParseAsHexString(const char *aString, uint16_t &aSize, uint8_t *aBuffer)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsHexString	core/utils/parse_cmdline.cpp	/^Error ParseAsHexString(const char *aString, uint8_t *aBuffer, uint16_t aSize)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsHexString	core/utils/parse_cmdline.hpp	/^    otError ParseAsHexString(uint16_t &aSize, uint8_t *aBuffer)$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsHexString	core/utils/parse_cmdline.hpp	/^    otError ParseAsHexString(uint8_t *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsHexString	core/utils/parse_cmdline.hpp	/^    template <uint16_t kBufferSize> otError ParseAsHexString(uint8_t (&aBuffer)[kBufferSize])$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsHexString	core/utils/parse_cmdline.hpp	/^template <uint16_t kBufferSize> static otError ParseAsHexString(const char *aString, uint8_t (&a/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:otError
ParseAsHexStringSegment	core/utils/parse_cmdline.cpp	/^Error ParseAsHexStringSegment(const char *&aString, uint16_t &aSize, uint8_t *aBuffer)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsInt16	core/utils/parse_cmdline.cpp	/^Error ParseAsInt16(const char *aString, int16_t &aInt16) { return ParseInt<int16_t>(aString, aIn/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsInt16	core/utils/parse_cmdline.hpp	/^    otError ParseAsInt16(int16_t &aInt16) const { return CmdLineParser::ParseAsInt16(mString, aI/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsInt32	core/utils/parse_cmdline.cpp	/^Error ParseAsInt32(const char *aString, int32_t &aInt32)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsInt32	core/utils/parse_cmdline.hpp	/^    otError ParseAsInt32(int32_t &aInt32) const { return CmdLineParser::ParseAsInt32(mString, aI/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsInt8	core/utils/parse_cmdline.cpp	/^Error ParseAsInt8(const char *aString, int8_t &aInt8) { return ParseInt<int8_t>(aString, aInt8);/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsInt8	core/utils/parse_cmdline.hpp	/^    otError ParseAsInt8(int8_t &aInt8) const { return CmdLineParser::ParseAsInt8(mString, aInt8)/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsIp4Address	core/utils/parse_cmdline.cpp	/^Error ParseAsIp4Address(const char *aString, otIp4Address &aAddress)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsIp4Address	core/utils/parse_cmdline.hpp	/^    otError ParseAsIp4Address(otIp4Address &aAddress) const$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsIp6Address	core/utils/parse_cmdline.cpp	/^Error ParseAsIp6Address(const char *aString, otIp6Address &aAddress)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsIp6Address	core/utils/parse_cmdline.hpp	/^    otError ParseAsIp6Address(otIp6Address &aAddress) const$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsIp6Prefix	core/utils/parse_cmdline.cpp	/^Error ParseAsIp6Prefix(const char *aString, otIp6Prefix &aPrefix)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsIp6Prefix	core/utils/parse_cmdline.hpp	/^    otError ParseAsIp6Prefix(otIp6Prefix &aPrefix) const { return CmdLineParser::ParseAsIp6Prefi/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsUint16	core/utils/parse_cmdline.cpp	/^Error ParseAsUint16(const char *aString, uint16_t &aUint16) { return ParseUint<uint16_t>(aString/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsUint16	core/utils/parse_cmdline.hpp	/^    otError ParseAsUint16(uint16_t &aUint16) const { return CmdLineParser::ParseAsUint16(mString/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsUint32	core/utils/parse_cmdline.cpp	/^Error ParseAsUint32(const char *aString, uint32_t &aUint32) { return ParseUint<uint32_t>(aString/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsUint32	core/utils/parse_cmdline.hpp	/^    otError ParseAsUint32(uint32_t &aUint32) const { return CmdLineParser::ParseAsUint32(mString/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsUint64	core/utils/parse_cmdline.cpp	/^Error ParseAsUint64(const char *aString, uint64_t &aUint64)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsUint64	core/utils/parse_cmdline.hpp	/^    otError ParseAsUint64(uint64_t &aUint64) const { return CmdLineParser::ParseAsUint64(mString/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseAsUint8	core/utils/parse_cmdline.cpp	/^Error ParseAsUint8(const char *aString, uint8_t &aUint8) { return ParseUint<uint8_t>(aString, aU/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseAsUint8	core/utils/parse_cmdline.hpp	/^    otError ParseAsUint8(uint8_t &aUint8) const { return CmdLineParser::ParseAsUint8(mString, aU/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:otError
ParseBool	core/diags/factory_diags.cpp	/^Error Diags::ParseBool(char *aString, bool &aBool)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ParseChannel	cli/cli_dataset.cpp	/^otError Dataset::ParseChannel(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseChannelMask	cli/cli_dataset.cpp	/^otError Dataset::ParseChannelMask(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseCmd	core/diags/factory_diags.cpp	/^Error Diags::ParseCmd(char *aString, uint8_t &aArgsLength, char *aArgs[])$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ParseCmd	core/utils/parse_cmdline.cpp	/^Error ParseCmd(char *aCommandString, Arg aArgs[], uint8_t aArgsMaxLength)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseCmd	core/utils/parse_cmdline.hpp	/^template <uint8_t kLength> inline otError ParseCmd(char *aCommandString, Arg (&aArgs)[kLength])$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:otError
ParseDelay	cli/cli_dataset.cpp	/^otError Dataset::ParseDelay(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseDigit	core/common/string.cpp	/^Error ParseDigit(char aDigitChar, uint8_t &aValue)$/;"	f	namespace:ot	typeref:typename:Error
ParseDnsServiceMode	cli/cli_dns.cpp	/^otError Dns::ParseDnsServiceMode(const Arg &aArg, otDnsServiceMode &aMode) const$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
ParseEnableOrDisable	cli/cli_utils.cpp	/^otError Utils::ParseEnableOrDisable(const Arg &aArg, bool &aEnable)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParseExtendedPanId	cli/cli_dataset.cpp	/^otError Dataset::ParseExtendedPanId(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseFrom	core/common/tlvs.cpp	/^Error Tlv::ParsedInfo::ParseFrom(const Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Tlv::ParsedInfo	typeref:typename:Error
ParseFrom	core/net/ip4_types.cpp	/^Error Header::ParseFrom(const Message &aMessage)$/;"	f	class:ot::Ip4::Header	typeref:typename:Error
ParseFrom	core/net/ip6.cpp	/^Error Headers::ParseFrom(const Message &aMessage)$/;"	f	class:ot::Ip6::Headers	typeref:typename:Error
ParseFrom	core/net/ip6_address.cpp	/^Error Address::ParseFrom(const char *aString, char aTerminatorChar)$/;"	f	class:ot::Ip6::Address	typeref:typename:Error
ParseFrom	core/net/ip6_headers.cpp	/^Error Header::ParseFrom(const Message &aMessage)$/;"	f	class:ot::Ip6::Header	typeref:typename:Error
ParseFrom	core/net/ip6_headers.cpp	/^Error Option::ParseFrom(const Message &aMessage, uint16_t aOffset, uint16_t aEndOffset)$/;"	f	class:ot::Ip6::Option	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error FragmentHeader::ParseFrom(FrameData &aFrameData)$/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error FragmentHeader::ParseFrom(const Message &aMessage, uint16_t aOffset, uint16_t &aHeaderLeng/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error FragmentHeader::ParseFrom(const uint8_t *aFrame, uint16_t aFrameLength, uint16_t &aHeaderL/;"	f	class:ot::Lowpan::FragmentHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error MeshHeader::ParseFrom(FrameData &aFrameData)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error MeshHeader::ParseFrom(const Message &aMessage)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error MeshHeader::ParseFrom(const Message &aMessage, uint16_t &aHeaderLength)$/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
ParseFrom	core/thread/lowpan.cpp	/^Error MeshHeader::ParseFrom(const uint8_t *aFrame, uint16_t aFrameLength, uint16_t &aHeaderLengt/;"	f	class:ot::Lowpan::MeshHeader	typeref:typename:Error
ParseFrom	core/utils/mesh_diag.cpp	/^Error MeshDiag::RouterInfo::ParseFrom(const Message &aMessage)$/;"	f	class:ot::Utils::MeshDiag::RouterInfo	typeref:typename:Error
ParseHeader	core/coap/coap_message.cpp	/^Error Message::ParseHeader(void)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
ParseHexDigit	core/common/string.cpp	/^Error ParseHexDigit(char aHexChar, uint8_t &aValue)$/;"	f	namespace:ot	typeref:typename:Error
ParseHexString	core/utils/parse_cmdline.cpp	/^static Error ParseHexString(const char *&aString, uint16_t &aSize, uint8_t *aBuffer, HexStringPa/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error	file:
ParseInt	core/utils/parse_cmdline.cpp	/^template <typename IntType> Error ParseInt(const char *aString, IntType &aInt)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseInt16	lib/url/url.cpp	/^otError Url::ParseInt16(const char *aName, int16_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
ParseInt32	lib/url/url.cpp	/^otError Url::ParseInt32(const char *aName, int32_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
ParseInt8	lib/url/url.cpp	/^otError Url::ParseInt8(const char *aName, int8_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
ParseJoinerDiscerner	cli/cli_utils.cpp	/^otError Utils::ParseJoinerDiscerner(Arg &aArg, otJoinerDiscerner &aDiscerner)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParseLinkMetricsFlags	cli/cli_link_metrics.cpp	/^otError LinkMetrics::ParseLinkMetricsFlags(otLinkMetrics &aLinkMetrics, const Arg &aFlags)$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:otError
ParseLong	core/diags/factory_diags.cpp	/^Error Diags::ParseLong(char *aString, long &aLong)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ParseMacCounters	core/thread/network_diagnostic.cpp	/^static inline void ParseMacCounters(const MacCountersTlv &aMacCountersTlv, otNetworkDiagMacCount/;"	f	namespace:ot::NetworkDiagnostic	typeref:typename:void	file:
ParseMeshLocalPrefix	cli/cli_dataset.cpp	/^otError Dataset::ParseMeshLocalPrefix(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseMlrResponse	core/thread/mlr_manager.cpp	/^Error MlrManager::ParseMlrResponse(Error          aResult,$/;"	f	class:ot::MlrManager	typeref:typename:Error
ParseName	core/net/dns_types.cpp	/^Error Name::ParseName(const Message &aMessage, uint16_t &aOffset)$/;"	f	class:ot::Dns::Name	typeref:typename:Error
ParseNetworkKey	cli/cli_dataset.cpp	/^otError Dataset::ParseNetworkKey(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseNetworkName	cli/cli_dataset.cpp	/^otError Dataset::ParseNetworkName(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParsePanId	cli/cli_dataset.cpp	/^otError Dataset::ParsePanId(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParsePeerInfoTxtData	core/radio/trel_interface.cpp	/^Error Interface::ParsePeerInfoTxtData(const Peer::Info       &aInfo,$/;"	f	class:ot::Trel::Interface	typeref:typename:Error
ParsePendingTimestamp	cli/cli_dataset.cpp	/^otError Dataset::ParsePendingTimestamp(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParsePingInterval	cli/cli_ping.cpp	/^otError PingSender::ParsePingInterval(const Arg &aArg, uint32_t &aInterval)$/;"	f	class:ot::Cli::PingSender	typeref:typename:otError
ParsePreference	cli/cli_utils.cpp	/^otError Utils::ParsePreference(const Arg &aArg, otRoutePreference &aPreference)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParsePrefix	cli/cli_utils.cpp	/^otError Utils::ParsePrefix(Arg aArgs[], otBorderRouterConfig &aConfig)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParsePrefixTypeArgs	cli/cli_br.cpp	/^otError Br::ParsePrefixTypeArgs(Arg aArgs[], PrefixType &aFlags)$/;"	f	class:ot::Cli::Br	typeref:typename:otError
ParsePskc	cli/cli_dataset.cpp	/^otError Dataset::ParsePskc(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseQueryName	core/net/dnssd_server.cpp	/^Error Server::Response::ParseQueryName(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
ParseQuestionNameAsSubType	core/net/mdns.cpp	/^bool Core::RxMessage::ParseQuestionNameAsSubType(const Question    &aQuestion,$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
ParseQuestions	core/net/dnssd_server.cpp	/^Server::ResponseCode Server::Request::ParseQuestions(uint8_t aTestMode)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Request	typeref:typename:Server::ResponseCode
ParseRadioFrame	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ParseRadioFrame(otRadioFrame   &aFrame,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ParseRecords	core/net/dns_types.cpp	/^Error ResourceRecord::ParseRecords(const Message &aMessage, uint16_t &aOffset, uint16_t aNumReco/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
ParseResponse	core/net/dns_client.cpp	/^Error Client::ParseResponse(const Message &aResponseMessage, Query *&aQuery, Error &aResponseErr/;"	f	class:ot::Dns::Client	typeref:typename:Error
ParseRoute	cli/cli_utils.cpp	/^otError Utils::ParseRoute(Arg aArgs[], otExternalRouteConfig &aConfig)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParseRoute	core/thread/network_diagnostic.cpp	/^static void ParseRoute(const RouteTlv &aRouteTlv, otNetworkDiagRoute &aNetworkDiagRoute)$/;"	f	namespace:ot::NetworkDiagnostic	typeref:typename:void	file:
ParseSecurityPolicy	cli/cli_dataset.cpp	/^otError Dataset::ParseSecurityPolicy(Arg *&aArgs, otOperationalDataset &aDataset)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseSecurityPolicy	cli/cli_dataset.cpp	/^otError Dataset::ParseSecurityPolicy(otSecurityPolicy &aSecurityPolicy, Arg *&aArgs)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ParseServiceArgs	cli/cli_mdns.cpp	/^otError Mdns::ParseServiceArgs(Arg aArgs[], otMdnsService &aService, Buffers &aBuffers)$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
ParseStartOrStop	cli/cli_mdns.cpp	/^otError Mdns::ParseStartOrStop(const Arg &aArg, bool &aIsStart)$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
ParseSubTypeServiceName	core/net/srp_server.cpp	/^Error Server::Service::ParseSubTypeServiceName(const char *aSubTypeServiceName, char *aLabel, ui/;"	f	class:ot::Srp::Server::Service	typeref:typename:Error
ParseSubTypeServiceName	core/net/srp_server.hpp	/^        static Error ParseSubTypeServiceName(const char *aSubTypeServiceName, char (&aLabel)[kLa/;"	f	class:ot::Srp::Server::Service	typeref:typename:Error
ParseToIp6Address	cli/cli_utils.cpp	/^otError Utils::ParseToIp6Address(otInstance *aInstance, const Arg &aArg, otIp6Address &aAddress,/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ParseUint	core/utils/parse_cmdline.cpp	/^template <typename UintType> Error ParseUint(const char *aString, UintType &aUint)$/;"	f	namespace:ot::Utils::CmdLineParser	typeref:typename:Error
ParseUint16	lib/url/url.cpp	/^otError Url::ParseUint16(const char *aName, uint16_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
ParseUint32	lib/url/url.cpp	/^otError Url::ParseUint32(const char *aName, uint32_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
ParseUint8	lib/url/url.cpp	/^otError Url::ParseUint8(const char *aName, uint8_t &aValue) const$/;"	f	class:ot::Url::Url	typeref:typename:otError
PassOwnership	core/common/owned_ptr.hpp	/^    OwnedPtr &&PassOwnership(void) { return static_cast<OwnedPtr &&>(*this); }$/;"	f	class:ot::OwnedPtr	typeref:typename:OwnedPtr &&
PassToHost	core/net/ip6.cpp	/^Error Ip6::PassToHost(OwnedPtr<Message> &aMessagePtr,$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
PathForUri	core/thread/uri_paths.cpp	/^const char *PathForUri(Uri aUri)$/;"	f	namespace:ot	typeref:typename:const char *
Pause	core/net/srp_client.cpp	/^void Client::Pause(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
PauseMessageTransmissions	core/thread/mesh_forwarder.hpp	/^    void PauseMessageTransmissions(void) { mTxPaused = true; }$/;"	f	class:ot::MeshForwarder	typeref:typename:void
Payload	core/crypto/aes_ccm.cpp	/^void AesCcm::Payload(Message &aMessage, uint16_t aOffset, uint16_t aLength, Mode aMode)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
Payload	core/crypto/aes_ccm.cpp	/^void AesCcm::Payload(void *aPlainText, void *aCipherText, uint32_t aLength, Mode aMode)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
PdPrefixManager	core/border_router/routing_manager.cpp	/^RoutingManager::PdPrefixManager::PdPrefixManager(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager
PendingDatasetManager	core/meshcop/dataset_manager.cpp	/^PendingDatasetManager::PendingDatasetManager(Instance &aInstance)$/;"	f	class:ot::MeshCoP::PendingDatasetManager
PercentageToString	cli/cli_utils.cpp	/^const char *Utils::PercentageToString(uint16_t aValue, PercentageStringBuffer &aBuffer)$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
PerformActiveScan	core/mac/mac.cpp	/^void Mac::PerformActiveScan(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
PerformEnergyScan	core/mac/mac.cpp	/^void Mac::PerformEnergyScan(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
PerformNextOperation	core/mac/mac.cpp	/^void Mac::PerformNextOperation(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
PerformNextRegistration	core/thread/dua_manager.cpp	/^void DuaManager::PerformNextRegistration(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
PermitsAllJoiners	core/meshcop/meshcop.hpp	/^    bool PermitsAllJoiners(void) const { return (mLength > 0) && DoesAllMatch(kPermitAll); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:bool
Permute	core/utils/verhoeff_checksum.cpp	/^uint8_t VerhoeffChecksum::Permute(uint8_t aPosition, uint8_t aValue)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:uint8_t
Ping	core/utils/ping_sender.cpp	/^Error PingSender::Ping(const Config &aConfig)$/;"	f	class:ot::Utils::PingSender	typeref:typename:Error
PingSender	cli/cli_ping.cpp	/^PingSender::PingSender(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::PingSender
PingSender	core/utils/ping_sender.cpp	/^PingSender::PingSender(Instance &aInstance)$/;"	f	class:ot::Utils::PingSender
PlatDiagProcess	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::PlatDiagProcess(const char *aString, char *aOutput, size_t aOutputMaxLen)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
PlatformSettingsAdd	posix/platform/settings.cpp	/^void PlatformSettingsAdd(otInstance *aInstance, uint16_t aKey, const uint8_t *aValue, uint16_t a/;"	f	namespace:ot::Posix	typeref:typename:void
PlatformSettingsDelete	posix/platform/settings.cpp	/^otError PlatformSettingsDelete(otInstance *aInstance, uint16_t aKey, int aIndex, int *aSwapFd)$/;"	f	namespace:ot::Posix	typeref:typename:otError
PlatformSettingsGet	posix/platform/settings.cpp	/^otError PlatformSettingsGet(otInstance *aInstance, uint16_t aKey, int aIndex, uint8_t *aValue, u/;"	f	namespace:ot::Posix	typeref:typename:otError
PlatformSettingsGetSensitiveKeys	posix/platform/settings.cpp	/^void PlatformSettingsGetSensitiveKeys(otInstance *aInstance, const uint16_t **aKeys, uint16_t *a/;"	f	namespace:ot::Posix	typeref:typename:void
PlatformSettingsSet	posix/platform/settings.cpp	/^void PlatformSettingsSet(otInstance *aInstance, uint16_t aKey, const uint8_t *aValue, uint16_t a/;"	f	namespace:ot::Posix	typeref:typename:void
Pool	core/common/pool.hpp	/^    Pool(void)$/;"	f	class:ot::Pool
Pool	core/common/pool.hpp	/^    explicit Pool(Instance &aInstance)$/;"	f	class:ot::Pool
Pop	core/common/linked_list.hpp	/^    Type *Pop(void)$/;"	f	class:ot::LinkedList	typeref:typename:Type *
Pop	core/common/owning_list.hpp	/^    OwnedPtr<Type> Pop(void) { return OwnedPtr<Type>(LinkedList<Type>::Pop()); }$/;"	f	class:ot::OwningList	typeref:typename:OwnedPtr<Type>
PopAfter	core/common/linked_list.hpp	/^    Type *PopAfter(Type *aPrevEntry)$/;"	f	class:ot::LinkedList	typeref:typename:Type *
PopAfter	core/common/owning_list.hpp	/^    OwnedPtr<Type> PopAfter(Type *aPrevEntry) { return OwnedPtr<Type>(LinkedList<Type>::PopAfter/;"	f	class:ot::OwningList	typeref:typename:OwnedPtr<Type>
PopBack	core/common/array.hpp	/^    Type *PopBack(void) { return IsEmpty() ? nullptr : &mElements[--mLength]; }$/;"	f	class:ot::Array	typeref:typename:Type *
PopBack	core/common/heap_array.hpp	/^    void PopBack(void)$/;"	f	class:ot::Heap::Array	typeref:typename:void
PopulateFrom	core/net/dns_client.cpp	/^void Client::Response::PopulateFrom(const Message &aMessage)$/;"	f	class:ot::Dns::Client::Response	typeref:typename:void
PopulateMultiRadioInfo	core/thread/radio_selector.cpp	/^void RadioSelector::NeighborInfo::PopulateMultiRadioInfo(MultiRadioInfo &aInfo)$/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:void
PopulateResponse	core/net/dns_client.cpp	/^Client::Query *Client::PopulateResponse(Response &aResponse, Query &aQuery, const Message &aResp/;"	f	class:ot::Dns::Client	typeref:typename:Client::Query *
Post	core/common/tasklet.cpp	/^void Tasklet::Post(void)$/;"	f	class:ot::Tasklet	typeref:typename:void
PostCallbacksAfterSend	core/net/tcp6.cpp	/^void Tcp::Endpoint::PostCallbacksAfterSend(size_t aSent, size_t aBacklogBefore)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:void
PostTasklet	core/common/tasklet.cpp	/^void Tasklet::Scheduler::PostTasklet(Tasklet &aTasklet)$/;"	f	class:ot::Tasklet::Scheduler	typeref:typename:void
PowerCalibration	core/utils/power_calibration.cpp	/^PowerCalibration::PowerCalibration(Instance &aInstance)$/;"	f	class:ot::Utils::PowerCalibration
PreferenceFromFlags	core/thread/network_data_tlvs.hpp	/^    static int8_t PreferenceFromFlags(uint16_t aFlags)$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:int8_t
PreferenceFromFlags	core/thread/network_data_tlvs.hpp	/^    static int8_t PreferenceFromFlags(uint8_t aFlags) { return RoutePreferenceFromValue(aFlags >/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:int8_t
PreferenceToString	cli/cli_utils.cpp	/^const char *Utils::PreferenceToString(signed int aPreference)$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
PrefixEntry	core/border_router/routing_manager.hpp	/^            PrefixEntry(void) { Clear(); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager::PrefixEntry
PrefixFlagsToString	cli/cli_network_data.cpp	/^void NetworkData::PrefixFlagsToString(const otBorderRouterConfig &aConfig, FlagsString &aString)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
PrefixMatch	core/net/ip6_address.cpp	/^uint8_t Address::PrefixMatch(const Address &aOther) const$/;"	f	class:ot::Ip6::Address	typeref:typename:uint8_t
PrepareAQuestion	core/net/mdns.cpp	/^void Core::Ip4AddrCache::PrepareAQuestion(TxMessage &aQuery) { PrepareQueryQuestion(aQuery, Reso/;"	f	class:ot::Dns::Multicast::Core::Ip4AddrCache	typeref:typename:void
PrepareAaaaQuestion	core/net/mdns.cpp	/^void Core::Ip6AddrCache::PrepareAaaaQuestion(TxMessage &aQuery)$/;"	f	class:ot::Dns::Multicast::Core::Ip6AddrCache	typeref:typename:void
PrepareAndSendAnswers	core/thread/network_diagnostic.cpp	/^void Server::PrepareAndSendAnswers(const Ip6::Address &aDestination, const Message &aRequest)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
PrepareAnnounceState	core/thread/mle.cpp	/^bool Mle::PrepareAnnounceState(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:bool
PrepareAutoGeneratedPayload	cli/cli_udp.cpp	/^otError UdpExample::PrepareAutoGeneratedPayload(otMessage &aMessage, uint16_t aPayloadLength)$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
PrepareBeacon	core/mac/mac.cpp	/^TxFrame *Mac::PrepareBeacon(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:TxFrame *
PrepareBeaconRequest	core/mac/mac.cpp	/^TxFrame *Mac::PrepareBeaconRequest(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:TxFrame *
PrepareDataFrame	core/thread/indirect_sender.cpp	/^uint16_t IndirectSender::PrepareDataFrame(Mac::TxFrame &aFrame, Child &aChild, Message &aMessage/;"	f	class:ot::IndirectSender	typeref:typename:uint16_t
PrepareDataFrame	core/thread/mesh_forwarder.cpp	/^uint16_t MeshForwarder::PrepareDataFrame(Mac::TxFrame         &aFrame,$/;"	f	class:ot::MeshForwarder	typeref:typename:uint16_t
PrepareDataFrameWithNoMeshHeader	core/thread/mesh_forwarder.cpp	/^uint16_t MeshForwarder::PrepareDataFrameWithNoMeshHeader(Mac::TxFrame         &aFrame,$/;"	f	class:ot::MeshForwarder	typeref:typename:uint16_t
PrepareDataRequest	core/mac/data_poll_sender.cpp	/^Mac::TxFrame *DataPollSender::PrepareDataRequest(Mac::TxFrames &aTxFrames)$/;"	f	class:ot::DataPollSender	typeref:typename:Mac::TxFrame *
PrepareDiscoveryRequestFrame	core/thread/discover_scanner.cpp	/^Mac::TxFrame *DiscoverScanner::PrepareDiscoveryRequestFrame(Mac::TxFrame &aFrame)$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:Mac::TxFrame *
PrepareEmptyFrame	core/thread/indirect_sender.cpp	/^void IndirectSender::PrepareEmptyFrame(Mac::TxFrame &aFrame, Child &aChild, bool aAckRequest)$/;"	f	class:ot::IndirectSender	typeref:typename:void
PrepareEmptyFrame	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::PrepareEmptyFrame(Mac::TxFrame &aFrame, const Mac::Address &aMacDest, bool a/;"	f	class:ot::MeshForwarder	typeref:typename:void
PrepareFrameForChild	core/mac/data_poll_handler.cpp	/^inline Error DataPollHandler::Callbacks::PrepareFrameForChild(Mac::TxFrame &aFrame,$/;"	f	class:ot::DataPollHandler::Callbacks	typeref:typename:Error
PrepareFrameForChild	core/thread/csl_tx_scheduler.cpp	/^inline Error CslTxScheduler::Callbacks::PrepareFrameForChild(Mac::TxFrame &aFrame,$/;"	f	class:ot::CslTxScheduler::Callbacks	typeref:typename:Error
PrepareFrameForChild	core/thread/indirect_sender.cpp	/^Error IndirectSender::PrepareFrameForChild(Mac::TxFrame &aFrame, FrameContext &aContext, Child &/;"	f	class:ot::IndirectSender	typeref:typename:Error
PrepareGetResponse	ncp/ncp_base.hpp	/^    otError PrepareGetResponse(uint8_t aHeader, spinel_prop_key_t aPropKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
PrepareHexStringPayload	cli/cli_udp.cpp	/^otError UdpExample::PrepareHexStringPayload(otMessage &aMessage, const char *aHexString)$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
PrepareJoinerEntrustMessage	core/meshcop/joiner_router.cpp	/^Coap::Message *JoinerRouter::PrepareJoinerEntrustMessage(void)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:Coap::Message *
PrepareJoinerFinalizeMessage	core/meshcop/joiner.cpp	/^Error Joiner::PrepareJoinerFinalizeMessage(const char *aProvisioningUrl,$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:Error
PrepareLastStatusResponse	ncp/ncp_base.hpp	/^    otError PrepareLastStatusResponse(uint8_t aHeader, spinel_status_t aStatus)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
PrepareMacHeaders	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::PrepareMacHeaders(Mac::TxFrame             &aFrame,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
PrepareMessageInfoForDest	core/thread/network_diagnostic.cpp	/^void Server::PrepareMessageInfoForDest(const Ip6::Address &aDestination, Tmf::MessageInfo &aMess/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
PrepareMulticastToLargerThanRealmLocal	core/net/ip6.cpp	/^Error Ip6::PrepareMulticastToLargerThanRealmLocal(Message &aMessage, const Header &aHeader)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
PrepareNextBlockRequest	core/coap/coap.cpp	/^Error CoapBase::PrepareNextBlockRequest(Message::BlockType aType,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
PrepareNextDirectTransmission	core/thread/mesh_forwarder.cpp	/^Message *MeshForwarder::PrepareNextDirectTransmission(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:Message *
PrepareNextSpiSendFrame	ncp/ncp_spi.cpp	/^void NcpSpi::PrepareNextSpiSendFrame(void)$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
PreparePendingDataset	core/meshcop/dataset_updater.cpp	/^void DatasetUpdater::PreparePendingDataset(void)$/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:void
PrepareProbe	core/net/mdns.cpp	/^void Core::HostEntry::PrepareProbe(TxMessage &aProbe)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
PrepareProbe	core/net/mdns.cpp	/^void Core::ServiceEntry::PrepareProbe(TxMessage &aProbe)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
PreparePtrQuestion	core/net/mdns.cpp	/^void Core::BrowseCache::PreparePtrQuestion(TxMessage &aQuery, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
PrepareQuery	core/net/mdns.cpp	/^void Core::CacheEntry::PrepareQuery(CacheTimerContext &aContext)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
PrepareQueryQuestion	core/net/mdns.cpp	/^void Core::AddrCache::PrepareQueryQuestion(TxMessage &aQuery, uint16_t aRrType)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
PrepareQueryQuestion	core/net/mdns.cpp	/^void Core::ServiceCache::PrepareQueryQuestion(TxMessage &aQuery, uint16_t aRrType)$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:void
PrepareResponse	core/net/mdns.cpp	/^void Core::HostEntry::PrepareResponse(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
PrepareResponse	core/net/mdns.cpp	/^void Core::ServiceEntry::PrepareResponse(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
PrepareResponse	core/net/mdns.cpp	/^void Core::ServiceType::PrepareResponse(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
PrepareResponseAndFinalize	core/net/dns_client.cpp	/^void Client::PrepareResponseAndFinalize(Query &aQuery, const Message &aResponseMessage, Response/;"	f	class:ot::Dns::Client	typeref:typename:void
PrepareResponseRecords	core/net/mdns.cpp	/^void Core::HostEntry::PrepareResponseRecords(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
PrepareResponseRecords	core/net/mdns.cpp	/^void Core::ServiceEntry::PrepareResponseRecords(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
PrepareResponseRecords	core/net/mdns.cpp	/^void Core::ServiceType::PrepareResponseRecords(TxMessage &aResponse, TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:void
PrepareSetResponse	ncp/ncp_base.hpp	/^    otError PrepareSetResponse(uint8_t aHeader, spinel_prop_key_t aPropKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
PrepareSocket	core/net/srp_server.cpp	/^Error Server::PrepareSocket(void)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
PrepareSocket	posix/platform/trel.cpp	/^static void PrepareSocket(uint16_t &aUdpPort)$/;"	f	typeref:typename:void	file:
PrepareSrvQuestion	core/net/mdns.cpp	/^void Core::SrvCache::PrepareSrvQuestion(TxMessage &aQuery)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
PrepareTcpMessage	core/net/dns_client.cpp	/^void Client::PrepareTcpMessage(Message &aMessage)$/;"	f	class:ot::Dns::Client	typeref:typename:void
PrepareTlsHandshake	cli/cli_tcp.cpp	/^void TcpExample::PrepareTlsHandshake(void)$/;"	f	class:ot::Cli::TcpExample	typeref:typename:void
PrepareTxFrame	ncp/ncp_spi.cpp	/^void NcpSpi::PrepareTxFrame(Tasklet &aTasklet)$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
PrepareTxFrame	ncp/ncp_spi.cpp	/^void NcpSpi::PrepareTxFrame(void)$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
PrepareTxtQuestion	core/net/mdns.cpp	/^void Core::TxtCache::PrepareTxtQuestion(TxMessage &aQuery)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
PrepareUpdateMessage	core/net/srp_client.cpp	/^Error Client::PrepareUpdateMessage(Message &aMessage)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
PrepareValue	core/meshcop/meshcop_tlvs.cpp	/^void ChannelMaskTlv::PrepareValue(Value &aValue, uint32_t aChannelMask)$/;"	f	class:ot::MeshCoP::ChannelMaskTlv	typeref:typename:void
Prepend	core/common/message.hpp	/^    template <typename ObjectType> Error Prepend(const ObjectType &aObject)$/;"	f	class:ot::Message	typeref:typename:Error
PrependBytes	core/common/message.cpp	/^Error Message::PrependBytes(const void *aBuf, uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:Error
Prev	core/common/message.hpp	/^    Message       *&Prev(void) { return GetMetadata().mPrev; }$/;"	f	class:ot::Message	typeref:typename:Message * &
PrevPriority	core/common/message.hpp	/^    uint8_t PrevPriority(uint8_t aPriority) const$/;"	f	class:ot::PriorityQueue	typeref:typename:uint8_t
Print	cli/cli_dataset.cpp	/^otError Dataset::Print(otOperationalDatasetTlvs &aDatasetTlvs)$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
PrintLinkMetricsValue	cli/cli_link_metrics.cpp	/^void LinkMetrics::PrintLinkMetricsValue(const otLinkMetricsValues *aMetricsValues)$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:void
PrintPayload	cli/cli_coap.cpp	/^void Coap::PrintPayload(otMessage *aMessage)$/;"	f	class:ot::Cli::Coap	typeref:typename:void
PrintPayload	cli/cli_coap_secure.cpp	/^void CoapSecure::PrintPayload(otMessage *aMessage)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
PrintUsage	posix/client.cpp	/^void PrintUsage(const char *aProgramName, FILE *aStream, int aExitCode)$/;"	f	namespace:__anon7e280f770111	typeref:typename:void
PrintUsage	posix/main.c	/^static void PrintUsage(const char *aProgramName, FILE *aStream, int aExitCode)$/;"	f	typeref:typename:void	file:
PriorityQueue	core/common/message.hpp	/^    PriorityQueue(void) { Clear(); }$/;"	f	class:ot::PriorityQueue
PriorityToDscp	core/net/ip6.cpp	/^uint8_t Ip6::PriorityToDscp(Message::Priority aPriority)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:uint8_t
PriorityToDscp	core/thread/tmf.cpp	/^uint8_t Agent::PriorityToDscp(Message::Priority aPriority)$/;"	f	class:ot::Tmf::Agent	typeref:typename:uint8_t
PriorityToString	core/common/message.cpp	/^const char *Message::PriorityToString(Priority aPriority)$/;"	f	class:ot::Message	typeref:typename:const char *
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ba")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("bbr")>(Arg aArgs[]) { return mBbr.Process(aArgs); /;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("br")>(Arg aArgs[]) { return mBr.Process(aArgs); }$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("bufferinfo")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ccathreshold")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ccm")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("channel")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("child")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("childip")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("childmax")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("childrouterlinks")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("childsupervision")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("childtimeout")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("coap")>(Arg aArgs[]) { return mCoap.Process(aArgs)/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("coaps")>(Arg aArgs[]) { return mCoapSecure.Process/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("coex")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("commissioner")>(Arg aArgs[]) { return mCommissione/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("contextreusedelay")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("counters")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("csl")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("dataset")>(Arg aArgs[]) { return mDataset.Process(/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("debug")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("delaytimermin")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("detach")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("deviceprops")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("diag")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("discover")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("dns")>(Arg aArgs[]) { return mDns.Process(aArgs); /;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("domainname")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("dua")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("eidcache")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("eui64")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("extaddr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("extpanid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("factoryreset")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("fake")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("fem")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("history")>(Arg aArgs[]) { return mHistory.Process(/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ifconfig")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("instanceid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ipaddr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ipmaddr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("joiner")>(Arg aArgs[]) { return mJoiner.Process(aA/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("joinerport")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("keysequence")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("leaderdata")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("leaderweight")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("linkmetrics")>(Arg aArgs[]) { return mLinkMetrics./;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("linkmetricsmgr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("locate")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("log")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mac")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("macfilter")>(Arg aArgs[]) { return mMacFilter.Proc/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mdns")>(Arg aArgs[]) { return mMdns.Process(aArgs)/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("meshdiag")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mleadvimax")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mliid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mlr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("mode")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("multiradio")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("nat64")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("neighbor")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("netdata")>(Arg aArgs[]) { return mNetworkData.Proc/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("netstat")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networkdiagnostic")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networkidtimeout")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networkkey")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networkkeyref")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networkname")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("networktime")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("nexthop")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("panid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("parent")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("parentpriority")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("partitionid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("ping")>(Arg aArgs[]) { return mPing.Process(aArgs)/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("platform")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("pollperiod")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("preferrouterid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("prefix")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("promiscuous")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("pskc")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("pskcref")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("radio")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("radiofilter")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("rcp")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("region")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("releaserouterid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("reset")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("rloc16")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("route")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("router")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("routerdowngradethreshold")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("routereligible")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("routeridrange")>(Arg *aArgs)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("routerselectionjitter")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("routerupgradethreshold")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("scan")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("service")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("singleton")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("sntp")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("srp")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("tcat")>(Arg aArgs[]) { return mTcat.Process(aArgs)/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("tcp")>(Arg aArgs[]) { return mTcp.Process(aArgs); /;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("test")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("thread")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("timeinqueue")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("trel")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("tvcheck")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("txpower")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("udp")>(Arg aArgs[]) { return mUdp.Process(aArgs); /;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("unsecureport")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("uptime")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("vendor")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("verhoeff")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli.cpp	/^template <> otError Interpreter::Process<Cmd("version")>(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^otError Bbr::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("config")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("disable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("enable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("jitter")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("mgmt")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("mlr")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("register")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_bbr.cpp	/^template <> otError Bbr::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Bbr	typeref:typename:otError
Process	cli/cli_br.cpp	/^otError Br::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("counters")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("disable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("enable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("init")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("nat64prefix")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("omrprefix")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("onlinkprefix")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("pd")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("prefixtable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("raoptions")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("rioprf")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("routeprf")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("routers")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_br.cpp	/^template <> otError Br::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Br	typeref:typename:otError
Process	cli/cli_coap.cpp	/^otError Coap::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("cancel")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("delete")>(Arg aArgs[]) { return ProcessRequest(aArgs, OT_/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("get")>(Arg aArgs[]) { return ProcessRequest(aArgs, OT_COA/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("observe")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("parameters")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("post")>(Arg aArgs[]) { return ProcessRequest(aArgs, OT_CO/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("put")>(Arg aArgs[]) { return ProcessRequest(aArgs, OT_COA/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("resource")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("set")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap.cpp	/^template <> otError Coap::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^otError CoapSecure::Process(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("connect")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("delete")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("disconnect")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("get")>(Arg aArgs[]) { return ProcessRequest(aArgs, /;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("isclosed")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("isconnactive")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("isconnected")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("post")>(Arg aArgs[]) { return ProcessRequest(aArgs,/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("psk")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("put")>(Arg aArgs[]) { return ProcessRequest(aArgs, /;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("resource")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("set")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_coap_secure.cpp	/^template <> otError CoapSecure::Process<Cmd("x509")>(Arg aArgs[])$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^otError Commissioner::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("announce")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("energy")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("id")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("joiner")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("mgmtget")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("mgmtset")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("panid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("provisioningurl")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("sessionid")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_commissioner.cpp	/^template <> otError Commissioner::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::Commissioner	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^otError Dataset::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("active")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("clear")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("commit")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("init")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("mgmtgetcommand")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("mgmtsetcommand")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("pending")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("set")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("tlvs")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dataset.cpp	/^template <> otError Dataset::Process<Cmd("updater")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
Process	cli/cli_dns.cpp	/^otError Dns::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("browse")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("compression")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("config")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("resolve")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("resolve4")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("server")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("service")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_dns.cpp	/^template <> otError Dns::Process<Cmd("servicehost")>(Arg aArgs[])$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
Process	cli/cli_history.cpp	/^otError History::Process(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("ipaddr")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("ipmaddr")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("neighbor")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("netinfo")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("prefix")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("route")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("router")>(Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("rx")>(Arg aArgs[]) { return ProcessRxTxHistory(kRx, aA/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("rxtx")>(Arg aArgs[]) { return ProcessRxTxHistory(kRxTx/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_history.cpp	/^template <> otError History::Process<Cmd("tx")>(Arg aArgs[]) { return ProcessRxTxHistory(kTx, aA/;"	f	class:ot::Cli::History	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^otError Joiner::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^template <> otError Joiner::Process<Cmd("discerner")>(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^template <> otError Joiner::Process<Cmd("id")>(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^template <> otError Joiner::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^template <> otError Joiner::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_joiner.cpp	/^template <> otError Joiner::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::Joiner	typeref:typename:otError
Process	cli/cli_link_metrics.cpp	/^otError LinkMetrics::Process(Arg aArgs[])$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:otError
Process	cli/cli_link_metrics.cpp	/^template <> otError LinkMetrics::Process<Cmd("mgmt")>(Arg aArgs[])$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:otError
Process	cli/cli_link_metrics.cpp	/^template <> otError LinkMetrics::Process<Cmd("probe")>(Arg aArgs[])$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:otError
Process	cli/cli_link_metrics.cpp	/^template <> otError LinkMetrics::Process<Cmd("query")>(Arg aArgs[])$/;"	f	class:ot::Cli::LinkMetrics	typeref:typename:otError
Process	cli/cli_mac_filter.cpp	/^otError MacFilter::Process(Arg aArgs[])$/;"	f	class:ot::Cli::MacFilter	typeref:typename:otError
Process	cli/cli_mac_filter.cpp	/^template <> otError MacFilter::Process<Cmd("addr")>(Arg aArgs[])$/;"	f	class:ot::Cli::MacFilter	typeref:typename:otError
Process	cli/cli_mac_filter.cpp	/^template <> otError MacFilter::Process<Cmd("rss")>(Arg aArgs[])$/;"	f	class:ot::Cli::MacFilter	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^otError Mdns::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("browser")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("disable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("enable")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("hosts")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("ip4resolver")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("ip6resolver")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("keys")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("register")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("services")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("srvresolver")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("txtresolver")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("unicastquestion")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_mdns.cpp	/^template <> otError Mdns::Process<Cmd("unregister")>(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^otError NetworkData::Process(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("full")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("length")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("maxlength")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("publish")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("register")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("show")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("steeringdata")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_network_data.cpp	/^template <> otError NetworkData::Process<Cmd("unpublish")>(Arg aArgs[])$/;"	f	class:ot::Cli::NetworkData	typeref:typename:otError
Process	cli/cli_ping.cpp	/^otError PingSender::Process(Arg aArgs[])$/;"	f	class:ot::Cli::PingSender	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^otError SrpClient::Process(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("autostart")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("callback")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("host")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("keyleaseinterval")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("leaseinterval")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("server")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("service")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_client.cpp	/^template <> otError SrpClient::Process<Cmd("ttl")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^otError SrpServer::Process(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("addrmode")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("auto")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("disable")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("domain")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("enable")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("host")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("lease")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("seqnum")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("service")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("state")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_srp_server.cpp	/^template <> otError SrpServer::Process<Cmd("ttl")>(Arg aArgs[])$/;"	f	class:ot::Cli::SrpServer	typeref:typename:otError
Process	cli/cli_tcat.cpp	/^otError Tcat::Process(Arg aArgs[])$/;"	f	class:ot::Cli::Tcat	typeref:typename:otError
Process	cli/cli_tcat.cpp	/^template <> otError Tcat::Process<Cmd("start")>(Arg aArgs[])$/;"	f	class:ot::Cli::Tcat	typeref:typename:otError
Process	cli/cli_tcat.cpp	/^template <> otError Tcat::Process<Cmd("stop")>(Arg aArgs[])$/;"	f	class:ot::Cli::Tcat	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^otError TcpExample::Process(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("abort")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("benchmark")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("bind")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("connect")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("deinit")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("init")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("listen")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("send")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("sendend")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_tcp.cpp	/^template <> otError TcpExample::Process<Cmd("stoplistening")>(Arg aArgs[])$/;"	f	class:ot::Cli::TcpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^otError UdpExample::Process(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("bind")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("close")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("connect")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("linksecurity")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("open")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	cli/cli_udp.cpp	/^template <> otError UdpExample::Process<Cmd("send")>(Arg aArgs[])$/;"	f	class:ot::Cli::UdpExample	typeref:typename:otError
Process	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::Process(const RouterAdvert::Icmp6Packet *aRaPacket,$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
Process	core/meshcop/secure_transport.cpp	/^void SecureTransport::Process(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
Process	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Process(void)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Process	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Process(void)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Process	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::Process(const void *aContext)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
Process	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::Process(const void *aContext)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
Process	posix/platform/daemon.cpp	/^void Daemon::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
Process	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::Process(const void *aMainloopContext)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
Process	posix/platform/infra_if.cpp	/^void InfraNetif::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
Process	posix/platform/mainloop.cpp	/^void Manager::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Mainloop::Manager	typeref:typename:void
Process	posix/platform/mdns_socket.cpp	/^void MdnsSocket::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
Process	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
Process	posix/platform/resolver.cpp	/^void Resolver::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
Process	posix/platform/spi_interface.cpp	/^void SpiInterface::Process(const void *aMainloopContext)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
Process	posix/platform/udp.cpp	/^void Udp::Process(const otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Udp	typeref:typename:void
Process	posix/platform/vendor_interface_example.cpp	/^void VendorInterface::Process(const void *aMainloopContext)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:void
ProcessARecord	core/net/mdns.cpp	/^void Core::RxMessage::ProcessARecord(const Name &aName, const ResourceRecord &aRecord, uint16_t /;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessAaaaRecord	core/net/mdns.cpp	/^void Core::RxMessage::ProcessAaaaRecord(const Name &aName, const ResourceRecord &aRecord, uint16/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessAdditionalSection	core/net/srp_server.cpp	/^Error Server::ProcessAdditionalSection(Host *aHost, const Message &aMessage, MessageMetadata &aM/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessAddressRegistrationTlv	core/thread/mle_router.cpp	/^Error MleRouter::ProcessAddressRegistrationTlv(RxInfo &aRxInfo, Child &aChild)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
ProcessAnnounce	core/thread/mle.cpp	/^void Mle::ProcessAnnounce(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ProcessAutoStart	core/net/srp_client.cpp	/^void Client::ProcessAutoStart(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
ProcessBlock1Request	core/coap/coap.cpp	/^Error CoapBase::ProcessBlock1Request(Message                 &aMessage,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
ProcessBlock2Request	core/coap/coap.cpp	/^Error CoapBase::ProcessBlock2Request(Message                 &aMessage,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
ProcessCallbacks	core/net/tcp6.cpp	/^void Tcp::ProcessCallbacks(void)$/;"	f	class:ot::Ip6::Tcp	typeref:typename:void
ProcessChannel	core/diags/factory_diags.cpp	/^Error Diags::ProcessChannel(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMax/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessChildTableAnswer	core/utils/mesh_diag.cpp	/^bool MeshDiag::ProcessChildTableAnswer(Coap::Message &aMessage, const Ip6::MessageInfo &aMessage/;"	f	class:ot::Utils::MeshDiag	typeref:typename:bool
ProcessChildrenIp6AddrsAnswer	core/utils/mesh_diag.cpp	/^bool MeshDiag::ProcessChildrenIp6AddrsAnswer(Coap::Message &aMessage, const Ip6::MessageInfo &aM/;"	f	class:ot::Utils::MeshDiag	typeref:typename:bool
ProcessClientIdentifier	core/net/dhcp6_client.cpp	/^Error Client::ProcessClientIdentifier(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
ProcessClientIdentifier	core/net/dhcp6_server.cpp	/^Error Server::ProcessClientIdentifier(Message &aMessage, uint16_t aOffset, ClientIdentifier &aCl/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
ProcessCmd	core/diags/factory_diags.cpp	/^Error Diags::ProcessCmd(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLen)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessCommand	cli/cli.cpp	/^otError Interpreter::ProcessCommand(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
ProcessCommand	cli/cli_dataset.cpp	/^otError Dataset::ProcessCommand(const ComponentMapper &aMapper, Arg aArgs[])$/;"	f	class:ot::Cli::Dataset	typeref:typename:otError
ProcessCompletedUpdates	core/net/srp_server.cpp	/^void Server::ProcessCompletedUpdates(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
ProcessContinuousWave	core/diags/factory_diags.cpp	/^Error Diags::ProcessContinuousWave(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOu/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessCsl	core/mac/mac.cpp	/^void Mac::ProcessCsl(const RxFrame &aFrame, const Address &aSrcAddr)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ProcessDnsUpdate	core/net/srp_server.cpp	/^void Server::ProcessDnsUpdate(Message &aMessage, MessageMetadata &aMetadata)$/;"	f	class:ot::Srp::Server	typeref:typename:void
ProcessDuaResponse	core/thread/dua_manager.cpp	/^Error DuaManager::ProcessDuaResponse(Coap::Message &aMessage)$/;"	f	class:ot::DuaManager	typeref:typename:Error
ProcessEcho	core/diags/factory_diags.cpp	/^Error Diags::ProcessEcho(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLen/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessElapsedTime	core/net/dhcp6_server.cpp	/^Error Server::ProcessElapsedTime(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
ProcessEnableDisable	cli/cli_utils.cpp	/^otError Utils::ProcessEnableDisable(Arg                       aArgs[],$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessEnableDisable	cli/cli_utils.cpp	/^otError Utils::ProcessEnableDisable(Arg               aArgs[],$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessEnableDisable	cli/cli_utils.cpp	/^otError Utils::ProcessEnableDisable(Arg aArgs[], SetEnabledHandler aSetEnabledHandler)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessEnableDisable	cli/cli_utils.cpp	/^otError Utils::ProcessEnableDisable(Arg aArgs[], SetEnabledHandlerFailable aSetEnabledHandler)$/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessEnhAckIeData	core/thread/link_metrics.cpp	/^void Initiator::ProcessEnhAckIeData(const uint8_t *aData, uint8_t aLength, const Neighbor &aNeig/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:void
ProcessEnhAckProbing	core/mac/mac.cpp	/^void Mac::ProcessEnhAckProbing(const RxFrame &aFrame, const Neighbor &aNeighbor)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ProcessEnhAckSecurity	core/mac/mac.cpp	/^Error Mac::ProcessEnhAckSecurity(TxFrame &aTxFrame, RxFrame &aAckFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
ProcessExit	posix/main.c	/^static otError ProcessExit(void *aContext, uint8_t aArgsLength, char *aArgs[])$/;"	f	typeref:typename:otError	file:
ProcessExpiredRecords	core/net/mdns.cpp	/^void Core::AddrCache::ProcessExpiredRecords(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
ProcessExpiredRecords	core/net/mdns.cpp	/^void Core::BrowseCache::ProcessExpiredRecords(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
ProcessExpiredRecords	core/net/mdns.cpp	/^void Core::SrvCache::ProcessExpiredRecords(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
ProcessExpiredRecords	core/net/mdns.cpp	/^void Core::TxtCache::ProcessExpiredRecords(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
ProcessFrameQueue	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::ProcessFrameQueue(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
ProcessGet	cli/cli_utils.hpp	/^    template <typename ValueType> otError ProcessGet(Arg aArgs[], GetHandler<ValueType> aGetHand/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessGet	cli/cli_utils.hpp	/^template <> inline otError Utils::ProcessGet<int32_t>(Arg aArgs[], GetHandler<int32_t> aGetHandl/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessGet	cli/cli_utils.hpp	/^template <> inline otError Utils::ProcessGet<uint32_t>(Arg aArgs[], GetHandler<uint32_t> aGetHan/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessGetSet	cli/cli_utils.hpp	/^    otError ProcessGetSet(Arg aArgs[], GetHandler<ValueType> aGetHandler, SetHandler<ValueType> /;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessGetSet	cli/cli_utils.hpp	/^    otError ProcessGetSet(Arg aArgs[], GetHandler<ValueType> aGetHandler, SetHandlerFailable<Val/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessGpio	core/diags/factory_diags.cpp	/^Error Diags::ProcessGpio(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLen/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessHostDescriptionInstruction	core/net/srp_server.cpp	/^Error Server::ProcessHostDescriptionInstruction(Host                  &aHost,$/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessIaAddress	core/net/dhcp6_client.cpp	/^Error Client::ProcessIaAddress(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
ProcessIaAddress	core/net/dhcp6_server.cpp	/^Error Server::ProcessIaAddress(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
ProcessIaNa	core/net/dhcp6_client.cpp	/^Error Client::ProcessIaNa(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
ProcessIaNa	core/net/dhcp6_server.cpp	/^Error Server::ProcessIaNa(Message &aMessage, uint16_t aOffset, IaNa &aIaNa)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
ProcessIsRequest	cli/cli_coap_secure.cpp	/^otError CoapSecure::ProcessIsRequest(Arg aArgs[], bool (*IsChecker)(otInstance *))$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
ProcessKeepAliveMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::ProcessKeepAliveMessage(const Dns::Header &aHeader, const Message &aMessa/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
ProcessKeySequence	core/thread/mle.cpp	/^void Mle::ProcessKeySequence(RxInfo &aRxInfo)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ProcessLine	cli/cli.cpp	/^void Interpreter::ProcessLine(char *aBuf)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
ProcessLine	core/diags/factory_diags.cpp	/^Error Diags::ProcessLine(const char *aString, char *aOutput, size_t aOutputMaxLen)$/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessMaxPowerTable	posix/platform/radio.cpp	/^void Radio::ProcessMaxPowerTable(const RadioUrl &aRadioUrl)$/;"	f	class:ot::Posix::Radio	typeref:typename:void
ProcessMessage	core/net/srp_server.cpp	/^Error Server::ProcessMessage(Message                &aMessage,$/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessMessage	core/net/srp_server.cpp	/^Error Server::ProcessMessage(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessMessage	core/utils/mesh_diag.cpp	/^Error MeshDiag::ProcessMessage(Coap::Message &aMessage, const Ip6::MessageInfo &aMessageInfo, ui/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
ProcessMessageSecurity	core/thread/mle.cpp	/^Error Mle::ProcessMessageSecurity(Crypto::AesCcm::Mode    aMode,$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
ProcessMulticastRouterMessages	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::ProcessMulticastRouterMessages(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
ProcessNeighborAdvertMessage	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessNeighborAdvertMessage(const NeighborAdvertMessage &aNaM/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessNetif	posix/main.c	/^static otError ProcessNetif(void *aContext, uint8_t aArgsLength, char *aArgs[])$/;"	f	typeref:typename:otError	file:
ProcessNextIdentityAssociation	core/net/dhcp6_client.cpp	/^bool Client::ProcessNextIdentityAssociation(void)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:bool
ProcessOptRecord	core/net/srp_client.cpp	/^Error Client::ProcessOptRecord(const Message &aMessage, uint16_t aOffset, const Dns::OptRecord &/;"	f	class:ot::Srp::Client	typeref:typename:Error
ProcessOption	core/net/ip6_mpl.cpp	/^Error Mpl::ProcessOption(Message &aMessage, uint16_t aOffset, const Address &aAddress, bool &aRe/;"	f	class:ot::Ip6::Mpl	typeref:typename:Error
ProcessPendingPolls	core/mac/data_poll_handler.cpp	/^void DataPollHandler::ProcessPendingPolls(void)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
ProcessPower	core/diags/factory_diags.cpp	/^Error Diags::ProcessPower(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLe/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessPowerSettings	core/diags/factory_diags.cpp	/^Error Diags::ProcessPowerSettings(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOut/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::ProcessPrefix(const PrefixTableEntry &aPrefixTableEntry)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
ProcessPrefixEntry	core/border_router/routing_manager.cpp	/^bool RoutingManager::PdPrefixManager::ProcessPrefixEntry(PrefixEntry &aEntry, PrefixEntry &aFavo/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:bool
ProcessPrefixInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessPrefixInfoOption(const PrefixInfoOption &aPio, Router &/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessPtrRecord	core/net/mdns.cpp	/^void Core::RxMessage::ProcessPtrRecord(const Name &aName, const ResourceRecord &aRecord, uint16_/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessQuery	core/net/dnssd_server.cpp	/^void Server::ProcessQuery(Request &aRequest)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
ProcessQuery	core/net/mdns.cpp	/^Core::RxMessage::ProcessOutcome Core::RxMessage::ProcessQuery(bool aShouldProcessTruncated)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:Core::RxMessage::ProcessOutcome
ProcessQuestion	core/net/mdns.cpp	/^void Core::RxMessage::ProcessQuestion(Question &aQuestion)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessQueuedTasklets	core/common/tasklet.cpp	/^void Tasklet::Scheduler::ProcessQueuedTasklets(void)$/;"	f	class:ot::Tasklet::Scheduler	typeref:typename:void
ProcessRa	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::ProcessRa(const uint8_t *aRouterAdvert, const uint16_t aLe/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
ProcessRaFlagsExtOption	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessRaFlagsExtOption(const RaFlagsExtOption &aRaFlagsOption/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessRaHeader	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessRaHeader(const RouterAdvert::Header &aRaHeader,$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessRadioStateMachine	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::ProcessRadioStateMachine(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
ProcessRadioUrl	posix/platform/radio.cpp	/^void Radio::ProcessRadioUrl(const RadioUrl &aRadioUrl)$/;"	f	class:ot::Posix::Radio	typeref:typename:void
ProcessRawPowerSetting	core/diags/factory_diags.cpp	/^Error Diags::ProcessRawPowerSetting(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aO/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessReceiveAesCcm	core/mac/mac_frame.cpp	/^Error RxFrame::ProcessReceiveAesCcm(const ExtAddress &aExtAddress, const KeyMaterial &aMacKey)$/;"	f	class:ot::Mac::RxFrame	typeref:typename:Error
ProcessReceiveSecurity	core/mac/mac.cpp	/^Error Mac::ProcessReceiveSecurity(RxFrame &aFrame, const Address &aSrcAddr, Neighbor *aNeighbor)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
ProcessReceivedPacket	core/radio/trel_link.cpp	/^void Link::ProcessReceivedPacket(Packet &aPacket)$/;"	f	class:ot::Trel::Link	typeref:typename:void
ProcessReceivedRequest	core/coap/coap.cpp	/^void CoapBase::ProcessReceivedRequest(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
ProcessReceivedResponse	core/coap/coap.cpp	/^void CoapBase::ProcessReceivedResponse(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
ProcessRecordForConflict	core/net/mdns.cpp	/^void Core::RxMessage::ProcessRecordForConflict(const Name &aName, const ResourceRecord &aRecord,/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessRegisterHost	cli/cli_mdns.cpp	/^otError Mdns::ProcessRegisterHost(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
ProcessRegisterKey	cli/cli_mdns.cpp	/^otError Mdns::ProcessRegisterKey(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
ProcessRegisterService	cli/cli_mdns.cpp	/^otError Mdns::ProcessRegisterService(Arg aArgs[])$/;"	f	class:ot::Cli::Mdns	typeref:typename:otError
ProcessReply	core/net/dhcp6_client.cpp	/^void Client::ProcessReply(Message &aMessage)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
ProcessRequest	cli/cli_coap.cpp	/^otError Coap::ProcessRequest(Arg aArgs[], otCoapCode aCoapCode, bool aCoapObserve)$/;"	f	class:ot::Cli::Coap	typeref:typename:otError
ProcessRequest	cli/cli_coap_secure.cpp	/^otError CoapSecure::ProcessRequest(Arg aArgs[], otCoapCode aCoapCode)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:otError
ProcessRequestOrUnidirectionalMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::ProcessRequestOrUnidirectionalMessage(const Dns::Header &aHeader,$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
ProcessResponse	core/net/dns_client.cpp	/^void Client::ProcessResponse(const Message &aResponseMessage)$/;"	f	class:ot::Dns::Client	typeref:typename:void
ProcessResponse	core/net/mdns.cpp	/^void Core::RxMessage::ProcessResponse(void)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessResponse	core/net/srp_client.cpp	/^void Client::ProcessResponse(Message &aMessage)$/;"	f	class:ot::Srp::Client	typeref:typename:void
ProcessResponseMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::ProcessResponseMessage(const Dns::Header &aHeader,$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
ProcessResponseRecord	core/net/mdns.cpp	/^void Core::BrowseCache::ProcessResponseRecord(const Message &aMessage, uint16_t aRecordOffset)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
ProcessResponseRecord	core/net/mdns.cpp	/^void Core::Ip4AddrCache::ProcessResponseRecord(const Message &aMessage, uint16_t aRecordOffset)$/;"	f	class:ot::Dns::Multicast::Core::Ip4AddrCache	typeref:typename:void
ProcessResponseRecord	core/net/mdns.cpp	/^void Core::Ip6AddrCache::ProcessResponseRecord(const Message &aMessage, uint16_t aRecordOffset)$/;"	f	class:ot::Dns::Multicast::Core::Ip6AddrCache	typeref:typename:void
ProcessResponseRecord	core/net/mdns.cpp	/^void Core::SrvCache::ProcessResponseRecord(const Message &aMessage, uint16_t aRecordOffset)$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
ProcessResponseRecord	core/net/mdns.cpp	/^void Core::TxtCache::ProcessResponseRecord(const Message &aMessage, uint16_t aRecordOffset)$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
ProcessRetryDelayMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::ProcessRetryDelayMessage(const Dns::Header &aHeader, const Message &aMess/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
ProcessRouteInfoOption	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessRouteInfoOption(const RouteInfoOption &aRio, Router &aR/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessRouteTlv	core/thread/mle_router.cpp	/^Error MleRouter::ProcessRouteTlv(const RouteTlv &aRouteTlv, RxInfo &aRxInfo)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
ProcessRouterAdvertMessage	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ProcessRouterAdvertMessage(const RouterAdvert::RxMessage &aRaM/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ProcessRouterNeighborTableAnswer	core/utils/mesh_diag.cpp	/^bool MeshDiag::ProcessRouterNeighborTableAnswer(Coap::Message &aMessage, const Ip6::MessageInfo /;"	f	class:ot::Utils::MeshDiag	typeref:typename:bool
ProcessRxFrame	core/mac/data_poll_sender.cpp	/^void DataPollSender::ProcessRxFrame(const Mac::RxFrame &aFrame)$/;"	f	class:ot::DataPollSender	typeref:typename:void
ProcessRxTxHistory	cli/cli_history.cpp	/^otError History::ProcessRxTxHistory(RxTx aRxTx, Arg aArgs[])$/;"	f	class:ot::Cli::History	typeref:typename:otError
ProcessServerIdentifier	core/net/dhcp6_client.cpp	/^Error Client::ProcessServerIdentifier(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
ProcessService	cli/cli_dns.cpp	/^otError Dns::ProcessService(Arg aArgs[], ResolveServiceFn aResolveServiceFn)$/;"	f	class:ot::Cli::Dns	typeref:typename:otError
ProcessServiceAdd	cli/cli_srp_client.cpp	/^otError SrpClient::ProcessServiceAdd(Arg aArgs[])$/;"	f	class:ot::Cli::SrpClient	typeref:typename:otError
ProcessServiceDescriptionInstructions	core/net/srp_server.cpp	/^Error Server::ProcessServiceDescriptionInstructions(Host            &aHost,$/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessServiceDiscoveryInstructions	core/net/srp_server.cpp	/^Error Server::ProcessServiceDiscoveryInstructions(Host                  &aHost,$/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessSet	cli/cli_utils.hpp	/^    template <typename ValueType> otError ProcessSet(Arg aArgs[], SetHandler<ValueType> aSetHand/;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessSet	cli/cli_utils.hpp	/^    template <typename ValueType> otError ProcessSet(Arg aArgs[], SetHandlerFailable<ValueType> /;"	f	class:ot::Cli::Utils	typeref:typename:otError
ProcessSetOrReplaceRequest	core/meshcop/dataset_manager_ftd.cpp	/^Error DatasetManager::ProcessSetOrReplaceRequest(MgmtCommand          aCommand,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
ProcessSignals	core/net/tcp6.cpp	/^void Tcp::ProcessSignals(Endpoint             &aEndpoint,$/;"	f	class:ot::Ip6::Tcp	typeref:typename:void
ProcessSolicit	core/net/dhcp6_server.cpp	/^void Server::ProcessSolicit(Message &aMessage, const Ip6::Address &aDst, const TransactionId &aT/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
ProcessSrvRecord	core/net/mdns.cpp	/^void Core::RxMessage::ProcessSrvRecord(const Name &aName, const ResourceRecord &aRecord, uint16_/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessStart	core/diags/factory_diags.cpp	/^Error Diags::ProcessStart(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLe/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessStatusCode	core/net/dhcp6_client.cpp	/^Error Client::ProcessStatusCode(Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:Error
ProcessStop	core/diags/factory_diags.cpp	/^Error Diags::ProcessStop(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxLen/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessStream	core/diags/factory_diags.cpp	/^Error Diags::ProcessStream(uint8_t aArgsLength, char *aArgs[], char *aOutput, size_t aOutputMaxL/;"	f	class:ot::FactoryDiags::Diags	typeref:typename:Error
ProcessThreadChangedFlags	ncp/ncp_base_mtd.cpp	/^void NcpBase::ProcessThreadChangedFlags(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
ProcessTimeSync	core/thread/time_sync_service.cpp	/^void TimeSync::ProcessTimeSync(void)$/;"	f	class:ot::TimeSync	typeref:typename:void
ProcessTimers	core/common/timer.cpp	/^void Timer::Scheduler::ProcessTimers(const AlarmApi &aAlarmApi)$/;"	f	class:ot::Timer::Scheduler	typeref:typename:void
ProcessTimers	core/common/timer.hpp	/^        void ProcessTimers(void) { Timer::Scheduler::ProcessTimers(sAlarmMicroApi); }$/;"	f	class:ot::TimerMicro::Scheduler	typeref:typename:void
ProcessTimers	core/common/timer.hpp	/^        void ProcessTimers(void) { Timer::Scheduler::ProcessTimers(sAlarmMilliApi); }$/;"	f	class:ot::TimerMilli::Scheduler	typeref:typename:void
ProcessTransmitAesCcm	core/mac/mac_frame.cpp	/^void TxFrame::ProcessTransmitAesCcm(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
ProcessTransmitSecurity	core/mac/mac.cpp	/^void Mac::ProcessTransmitSecurity(TxFrame &aFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ProcessTransmitSecurity	core/mac/sub_mac.cpp	/^void SubMac::ProcessTransmitSecurity(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
ProcessTtl	core/net/srp_server.cpp	/^Error Server::Host::ProcessTtl(uint32_t aTtl)$/;"	f	class:ot::Srp::Server::Host	typeref:typename:Error
ProcessTxDone	core/mac/data_poll_sender.cpp	/^void DataPollSender::ProcessTxDone(const Mac::TxFrame &aFrame, const Mac::RxFrame *aAckFrame, Er/;"	f	class:ot::DataPollSender	typeref:typename:void
ProcessTxtRecord	core/net/mdns.cpp	/^void Core::RxMessage::ProcessTxtRecord(const Name &aName, const ResourceRecord &aRecord, uint16_/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
ProcessUpdateSection	core/net/srp_server.cpp	/^Error Server::ProcessUpdateSection(Host &aHost, const Message &aMessage, MessageMetadata &aMetad/;"	f	class:ot::Srp::Server	typeref:typename:Error
ProcessUserCommands	cli/cli.cpp	/^otError Interpreter::ProcessUserCommands(Arg aArgs[])$/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
ProcessZoneSection	core/net/srp_server.cpp	/^Error Server::ProcessZoneSection(const Message &aMessage, MessageMetadata &aMetadata) const$/;"	f	class:ot::Srp::Server	typeref:typename:Error
Ptr	core/common/ptr_wrapper.hpp	/^    Ptr(void)$/;"	f	class:ot::Ptr
Ptr	core/common/ptr_wrapper.hpp	/^    explicit Ptr(Type *aPointer)$/;"	f	class:ot::Ptr
Publish	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::Publish(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
Publish	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Publish(const Info &aInfo)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Publish	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Publish(const ExternalRouteConfig &aConfig, Requester aRequester)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Publish	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Publish(const Ip6::Prefix &aPrefix,$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Publish	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Publish(const OnMeshPrefixConfig &aConfig, Requester aRequester)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
PublishAndAdvertise	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::PublishAndAdvertise(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
PublishAnycast	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::PublishAnycast(uint8_t aSequenceNumber)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
PublishDnsSrpServiceAnycast	core/thread/network_data_publisher.hpp	/^    void PublishDnsSrpServiceAnycast(uint8_t aSequenceNumber) { mDnsSrpServiceEntry.PublishAnyca/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
PublishDnsSrpServiceUnicast	core/thread/network_data_publisher.hpp	/^    void PublishDnsSrpServiceUnicast(const Ip6::Address &aAddress, uint16_t aPort)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
PublishDnsSrpServiceUnicast	core/thread/network_data_publisher.hpp	/^    void PublishDnsSrpServiceUnicast(uint16_t aPort) { mDnsSrpServiceEntry.PublishUnicast(aPort)/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
PublishExternalRoute	core/thread/network_data_publisher.cpp	/^Error Publisher::PublishExternalRoute(const ExternalRouteConfig &aConfig, Requester aRequester)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Error
PublishOnMeshPrefix	core/thread/network_data_publisher.cpp	/^Error Publisher::PublishOnMeshPrefix(const OnMeshPrefixConfig &aConfig, Requester aRequester)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Error
PublishUnicast	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::PublishUnicast(const Ip6::Address &aAddress, uint16_t aPort)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
PublishUnicast	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::PublishUnicast(uint16_t aPort)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Publisher	core/thread/network_data_publisher.cpp	/^Publisher::Publisher(Instance &aInstance)$/;"	f	class:ot::NetworkData::Publisher
Push	core/common/linked_list.hpp	/^    void Push(Type &aEntry)$/;"	f	class:ot::LinkedList	typeref:typename:void
PushAfter	core/common/linked_list.hpp	/^    void PushAfter(Type &aEntry, Type &aPrevEntry)$/;"	f	class:ot::LinkedList	typeref:typename:void
PushAfterTail	core/common/linked_list.hpp	/^    void PushAfterTail(Type &aEntry)$/;"	f	class:ot::LinkedList	typeref:typename:void
PushBack	core/common/array.hpp	/^    Error PushBack(const Type &aEntry) { return IsFull() ? kErrorNoBufs : (mElements[mLength++] /;"	f	class:ot::Array	typeref:typename:Error
PushBack	core/common/array.hpp	/^    Type *PushBack(void) { return IsFull() ? nullptr : &mElements[mLength++]; }$/;"	f	class:ot::Array	typeref:typename:Type *
PushBack	core/common/heap_array.hpp	/^    Error PushBack(Type &&aEntry)$/;"	f	class:ot::Heap::Array	typeref:typename:Error
PushBack	core/common/heap_array.hpp	/^    Error PushBack(const Type &aEntry)$/;"	f	class:ot::Heap::Array	typeref:typename:Error
PushBack	core/common/heap_array.hpp	/^    Type *PushBack(void)$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
PushBack	lib/spinel/spinel_driver.hpp	/^        otError PushBack(const Type &aEntry)$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:otError
PushPullSpi	posix/platform/spi_interface.cpp	/^otError SpiInterface::PushPullSpi(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
Query	core/net/sntp_client.cpp	/^Error Client::Query(const otSntpQuery *aQuery, otSntpResponseHandler aHandler, void *aContext)$/;"	f	class:ot::Sntp::Client	typeref:typename:Error
Query	core/thread/link_metrics.cpp	/^Error Initiator::Query(const Ip6::Address &aDestination, uint8_t aSeriesId, const Metrics *aMetr/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
Query	posix/platform/resolver.cpp	/^void Resolver::Query(otPlatDnsUpstreamQuery *aTxn, const otMessage *aQuery)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
QueryChildTable	core/utils/mesh_diag.cpp	/^Error MeshDiag::QueryChildTable(uint16_t aRloc16, QueryChildTableCallback aCallback, void *aCont/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
QueryChildrenIp6Addrs	core/utils/mesh_diag.cpp	/^Error MeshDiag::QueryChildrenIp6Addrs(uint16_t aRloc16, ChildIp6AddrsCallback aCallback, void *a/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
QueryConfig	core/net/dns_client.cpp	/^Client::QueryConfig::QueryConfig(InitMode aMode)$/;"	f	class:ot::Dns::Client::QueryConfig
QueryNameMatches	core/net/dnssd_server.cpp	/^bool Server::QueryNameMatches(const Message &aQuery, const char *aName)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:bool
QueryNameMatches	core/net/dnssd_server.cpp	/^bool Server::Response::QueryNameMatches(const char *aName) const { return Server::QueryNameMatch/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:bool
QueryNameMatchesService	core/net/dnssd_server.cpp	/^bool Server::Response::QueryNameMatchesService(const Srp::Server::Service &aService) const$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:bool
QueryRouterNeighborTable	core/utils/mesh_diag.cpp	/^Error MeshDiag::QueryRouterNeighborTable(uint16_t aRloc16, RouterNeighborTableCallback aCallback/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
QueryTypeToString	core/net/dnssd_server.cpp	/^const char *Server::Response::QueryTypeToString(QueryType aType)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:const char *
Question	core/net/dns_types.hpp	/^    explicit Question(uint16_t aType, uint16_t aClass = ResourceRecord::kClassInternet)$/;"	f	class:ot::Dns::Question
Question	core/net/mdns.hpp	/^            Question(void) { Clear(); }$/;"	f	struct:ot::Dns::Multicast::Core::RxMessage::Question
QuestionMatches	core/net/mdns.cpp	/^bool Core::QuestionMatches(uint16_t aQuestionRrType, uint16_t aRrType)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
QuitOnExit	posix/client.cpp	/^void QuitOnExit(const char *aBuffer)$/;"	f	namespace:__anon7e280f770111	typeref:typename:void
Radio	core/radio/radio.hpp	/^    explicit Radio(Instance &aInstance)$/;"	f	class:ot::Radio
Radio	posix/platform/radio.cpp	/^Radio::Radio(void)$/;"	f	class:ot::Posix::Radio
RadioReceive	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::RadioReceive(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
RadioSelector	core/thread/radio_selector.cpp	/^RadioSelector::RadioSelector(Instance &aInstance)$/;"	f	class:ot::RadioSelector
RadioSpinel	lib/spinel/radio_spinel.cpp	/^RadioSpinel::RadioSpinel(void)$/;"	f	class:ot::Spinel::RadioSpinel
RadioStatistics	core/radio/radio.cpp	/^RadioStatistics::RadioStatistics(void)$/;"	f	class:ot::RadioStatistics
RadioSupportsAckTimeout	core/mac/sub_mac.hpp	/^    bool RadioSupportsAckTimeout(void) const { return ((mRadioCaps & OT_RADIO_CAPS_ACK_TIMEOUT) /;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsCsmaBackoff	core/mac/sub_mac.hpp	/^    bool RadioSupportsCsmaBackoff(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsEnergyScan	core/mac/sub_mac.hpp	/^    bool RadioSupportsEnergyScan(void) const { return ((mRadioCaps & OT_RADIO_CAPS_ENERGY_SCAN) /;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsReceiveTiming	core/mac/sub_mac.hpp	/^    bool RadioSupportsReceiveTiming(void) const { return ((mRadioCaps & OT_RADIO_CAPS_RECEIVE_TI/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsRetries	core/mac/sub_mac.hpp	/^    bool RadioSupportsRetries(void) const { return ((mRadioCaps & OT_RADIO_CAPS_TRANSMIT_RETRIES/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsRxOnWhenIdle	core/mac/sub_mac.hpp	/^    bool RadioSupportsRxOnWhenIdle(void) const { return ((mRadioCaps & OT_RADIO_CAPS_RX_ON_WHEN_/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsTransmitSecurity	core/mac/sub_mac.hpp	/^    bool RadioSupportsTransmitSecurity(void) const { return ((mRadioCaps & OT_RADIO_CAPS_TRANSMI/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioSupportsTransmitTiming	core/mac/sub_mac.hpp	/^    bool RadioSupportsTransmitTiming(void) const { return ((mRadioCaps & OT_RADIO_CAPS_TRANSMIT_/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
RadioTypeToString	cli/cli_history.cpp	/^const char *History::RadioTypeToString(const otHistoryTrackerMessageInfo &aInfo)$/;"	f	class:ot::Cli::History	typeref:typename:const char *
RadioTypeToString	core/mac/mac_types.cpp	/^const char *RadioTypeToString(RadioType aRadioType)$/;"	f	namespace:ot::Mac	typeref:typename:const char *
RadioTypes	core/mac/mac_types.hpp	/^    RadioTypes(void)$/;"	f	class:ot::Mac::RadioTypes
RadioTypes	core/mac/mac_types.hpp	/^    explicit RadioTypes(uint8_t aMask)$/;"	f	class:ot::Mac::RadioTypes
RadioUrl	posix/platform/radio_url.hpp	/^    explicit RadioUrl(const char *aUrl) { Init(aUrl); };$/;"	f	class:ot::Posix::RadioUrl
RandomizeFirstProbeTxTime	core/net/mdns.cpp	/^TimeMilli Core::RandomizeFirstProbeTxTime(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:TimeMilli
RandomizeInitialQueryTxTime	core/net/mdns.cpp	/^TimeMilli Core::RandomizeInitialQueryTxTime(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:TimeMilli
Read	core/coap/coap_message.cpp	/^Error Option::Iterator::Read(uint16_t aLength, void *aBuffer)$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
Read	core/common/encoding.hpp	/^template <> inline uint16_t Read(const uint8_t *aBuffer) { return ReadUint16(aBuffer); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint16_t
Read	core/common/encoding.hpp	/^template <> inline uint16_t Read(const uint8_t *aBuffer) { return ReadUint16(aBuffer); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint16_t
Read	core/common/encoding.hpp	/^template <> inline uint32_t Read(const uint8_t *aBuffer) { return ReadUint32(aBuffer); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint32_t
Read	core/common/encoding.hpp	/^template <> inline uint32_t Read(const uint8_t *aBuffer) { return ReadUint32(aBuffer); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint32_t
Read	core/common/encoding.hpp	/^template <> inline uint64_t Read(const uint8_t *aBuffer) { return ReadUint64(aBuffer); }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint64_t
Read	core/common/encoding.hpp	/^template <> inline uint64_t Read(const uint8_t *aBuffer) { return ReadUint64(aBuffer); }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint64_t
Read	core/common/encoding.hpp	/^template <> inline uint8_t  Read(const uint8_t *aBuffer) { return *aBuffer; }$/;"	f	namespace:ot::BigEndian	typeref:typename:uint8_t
Read	core/common/encoding.hpp	/^template <> inline uint8_t  Read(const uint8_t *aBuffer) { return *aBuffer; }$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint8_t
Read	core/common/frame_data.hpp	/^    template <typename ObjectType> Error Read(ObjectType &aObject)$/;"	f	class:ot::FrameData	typeref:typename:Error
Read	core/common/message.cpp	/^Error Message::Read(uint16_t aOffset, void *aBuf, uint16_t aLength) const$/;"	f	class:ot::Message	typeref:typename:Error
Read	core/common/message.hpp	/^    template <typename ObjectType> Error Read(uint16_t aOffset, ObjectType &aObject) const$/;"	f	class:ot::Message	typeref:typename:Error
Read	core/common/settings.cpp	/^void Settings::ChildInfoIterator::Read(void)$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:void
Read	core/common/settings.hpp	/^    template <typename EntryType> Error Read(EntryType &aEntry) const$/;"	f	class:ot::Settings	typeref:typename:Error
Read	core/common/settings.hpp	/^    template <typename EntryType> Error Read(typename EntryType::ValueType &aValue) const$/;"	f	class:ot::Settings	typeref:typename:Error
Read	core/common/tlvs.hpp	/^    static Error Read(const Message &aMessage, uint16_t aOffset, typename SimpleTlvType::ValueTy/;"	f	class:ot::Tlv	typeref:typename:Error
Read	core/common/tlvs.hpp	/^    static Error Read(const Message &aMessage, uint16_t aOffset, typename StringTlvType::StringT/;"	f	class:ot::Tlv	typeref:typename:Error
Read	core/common/tlvs.hpp	/^    static Error Read(const Message &aMessage, uint16_t aOffset, typename UintTlvType::UintValue/;"	f	class:ot::Tlv	typeref:typename:Error
Read	core/meshcop/dataset.hpp	/^    template <typename SimpleTlvType> Error Read(typename SimpleTlvType::ValueType &aValue) cons/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
Read	core/meshcop/dataset.hpp	/^    template <typename UintTlvType> Error Read(typename UintTlvType::UintValueType &aValue) cons/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
Read	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Read(Dataset &aDataset) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Read	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Read(Dataset::Info &aDatasetInfo) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Read	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Read(Dataset::Tlvs &aDatasetTlvs) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Read	core/thread/network_diagnostic_tlvs.cpp	/^void MleCountersTlv::Read(MleCounters &aDiagMleCounters) const$/;"	f	class:ot::NetworkDiagnostic::MleCountersTlv	typeref:typename:void
Read	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::Read(void)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
ReadAndProcessRouteTlvOnFed	core/thread/mle_router.cpp	/^Error MleRouter::ReadAndProcessRouteTlvOnFed(RxInfo &aRxInfo, uint8_t aParentId)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
ReadBigEndianUint16	core/common/frame_data.cpp	/^Error FrameData::ReadBigEndianUint16(uint16_t &aUint16)$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadBigEndianUint32	core/common/frame_data.cpp	/^Error FrameData::ReadBigEndianUint32(uint32_t &aUint32)$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadBlockOptionValues	core/coap/coap_message.cpp	/^Error Message::ReadBlockOptionValues(uint16_t aBlockType)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
ReadBool	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadBool(bool &aBool)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadBrOnLinkPrefix	core/common/settings.cpp	/^Error Settings::ReadBrOnLinkPrefix(int aIndex, BrOnLinkPrefix &aBrOnLinkPrefix)$/;"	f	class:ot::Settings	typeref:typename:Error
ReadBytes	core/common/frame_data.cpp	/^Error FrameData::ReadBytes(void *aBuffer, uint16_t aLength)$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadBytes	core/common/message.cpp	/^uint16_t Message::ReadBytes(uint16_t aOffset, void *aBuf, uint16_t aLength) const$/;"	f	class:ot::Message	typeref:typename:uint16_t
ReadCanonicalName	core/net/dns_types.hpp	/^    Error ReadCanonicalName(const Message &aMessage,$/;"	f	class:ot::Dns::CnameRecord	typeref:typename:Error
ReadChallengeOrResponse	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadChallengeOrResponse(uint8_t aTlvType, RxChallenge &aRxChallenge) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadChallengeTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadChallengeTlv(RxChallenge &aChallenge) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadChannelMask	core/meshcop/meshcop_tlvs.cpp	/^Error ChannelMaskTlv::ReadChannelMask(uint32_t &aChannelMask) const$/;"	f	class:ot::MeshCoP::ChannelMaskTlv	typeref:typename:Error
ReadCommissioningDataUint16SubTlv	core/thread/network_data_leader.cpp	/^Error Leader::ReadCommissioningDataUint16SubTlv(MeshCoP::Tlv::Type aType, uint16_t &aValue) cons/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
ReadCslClockAccuracyTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadCslClockAccuracyTlv(Mac::CslAccuracy &aCslAccuracy) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadData	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadData(const uint8_t *&aData, uint16_t &aDataLen)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadDataWithLen	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadDataWithLen(const uint8_t *&aData, uint16_t &aDataLen)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEntry	core/common/settings.cpp	/^Error Settings::ReadEntry(Key aKey, void *aValue, uint16_t aMaxLength) const$/;"	f	class:ot::Settings	typeref:typename:Error
ReadEui48	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadEui48(spinel_eui48_t &aEui48)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui48	lib/spinel/spinel_decoder.hpp	/^    otError ReadEui48(const spinel_eui48_t *&aEui48Ptr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui48	lib/spinel/spinel_decoder.hpp	/^    otError ReadEui48(const uint8_t *&aEui48BufPtr) { return ReadItem(&aEui48BufPtr, sizeof(spin/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui64	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadEui64(otExtAddress &aEui64)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui64	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadEui64(spinel_eui64_t &aEui64)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui64	lib/spinel/spinel_decoder.hpp	/^    otError ReadEui64(const otExtAddress *&aEui64Ptr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui64	lib/spinel/spinel_decoder.hpp	/^    otError ReadEui64(const spinel_eui64_t *&aEui64Ptr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadEui64	lib/spinel/spinel_decoder.hpp	/^    otError ReadEui64(const uint8_t *&aEui64BufPtr) { return ReadItem(&aEui64BufPtr, sizeof(spin/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadExtendedOptionField	core/coap/coap_message.cpp	/^Error Option::Iterator::ReadExtendedOptionField(uint16_t &aValue)$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
ReadFrameCounterTlvs	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadFrameCounterTlvs(uint32_t &aLinkFrameCounter, uint32_t &aMleFrameCount/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadFrom	core/coap/coap.cpp	/^void CoapBase::Metadata::ReadFrom(const Message &aMessage)$/;"	f	class:ot::Coap::CoapBase::Metadata	typeref:typename:void
ReadFrom	core/coap/coap.cpp	/^void ResponsesQueue::ResponseMetadata::ReadFrom(const Message &aMessage)$/;"	f	class:ot::Coap::ResponsesQueue::ResponseMetadata	typeref:typename:void
ReadFrom	core/meshcop/joiner_router.cpp	/^void JoinerRouter::JoinerEntrustMetadata::ReadFrom(const Message &aMessage)$/;"	f	class:ot::MeshCoP::JoinerRouter::JoinerEntrustMetadata	typeref:typename:void
ReadFrom	core/net/dns_client.hpp	/^        void ReadFrom(const Query &aQuery) { IgnoreError(aQuery.Read(0, *this)); }$/;"	f	struct:ot::Dns::Client::QueryInfo	typeref:typename:void
ReadFrom	core/net/dns_types.cpp	/^Error LeaseOption::ReadFrom(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:Error
ReadFrom	core/net/dns_types.cpp	/^Error ResourceRecord::ReadFrom(const Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
ReadFrom	core/net/dnssd_server.cpp	/^void Server::ProxyQueryInfo::ReadFrom(const ProxyQuery &aQuery)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::ProxyQueryInfo	typeref:typename:void
ReadFrom	core/net/ip6_mpl.cpp	/^void Mpl::Metadata::ReadFrom(const Message &aMessage)$/;"	f	class:ot::Ip6::Mpl::Metadata	typeref:typename:void
ReadFrom	core/net/mdns.cpp	/^void Core::RecordCounts::ReadFrom(const Header &aHeader)$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts	typeref:typename:void
ReadFrom	core/net/sntp_client.hpp	/^        void  ReadFrom(const Message &aMessage)$/;"	f	class:ot::Sntp::Client::QueryMetadata	typeref:typename:void
ReadFrom	core/thread/mle.cpp	/^void Mle::DelayedResponseMetadata::ReadFrom(const Message &aMessage)$/;"	f	class:ot::Mle::Mle::DelayedResponseMetadata	typeref:typename:void
ReadFrom	core/thread/mle_types.cpp	/^Error RxChallenge::ReadFrom(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:Error
ReadFromLinkBuffer	core/net/dns_client.cpp	/^Error Client::ReadFromLinkBuffer(const otLinkedBuffer *&aLinkedBuffer,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ReadInt16	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadInt16(int16_t &aInt16)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadInt32	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadInt32(int32_t &aInt32)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadInt64	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadInt64(int64_t &aInt64)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadInt8	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadInt8(int8_t &aInt8)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6Address	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadIp6Address(otIp6Address &aIp6Addr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6Address	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadIp6Address(spinel_ipv6addr_t &aIp6Addr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6Address	lib/spinel/spinel_decoder.hpp	/^    otError ReadIp6Address(const otIp6Address *&aIp6AddrPtr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6Address	lib/spinel/spinel_decoder.hpp	/^    otError ReadIp6Address(const spinel_ipv6addr_t *&aIp6AddrPtr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6Address	lib/spinel/spinel_decoder.hpp	/^    otError ReadIp6Address(const uint8_t *&aIp6AddrBufPtr)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadIp6AddressFrom	posix/platform/ip6_utils.hpp	/^inline void ReadIp6AddressFrom(const void *aBuffer, otIp6Address &aAddress)$/;"	f	namespace:ot::Posix::Ip6Utils	typeref:typename:void
ReadItem	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadItem(const uint8_t **aPtr, uint16_t aSize)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadLabel	core/net/dns_types.cpp	/^Error Name::LabelIterator::ReadLabel(char *aLabelBuffer, uint8_t &aLabelLength, bool aAllowDotCh/;"	f	class:ot::Dns::Name::LabelIterator	typeref:typename:Error
ReadLabel	core/net/dns_types.cpp	/^Error Name::ReadLabel(const Message &aMessage, uint16_t &aOffset, char *aLabelBuffer, uint8_t &a/;"	f	class:ot::Dns::Name	typeref:typename:Error
ReadLeaderDataTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadLeaderDataTlv(LeaderData &aLeaderData) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadLittleEndianUint16	core/common/frame_data.cpp	/^Error FrameData::ReadLittleEndianUint16(uint16_t &aUint16)$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadLittleEndianUint32	core/common/frame_data.cpp	/^Error FrameData::ReadLittleEndianUint32(uint32_t &aUint32)$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadMacKey	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::ReadMacKey(const otMacKeyMaterial &aKeyMaterial, otMacKey &aKey)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ReadName	core/net/dns_types.cpp	/^Error Name::ReadName(const Message &aMessage, uint16_t &aOffset, char *aNameBuffer, uint16_t aNa/;"	f	class:ot::Dns::Name	typeref:typename:Error
ReadName	core/net/dns_types.cpp	/^Error ResourceRecord::ReadName(const Message &aMessage,$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
ReadName	core/net/dns_types.hpp	/^    static Error ReadName(const Message &aMessage, uint16_t &aOffset, char (&aNameBuffer)[kNameB/;"	f	class:ot::Dns::Name	typeref:typename:Error
ReadOperationalDataset	core/common/settings.cpp	/^Error Settings::ReadOperationalDataset(MeshCoP::Dataset::Type aType, MeshCoP::Dataset &aDataset)/;"	f	class:ot::Settings	typeref:typename:Error
ReadOptionValue	core/coap/coap_message.cpp	/^Error Option::Iterator::ReadOptionValue(uint64_t &aUintValue) const$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
ReadOptionValue	core/coap/coap_message.cpp	/^Error Option::Iterator::ReadOptionValue(void *aValue) const$/;"	f	class:ot::Coap::Option::Iterator	typeref:typename:Error
ReadOrGenerateKey	core/net/srp_client.cpp	/^Error Client::ReadOrGenerateKey(Crypto::Ecdsa::P256::KeyPair &aKeyPair)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
ReadOrGenerateKey	core/net/srp_client.cpp	/^Error Client::ReadOrGenerateKey(Crypto::Ecdsa::P256::KeyPairAsRef &aKeyRef)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
ReadPrimaryTlv	core/net/dns_dso.cpp	/^Error Dso::Connection::ReadPrimaryTlv(const Message &aMessage, Tlv::Type &aPrimaryTlvType) const$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
ReadPtrName	core/net/dns_types.cpp	/^Error PtrRecord::ReadPtrName(const Message &aMessage,$/;"	f	class:ot::Dns::PtrRecord	typeref:typename:Error
ReadPtrName	core/net/dns_types.hpp	/^    Error ReadPtrName(const Message &aMessage, uint16_t &aOffset, char *aNameBuffer, uint16_t aN/;"	f	class:ot::Dns::PtrRecord	typeref:typename:Error
ReadPtrName	core/net/dns_types.hpp	/^    Error ReadPtrName(const Message &aMessage,$/;"	f	class:ot::Dns::PtrRecord	typeref:typename:Error
ReadQueryName	core/net/dnssd_server.cpp	/^void Server::ReadQueryName(const Message &aQuery, Name::Buffer &aName)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
ReadQueryName	core/net/dnssd_server.cpp	/^void Server::Response::ReadQueryName(Name::Buffer &aName) const { Server::ReadQueryName(*mMessag/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
ReadRecord	core/net/dns_types.cpp	/^Error ResourceRecord::ReadRecord(const Message  &aMessage,$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
ReadRecord	core/net/dns_types.hpp	/^    template <class RecordType> static Error ReadRecord(const Message &aMessage, uint16_t &aOffs/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
ReadResourceRecord	core/net/srp_client.cpp	/^Error Client::ReadResourceRecord(const Message &aMessage, uint16_t &aOffset, Dns::ResourceRecord/;"	f	class:ot::Srp::Client	typeref:typename:Error
ReadResponseTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadResponseTlv(RxChallenge &aResponse) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadRouteTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadRouteTlv(RouteTlv &aRouteTlv) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadServiceInfo	core/net/dns_client.cpp	/^Error Client::Response::ReadServiceInfo(Section aSection, const Name &aName, ServiceInfo &aServi/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
ReadSignerName	core/net/dns_types.hpp	/^    Error ReadSignerName(const Message &aMessage, uint16_t &aOffset, char *aNameBuffer, uint16_t/;"	f	class:ot::Dns::SigRecord	typeref:typename:Error
ReadStringTlv	core/common/tlvs.cpp	/^Error Tlv::ReadStringTlv(const Message &aMessage, uint16_t aOffset, uint8_t aMaxStringLength, ch/;"	f	class:ot::Tlv	typeref:typename:Error
ReadTargetHostName	core/net/dns_types.hpp	/^    Error ReadTargetHostName(const Message &aMessage, uint16_t &aOffset, char (&aNameBuffer)[kNa/;"	f	class:ot::Dns::SrvRecord	typeref:typename:Error
ReadTargetHostName	core/net/dns_types.hpp	/^    Error ReadTargetHostName(const Message &aMessage,$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:Error
ReadTimeSyncSeq	core/mac/mac_frame.hpp	/^    uint8_t ReadTimeSyncSeq(void) const { return GetTimeIe()->GetSequence(); }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:uint8_t
ReadTimestamp	core/meshcop/dataset.cpp	/^Error Dataset::ReadTimestamp(Type aType, Timestamp &aTimestamp) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
ReadTlvFromSecureStorage	core/meshcop/dataset.cpp	/^Error Dataset::ReadTlvFromSecureStorage(Tlv::Type aTlvType, Crypto::Storage::KeyRef aKeyRef)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
ReadTlvRequestTlv	core/thread/mle.cpp	/^Error Mle::RxMessage::ReadTlvRequestTlv(TlvList &aTlvList) const$/;"	f	class:ot::Mle::Mle::RxMessage	typeref:typename:Error
ReadTlvValue	core/common/tlvs.cpp	/^Error Tlv::ReadTlvValue(const Message &aMessage, uint16_t aOffset, void *aValue, uint8_t aMinLen/;"	f	class:ot::Tlv	typeref:typename:Error
ReadTxtData	core/net/dns_types.cpp	/^Error TxtRecord::ReadTxtData(const Message &aMessage,$/;"	f	class:ot::Dns::TxtRecord	typeref:typename:Error
ReadTxtRecord	core/net/dns_client.cpp	/^Error Client::Response::ReadTxtRecord(Section aSection, const Name &aName, ServiceInfo &aService/;"	f	class:ot::Dns::Client::Response	typeref:typename:Error
ReadTypeIdsFromMessage	core/thread/link_metrics.cpp	/^Error Subject::ReadTypeIdsFromMessage(const Message &aMessage,$/;"	f	class:ot::LinkMetrics::Subject	typeref:typename:Error
ReadUint16	core/common/encoding.hpp	/^inline uint16_t ReadUint16(const uint8_t *aBuffer) { return static_cast<uint16_t>((aBuffer[0] <</;"	f	namespace:ot::BigEndian	typeref:typename:uint16_t
ReadUint16	core/common/encoding.hpp	/^inline uint16_t ReadUint16(const uint8_t *aBuffer) { return static_cast<uint16_t>(aBuffer[0] | (/;"	f	namespace:ot::LittleEndian	typeref:typename:uint16_t
ReadUint16	lib/spinel/multi_frame_buffer.hpp	/^        static uint16_t ReadUint16(const uint8_t *aBuffer)$/;"	f	class:ot::Spinel::MultiFrameBuffer::LittleEndian	typeref:typename:uint16_t
ReadUint16	lib/spinel/spi_frame.hpp	/^        static uint16_t ReadUint16(const uint8_t *aBuffer)$/;"	f	class:ot::Spinel::SpiFrame::LittleEndian	typeref:typename:uint16_t
ReadUint16	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUint16(uint16_t &aUint16)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadUint16At	lib/spinel/spinel_buffer.cpp	/^uint16_t Buffer::ReadUint16At(uint8_t *aBufPtr, Direction aDirection)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:uint16_t
ReadUint24	core/common/encoding.hpp	/^inline uint32_t ReadUint24(const uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:uint32_t
ReadUint24	core/common/encoding.hpp	/^inline uint32_t ReadUint24(const uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint32_t
ReadUint32	core/common/encoding.hpp	/^inline uint32_t ReadUint32(const uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:uint32_t
ReadUint32	core/common/encoding.hpp	/^inline uint32_t ReadUint32(const uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint32_t
ReadUint32	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUint32(uint32_t &aUint32)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadUint64	core/common/encoding.hpp	/^inline uint64_t ReadUint64(const uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:uint64_t
ReadUint64	core/common/encoding.hpp	/^inline uint64_t ReadUint64(const uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:uint64_t
ReadUint64	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUint64(uint64_t &aUint64)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadUint8	core/common/frame_data.cpp	/^Error FrameData::ReadUint8(uint8_t &aUint8) { return ReadBytes(&aUint8, sizeof(uint8_t)); }$/;"	f	class:ot::FrameData	typeref:typename:Error
ReadUint8	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUint8(uint8_t &aUint8)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadUintPacked	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUintPacked(unsigned int &aUint)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadUintTlv	core/common/tlvs.cpp	/^template <typename UintType> Error Tlv::ReadUintTlv(const Message &aMessage, uint16_t aOffset, U/;"	f	class:ot::Tlv	typeref:typename:Error
ReadUriPathOptions	core/coap/coap_message.cpp	/^Error Message::ReadUriPathOptions(char (&aUriPath)[kMaxReceivedUriPath + 1]) const$/;"	f	class:ot::Coap::Message	typeref:typename:Error
ReadUtf8	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ReadUtf8(const char *&aUtf8)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ReadValueAs	core/common/tlvs.hpp	/^    template <typename SimpleTlvType> const typename SimpleTlvType::ValueType &ReadValueAs(void)/;"	f	class:ot::Tlv	typeref:typename:const typename SimpleTlvType::ValueType &
ReadValueAs	core/common/tlvs.hpp	/^    template <typename UintTlvType> typename UintTlvType::UintValueType ReadValueAs(void) const$/;"	f	class:ot::Tlv	typeref:typename:UintTlvType::UintValueType
Reattach	core/thread/mle.cpp	/^uint32_t Mle::Reattach(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:uint32_t
ReattachStateToString	core/thread/mle.cpp	/^const char *Mle::ReattachStateToString(ReattachState aState)$/;"	f	class:ot::Mle::Mle	typeref:typename:const char *
RecalculatePollPeriod	core/mac/data_poll_sender.cpp	/^void DataPollSender::RecalculatePollPeriod(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
Receive	core/coap/coap.cpp	/^void CoapBase::Receive(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
Receive	core/mac/link_raw.cpp	/^Error LinkRaw::Receive(void)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
Receive	core/mac/mac_links.hpp	/^    void Receive(uint8_t aChannel)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Receive	core/mac/sub_mac.cpp	/^Error SubMac::Receive(uint8_t aChannel)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
Receive	core/meshcop/secure_transport.cpp	/^void SecureTransport::Receive(Message &aMessage)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
Receive	core/radio/radio.hpp	/^inline Error Radio::Receive(uint8_t aChannel)$/;"	f	class:ot::Radio	typeref:typename:Error
Receive	core/radio/radio.hpp	/^inline Error Radio::Receive(uint8_t) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
Receive	core/radio/trel_link.cpp	/^void Link::Receive(uint8_t aChannel)$/;"	f	class:ot::Trel::Link	typeref:typename:void
Receive	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Receive(uint8_t aChannel)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
ReceiveAt	core/radio/radio.hpp	/^inline Error Radio::ReceiveAt(uint8_t aChannel, uint32_t aStart, uint32_t aDuration)$/;"	f	class:ot::Radio	typeref:typename:Error
ReceiveAt	core/radio/radio.hpp	/^inline Error Radio::ReceiveAt(uint8_t, uint32_t, uint32_t) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
ReceiveByReference	core/net/tcp6.cpp	/^Error Tcp::Endpoint::ReceiveByReference(const otLinkedBuffer *&aBuffer)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
ReceiveContiguify	core/net/tcp6.cpp	/^Error Tcp::Endpoint::ReceiveContiguify(void)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
ReceiveDone	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::ReceiveDone(RxFrame *aFrame, Error aError) { Get<LinkRaw>().InvokeReceiv/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
ReceiveDone	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::ReceiveDone(RxFrame *aFrame, Error aError)$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
ReceiveIcmp6Message	posix/platform/infra_if.cpp	/^void InfraNetif::ReceiveIcmp6Message(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
ReceiveMessage	posix/platform/mdns_socket.cpp	/^void MdnsSocket::ReceiveMessage(MsgType aMsgType)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
ReceiveNetLinkMessage	posix/platform/infra_if.cpp	/^void InfraNetif::ReceiveNetLinkMessage(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
ReceivePacket	posix/platform/trel.cpp	/^static void ReceivePacket(int aSocket, otInstance *aInstance)$/;"	f	typeref:typename:void	file:
Receiver	core/net/udp6.hpp	/^        Receiver(otUdpHandler aHandler, void *aContext)$/;"	f	class:ot::Ip6::Udp::Receiver
ReclaimBuffers	core/common/message.cpp	/^Error MessagePool::ReclaimBuffers(Message::Priority aPriority) { return Get<MeshForwarder>().Evi/;"	f	class:ot::MessagePool	typeref:typename:Error
ReconnectSession	posix/client.cpp	/^bool ReconnectSession(Config &aConfig)$/;"	f	namespace:__anon7e280f770111	typeref:typename:bool
RecordAddressEvent	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordAddressEvent(Ip6::Netif::AddressEvent            aEvent,$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordAddressEvent	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordAddressEvent(Ip6::Netif::AddressEvent          aEvent,$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordCcaStatus	core/mac/mac.cpp	/^void Mac::RecordCcaStatus(bool aCcaSuccess, uint8_t aChannel)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
RecordCcaStatus	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::RecordCcaStatus(bool aCcaSuccess, uint8_t aChannel)$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
RecordCcaStatus	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::RecordCcaStatus(bool, uint8_t) {}$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
RecordCounts	core/net/mdns.hpp	/^        RecordCounts(void) { Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts
RecordExternalRouteEvent	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordExternalRouteEvent(NetDataEvent aEvent, const NetworkData::ExternalRo/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordFrameTransmitStatus	core/mac/link_raw.cpp	/^void LinkRaw::RecordFrameTransmitStatus(const TxFrame &aFrame, Error aError, uint8_t aRetryCount/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
RecordFrameTransmitStatus	core/mac/link_raw.hpp	/^    void    RecordFrameTransmitStatus(const TxFrame &, Error, uint8_t, bool) {}$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:void
RecordFrameTransmitStatus	core/mac/mac.cpp	/^void Mac::RecordFrameTransmitStatus(const TxFrame &aFrame, Error aError, uint8_t aRetryCount, bo/;"	f	class:ot::Mac::Mac	typeref:typename:void
RecordFrameTransmitStatus	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::RecordFrameTransmitStatus(const TxFrame &aFrame,$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
RecordInfo	core/net/mdns.hpp	/^        RecordInfo(void) { Clear(); }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo
RecordMessage	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordMessage(const Message &aMessage, const Mac::Address &aMacAddress, Mes/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordNeighborEvent	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordNeighborEvent(NeighborTable::Event aEvent, const NeighborTable::Entry/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordNetworkDataChange	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordNetworkDataChange(void)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordNetworkInfo	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordNetworkInfo(void)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordOnMeshPrefixEvent	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordOnMeshPrefixEvent(NetDataEvent aEvent, const NetworkData::OnMeshPrefi/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordRouterTableChange	core/utils/history_tracker.cpp	/^void HistoryTracker::RecordRouterTableChange(void)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordRxDone	core/radio/radio.cpp	/^void RadioStatistics::RecordRxDone(otError aError)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
RecordRxMessage	core/utils/history_tracker.hpp	/^    void RecordRxMessage(const Message &aMessage, const Mac::Address &aMacSource)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecordStateChange	core/radio/radio.cpp	/^void RadioStatistics::RecordStateChange(Status aStatus)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
RecordTxDone	core/radio/radio.cpp	/^void RadioStatistics::RecordTxDone(otError aError, uint16_t aPsduLength)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
RecordTxMessage	core/utils/history_tracker.hpp	/^    void RecordTxMessage(const Message &aMessage, const Mac::Address &aMacDest)$/;"	f	class:ot::Utils::HistoryTracker	typeref:typename:void
RecoverFromRcpFailure	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::RecoverFromRcpFailure(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
ReestablishLinkWithNeighbor	core/thread/mle.cpp	/^void Mle::ReestablishLinkWithNeighbor(Neighbor &aNeighbor)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
RefreshStoredChildren	core/thread/child_table.cpp	/^void ChildTable::RefreshStoredChildren(void)$/;"	f	class:ot::ChildTable	typeref:typename:void
RefreshTtl	core/net/mdns.cpp	/^bool Core::CacheRecordInfo::RefreshTtl(uint32_t aTtl)$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:bool
Register	core/backbone_router/ndproxy_table.cpp	/^Error NdProxyTable::Register(const Ip6::InterfaceIdentifier &aAddressIid,$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:Error
Register	core/net/mdns.cpp	/^Error Core::Register(const ItemInfo &aItemInfo, RequestId aRequestId, RegisterCallback aCallback/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
Register	core/net/mdns.cpp	/^void Core::Entry::Register(const Key &aKey, const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
Register	core/net/mdns.cpp	/^void Core::HostEntry::Register(const Host &aHost, const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
Register	core/net/mdns.cpp	/^void Core::HostEntry::Register(const Key &aKey, const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
Register	core/net/mdns.cpp	/^void Core::ServiceEntry::Register(const Key &aKey, const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
Register	core/net/mdns.cpp	/^void Core::ServiceEntry::Register(const Service &aService, const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
RegisterCallback	core/common/notifier.cpp	/^Error Notifier::RegisterCallback(otStateChangedCallback aCallback, void *aContext)$/;"	f	class:ot::Notifier	typeref:typename:Error
RegisterCallback	core/thread/neighbor_table.hpp	/^    void RegisterCallback(Callback aCallback) { mCallback = aCallback; }$/;"	f	class:ot::NeighborTable	typeref:typename:void
RegisterHandler	core/net/icmp6.cpp	/^Error Icmp::RegisterHandler(Handler &aHandler) { return mHandlers.Add(aHandler); }$/;"	f	class:ot::Ip6::Icmp	typeref:typename:Error
RegisterHost	core/net/dnssd.cpp	/^void Dnssd::RegisterHost(const Host &aHost, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dnssd	typeref:typename:void
RegisterHost	core/net/mdns.cpp	/^Error Core::RegisterHost(const Host &aHost, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
RegisterHost	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::RegisterHost(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
RegisterKey	core/net/dnssd.cpp	/^void Dnssd::RegisterKey(const Key &aKey, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dnssd	typeref:typename:void
RegisterKey	core/net/mdns.cpp	/^Error Core::RegisterKey(const Key &aKey, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
RegisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::RegisterKey(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
RegisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::RegisterKey(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
RegisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::RegisterKey(const char      *aName,$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
RegisterMulticastListeners	core/thread/mlr_manager.cpp	/^Error MlrManager::RegisterMulticastListeners(const Ip6::Address *aAddresses,$/;"	f	class:ot::MlrManager	typeref:typename:Error
RegisterNetworkData	core/thread/network_data_leader_ftd.cpp	/^void Leader::RegisterNetworkData(uint16_t aRloc16, const NetworkData &aNetworkData)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RegisterParentResponseStatsCallback	core/thread/mle.hpp	/^    void RegisterParentResponseStatsCallback(otThreadParentResponseCallback aCallback, void *aCo/;"	f	class:ot::Mle::Mle	typeref:typename:void
RegisterPeekPokeDelegates	ncp/ncp_base.cpp	/^void NcpBase::RegisterPeekPokeDelegates(otNcpDelegateAllowPeekPoke aAllowPeekDelegate,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
RegisterReceiver	core/common/time_ticker.cpp	/^void TimeTicker::RegisterReceiver(Receiver aReceiver)$/;"	f	class:ot::TimeTicker	typeref:typename:void
RegisterService	core/net/dnssd.cpp	/^void Dnssd::RegisterService(const Service &aService, RequestId aRequestId, RegisterCallback aCal/;"	f	class:ot::Dnssd	typeref:typename:void
RegisterService	core/net/mdns.cpp	/^Error Core::RegisterService(const Service &aService, RequestId aRequestId, RegisterCallback aCal/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
RegisterService	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::RegisterService(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
RegisterService	core/radio/trel_interface.cpp	/^void Interface::RegisterService(void)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
Reinit	core/net/mdns.cpp	/^void Core::TxMessage::Reinit(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
Release	core/common/owned_ptr.hpp	/^    Type *Release(void)$/;"	f	class:ot::OwnedPtr	typeref:typename:Type *
Release	core/common/retain_ptr.hpp	/^    Type *Release(void)$/;"	f	class:ot::RetainPtr	typeref:typename:Type *
Release	core/thread/router_table.cpp	/^Error RouterTable::Release(uint8_t aRouterId)$/;"	f	class:ot::RouterTable	typeref:typename:Error
Release	core/thread/router_table.hpp	/^        void    Release(uint8_t aRouterId) { mIndexes[aRouterId] = kReuseDelay; }$/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:void
ReleaseAllSubjects	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::ReleaseAllSubjects(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
ReleaseExpiredMappings	core/net/nat64_translator.cpp	/^uint16_t Translator::ReleaseExpiredMappings(void)$/;"	f	class:ot::Nat64::Translator	typeref:typename:uint16_t
ReleaseMapping	core/net/nat64_translator.cpp	/^void Translator::ReleaseMapping(AddressMapping &aMapping)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
ReleaseMappings	core/net/nat64_translator.cpp	/^uint16_t Translator::ReleaseMappings(LinkedList<AddressMapping> &aMappings)$/;"	f	class:ot::Nat64::Translator	typeref:typename:uint16_t
Remove	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::Remove(const Ip6::Address &aAddress)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
Remove	core/common/array.hpp	/^    void Remove(Type &aElement)$/;"	f	class:ot::Array	typeref:typename:void
Remove	core/common/linked_list.hpp	/^    Error Remove(const Type &aEntry)$/;"	f	class:ot::LinkedList	typeref:typename:Error
Remove	core/common/timer.cpp	/^void Timer::Scheduler::Remove(Timer &aTimer, const AlarmApi &aAlarmApi)$/;"	f	class:ot::Timer::Scheduler	typeref:typename:void
Remove	core/common/timer.hpp	/^        void Remove(TimerMicro &aTimer) { Timer::Scheduler::Remove(aTimer, sAlarmMicroApi); }$/;"	f	class:ot::TimerMicro::Scheduler	typeref:typename:void
Remove	core/common/timer.hpp	/^        void Remove(TimerMilli &aTimer) { Timer::Scheduler::Remove(aTimer, sAlarmMilliApi); }$/;"	f	class:ot::TimerMilli::Scheduler	typeref:typename:void
Remove	core/mac/mac_types.hpp	/^    void Remove(RadioType aType) { mBitMask &= ~BitFlag(aType); }$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:void
Remove	core/net/dns_dso.cpp	/^void Dso::Connection::PendingRequests::Remove(MessageId aMessageId) { mRequests.RemoveMatching(a/;"	f	class:ot::Dns::Dso::Connection::PendingRequests	typeref:typename:void
Remove	core/net/dnssd.cpp	/^void Dnssd::RequestIdRange::Remove(RequestId aId)$/;"	f	class:ot::Dnssd::RequestIdRange	typeref:typename:void
Remove	core/net/mdns.cpp	/^void Core::AddrCache::Remove(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
Remove	core/net/mdns.cpp	/^void Core::BrowseCache::Remove(const Browser &aBrowser) { CacheEntry::Remove(ResultCallback(aBro/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
Remove	core/net/mdns.cpp	/^void Core::CacheEntry::Remove(const ResultCallback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
Remove	core/net/mdns.cpp	/^void Core::SrvCache::Remove(const SrvResolver &aResolver) { CacheEntry::Remove(ResultCallback(aR/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
Remove	core/net/mdns.cpp	/^void Core::TxtCache::Remove(const TxtResolver &aResolver) { CacheEntry::Remove(ResultCallback(aR/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
Remove	core/thread/address_resolver.cpp	/^void AddressResolver::Remove(Mac::ShortAddress aRloc16, bool aMatchRouterId)$/;"	f	class:ot::AddressResolver	typeref:typename:void
Remove	core/thread/address_resolver.cpp	/^void AddressResolver::Remove(const Ip6::Address &aEid, Reason aReason)$/;"	f	class:ot::AddressResolver	typeref:typename:void
Remove	core/thread/mle_types.hpp	/^    void Remove(uint8_t aRouterId) { mRouterIdSet[aRouterId \/ 8] &= ~MaskFor(aRouterId); }$/;"	f	class:ot::Mle::RouterIdSet	typeref:typename:void
Remove	core/thread/network_data.cpp	/^void MutableNetworkData::Remove(void *aRemoveStart, uint8_t aRemoveLength)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
Remove	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Remove(State aNextState)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Remove	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::Remove(State aNextState)$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
Remove	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Remove(State aNextState)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
Remove	core/thread/network_data_service.hpp	/^    template <typename ServiceType> Error Remove(const typename ServiceType::ServiceData &aServi/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
Remove	core/thread/network_data_service.hpp	/^    template <typename ServiceType> Error Remove(void)$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
Remove	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Remove(spinel_prop_key_t aKey, const char *aFormat, ...)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Remove	posix/platform/mainloop.cpp	/^void Manager::Remove(Source &aSource)$/;"	f	class:ot::Posix::Mainloop::Manager	typeref:typename:void
Remove	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Remove(const Ip6::Address &aAddress)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
RemoveAddress	core/mac/mac_filter.cpp	/^void Filter::RemoveAddress(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Filter	typeref:typename:void
RemoveAddress	core/utils/slaac_address.cpp	/^void Slaac::RemoveAddress(SlaacAddress &aAddress)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
RemoveAgedEntries	core/utils/history_tracker.hpp	/^        void         RemoveAgedEntries(void) {}$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:void
RemoveAgedMessages	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::RemoveAgedMessages(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
RemoveAll	core/common/timer.cpp	/^void Timer::Scheduler::RemoveAll(const AlarmApi &aAlarmApi)$/;"	f	class:ot::Timer::Scheduler	typeref:typename:void
RemoveAll	core/common/timer.cpp	/^void TimerMicro::RemoveAll(Instance &aInstance) { aInstance.Get<Scheduler>().RemoveAll(); }$/;"	f	class:ot::TimerMicro	typeref:typename:void
RemoveAll	core/common/timer.cpp	/^void TimerMilli::RemoveAll(Instance &aInstance) { aInstance.Get<Scheduler>().RemoveAll(); }$/;"	f	class:ot::TimerMilli	typeref:typename:void
RemoveAll	core/common/timer.hpp	/^        void RemoveAll(void) { Timer::Scheduler::RemoveAll(sAlarmMicroApi); }$/;"	f	class:ot::TimerMicro::Scheduler	typeref:typename:void
RemoveAll	core/common/timer.hpp	/^        void RemoveAll(void) { Timer::Scheduler::RemoveAll(sAlarmMilliApi); }$/;"	f	class:ot::TimerMilli::Scheduler	typeref:typename:void
RemoveAllAddresses	core/utils/slaac_address.cpp	/^void Slaac::RemoveAllAddresses(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
RemoveAllExternalUnicastAddresses	core/net/netif.cpp	/^void Netif::RemoveAllExternalUnicastAddresses(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
RemoveAllForwardTrackingSeriesInfo	core/thread/neighbor.cpp	/^void Neighbor::RemoveAllForwardTrackingSeriesInfo(void)$/;"	f	class:ot::Neighbor	typeref:typename:void
RemoveAllMatching	core/common/array.hpp	/^    template <typename Indicator> void RemoveAllMatching(const Indicator &aIndicator)$/;"	f	class:ot::Array	typeref:typename:void
RemoveAllMatching	core/common/linked_list.hpp	/^    template <typename Indicator> void RemoveAllMatching(const Indicator &aIndicator, LinkedList/;"	f	class:ot::LinkedList	typeref:typename:void
RemoveAllMatching	core/common/owning_list.hpp	/^    template <typename Indicator> void RemoveAllMatching(const Indicator &aIndicator, OwningList/;"	f	class:ot::OwningList	typeref:typename:void
RemoveAllUnsecurePorts	core/net/ip6_filter.hpp	/^    void RemoveAllUnsecurePorts(void) { mUnsecurePorts.Clear(); }$/;"	f	class:ot::Ip6::Filter	typeref:typename:void
RemoveAndFreeAllMatching	core/common/owning_list.hpp	/^    template <typename Indicator> bool RemoveAndFreeAllMatching(const Indicator &aIndicator)$/;"	f	class:ot::OwningList	typeref:typename:bool
RemoveBlockWiseResource	core/coap/coap.cpp	/^void CoapBase::RemoveBlockWiseResource(ResourceBlockWise &aResource)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
RemoveBorderRouter	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveBorderRouter(uint16_t aRloc16, MatchMode aMatchMode)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveBrOnLinkPrefix	core/common/settings.cpp	/^Error Settings::RemoveBrOnLinkPrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::Settings	typeref:typename:Error
RemoveBytes	core/common/frame_builder.cpp	/^void FrameBuilder::RemoveBytes(uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::FrameBuilder	typeref:typename:void
RemoveCacheEntry	core/thread/address_resolver.cpp	/^void AddressResolver::RemoveCacheEntry(CacheEntry     &aEntry,$/;"	f	class:ot::AddressResolver	typeref:typename:void
RemoveCallback	core/common/notifier.cpp	/^void Notifier::RemoveCallback(otStateChangedCallback aCallback, void *aContext)$/;"	f	class:ot::Notifier	typeref:typename:void
RemoveChannel	core/mac/channel_mask.hpp	/^    void RemoveChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:void
RemoveChildren	core/thread/mle_router.cpp	/^void MleRouter::RemoveChildren(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
RemoveContext	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveContext(PrefixTlv &aPrefix, uint8_t aContextId)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveContext	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveContext(uint8_t aContextId)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveDataResponseMessages	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::RemoveDataResponseMessages(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
RemoveDelayedDataRequestMessage	core/thread/mle.cpp	/^void Mle::RemoveDelayedDataRequestMessage(const Ip6::Address &aDestination)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
RemoveDelayedDataResponseMessage	core/thread/mle.cpp	/^void Mle::RemoveDelayedDataResponseMessage(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
RemoveDelayedMessage	core/thread/mle.cpp	/^void Mle::RemoveDelayedMessage(Message::SubType aSubType, MessageType aMessageType, const Ip6::A/;"	f	class:ot::Mle::Mle	typeref:typename:void
RemoveDomainPrefix	core/backbone_router/bbr_local.cpp	/^Error Local::RemoveDomainPrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:Error
RemoveDomainPrefixFromNetworkData	core/backbone_router/bbr_local.cpp	/^void Local::RemoveDomainPrefixFromNetworkData(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
RemoveDomainUnicastAddress	core/thread/dua_manager.cpp	/^void DuaManager::RemoveDomainUnicastAddress(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
RemoveEmptyEntries	core/net/mdns.cpp	/^void Core::RemoveEmptyEntries(void)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
RemoveEntriesForRloc16	core/thread/address_resolver.cpp	/^void AddressResolver::RemoveEntriesForRloc16(uint16_t aRloc16) { Remove(aRloc16, \/* aMatchRoute/;"	f	class:ot::AddressResolver	typeref:typename:void
RemoveEntriesForRouterId	core/thread/address_resolver.cpp	/^void AddressResolver::RemoveEntriesForRouterId(uint8_t aRouterId)$/;"	f	class:ot::AddressResolver	typeref:typename:void
RemoveEntry	ncp/changed_props_set.hpp	/^    void RemoveEntry(uint8_t aIndex) { ClearBit(mChangedSet, aIndex); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
RemoveEntryForAddress	core/thread/address_resolver.cpp	/^void AddressResolver::RemoveEntryForAddress(const Ip6::Address &aEid) { Remove(aEid, kReasonRemo/;"	f	class:ot::AddressResolver	typeref:typename:void
RemoveExpiredEntries	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::RemoveExpiredEntries(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
RemoveExternalUnicastAddress	core/net/netif.cpp	/^Error Netif::RemoveExternalUnicastAddress(const Address &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:Error
RemoveFooter	core/common/message.cpp	/^void Message::RemoveFooter(uint16_t aLength) { IgnoreError(SetLength(GetLength() - Min(aLength, /;"	f	class:ot::Message	typeref:typename:void
RemoveForwardTrackingSeriesInfo	core/thread/neighbor.cpp	/^LinkMetrics::SeriesInfo *Neighbor::RemoveForwardTrackingSeriesInfo(const uint8_t &aSeriesId)$/;"	f	class:ot::Neighbor	typeref:typename:LinkMetrics::SeriesInfo *
RemoveFrom	core/net/dnssd_server.cpp	/^void Server::ProxyQueryInfo::RemoveFrom(ProxyQuery &aQuery) const { aQuery.RemoveFooter(sizeof(P/;"	f	class:ot::Dns::ServiceDiscovery::Server::ProxyQueryInfo	typeref:typename:void
RemoveFrom	core/net/ip6_mpl.cpp	/^void Mpl::Metadata::RemoveFrom(Message &aMessage) const { aMessage.RemoveFooter(sizeof(*this)); /;"	f	class:ot::Ip6::Mpl::Metadata	typeref:typename:void
RemoveFrom	core/thread/mle.cpp	/^void Mle::DelayedResponseMetadata::RemoveFrom(Message &aMessage) const { aMessage.RemoveFooter(s/;"	f	class:ot::Mle::Mle::DelayedResponseMetadata	typeref:typename:void
RemoveHasRoutePrefix	core/thread/network_data_local.hpp	/^    Error RemoveHasRoutePrefix(const Ip6::Prefix &aPrefix) { return RemovePrefix(aPrefix); }$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
RemoveHeader	core/common/message.cpp	/^void Message::RemoveHeader(uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:void
RemoveHeader	core/common/message.cpp	/^void Message::RemoveHeader(uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:void
RemoveHost	core/net/srp_server.cpp	/^void Server::RemoveHost(Host *aHost, RetainName aRetainName)$/;"	f	class:ot::Srp::Server	typeref:typename:void
RemoveHostAndServices	core/net/srp_client.cpp	/^Error Client::RemoveHostAndServices(bool aShouldRemoveKeyLease, bool aSendUnregToServer)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
RemoveInboundMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::RemoveInboundMulticastForwardingCache(const Ip6::Address &aGroupAd/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
RemoveIp6Address	core/thread/child.cpp	/^Error Child::RemoveIp6Address(const Ip6::Address &aAddress)$/;"	f	class:ot::Child	typeref:typename:Error
RemoveJoiner	core/meshcop/commissioner.cpp	/^Error Commissioner::RemoveJoiner(const Mac::ExtAddress *aEui64, const JoinerDiscerner *aDiscerne/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
RemoveJoiner	core/meshcop/commissioner.cpp	/^void Commissioner::RemoveJoiner(Joiner &aJoiner, uint32_t aDelay)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
RemoveJoiner	core/meshcop/commissioner.hpp	/^    Error RemoveJoiner(const JoinerDiscerner &aDiscerner, uint32_t aDelay)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
RemoveJoiner	core/meshcop/commissioner.hpp	/^    Error RemoveJoiner(const Mac::ExtAddress &aEui64, uint32_t aDelay)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
RemoveJoinerAny	core/meshcop/commissioner.hpp	/^    Error RemoveJoinerAny(uint32_t aDelay) { return RemoveJoiner(nullptr, nullptr, aDelay); }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
RemoveJoinerEntry	core/meshcop/commissioner.cpp	/^void Commissioner::RemoveJoinerEntry(Commissioner::Joiner &aJoiner)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
RemoveLocalFromNetData	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::RemoveLocalFromNetData(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
RemoveMatching	core/common/array.hpp	/^    template <typename Indicator> void RemoveMatching(const Indicator &aIndicator)$/;"	f	class:ot::Array	typeref:typename:void
RemoveMatching	core/common/linked_list.hpp	/^    template <typename Indicator> Type *RemoveMatching(const Indicator &aIndicator)$/;"	f	class:ot::LinkedList	typeref:typename:Type *
RemoveMatching	core/common/owning_list.hpp	/^    template <typename Indicator> OwnedPtr<Type> RemoveMatching(const Indicator &aIndicator)$/;"	f	class:ot::OwningList	typeref:typename:OwnedPtr<Type>
RemoveMessageFromSleepyChild	core/thread/indirect_sender.cpp	/^Error IndirectSender::RemoveMessageFromSleepyChild(Message &aMessage, Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:Error
RemoveMessageIfNoPendingTx	core/thread/mesh_forwarder.cpp	/^bool MeshForwarder::RemoveMessageIfNoPendingTx(Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:bool
RemoveMessages	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::RemoveMessages(Child &aChild, Message::SubType aSubType)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
RemoveMplOption	core/net/ip6.cpp	/^Error Ip6::RemoveMplOption(Message &aMessage)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
RemoveMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::RemoveMulticastForwardingCache($/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
RemoveNeighbor	core/thread/mle_router.cpp	/^void MleRouter::RemoveNeighbor(Neighbor &aNeighbor)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
RemoveOnLinkPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::RemoveOnLinkPrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
RemoveOnMeshPrefix	core/thread/network_data_local.hpp	/^    Error RemoveOnMeshPrefix(const Ip6::Prefix &aPrefix) { return RemovePrefix(aPrefix); }$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
RemoveOrDeprecateAddresses	core/utils/slaac_address.cpp	/^void Slaac::RemoveOrDeprecateAddresses(void)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
RemoveOrDeprecateEntriesFromInactiveRouters	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::RemoveOrDeprecateEntriesFromInactiveRouters(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
RemoveOrDeprecateOldEntries	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::RemoveOrDeprecateOldEntries(TimeMilli aTimeThreshold)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
RemovePeerEntry	core/radio/trel_interface.cpp	/^void Interface::RemovePeerEntry(Peer &aEntry)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
RemovePrefix	core/thread/network_data_local.cpp	/^Error Local::RemovePrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
RemoveQueryAndPrepareResponse	core/net/dnssd_server.cpp	/^void Server::RemoveQueryAndPrepareResponse(ProxyQuery &aQuery, const ProxyQueryInfo &aInfo, Resp/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
RemoveReceiver	core/net/udp6.cpp	/^Error Udp::RemoveReceiver(Receiver &aReceiver)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
RemoveResource	core/coap/coap.cpp	/^void CoapBase::RemoveResource(Resource &aResource)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
RemoveRloc	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRloc(uint16_t           aRloc16,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRloc	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRloc(uint16_t aRloc16, MatchMode aMatchMode, ChangedFlags &aChangedFlags)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRlocInBorderRouter	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRlocInBorderRouter(PrefixTlv       &aPrefix,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRlocInHasRoute	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRlocInHasRoute(PrefixTlv       &aPrefix,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRlocInPrefix	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRlocInPrefix(PrefixTlv       &aPrefix,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRlocInService	core/thread/network_data_leader_ftd.cpp	/^void Leader::RemoveRlocInService(ServiceTlv       &aService,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
RemoveRouter	core/thread/router_table.cpp	/^void RouterTable::RemoveRouter(Router &aRouter)$/;"	f	class:ot::RouterTable	typeref:typename:void
RemoveRouterLink	core/thread/mle_router.cpp	/^void MleRouter::RemoveRouterLink(Router &aRouter)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
RemoveRouterLink	core/thread/router_table.cpp	/^void RouterTable::RemoveRouterLink(Router &aRouter)$/;"	f	class:ot::RouterTable	typeref:typename:void
RemoveRoutersWithNoEntriesOrFlags	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::RemoveRoutersWithNoEntriesOrFlags(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
RemoveRssIn	core/mac/mac_filter.cpp	/^void Filter::RemoveRssIn(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Filter	typeref:typename:void
RemoveService	core/backbone_router/bbr_local.cpp	/^void Local::RemoveService(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
RemoveService	core/net/srp_client.cpp	/^Error Client::RemoveService(Service &aService)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
RemoveService	core/net/srp_server.cpp	/^void Server::Host::RemoveService(Service *aService, RetainName aRetainName, NotifyMode aNotifySe/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
RemoveService	core/thread/network_data_local.cpp	/^Error Local::RemoveService(uint32_t aEnterpriseNumber, const ServiceData &aServiceData)$/;"	f	class:ot::NetworkData::Local	typeref:typename:Error
RemoveService	core/thread/network_data_service.cpp	/^Error Manager::RemoveService(const void *aServiceData, uint8_t aServiceDataLength)$/;"	f	class:ot::NetworkData::Service::Manager	typeref:typename:Error
RemoveSocket	core/net/udp6.cpp	/^void Udp::RemoveSocket(SocketHandle &aSocket)$/;"	f	class:ot::Ip6::Udp	typeref:typename:void
RemoveStaleChildEntries	core/thread/network_data_notifier.cpp	/^Error Notifier::RemoveStaleChildEntries(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:Error
RemoveStoredChild	core/thread/child_table.cpp	/^void ChildTable::RemoveStoredChild(const Child &aChild)$/;"	f	class:ot::ChildTable	typeref:typename:void
RemoveSupportedRadioType	core/thread/radio_selector.hpp	/^        void RemoveSupportedRadioType(Mac::RadioType aType) { mSupportedRadioTypes.Remove(aType)/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:void
RemoveTemporaryData	core/thread/network_data.cpp	/^void MutableNetworkData::RemoveTemporaryData(void)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
RemoveTemporaryDataIn	core/thread/network_data.cpp	/^bool MutableNetworkData::RemoveTemporaryDataIn(PrefixTlv &aPrefix)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:bool
RemoveTemporaryDataIn	core/thread/network_data.cpp	/^bool MutableNetworkData::RemoveTemporaryDataIn(ServiceTlv &aService)$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:bool
RemoveTlv	core/meshcop/dataset.cpp	/^void Dataset::RemoveTlv(Tlv *aTlv)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
RemoveTlv	core/meshcop/dataset.cpp	/^void Dataset::RemoveTlv(Tlv::Type aType) { RemoveTlv(FindTlv(aType)); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
RemoveTlv	core/thread/network_data.cpp	/^void MutableNetworkData::RemoveTlv(NetworkDataTlv *aTlv) { Remove(aTlv, aTlv->GetSize()); }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
RemoveUnicastAddress	core/net/netif.cpp	/^void Netif::RemoveUnicastAddress(UnicastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
RemoveUnsecurePort	core/net/ip6_filter.hpp	/^    Error RemoveUnsecurePort(uint16_t aPort) { return UpdateUnsecurePorts(kRemove, aPort); }$/;"	f	class:ot::Ip6::Filter	typeref:typename:Error
ReplaceEntriesForRloc16	core/thread/address_resolver.cpp	/^void AddressResolver::ReplaceEntriesForRloc16(uint16_t aOldRloc16, uint16_t aNewRloc16)$/;"	f	class:ot::AddressResolver	typeref:typename:void
ReplacePublishedExternalRoute	core/thread/network_data_publisher.cpp	/^Error Publisher::ReplacePublishedExternalRoute(const Ip6::Prefix         &aPrefix,$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Error
ReplaceWithIp4Query	core/net/dns_client.cpp	/^Error Client::ReplaceWithIp4Query(Query &aQuery)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ReplaceWithSeparateSrvTxtQueries	core/net/dns_client.cpp	/^Error Client::ReplaceWithSeparateSrvTxtQueries(Query &aQuery)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ReportActiveScanResult	core/mac/mac.cpp	/^void Mac::ReportActiveScanResult(const RxFrame *aBeaconFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ReportDeferredAckStatus	core/radio/trel_link.cpp	/^void Link::ReportDeferredAckStatus(Neighbor &aNeighbor, Error aError)$/;"	f	class:ot::Trel::Link	typeref:typename:void
ReportEnergyScanResult	core/mac/mac.cpp	/^void Mac::ReportEnergyScanResult(int8_t aRssi)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ReportResultTo	core/net/mdns.cpp	/^void Core::SrvCache::ReportResultTo(ResultCallback &aCallback) const$/;"	f	class:ot::Dns::Multicast::Core::SrvCache	typeref:typename:void
ReportResultTo	core/net/mdns.cpp	/^void Core::TxtCache::ReportResultTo(ResultCallback &aCallback) const$/;"	f	class:ot::Dns::Multicast::Core::TxtCache	typeref:typename:void
ReportResultsTo	core/net/mdns.cpp	/^void Core::AddrCache::ReportResultsTo(ResultCallback &aCallback) const$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
ReportResultsTo	core/net/mdns.cpp	/^void Core::BrowseCache::ReportResultsTo(ResultCallback &aCallback) const$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
Request	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Request(uint32_t aCommand, spinel_prop_key_t aKey, const char *aFormat, .../;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
RequestAutoChannelSelect	core/utils/channel_manager.cpp	/^Error ChannelManager::RequestAutoChannelSelect(bool aSkipQualityCheck)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
RequestChannelChange	core/utils/channel_manager.cpp	/^void ChannelManager::RequestChannelChange(uint8_t aChannel)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
RequestChannelSelect	core/utils/channel_manager.cpp	/^Error ChannelManager::RequestChannelSelect(bool aSkipQualityCheck)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
RequestCslChannelSelect	core/utils/channel_manager.cpp	/^Error ChannelManager::RequestCslChannelSelect(bool aSkipQualityCheck)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
RequestCslFrameTransmission	core/mac/mac.cpp	/^void Mac::RequestCslFrameTransmission(uint32_t aDelay)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
RequestDataPollTransmission	core/mac/mac.cpp	/^Error Mac::RequestDataPollTransmission(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
RequestDirectFrameTransmission	core/mac/mac.cpp	/^void Mac::RequestDirectFrameTransmission(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
RequestFrameChange	core/mac/data_poll_handler.cpp	/^void DataPollHandler::RequestFrameChange(FrameChange aChange, Child &aChild)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
RequestIdRange	core/net/dnssd.hpp	/^        RequestIdRange(void)$/;"	f	struct:ot::Dnssd::RequestIdRange
RequestIndirectFrameTransmission	core/mac/mac.cpp	/^void Mac::RequestIndirectFrameTransmission(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
RequestMessageUpdate	core/thread/indirect_sender.cpp	/^void IndirectSender::RequestMessageUpdate(Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:void
RequestNetworkChannelChange	core/utils/channel_manager.cpp	/^void ChannelManager::RequestNetworkChannelChange(uint8_t aChannel)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
RequestNetworkChannelSelect	core/utils/channel_manager.cpp	/^Error ChannelManager::RequestNetworkChannelSelect(bool aSkipQualityCheck)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
RequestShorterChildIdRequest	core/thread/mle.cpp	/^void Mle::RequestShorterChildIdRequest(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
RequestStop	core/border_router/routing_manager.hpp	/^    void RequestStop(void) { Stop(); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
RequestUpdate	core/meshcop/dataset_updater.cpp	/^Error DatasetUpdater::RequestUpdate(const Dataset::Info &aDataset, UpdaterCallback aCallback, vo/;"	f	class:ot::MeshCoP::DatasetUpdater	typeref:typename:Error
RequestV	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::RequestV(uint32_t command, spinel_prop_key_t aKey, const char *aFormat, va_/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
RequestWithExpectedCommandV	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::RequestWithExpectedCommandV(uint32_t          aExpectedCommand,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
RequestWithPropertyFormat	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::RequestWithPropertyFormat(const char       *aPropertyFormat,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
RequestWithPropertyFormatV	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::RequestWithPropertyFormatV(const char       *aPropertyFormat,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Reregister	core/thread/mlr_manager.cpp	/^void MlrManager::Reregister(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
RescheduleCslTx	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::RescheduleCslTx(void)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
ReserveCapacity	core/common/heap_array.hpp	/^    Error ReserveCapacity(IndexType aCapacity) { return Allocate(aCapacity); }$/;"	f	class:ot::Heap::Array	typeref:typename:Error
Reset	core/backbone_router/bbr_leader.cpp	/^void Leader::Reset(void)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
Reset	core/backbone_router/bbr_local.cpp	/^void Local::Reset(void)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
Reset	core/common/owned_ptr.hpp	/^    void Reset(Type *aPointer = nullptr)$/;"	f	class:ot::OwnedPtr	typeref:typename:void
Reset	core/common/retain_ptr.hpp	/^    void Reset(Type *aPointer = nullptr)$/;"	f	class:ot::RetainPtr	typeref:typename:void
Reset	core/instance/instance.cpp	/^void Instance::Reset(void) { otPlatReset(this); }$/;"	f	class:ot::Instance	typeref:typename:void
Reset	core/mac/mac_types.hpp	/^    void Reset(void) { SetAll(0); }$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
Reset	core/net/dnssd_server.hpp	/^        void Reset(void) { mValid = false; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server::UpstreamQueryTransaction	typeref:typename:void
Reset	core/thread/child_table.cpp	/^void ChildTable::Iterator::Reset(void)$/;"	f	class:ot::ChildTable::Iterator	typeref:typename:void
Reset	core/thread/network_data_leader.cpp	/^void Leader::Reset(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
Reset	core/thread/network_data_service.hpp	/^        void Reset(void)$/;"	f	class:ot::NetworkData::Service::Manager::Iterator	typeref:typename:void
Reset	lib/hdlc/hdlc.cpp	/^void Decoder::Reset(void)$/;"	f	class:ot::Hdlc::Decoder	typeref:typename:void
Reset	lib/spinel/spinel_decoder.cpp	/^void Decoder::Reset(void)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:void
Reset	ncp/ncp_hdlc.cpp	/^void NcpHdlc::BufferEncrypterReader::Reset(void)$/;"	f	class:ot::Ncp::NcpHdlc::BufferEncrypterReader	typeref:typename:void
ResetAdvertiseInterval	core/thread/mle_router.cpp	/^void MleRouter::ResetAdvertiseInterval(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
ResetBorderRoutingCounters	core/net/ip6.hpp	/^    void ResetBorderRoutingCounters(void) { ClearAllBytes(mBorderRoutingCounters); }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
ResetBufferInfo	core/instance/instance.cpp	/^void Instance::ResetBufferInfo(void) { Get<MessagePool>().ResetMaxUsedBufferCount(); }$/;"	f	class:ot::Instance	typeref:typename:void
ResetConnection	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::ResetConnection(void)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
ResetCoprocessor	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::ResetCoprocessor(bool aSoftwareReset)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
ResetCounter	core/thread/child_supervision.hpp	/^    void ResetCounter(void) { mCounter = 0; }$/;"	f	class:ot::SupervisionListener	typeref:typename:void
ResetCounters	core/mac/mac.hpp	/^    void ResetCounters(void) { ClearAllBytes(mCounters); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ResetCounters	core/net/srp_advertising_proxy.hpp	/^    void ResetCounters(void) { mCounters.Clear(); }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
ResetCounters	core/radio/trel_interface.cpp	/^void Interface::ResetCounters(void) { otPlatTrelResetCounters(&GetInstance()); }$/;"	f	class:ot::Trel::Interface	typeref:typename:void
ResetCounters	core/thread/mesh_forwarder.hpp	/^    void ResetCounters(void) { ClearAllBytes(mIpCounters); }$/;"	f	class:ot::MeshForwarder	typeref:typename:void
ResetCounters	core/thread/mle.cpp	/^void Mle::ResetCounters(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ResetCounters	ncp/ncp_base.cpp	/^void NcpBase::ResetCounters(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
ResetCounters	posix/platform/trel.cpp	/^static void ResetCounters() { memset(&sCounters, 0, sizeof(sCounters)); }$/;"	f	typeref:typename:void	file:
ResetCsl	core/radio/radio.hpp	/^inline Error Radio::ResetCsl(void) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
ResetCsl	core/radio/radio.hpp	/^inline Error Radio::ResetCsl(void) { return otPlatRadioResetCsl(GetInstancePtr()); }$/;"	f	class:ot::Radio	typeref:typename:Error
ResetCslTxAttempts	core/thread/csl_tx_scheduler.hpp	/^        void    ResetCslTxAttempts(void) { mCslTxAttempts = 0; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
ResetDefaultConfig	core/net/dns_client.cpp	/^void Client::ResetDefaultConfig(void)$/;"	f	class:ot::Dns::Client	typeref:typename:void
ResetEntryNumber	core/utils/history_tracker.hpp	/^        void      ResetEntryNumber(void) { mData16 = 0; }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:void
ResetExpireTime	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::ResetExpireTime(TimeMilli aNow)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
ResetFrameCounters	core/thread/key_manager.cpp	/^void KeyManager::ResetFrameCounters(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
ResetIndirectMessageCount	core/thread/indirect_sender.hpp	/^        void ResetIndirectMessageCount(void) { mQueuedMessageCount = 0; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
ResetIndirectTxAttempts	core/mac/data_poll_handler.hpp	/^        void    ResetIndirectTxAttempts(void) { mIndirectTxAttempts = 0; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
ResetKeepAliveTimer	core/mac/data_poll_sender.cpp	/^void DataPollSender::ResetKeepAliveTimer(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
ResetKeyRotationTimer	core/thread/key_manager.cpp	/^void KeyManager::ResetKeyRotationTimer(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
ResetLifetime	core/thread/mesh_forwarder.hpp	/^            void              ResetLifetime(void) { mLifetime = kLifetime; }$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:void
ResetLinkFailures	core/thread/neighbor.hpp	/^    void ResetLinkFailures(void) { mLinkFailures = 0; }$/;"	f	class:ot::Neighbor	typeref:typename:void
ResetMaxLength	core/thread/network_data_leader.hpp	/^    void ResetMaxLength(void) { mMaxLength = GetLength(); }$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
ResetMaxUsedBufferCount	core/common/message.hpp	/^    void ResetMaxUsedBufferCount(void) { mMaxAllocated = mNumAllocated; }$/;"	f	class:ot::MessagePool	typeref:typename:void
ResetMessageCount	core/thread/src_match_controller.cpp	/^void SourceMatchController::ResetMessageCount(Child &aChild)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
ResetRadioStack	core/instance/instance.cpp	/^void Instance::ResetRadioStack(void)$/;"	f	class:ot::Instance	typeref:typename:void
ResetReasonToSpinelStatus	ncp/ncp_base.cpp	/^static spinel_status_t ResetReasonToSpinelStatus(otPlatResetReason aReason)$/;"	f	namespace:ot::Ncp	typeref:typename:spinel_status_t	file:
ResetRetrySuccessHistogram	core/mac/mac.cpp	/^void Mac::ResetRetrySuccessHistogram() { ClearAllBytes(mRetryHistogram); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ResetRetryWaitInterval	core/net/srp_client.hpp	/^    void         ResetRetryWaitInterval(void) { mRetryWaitInterval = kMinRetryWaitInterval; }$/;"	f	class:ot::Srp::Client	typeref:typename:void
ResetSecondsSinceLastSupervision	core/thread/child.hpp	/^    void ResetSecondsSinceLastSupervision(void) { mSecondsSinceSupervision = 0; }$/;"	f	class:ot::Child	typeref:typename:void
ResetStates	posix/platform/spi_interface.cpp	/^void SpiInterface::ResetStates(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
ResetTime	core/radio/radio.cpp	/^void RadioStatistics::ResetTime(void)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
ResetTimeInQueueStat	core/thread/mesh_forwarder.hpp	/^    void ResetTimeInQueueStat(void) { mTxQueueStats.Clear(); }$/;"	f	class:ot::MeshForwarder	typeref:typename:void
ResetTimeoutFailureCount	core/net/srp_client.hpp	/^        void    ResetTimeoutFailureCount(void) { mTimeoutFailureCount = 0; }$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
ResetTimeouts	core/net/dns_dso.cpp	/^void Dso::Connection::ResetTimeouts(bool aIsKeepAliveMessage)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
ResetToBootloader	core/instance/instance.cpp	/^Error Instance::ResetToBootloader(void) { return otPlatResetToBootloader(this); }$/;"	f	class:ot::Instance	typeref:typename:Error
ResetToSaved	lib/spinel/spinel_decoder.cpp	/^otError Decoder::ResetToSaved(void)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:otError
ResetToSaved	lib/spinel/spinel_encoder.cpp	/^otError Encoder::ResetToSaved(void)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
ResetTxAttempts	core/mac/data_poll_handler.cpp	/^void DataPollHandler::ResetTxAttempts(Child &aChild)$/;"	f	class:ot::DataPollHandler	typeref:typename:void
ResetUpstreamQueryTransaction	core/net/dnssd_server.cpp	/^void Server::ResetUpstreamQueryTransaction(UpstreamQueryTransaction &aTxn, Error aError)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
ResignCommissioner	core/meshcop/meshcop_leader.cpp	/^void Leader::ResignCommissioner(void)$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
ResizeMessage	core/common/message.cpp	/^Error Message::ResizeMessage(uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:Error
Resolve	core/net/dns_client.cpp	/^Error Client::Resolve(const char        *aInstanceLabel,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
Resolve	core/thread/address_resolver.cpp	/^Error AddressResolver::Resolve(const Ip6::Address &aEid, Mac::ShortAddress &aRloc16, bool aAllow/;"	f	class:ot::AddressResolver	typeref:typename:Error
Resolve	core/thread/address_resolver.hpp	/^    Error Resolve(const Ip6::Address &aEid, Mac::ShortAddress &aRloc16)$/;"	f	class:ot::AddressResolver	typeref:typename:Error
ResolveAddress	core/net/dns_client.cpp	/^Error Client::ResolveAddress(const char        *aHostName,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ResolveByProxy	core/net/dnssd_server.cpp	/^void Server::ResolveByProxy(Response &aResponse, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
ResolveBySrp	core/net/dnssd_server.cpp	/^Error Server::Response::ResolveBySrp(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:Error
ResolveByUpstream	core/net/dnssd_server.cpp	/^Error Server::ResolveByUpstream(const Request &aRequest)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:Error
ResolveDua	core/backbone_router/ndproxy_table.cpp	/^NdProxyTable::NdProxy *NdProxyTable::ResolveDua(const Ip6::Address &aDua)$/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:NdProxyTable::NdProxy *
ResolveHostAddressIfNeeded	core/net/dns_client.cpp	/^void Client::ResolveHostAddressIfNeeded(Query &aQuery, const Message &aResponseMessage)$/;"	f	class:ot::Dns::Client	typeref:typename:void
ResolveIp4Address	core/net/dns_client.cpp	/^Error Client::ResolveIp4Address(const char        *aHostName,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ResolveRoutingLoops	core/thread/mle_router.cpp	/^void MleRouter::ResolveRoutingLoops(uint16_t aSourceMac, uint16_t aDestRloc16)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
ResolveService	core/net/dns_client.cpp	/^Error Client::ResolveService(const char        *aInstanceLabel,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ResolveServiceAndHostAddress	core/net/dns_client.cpp	/^Error Client::ResolveServiceAndHostAddress(const char        *aInstanceLabel,$/;"	f	class:ot::Dns::Client	typeref:typename:Error
ResolveUsingNetDataServices	core/thread/address_resolver.cpp	/^Error AddressResolver::ResolveUsingNetDataServices(const Ip6::Address &aEid, Mac::ShortAddress &/;"	f	class:ot::AddressResolver	typeref:typename:Error
Resource	core/coap/coap.cpp	/^Resource::Resource(Uri aUri, RequestHandler aHandler, void *aContext)$/;"	f	class:ot::Coap::Resource
Resource	core/coap/coap.cpp	/^Resource::Resource(const char *aUriPath, RequestHandler aHandler, void *aContext)$/;"	f	class:ot::Coap::Resource
ResourceBlockWise	core/coap/coap.hpp	/^    ResourceBlockWise(const char                 *aUriPath,$/;"	f	class:ot::Coap::ResourceBlockWise
Response	core/net/dns_client.hpp	/^        Response(void) { Clear(); }$/;"	f	class:ot::Dns::Client::Response
Response	core/net/dnssd_server.cpp	/^Server::Response::Response(Instance &aInstance)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response
ResponseCodeToError	core/net/dns_types.cpp	/^Error Header::ResponseCodeToError(Response aResponse)$/;"	f	class:ot::Dns::Header	typeref:typename:Error
ResponsesQueue	core/coap/coap.cpp	/^ResponsesQueue::ResponsesQueue(Instance &aInstance)$/;"	f	class:ot::Coap::ResponsesQueue
RestartAddressQueries	core/thread/address_resolver.cpp	/^void AddressResolver::RestartAddressQueries(void)$/;"	f	class:ot::AddressResolver	typeref:typename:void
RestartAfterRemovingEphemeralKey	core/meshcop/border_agent.cpp	/^void BorderAgent::RestartAfterRemovingEphemeralKey(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
RestartTimer	core/thread/child_supervision.cpp	/^void SupervisionListener::RestartTimer(void)$/;"	f	class:ot::SupervisionListener	typeref:typename:void
Restore	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Restore(void)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Restore	core/thread/child_table.cpp	/^void ChildTable::Restore(void)$/;"	f	class:ot::ChildTable	typeref:typename:void
Restore	core/thread/dua_manager.cpp	/^void DuaManager::Restore(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
Restore	core/thread/mle.cpp	/^void Mle::Restore(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
RestoreProperties	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::RestoreProperties(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
RestoreToSavedState	core/net/mdns.cpp	/^void Core::TxMessage::RestoreToSavedState(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
ResultCallback	core/net/mdns.hpp	/^        explicit ResultCallback(CallbackType aCallback)$/;"	f	class:ot::Dns::Multicast::Core::ResultCallback
Resume	core/net/srp_client.cpp	/^void Client::Resume(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
ResumeMessageTransmissions	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::ResumeMessageTransmissions(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
RetainCountable	core/common/retain_ptr.hpp	/^    RetainCountable(void)$/;"	f	class:ot::RetainCountable
RetainPtr	core/common/retain_ptr.hpp	/^    RetainPtr(const RetainPtr &aOther)$/;"	f	class:ot::RetainPtr
RetainPtr	core/common/retain_ptr.hpp	/^    explicit RetainPtr(Type *aPointer)$/;"	f	class:ot::RetainPtr
Reverse32	core/common/encoding.hpp	/^inline uint32_t Reverse32(uint32_t v)$/;"	f	namespace:ot	typeref:typename:uint32_t
RioAdvertiser	core/border_router/routing_manager.cpp	/^RoutingManager::RioAdvertiser::RioAdvertiser(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser
Rloc16FromRouterId	core/thread/mle_types.hpp	/^inline uint16_t Rloc16FromRouterId(uint8_t aRouterId) { return static_cast<uint16_t>(aRouterId </;"	f	namespace:ot::Mle	typeref:typename:uint16_t
RlocMatch	core/thread/network_data_leader_ftd.cpp	/^bool Leader::RlocMatch(uint16_t aFirstRloc16, uint16_t aSecondRloc16, MatchMode aMatchMode)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:bool
RoleToString	core/thread/mle_types.cpp	/^const char *RoleToString(DeviceRole aRole)$/;"	f	namespace:ot::Mle	typeref:typename:const char *
RouteFlagsToString	cli/cli_network_data.cpp	/^void NetworkData::RouteFlagsToString(const otExternalRouteConfig &aConfig, FlagsString &aString)$/;"	f	class:ot::Cli::NetworkData	typeref:typename:void
RouteLookup	core/net/ip6.cpp	/^Error Ip6::RouteLookup(const Address &aSource, const Address &aDestination) const$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
RouteLookup	core/thread/network_data_leader.cpp	/^Error Leader::RouteLookup(const Ip6::Address &aSource, const Ip6::Address &aDestination, uint16_/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
RoutePreferenceFromValue	core/thread/network_data_types.hpp	/^inline RoutePreference RoutePreferenceFromValue(uint8_t aValue)$/;"	f	namespace:ot::NetworkData	typeref:typename:RoutePreference
RoutePreferenceToString	core/thread/network_data_types.hpp	/^inline const char *RoutePreferenceToString(RoutePreference aPreference) { return Preference::ToS/;"	f	namespace:ot::NetworkData	typeref:typename:const char *
RoutePreferenceToValue	core/thread/network_data_types.hpp	/^inline uint8_t RoutePreferenceToValue(int8_t aPref) { return Preference::To2BitUint(aPref); }$/;"	f	namespace:ot::NetworkData	typeref:typename:uint8_t
RoutePublisher	core/border_router/routing_manager.cpp	/^RoutingManager::RoutePublisher::RoutePublisher(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher
RouterAdvOriginToString	core/border_router/routing_manager.cpp	/^const char *RoutingManager::RouterAdvOriginToString(RouterAdvOrigin aRaOrigin)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:const char *
RouterIdFromRloc16	core/thread/mle_types.hpp	/^inline uint8_t RouterIdFromRloc16(uint16_t aRloc16) { return aRloc16 >> kRouterIdOffset; }$/;"	f	namespace:ot::Mle	typeref:typename:uint8_t
RouterIdMap	core/thread/router_table.hpp	/^        RouterIdMap(void) { Clear(); }$/;"	f	class:ot::RouterTable::RouterIdMap
RouterIdMatch	core/thread/mle_types.hpp	/^inline bool RouterIdMatch(uint16_t aRloc16A, uint16_t aRloc16B)$/;"	f	namespace:ot::Mle	typeref:typename:bool
RouterRoleTransition	core/thread/mle_router.cpp	/^MleRouter::RouterRoleTransition::RouterRoleTransition(void)$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition
RouterSolicitMessage	core/net/nd6.cpp	/^RouterSolicitMessage::RouterSolicitMessage(void)$/;"	f	class:ot::Ip6::Nd::RouterSolicitMessage
RouterTable	core/thread/router_table.cpp	/^RouterTable::RouterTable(Instance &aInstance)$/;"	f	class:ot::RouterTable
RoutingManager	core/border_router/routing_manager.cpp	/^RoutingManager::RoutingManager(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager
RrClassIsInternetOrAny	core/net/mdns.cpp	/^bool Core::RrClassIsInternetOrAny(uint16_t aRrClass)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:bool
RsSender	core/border_router/routing_manager.cpp	/^RoutingManager::RsSender::RsSender(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender
RunTask	core/common/tasklet.hpp	/^    void RunTask(void) { mHandler(*this); }$/;"	f	class:ot::Tasklet	typeref:typename:void
RxInfo	core/thread/mle.hpp	/^        RxInfo(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	struct:ot::Mle::Mle::RxInfo
RxMessage	core/net/nd6.hpp	/^        explicit RxMessage(const Icmp6Packet &aPacket)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage
RxMsgEntry	core/net/mdns.cpp	/^Core::MultiPacketRxMessages::RxMsgEntry::RxMsgEntry(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::MultiPacketRxMessages::RxMsgEntry
RxRaTracker	core/border_router/routing_manager.cpp	/^RoutingManager::RxRaTracker::RxRaTracker(Instance &aInstance)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker
SampleRssi	core/mac/sub_mac.cpp	/^void SubMac::SampleRssi(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SanitizeFreeSpace	core/utils/flash.cpp	/^void Flash::SanitizeFreeSpace(void)$/;"	f	class:ot::Flash	typeref:typename:void
Save	core/common/settings.hpp	/^    template <typename EntryType> Error Save(const EntryType &aEntry)$/;"	f	class:ot::Settings	typeref:typename:Error
Save	core/common/settings.hpp	/^    template <typename EntryType> Error Save(const typename EntryType::ValueType &aValue)$/;"	f	class:ot::Settings	typeref:typename:Error
Save	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Save(const Dataset &aDataset, bool aAllowOlderTimestamp)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Save	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::Save(const Timestamp &aTimestamp, const Message &aMessage, uint16_t aOffse/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
Save	core/meshcop/dataset_manager.hpp	/^    Error Save(const Dataset &aDataset) { return Save(aDataset, \/* aAllowOlderTimestamp *\/ fal/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
SaveCurrentState	core/net/mdns.cpp	/^void Core::TxMessage::SaveCurrentState(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
SaveDiscoveredJoinerRouter	core/meshcop/joiner.cpp	/^void Joiner::SaveDiscoveredJoinerRouter(const Mle::DiscoverScanner::ScanResult &aResult)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
SaveEntry	core/common/settings.cpp	/^Error Settings::SaveEntry(Key aKey, const void *aValue, void *aPrev, uint16_t aLength)$/;"	f	class:ot::Settings	typeref:typename:Error
SaveFrame	lib/spinel/multi_frame_buffer.hpp	/^    otError SaveFrame(void)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:otError
SaveLocal	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::SaveLocal(const Dataset::Tlvs &aDatasetTlvs)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
SaveLocal	core/meshcop/dataset_manager.cpp	/^void DatasetManager::SaveLocal(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SaveLocal	core/meshcop/dataset_manager.cpp	/^void DatasetManager::SaveLocal(const Dataset::Info &aDatasetInfo)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SaveMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::SaveMulticastForwardingCache(const Ip6::Address               &aSr/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
SaveOffset	core/net/mdns.cpp	/^void Core::TxMessage::SaveOffset(uint16_t &aCompressOffset, const Message &aMessage, Section aSe/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
SaveOperationalDataset	core/common/settings.cpp	/^void Settings::SaveOperationalDataset(MeshCoP::Dataset::Type aType, const MeshCoP::Dataset &aDat/;"	f	class:ot::Settings	typeref:typename:void
SavePosition	lib/spinel/spinel_decoder.cpp	/^void Decoder::SavePosition(void)$/;"	f	class:ot::Spinel::Decoder	typeref:typename:void
SavePosition	lib/spinel/spinel_encoder.cpp	/^otError Encoder::SavePosition(void)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
SavePrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::SavePrefix(const Ip6::Prefix &aPrefix, TimeMilli aExpi/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
SaveQueryResponse	core/net/dns_client.cpp	/^void Client::SaveQueryResponse(Query &aQuery, const Message &aResponseMessage)$/;"	f	class:ot::Dns::Client	typeref:typename:void
SaveSubTlvOffset	core/thread/network_data.hpp	/^        void SaveSubTlvOffset(const NetworkDataTlv *aSubTlv, const NetworkDataTlv *aSubTlvs)$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
SaveTlvInSecureStorageAndClearValue	core/meshcop/dataset.cpp	/^void Dataset::SaveTlvInSecureStorageAndClearValue(Tlv::Type aTlvType, Crypto::Storage::KeyRef aK/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
SaveTlvOffset	core/thread/network_data.hpp	/^        void SaveTlvOffset(const NetworkDataTlv *aTlv, const uint8_t *aTlvs)$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
ScaleLinkMarginToRawValue	core/thread/link_metrics.cpp	/^uint8_t ScaleLinkMarginToRawValue(uint8_t aLinkMargin)$/;"	f	namespace:ot::LinkMetrics	typeref:typename:uint8_t
ScaleRawValueToLinkMargin	core/thread/link_metrics.cpp	/^uint8_t ScaleRawValueToLinkMargin(uint8_t aRawValue)$/;"	f	namespace:ot::LinkMetrics	typeref:typename:uint8_t
ScaleRawValueToRssi	core/thread/link_metrics.cpp	/^int8_t ScaleRawValueToRssi(uint8_t aRawValue)$/;"	f	namespace:ot::LinkMetrics	typeref:typename:int8_t
ScaleRssiToRawValue	core/thread/link_metrics.cpp	/^uint8_t ScaleRssiToRawValue(int8_t aRssi)$/;"	f	namespace:ot::LinkMetrics	typeref:typename:uint8_t
Scan	core/mac/mac.cpp	/^void Mac::Scan(Operation aScanOperation, uint32_t aScanChannels, uint16_t aScanDuration)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
ScheduleAnswer	core/net/mdns.cpp	/^void Core::RecordInfo::ScheduleAnswer(const AnswerInfo &aInfo)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
ScheduleCallbackTask	core/net/mdns.cpp	/^void Core::Entry::ScheduleCallbackTask(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ScheduleChildUpdateRequest	core/thread/mle.cpp	/^void Mle::ScheduleChildUpdateRequest(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ScheduleFireTimeOn	core/net/mdns.cpp	/^void Core::FireTime::ScheduleFireTimeOn(TimerMilli &aTimer)$/;"	f	class:ot::Dns::Multicast::Core::FireTime	typeref:typename:void
ScheduleMessageTransmissionTimer	core/thread/mle.cpp	/^void Mle::ScheduleMessageTransmissionTimer(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
ScheduleNextPoll	core/mac/data_poll_sender.cpp	/^void DataPollSender::ScheduleNextPoll(PollPeriodSelector aPollPeriodSelector)$/;"	f	class:ot::DataPollSender	typeref:typename:void
ScheduleNsecAnswer	core/net/mdns.cpp	/^void Core::Entry::ScheduleNsecAnswer(const AnswerInfo &aInfo)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ScheduleQuery	core/net/mdns.cpp	/^void Core::CacheEntry::ScheduleQuery(TimeMilli aQueryTime)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
ScheduleRouterRoleUpgradeIfEligible	core/thread/network_data_notifier.cpp	/^void Notifier::ScheduleRouterRoleUpgradeIfEligible(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
ScheduleRoutingPolicyEvaluation	core/border_router/routing_manager.cpp	/^void RoutingManager::ScheduleRoutingPolicyEvaluation(ScheduleMode aMode)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
ScheduleSend	core/thread/mlr_manager.cpp	/^void MlrManager::ScheduleSend(uint16_t aDelay)$/;"	f	class:ot::MlrManager	typeref:typename:void
ScheduleStaleTimer	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::ScheduleStaleTimer(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
ScheduleTimer	core/net/mdns.cpp	/^void Core::CacheEntry::ScheduleTimer(void) { ScheduleFireTimeOn(Get<Core>().mCacheTimer); }$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
ScheduleTimer	core/net/mdns.cpp	/^void Core::Entry::ScheduleTimer(void) { ScheduleFireTimeOn(Get<Core>().mEntryTimer); }$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
ScheduleToRemove	core/thread/network_data_leader_ftd.cpp	/^void Leader::ContextIds::ScheduleToRemove(uint8_t aId)$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
ScheduleToRemoveIfEmpty	core/net/mdns.cpp	/^void Core::HostEntry::ScheduleToRemoveIfEmpty(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
ScheduleToRemoveIfEmpty	core/net/mdns.cpp	/^void Core::ServiceEntry::ScheduleToRemoveIfEmpty(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
ScheduleTransmissionTask	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::ScheduleTransmissionTask(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
Scheduler	core/common/tasklet.hpp	/^        Scheduler(void)$/;"	f	class:ot::Tasklet::Scheduler
Scheduler	core/common/timer.hpp	/^        explicit Scheduler(Instance &aInstance)$/;"	f	class:ot::Timer::Scheduler
Scheduler	core/common/timer.hpp	/^        explicit Scheduler(Instance &aInstance)$/;"	f	class:ot::TimerMicro::Scheduler
Scheduler	core/common/timer.hpp	/^        explicit Scheduler(Instance &aInstance)$/;"	f	class:ot::TimerMilli::Scheduler
SearchForBetterParent	core/thread/mle.cpp	/^Error Mle::SearchForBetterParent(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SecToMsec	core/common/time.hpp	/^    static uint32_t constexpr SecToMsec(uint32_t aSeconds) { return aSeconds * 1000u; }$/;"	f	class:ot::Time	typeref:typename:uint32_t 
SecToMsec	core/common/uptime.hpp	/^    static uint64_t SecToMsec(uint32_t aUptimeInSeconds) { return static_cast<uint64_t>(aUptimeI/;"	f	class:ot::Uptime	typeref:typename:uint64_t
SecureAgent	core/thread/tmf.cpp	/^SecureAgent::SecureAgent(Instance &aInstance)$/;"	f	class:ot::Tmf::SecureAgent
SecureTransport	core/meshcop/secure_transport.cpp	/^SecureTransport::SecureTransport(Instance &aInstance, bool aLayerTwoSecurity, bool aDatagramTran/;"	f	class:ot::MeshCoP::SecureTransport
SecurityPolicy	core/thread/key_manager.hpp	/^    SecurityPolicy(void) { SetToDefault(); }$/;"	f	class:ot::SecurityPolicy
Select	core/thread/radio_selector.cpp	/^Mac::RadioType RadioSelector::Select(Mac::RadioTypes aRadioOptions, const Neighbor &aNeighbor)$/;"	f	class:ot::RadioSelector	typeref:typename:Mac::RadioType
SelectMessageFor	core/net/mdns.cpp	/^Message &Core::TxMessage::SelectMessageFor(Section aSection)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:Message &
SelectNextServer	core/net/srp_client.cpp	/^void Client::SelectNextServer(bool aDisallowSwitchOnRegisteredHost)$/;"	f	class:ot::Srp::Client	typeref:typename:void
SelectPollFrameRadio	core/thread/radio_selector.cpp	/^Mac::RadioType RadioSelector::SelectPollFrameRadio(const Neighbor &aParent)$/;"	f	class:ot::RadioSelector	typeref:typename:Mac::RadioType
SelectPort	core/net/srp_server.cpp	/^void Server::SelectPort(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
SelectRadio	core/thread/radio_selector.cpp	/^Mac::TxFrame &RadioSelector::SelectRadio(Message &aMessage, const Mac::Address &aMacDest, Mac::T/;"	f	class:ot::RadioSelector	typeref:typename:Mac::TxFrame &
SelectSection	core/net/dns_client.cpp	/^void Client::Response::SelectSection(Section aSection, uint16_t &aOffset, uint16_t &aNumRecord) /;"	f	class:ot::Dns::Client::Response	typeref:typename:void
SelectSourceAddress	core/net/ip6.cpp	/^Error Ip6::SelectSourceAddress(MessageInfo &aMessageInfo) const$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
SelectSourceAddress	core/net/ip6.cpp	/^const Address *Ip6::SelectSourceAddress(const Address &aDestination) const$/;"	f	class:ot::Ip6::Ip6	typeref:typename:const Address *
SelectStartingChannel	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::SelectStartingChannel(void)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SelectUnicastEntry	core/net/srp_client.cpp	/^Error Client::SelectUnicastEntry(DnsSrpUnicast::Origin aOrigin, DnsSrpUnicast::Info &aInfo) cons/;"	f	class:ot::Srp::Client	typeref:typename:Error
Send	core/border_router/infra_if.cpp	/^Error InfraIf::Send(const Icmp6Packet &aPacket, const Ip6::Address &aDestination) const$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:Error
Send	core/coap/coap.cpp	/^Error Coap::Send(CoapBase &aCoapBase, ot::Message &aMessage, const Ip6::MessageInfo &aMessageInf/;"	f	class:ot::Coap::Coap	typeref:typename:Error
Send	core/coap/coap.cpp	/^Error Coap::Send(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::Coap	typeref:typename:Error
Send	core/coap/coap.cpp	/^Error CoapBase::Send(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
Send	core/coap/coap_secure.cpp	/^Error CoapSecure::Send(ot::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Send	core/coap/coap_secure.hpp	/^    static Error Send(CoapBase &aCoapBase, ot::Message &aMessage, const Ip6::MessageInfo &aMessa/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Send	core/mac/mac_links.cpp	/^void Links::Send(TxFrame &aFrame, RadioTypes aRadioTypes)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Send	core/mac/mac_links.hpp	/^    void Send(void)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Send	core/mac/sub_mac.cpp	/^Error SubMac::Send(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
Send	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Send(Message &aMessage, uint16_t aLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
Send	core/net/dnssd_server.cpp	/^void Server::Response::Send(const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
Send	core/net/mdns.cpp	/^void Core::TxMessage::Send(void)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:void
Send	core/radio/ble_secure.cpp	/^Error BleSecure::Send(uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
Send	core/radio/trel_interface.cpp	/^Error Interface::Send(const Packet &aPacket, bool aIsDiscovery)$/;"	f	class:ot::Trel::Interface	typeref:typename:Error
Send	core/radio/trel_link.cpp	/^void Link::Send(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
SendAck	core/coap/coap.cpp	/^Error CoapBase::SendAck(const Message &aRequest, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendAck	core/radio/trel_link.cpp	/^void Link::SendAck(Packet &aRxPacket)$/;"	f	class:ot::Trel::Link	typeref:typename:void
SendAddressError	core/thread/address_resolver.cpp	/^void AddressResolver::SendAddressError(const Ip6::Address             &aTarget,$/;"	f	class:ot::AddressResolver	typeref:typename:void
SendAddressNotification	core/thread/dua_manager.cpp	/^void DuaManager::SendAddressNotification(Ip6::Address              &aAddress,$/;"	f	class:ot::DuaManager	typeref:typename:void
SendAddressQuery	core/thread/address_resolver.cpp	/^Error AddressResolver::SendAddressQuery(const Ip6::Address &aEid)$/;"	f	class:ot::AddressResolver	typeref:typename:Error
SendAddressQueryResponse	core/thread/address_resolver.cpp	/^void AddressResolver::SendAddressQueryResponse(const Ip6::Address             &aTarget,$/;"	f	class:ot::AddressResolver	typeref:typename:void
SendAddressRelease	core/thread/mle_router.cpp	/^void MleRouter::SendAddressRelease(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendAddressSolicit	core/thread/mle_router.cpp	/^Error MleRouter::SendAddressSolicit(ThreadStatusTlv::Status aStatus)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendAddressSolicitResponse	core/thread/mle_router.cpp	/^void MleRouter::SendAddressSolicitResponse(const Coap::Message    &aRequest,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendAdvertisement	core/thread/mle_router.cpp	/^void MleRouter::SendAdvertisement(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendAfterDelay	core/thread/mle.cpp	/^Error Mle::TxMessage::SendAfterDelay(const Ip6::Address &aDestination, uint16_t aDelay)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
SendAnnounce	core/thread/announce_begin_server.cpp	/^void AnnounceBeginServer::SendAnnounce(uint32_t aChannelMask, uint8_t aCount, uint16_t aPeriod)$/;"	f	class:ot::AnnounceBeginServer	typeref:typename:void
SendAnnounce	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::SendAnnounce(uint8_t aCount)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SendAnnounce	core/thread/mle.cpp	/^void Mle::SendAnnounce(uint8_t aChannel, AnnounceMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SendAnnounce	core/thread/mle.cpp	/^void Mle::SendAnnounce(uint8_t aChannel, const Ip6::Address &aDestination, AnnounceMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SendAnnounce	core/thread/mle.hpp	/^    void SendAnnounce(uint8_t aChannel) { SendAnnounce(aChannel, kNormalAnnounce); }$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SendAnswer	core/thread/network_diagnostic.cpp	/^void Server::SendAnswer(const Ip6::Address &aDestination, const Message &aRequest)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
SendApplicationTlv	core/radio/ble_secure.cpp	/^Error BleSecure::SendApplicationTlv(uint8_t *aBuf, uint16_t aLength)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
SendBackboneAnswer	core/backbone_router/bbr_manager.cpp	/^Error Manager::SendBackboneAnswer(const Ip6::Address             &aDstAddr,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:Error
SendBackboneAnswer	core/backbone_router/bbr_manager.cpp	/^Error Manager::SendBackboneAnswer(const Ip6::MessageInfo      &aQueryMessageInfo,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:Error
SendBackboneMulticastListenerRegistration	core/backbone_router/bbr_manager.cpp	/^void Manager::SendBackboneMulticastListenerRegistration(const Ip6::Address *aAddresses,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
SendBackboneQuery	core/backbone_router/bbr_manager.cpp	/^Error Manager::SendBackboneQuery(const Ip6::Address &aDua, uint16_t aRloc16)$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:Error
SendByExtension	core/net/tcp6.cpp	/^Error Tcp::Endpoint::SendByExtension(size_t aNumBytes, uint32_t aFlags)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
SendByReference	core/net/tcp6.cpp	/^Error Tcp::Endpoint::SendByReference(otLinkedBuffer &aBuffer, uint32_t aFlags)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
SendChildIdRequest	core/thread/mle.cpp	/^Error Mle::SendChildIdRequest(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendChildIdResponse	core/thread/mle_router.cpp	/^Error MleRouter::SendChildIdResponse(Child &aChild)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendChildUpdateRequest	core/thread/mle.cpp	/^Error Mle::SendChildUpdateRequest(ChildUpdateRequestMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendChildUpdateRequest	core/thread/mle.cpp	/^Error Mle::SendChildUpdateRequest(void) { return SendChildUpdateRequest(kNormalChildUpdateReques/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendChildUpdateRequest	core/thread/mle_router.cpp	/^Error MleRouter::SendChildUpdateRequest(Child &aChild)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendChildUpdateRequest	core/thread/mle_router.hpp	/^    Error SendChildUpdateRequest(void) { return Mle::SendChildUpdateRequest(); }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendChildUpdateResponse	core/thread/mle.cpp	/^Error Mle::SendChildUpdateResponse(const TlvList      &aTlvList,$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendChildUpdateResponse	core/thread/mle_router.cpp	/^void MleRouter::SendChildUpdateResponse(Child                  *aChild,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendCommand	core/thread/network_diagnostic.cpp	/^Error Client::SendCommand(Uri                   aUri,$/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:Error
SendCommand	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::SendCommand(uint32_t          aCommand,$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
SendCommand	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::SendCommand(uint32_t aCommand, spinel_prop_key_t aKey, spinel_tid_t aTid)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
SendCommissionerSet	core/meshcop/commissioner.cpp	/^void Commissioner::SendCommissionerSet(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SendCommissioningSetResponse	core/thread/network_data_leader_ftd.cpp	/^void Leader::SendCommissioningSetResponse(const Coap::Message     &aRequest,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
SendConflict	core/thread/panid_query_server.cpp	/^void PanIdQueryServer::SendConflict(void)$/;"	f	class:ot::PanIdQueryServer	typeref:typename:void
SendCopy	core/coap/coap.cpp	/^void CoapBase::SendCopy(const Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
SendCopy	core/net/sntp_client.cpp	/^void Client::SendCopy(const Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Sntp::Client	typeref:typename:void
SendDataPoll	core/mac/data_poll_sender.cpp	/^Error DataPollSender::SendDataPoll(void)$/;"	f	class:ot::DataPollSender	typeref:typename:Error
SendDataRequest	core/thread/mle.cpp	/^Error Mle::SendDataRequest(const Ip6::Address                      &aDestination,$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendDataRequest	core/thread/mle.cpp	/^Error Mle::SendDataRequest(const Ip6::Address &aDestination)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendDataRequestAfterDelay	core/thread/mle.cpp	/^Error Mle::SendDataRequestAfterDelay(const Ip6::Address &aDestination, uint16_t aDelay)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendDataRequestForLinkMetricsReport	core/thread/mle.cpp	/^Error Mle::SendDataRequestForLinkMetricsReport(const Ip6::Address                      &aDestina/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendDataResponse	core/thread/mle_router.cpp	/^void MleRouter::SendDataResponse(const Ip6::Address &aDestination,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendDatagram	core/net/ip6.cpp	/^Error Ip6::SendDatagram(Message &aMessage, MessageInfo &aMessageInfo, uint8_t aIpProto)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
SendDatagram	core/net/udp6.cpp	/^Error Udp::SendDatagram(Message &aMessage, MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
SendDatagramMessage	ncp/ncp_base_mtd.cpp	/^otError NcpBase::SendDatagramMessage(otMessage *aMessage)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
SendDatasetChanged	core/meshcop/meshcop_leader.cpp	/^void Leader::SendDatasetChanged(const Ip6::Address &aAddress)$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
SendDelayedJoinerEntrust	core/meshcop/joiner_router.cpp	/^void JoinerRouter::SendDelayedJoinerEntrust(void)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
SendDelayedResponse	core/thread/mle.cpp	/^void Mle::SendDelayedResponse(TxMessage &aMessage, const DelayedResponseMetadata &aMetadata)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SendDestinationUnreachable	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::SendDestinationUnreachable(uint16_t aMeshSource, const Ip6::Headers &aIp6Hea/;"	f	class:ot::MeshForwarder	typeref:typename:void
SendDiagnosticGet	core/thread/network_diagnostic.cpp	/^Error Client::SendDiagnosticGet(const Ip6::Address &aDestination,$/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:Error
SendDiagnosticReset	core/thread/network_diagnostic.cpp	/^Error Client::SendDiagnosticReset(const Ip6::Address &aDestination, const uint8_t aTlvTypes[], u/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:Error
SendDiscoveryResponse	core/thread/mle_router.cpp	/^Error MleRouter::SendDiscoveryResponse(const Ip6::Address &aDestination, const Message &aDiscove/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendDuaRegistrationResponse	core/backbone_router/bbr_manager.cpp	/^void Manager::SendDuaRegistrationResponse(const Coap::Message       &aMessage,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
SendEchoRequest	core/net/icmp6.cpp	/^Error Icmp::SendEchoRequest(Message &aMessage, const MessageInfo &aMessageInfo, uint16_t aIdenti/;"	f	class:ot::Ip6::Icmp	typeref:typename:Error
SendEmptyAck	core/coap/coap.cpp	/^Error CoapBase::SendEmptyAck(const Message &aRequest, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendEmptyAck	core/coap/coap.cpp	/^Error CoapBase::SendEmptyAck(const Message &aRequest, const Ip6::MessageInfo &aMessageInfo, Code/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendEmptyMessage	core/coap/coap.cpp	/^Error CoapBase::SendEmptyMessage(Type aType, const Message &aRequest, const Ip6::MessageInfo &aM/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendEmptyMessage	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::SendEmptyMessage(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
SendEndOfStream	core/net/tcp6.cpp	/^Error Tcp::Endpoint::SendEndOfStream(void)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:Error
SendError	core/net/icmp6.cpp	/^Error Icmp::SendError(Header::Type aType, Header::Code aCode, const MessageInfo &aMessageInfo, c/;"	f	class:ot::Ip6::Icmp	typeref:typename:Error
SendErrorMessage	core/meshcop/border_agent.cpp	/^void BorderAgent::SendErrorMessage(const Coap::Message &aRequest, bool aSeparate, Error aError)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
SendErrorMessage	core/meshcop/border_agent.cpp	/^void BorderAgent::SendErrorMessage(const ForwardContext &aForwardContext, Error aError)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
SendErrorResponse	core/net/dns_dso.cpp	/^void Dso::Connection::SendErrorResponse(const Dns::Header &aHeader, Dns::Header::Response aRespo/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
SendFastPolls	core/mac/data_poll_sender.cpp	/^void DataPollSender::SendFastPolls(uint8_t aNumFastPolls)$/;"	f	class:ot::DataPollSender	typeref:typename:void
SendFrame	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::SendFrame(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
SendFrame	posix/platform/spi_interface.cpp	/^otError SpiInterface::SendFrame(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
SendFrame	posix/platform/vendor_interface_example.cpp	/^otError VendorInterface::SendFrame(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:otError
SendGetRequest	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::SendGetRequest(const Dataset::Components &aDatasetComponents,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
SendGetResponse	core/meshcop/dataset_manager.cpp	/^void DatasetManager::SendGetResponse(const Coap::Message    &aRequest,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SendHdlc	ncp/example_vendor_hook.cpp	/^    static int SendHdlc(const uint8_t *aBuf, uint16_t aBufLength)$/;"	f	class:NcpVendorUart	typeref:typename:int	file:
SendHeaderResponse	core/coap/coap.cpp	/^Error CoapBase::SendHeaderResponse(Message::Code aCode, const Message &aRequest, const Ip6::Mess/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendIcmp6Nd	posix/platform/infra_if.cpp	/^otError InfraNetif::SendIcmp6Nd(uint32_t            aInfraIfIndex,$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:otError
SendIcmpError	core/net/ip6.cpp	/^void Ip6::SendIcmpError(Message &aMessage, Icmp::Header::Type aIcmpType, Icmp::Header::Code aIcm/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
SendIcmpErrorIfDstUnreach	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::SendIcmpErrorIfDstUnreach(const Message &aMessage, const Mac::Addresses &aMa/;"	f	class:ot::MeshForwarder	typeref:typename:void
SendJoinFinalizeResponse	core/meshcop/commissioner.cpp	/^void Commissioner::SendJoinFinalizeResponse(const Coap::Message &aRequest, StateTlv::State aStat/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SendJoinerEntrust	core/meshcop/joiner_router.cpp	/^Error JoinerRouter::SendJoinerEntrust(const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:Error
SendJoinerEntrustResponse	core/meshcop/joiner.cpp	/^void Joiner::SendJoinerEntrustResponse(const Coap::Message &aRequest, const Ip6::MessageInfo &aR/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
SendJoinerFinalize	core/meshcop/joiner.cpp	/^void Joiner::SendJoinerFinalize(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
SendKeepAlive	core/meshcop/commissioner.cpp	/^void Commissioner::SendKeepAlive(uint16_t aSessionId)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SendKeepAlive	core/meshcop/commissioner.cpp	/^void Commissioner::SendKeepAlive(void) { SendKeepAlive(mSessionId); }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SendKeepAliveMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendKeepAliveMessage(MessageType aMessageType, MessageId aResponseId)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendKeepAliveMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendKeepAliveMessage(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendKeepAliveResponse	core/meshcop/meshcop_leader.cpp	/^void Leader::SendKeepAliveResponse(const Coap::Message    &aRequest,$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
SendLinkAccept	core/thread/mle_router.cpp	/^Error MleRouter::SendLinkAccept(const RxInfo      &aRxInfo,$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendLinkMetricsManagementRequest	core/thread/mle.cpp	/^Error Mle::SendLinkMetricsManagementRequest(const Ip6::Address &aDestination, const ot::Tlv &aSu/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendLinkMetricsManagementResponse	core/thread/mle.cpp	/^Error Mle::SendLinkMetricsManagementResponse(const Ip6::Address &aDestination, LinkMetrics::Stat/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendLinkProbe	core/thread/link_metrics.cpp	/^Error Initiator::SendLinkProbe(const Ip6::Address &aDestination, uint8_t aSeriesId, uint8_t aLen/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
SendLinkProbe	core/thread/mle.cpp	/^Error Mle::SendLinkProbe(const Ip6::Address &aDestination, uint8_t aSeriesId, uint8_t *aBuf, uin/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SendLinkRequest	core/thread/mle_router.cpp	/^Error MleRouter::SendLinkRequest(Neighbor *aNeighbor)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendMesh	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::SendMesh(Message &aMessage, Mac::TxFrame &aFrame)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
SendMessage	core/coap/coap.cpp	/^Error CoapBase::SendMessage(Message                    &aMessage,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendMessage	core/coap/coap.cpp	/^Error CoapBase::SendMessage(Message                &aMessage,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendMessage	core/coap/coap.cpp	/^Error CoapBase::SendMessage(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendMessage	core/coap/coap.cpp	/^Error CoapBase::SendMessage(Message &aMessage, const Ip6::MessageInfo &aMessageInfo, const TxPar/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendMessage	core/coap/coap_secure.cpp	/^Error CoapSecure::SendMessage(Message                    &aMessage,$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
SendMessage	core/coap/coap_secure.cpp	/^Error CoapSecure::SendMessage(Message                &aMessage,$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
SendMessage	core/coap/coap_secure.cpp	/^Error CoapSecure::SendMessage(Message &aMessage, ResponseHandler aHandler, void *aContext)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
SendMessage	core/meshcop/border_agent.cpp	/^Error BorderAgent::SendMessage(Coap::Message &aMessage)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
SendMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendMessage(Message              &aMessage,$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendMessage	core/net/nat64_translator.cpp	/^Error Translator::SendMessage(Message &aMessage)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
SendMessage	core/net/sntp_client.cpp	/^Error Client::SendMessage(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Sntp::Client	typeref:typename:Error
SendMessage	core/radio/ble_secure.cpp	/^Error BleSecure::SendMessage(ot::Message &aMessage)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
SendMessage	core/thread/child_supervision.cpp	/^void ChildSupervisor::SendMessage(Child &aChild)$/;"	f	class:ot::ChildSupervisor	typeref:typename:void
SendMessage	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::SendMessage(OwnedPtr<Message> aMessagePtr)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
SendMessage	core/thread/mesh_forwarder_mtd.cpp	/^void MeshForwarder::SendMessage(OwnedPtr<Message> aMessagePtr)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
SendMgmtCommissionerGetRequest	core/meshcop/commissioner.cpp	/^Error Commissioner::SendMgmtCommissionerGetRequest(const uint8_t *aTlvs, uint8_t aLength)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SendMgmtCommissionerSetRequest	core/meshcop/commissioner.cpp	/^Error Commissioner::SendMgmtCommissionerSetRequest(const CommissioningDataset &aDataset,$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SendMgmtRequestEnhAckProbing	core/thread/link_metrics.cpp	/^Error Initiator::SendMgmtRequestEnhAckProbing(const Ip6::Address &aDestination,$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
SendMgmtRequestForwardTrackingSeries	core/thread/link_metrics.cpp	/^Error Initiator::SendMgmtRequestForwardTrackingSeries(const Ip6::Address &aDestination,$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:Error
SendMlr	core/thread/mlr_manager.cpp	/^void MlrManager::SendMlr(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
SendMlrMessage	core/thread/mlr_manager.cpp	/^Error MlrManager::SendMlrMessage(const Ip6::Address   *aAddresses,$/;"	f	class:ot::MlrManager	typeref:typename:Error
SendMulticast	posix/platform/mdns_socket.cpp	/^void MdnsSocket::SendMulticast(otMessage *aMessage, uint32_t aInfraIfIndex)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
SendMulticastListenerRegistrationResponse	core/backbone_router/bbr_manager.cpp	/^void Manager::SendMulticastListenerRegistrationResponse(const Coap::Message       &aMessage,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:void
SendNeighborSolicitToRouter	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::SendNeighborSolicitToRouter(const Router &aRouter)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
SendNextAnswer	core/thread/network_diagnostic.cpp	/^void Server::SendNextAnswer(Coap::Message &aAnswer, const Ip6::Address &aDestination)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:void
SendNextBlock1Request	core/coap/coap.cpp	/^Error CoapBase::SendNextBlock1Request(Message                &aRequest,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendNextBlock2Request	core/coap/coap.cpp	/^Error CoapBase::SendNextBlock2Request(Message                &aRequest,$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendNotFound	core/coap/coap.cpp	/^Error CoapBase::SendNotFound(const Message &aRequest, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendPacket	posix/platform/trel.cpp	/^static otError SendPacket(const uint8_t *aBuffer, uint16_t aLength, const otSockAddr *aDestSockA/;"	f	typeref:typename:otError	file:
SendParentRequest	core/thread/mle.cpp	/^void Mle::SendParentRequest(ParentRequestType aType)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SendParentResponse	core/thread/mle_router.cpp	/^void MleRouter::SendParentResponse(Child *aChild, const RxChallenge &aChallenge, bool aRoutersOn/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SendPetition	core/meshcop/commissioner.cpp	/^Error Commissioner::SendPetition(void)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SendPetitionResponse	core/meshcop/meshcop_leader.cpp	/^void Leader::SendPetitionResponse(const Coap::Message    &aRequest,$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
SendPing	core/utils/ping_sender.cpp	/^void PingSender::SendPing(void)$/;"	f	class:ot::Utils::PingSender	typeref:typename:void
SendProactiveBackboneNotification	core/backbone_router/bbr_manager.cpp	/^Error Manager::SendProactiveBackboneNotification(const Ip6::Address             &aDua,$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:Error
SendQuery	core/meshcop/energy_scan_client.cpp	/^Error EnergyScanClient::SendQuery(uint32_t                           aChannelMask,$/;"	f	class:ot::EnergyScanClient	typeref:typename:Error
SendQuery	core/meshcop/panid_query_client.cpp	/^Error PanIdQueryClient::SendQuery(uint16_t                            aPanId,$/;"	f	class:ot::PanIdQueryClient	typeref:typename:Error
SendQuery	core/net/dns_client.cpp	/^Error Client::SendQuery(Query &aQuery, QueryInfo &aInfo, bool aUpdateTimer)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
SendQuery	core/utils/mesh_diag.cpp	/^Error MeshDiag::SendQuery(uint16_t aRloc16, const uint8_t *aTlvs, uint8_t aTlvsLength)$/;"	f	class:ot::Utils::MeshDiag	typeref:typename:Error
SendQueuedDatagramMessages	ncp/ncp_base_mtd.cpp	/^otError NcpBase::SendQueuedDatagramMessages(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
SendQueuedMessages	posix/platform/mdns_socket.cpp	/^void MdnsSocket::SendQueuedMessages(MsgType aMsgType)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
SendQueuedPackets	posix/platform/trel.cpp	/^static void SendQueuedPackets(void)$/;"	f	typeref:typename:void	file:
SendQueuedResponses	ncp/ncp_base.cpp	/^otError NcpBase::SendQueuedResponses(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
SendRaw	core/net/ip6.cpp	/^Error Ip6::SendRaw(OwnedPtr<Message> aMessagePtr)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
SendRelayTransmit	core/meshcop/commissioner.cpp	/^Error Commissioner::SendRelayTransmit(Message &aMessage, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SendRelayTransmit	core/meshcop/commissioner.cpp	/^Error Commissioner::SendRelayTransmit(void *aContext, Message &aMessage, const Ip6::MessageInfo /;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SendReply	core/net/dhcp6_server.cpp	/^Error Server::SendReply(const Ip6::Address  &aDst,$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
SendReport	core/thread/energy_scan_server.cpp	/^void EnergyScanServer::SendReport(void)$/;"	f	class:ot::EnergyScanServer	typeref:typename:void
SendRequest	core/meshcop/announce_begin_client.cpp	/^Error AnnounceBeginClient::SendRequest(uint32_t            aChannelMask,$/;"	f	class:ot::AnnounceBeginClient	typeref:typename:Error
SendRequestEntityIncomplete	core/coap/coap.hpp	/^    Error SendRequestEntityIncomplete(const Message &aRequest, const Ip6::MessageInfo &aMessageI/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendRequestMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendRequestMessage(Message &aMessage, MessageId &aMessageId, uint32_t aRe/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendReset	core/coap/coap.cpp	/^Error CoapBase::SendReset(Message &aRequest, const Ip6::MessageInfo &aMessageInfo)$/;"	f	class:ot::Coap::CoapBase	typeref:typename:Error
SendReset	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SendReset(uint8_t aResetType)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SendReset	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::SendReset(uint8_t aResetType)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
SendResponse	core/net/srp_server.cpp	/^void Server::SendResponse(const Dns::UpdateHeader    &aHeader,$/;"	f	class:ot::Srp::Server	typeref:typename:void
SendResponse	core/net/srp_server.cpp	/^void Server::SendResponse(const Dns::UpdateHeader &aHeader,$/;"	f	class:ot::Srp::Server	typeref:typename:void
SendResponseMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendResponseMessage(Message &aMessage, MessageId aResponseId)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendRetryDelayMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendRetryDelayMessage(uint32_t aDelay, Dns::Header::Response aResponseCod/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendRouterAdvertisement	core/border_router/routing_manager.cpp	/^void RoutingManager::SendRouterAdvertisement(RouterAdvTxMode aRaTxMode)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SendRs	core/border_router/routing_manager.cpp	/^Error RoutingManager::RsSender::SendRs(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender	typeref:typename:Error
SendServerDataNotification	core/thread/network_data_notifier.cpp	/^Error Notifier::SendServerDataNotification(uint16_t aOldRloc16, const NetworkData *aNetworkData)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:Error
SendSetOrReplaceResponse	core/meshcop/dataset_manager_ftd.cpp	/^void DatasetManager::SendSetOrReplaceResponse(const Coap::Message    &aRequest,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SendSetRequest	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::SendSetRequest(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
SendSetRequest	core/meshcop/dataset_manager.cpp	/^Error DatasetManager::SendSetRequest(const Dataset::Info &aDatasetInfo,$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:Error
SendTimeSync	core/thread/mle_router.cpp	/^Error MleRouter::SendTimeSync(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SendTo	core/net/udp6.cpp	/^Error Udp::SendTo(SocketHandle &aSocket, Message &aMessage, const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp	typeref:typename:Error
SendTo	core/net/udp6.cpp	/^Error Udp::Socket::SendTo(Message &aMessage, const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Udp::Socket	typeref:typename:Error
SendTo	core/thread/mle.cpp	/^Error Mle::TxMessage::SendTo(const Ip6::Address &aDestination)$/;"	f	class:ot::Mle::Mle::TxMessage	typeref:typename:Error
SendUnicast	posix/platform/mdns_socket.cpp	/^void MdnsSocket::SendUnicast(otMessage *aMessage, const otPlatMdnsAddressInfo *aAddress)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
SendUnicastResponse	core/net/mdns.cpp	/^void Core::RxMessage::SendUnicastResponse(const AddressInfo &aUnicastDest)$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:void
SendUnidirectionalMessage	core/net/dns_dso.cpp	/^Error Dso::Connection::SendUnidirectionalMessage(Message &aMessage)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SendUpdate	core/net/srp_client.cpp	/^void Client::SendUpdate(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
Server	core/net/dhcp6_server.cpp	/^Server::Server(Instance &aInstance)$/;"	f	class:ot::Dhcp6::Server
Server	core/net/dnssd_server.cpp	/^Server::Server(Instance &aInstance)$/;"	f	class:ot::Dns::ServiceDiscovery::Server
Server	core/net/srp_server.cpp	/^Server::Server(Instance &aInstance)$/;"	f	class:ot::Srp::Server
Server	core/thread/network_diagnostic.cpp	/^Server::Server(Instance &aInstance)$/;"	f	class:ot::NetworkDiagnostic::Server
ServerData	core/thread/network_data_service.hpp	/^        ServerData(const Ip6::Address &aAddress, uint16_t aPort)$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServerData
ServiceAloc	core/thread/mle.cpp	/^Mle::ServiceAloc::ServiceAloc(void)$/;"	f	class:ot::Mle::Mle::ServiceAloc
ServiceAlocFromId	core/thread/mle_types.hpp	/^inline uint16_t ServiceAlocFromId(uint8_t aServiceId)$/;"	f	namespace:ot::Mle	typeref:typename:uint16_t
ServiceData	core/thread/network_data_service.hpp	/^        explicit ServiceData(const Ip6::Address &aAddress, uint16_t aPort)$/;"	f	class:ot::NetworkData::Service::DnsSrpUnicast::ServiceData
ServiceData	core/thread/network_data_service.hpp	/^        explicit ServiceData(uint8_t aSequenceNumber)$/;"	f	class:ot::NetworkData::Service::DnsSrpAnycast::ServiceData
ServiceEntry	core/net/mdns.cpp	/^Core::ServiceEntry::ServiceEntry(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry
ServiceIdFromAloc	core/thread/mle_types.hpp	/^inline uint8_t ServiceIdFromAloc(uint16_t aAloc16) { return static_cast<uint8_t>(aAloc16 - kAloc/;"	f	namespace:ot::Mle	typeref:typename:uint8_t
ServiceName	core/net/mdns.hpp	/^        ServiceName(const char *aServiceInstance, const char *aServiceType)$/;"	f	struct:ot::Dns::Multicast::Core::ServiceName
Set	core/common/bit_vector.hpp	/^    void Set(uint16_t aIndex, bool aValue)$/;"	f	class:ot::BitVector	typeref:typename:void
Set	core/common/callback.hpp	/^    void Set(HandlerType aHandler, void *aContext)$/;"	f	class:ot::CallbackBase	typeref:typename:void
Set	core/common/heap_string.cpp	/^Error String::Set(String &&aString)$/;"	f	class:ot::Heap::String	typeref:typename:Error
Set	core/common/heap_string.cpp	/^Error String::Set(const char *aCString)$/;"	f	class:ot::Heap::String	typeref:typename:Error
Set	core/common/heap_string.hpp	/^    Error Set(const String &aString) { return Set(aString.AsCString()); }$/;"	f	class:ot::Heap::String	typeref:typename:Error
Set	core/common/settings_driver.hpp	/^    Error Set(uint16_t aKey, const void *aValue, uint16_t aValueLength)$/;"	f	class:ot::SettingsDriver	typeref:typename:Error
Set	core/crypto/storage.hpp	/^    void Set(const uint8_t *aKeyBytes, uint16_t aKeyLength)$/;"	f	class:ot::Crypto::Key	typeref:typename:void
Set	core/mac/mac_types.cpp	/^void LinkFrameCounters::Set(RadioType aRadioType, uint32_t aCounter)$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
Set	core/mac/mac_types.hpp	/^    void Set(const uint8_t *aBuffer, CopyByteOrder aByteOrder = kNormalByteOrder)$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
Set	core/mac/mac_types.hpp	/^    void Set(uint32_t aCounter)$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
Set	core/meshcop/dataset.hpp	/^        template <Component kComponent> void Set(const typename TypeFor<kComponent>::Type &aComp/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:void
Set	core/meshcop/dataset.hpp	/^template <> inline void Dataset::Info::Set<Dataset::kActiveTimestamp>(const Timestamp &aTimestam/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:void
Set	core/meshcop/dataset.hpp	/^template <> inline void Dataset::Info::Set<Dataset::kPendingTimestamp>(const Timestamp &aTimesta/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:void
Set	core/meshcop/network_name.cpp	/^Error NetworkName::Set(const NameData &aNameData)$/;"	f	class:ot::MeshCoP::NetworkName	typeref:typename:Error
Set	core/meshcop/network_name.cpp	/^Error NetworkName::Set(const char *aNameString)$/;"	f	class:ot::MeshCoP::NetworkName	typeref:typename:Error
Set	core/net/dhcp6_server.hpp	/^        void Set(const Ip6::Prefix &aPrefix, const Ip6::NetworkPrefix &aMeshLocalPrefix, uint8_t/;"	f	class:ot::Dhcp6::Server::PrefixAgent	typeref:typename:void
Set	core/net/dns_types.hpp	/^    void Set(const char *aString)$/;"	f	class:ot::Dns::Name	typeref:typename:void
Set	core/net/ip4_types.cpp	/^void Cidr::Set(const uint8_t *aAddress, uint8_t aLength)$/;"	f	class:ot::Ip4::Cidr	typeref:typename:void
Set	core/net/ip6_address.cpp	/^void Prefix::Set(const uint8_t *aPrefix, uint8_t aLength)$/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
Set	core/net/ip6_address.hpp	/^    void Set(const NetworkPrefix &aNetworkPrefix) { Set(aNetworkPrefix.m8, NetworkPrefix::kLengt/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
Set	core/thread/mle_tlvs.hpp	/^    void Set(const LeaderData &aLeaderData)$/;"	f	class:ot::Mle::LeaderDataTlv	typeref:typename:void
Set	core/thread/mle_types.cpp	/^void DeviceMode::Set(const ModeConfig &aModeConfig)$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:void
Set	core/thread/mle_types.hpp	/^    void Set(uint8_t aMode) { mMode = aMode | kModeReserved; }$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:void
Set	core/utils/flash.cpp	/^Error Flash::Set(uint16_t aKey, const uint8_t *aValue, uint16_t aValueLength)$/;"	f	class:ot::Flash	typeref:typename:Error
Set	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Set(spinel_prop_key_t aKey, const char *aFormat, ...)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Set	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::MulticastForwardingCache::Set(MulticastRoutingManager::MifIndex aI/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache	typeref:typename:void
Set	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::MulticastForwardingCache::Set(const Ip6::Address &aSrcAddr,$/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache	typeref:typename:void
Set	posix/platform/power.cpp	/^otError Domain::Set(const char *aDomain)$/;"	f	class:ot::Power::Domain	typeref:typename:otError
Set	posix/platform/power.cpp	/^otError RawPowerSetting::Set(const char *aRawPowerSetting)$/;"	f	class:ot::Power::RawPowerSetting	typeref:typename:otError
Set154	core/mac/mac_types.hpp	/^    void Set154(uint32_t aCounter) { m154Counter = aCounter; }$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
SetAckMode	core/radio/trel_packet.cpp	/^void Header::SetAckMode(AckMode aAckMode)$/;"	f	class:ot::Trel::Header	typeref:typename:void
SetAckRequest	core/mac/mac_frame.cpp	/^void Frame::SetAckRequest(bool aAckRequest)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetActiveRouters	core/thread/mle_tlvs.hpp	/^    void SetActiveRouters(uint8_t aActiveRouters) { mActiveRouters = aActiveRouters; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetActualPower	posix/platform/power.hpp	/^    void SetActualPower(int16_t aActualPower) { mActualPower = aActualPower; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:void
SetAddBeginFlag	core/utils/flash.hpp	/^        void SetAddBeginFlag(void) { mFlags &= ~kFlagAddBegin; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetAddCompleteFlag	core/utils/flash.hpp	/^        void SetAddCompleteFlag(void) { mFlags &= ~kFlagAddComplete; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetAdditionalRecordCount	core/net/dns_types.hpp	/^    void SetAdditionalRecordCount(uint16_t aCount) { mArCount = BigEndian::HostSwap16(aCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetAddrGenModeToNone	posix/platform/netif.cpp	/^static void SetAddrGenModeToNone(void)$/;"	f	typeref:typename:void	file:
SetAddress	core/backbone_router/multicast_listeners_table.hpp	/^        void SetAddress(const Ip6::Address &aAddress) { mAddress = aAddress; }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener	typeref:typename:void
SetAddress	core/net/dhcp6.hpp	/^    void SetAddress(const Ip6::Address &aAddress) { mAddress = aAddress; }$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:void
SetAddress	core/net/dns_types.hpp	/^    void SetAddress(const Ip4::Address &aAddress) { mAddress = aAddress; }$/;"	f	class:ot::Dns::ARecord	typeref:typename:void
SetAddress	core/net/dns_types.hpp	/^    void SetAddress(const Ip6::Address &aAddress) { mAddress = aAddress; }$/;"	f	class:ot::Dns::AaaaRecord	typeref:typename:void
SetAddress	core/net/socket.hpp	/^    void SetAddress(const Address &aAddress) { mAddress = aAddress; }$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:void
SetAddress	core/thread/network_data_publisher.hpp	/^            void                SetAddress(const Ip6::Address &aAddress) { mAddress = aAddress; /;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry::Info	typeref:typename:void
SetAddressCallback	core/net/netif.hpp	/^    void SetAddressCallback(otIp6AddressCallback aCallback, void *aCallbackContext)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SetAddressMlrState	core/thread/child.cpp	/^void Child::SetAddressMlrState(const Ip6::Address &aAddress, MlrState aState)$/;"	f	class:ot::Child	typeref:typename:void
SetAddressMode	core/net/srp_server.cpp	/^Error Server::SetAddressMode(AddressMode aMode)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
SetAddresses	core/net/srp_client.cpp	/^void Client::HostInfo::SetAddresses(const Ip6::Address *aAddresses, uint8_t aNumAddresses)$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
SetAdvData	core/meshcop/meshcop_tlvs.hpp	/^    void SetAdvData(const uint8_t *aAdvData, uint8_t aAdvDataLength)$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:void
SetAdvTimeout	core/net/srp_advertising_proxy.hpp	/^    void SetAdvTimeout(uint32_t aTimeout) { mAdvTimeout = Max(aTimeout, kAdvTimeout); }$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
SetAesKey	core/mac/mac_frame.hpp	/^    void SetAesKey(const Mac::KeyMaterial &aAesKey) { mInfo.mTxInfo.mAesKey = &aAesKey; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetAlarm	core/common/timer.cpp	/^void Timer::Scheduler::SetAlarm(const AlarmApi &aAlarmApi)$/;"	f	class:ot::Timer::Scheduler	typeref:typename:void
SetAlgorithm	core/net/dns_types.hpp	/^    void SetAlgorithm(uint8_t aAlgorithm) { mAlgorithm = aAlgorithm; }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:void
SetAlgorithm	core/net/dns_types.hpp	/^    void SetAlgorithm(uint8_t aAlgorithm) { mAlgorithm = aAlgorithm; }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetAll	core/mac/mac_types.cpp	/^void LinkFrameCounters::SetAll(uint32_t aCounter)$/;"	f	class:ot::Mac::LinkFrameCounters	typeref:typename:void
SetAllMacFrameCounters	core/thread/key_manager.cpp	/^void KeyManager::SetAllMacFrameCounters(uint32_t aFrameCounter, bool aSetIfLarger)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetAloc16	core/thread/mle.hpp	/^        void     SetAloc16(uint16_t aAloc16) { GetAddress().GetIid().SetLocator(aAloc16); }$/;"	f	class:ot::Mle::Mle::ServiceAloc	typeref:typename:void
SetAnswerCount	core/net/dns_types.hpp	/^    void SetAnswerCount(uint16_t aCount) { mAnCount = BigEndian::HostSwap16(aCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetAnycastModeSequenceNumber	core/net/srp_server.cpp	/^Error Server::SetAnycastModeSequenceNumber(uint8_t aSequenceNumber)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
SetAnycastSeqNum	core/net/srp_client.hpp	/^        void    SetAnycastSeqNum(uint8_t aAnycastSeqNum) { mAnycastSeqNum = aAnycastSeqNum; }$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
SetApplicationSecureKeys	core/meshcop/secure_transport.cpp	/^int SecureTransport::SetApplicationSecureKeys(void)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:int
SetAsKeyRef	core/crypto/storage.hpp	/^    void SetAsKeyRef(Storage::KeyRef aKeyRef)$/;"	f	class:ot::Crypto::Key	typeref:typename:void
SetAssignParentPriority	core/thread/mle_router.cpp	/^Error MleRouter::SetAssignParentPriority(int8_t aParentPriority)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SetAssignedRouterIdMask	core/thread/thread_tlvs.hpp	/^    void SetAssignedRouterIdMask(const Mle::RouterIdSet &aRouterIdSet) { mAssignedRouterIdMask =/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:void
SetAttachMode	core/mac/data_poll_sender.cpp	/^void DataPollSender::SetAttachMode(bool aMode)$/;"	f	class:ot::DataPollSender	typeref:typename:void
SetAttachState	core/thread/mle.cpp	/^void Mle::SetAttachState(AttachState aState)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetAuthoritative	core/meshcop/timestamp.hpp	/^    void SetAuthoritative(bool aAuthoritative)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
SetAuthoritativeAnswerFlag	core/net/dns_types.hpp	/^    void SetAuthoritativeAnswerFlag(void) { mFlags[0] |= kAaFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetAuthorityRecordCount	core/net/dns_types.hpp	/^    void SetAuthorityRecordCount(uint16_t aCount) { mNsCount = BigEndian::HostSwap16(aCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetAutoAddrConfigFlag	core/net/nd6.hpp	/^    void SetAutoAddrConfigFlag(void) { mFlags |= kAutoConfigFlagMask; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
SetAutoChannelSelectionInterval	core/utils/channel_manager.cpp	/^Error ChannelManager::SetAutoChannelSelectionInterval(uint32_t aInterval)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
SetAutoCslChannelSelectionEnabled	core/utils/channel_manager.cpp	/^void ChannelManager::SetAutoCslChannelSelectionEnabled(bool aEnabled)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
SetAutoEnableMode	core/net/srp_server.cpp	/^void Server::SetAutoEnableMode(bool aEnabled)$/;"	f	class:ot::Srp::Server	typeref:typename:void
SetAutoNetworkChannelSelectionEnabled	core/utils/channel_manager.cpp	/^void ChannelManager::SetAutoNetworkChannelSelectionEnabled(bool aEnabled)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
SetBackboneSocket	core/net/udp6.cpp	/^void Udp::SetBackboneSocket(SocketHandle &aSocket)$/;"	f	class:ot::Ip6::Udp	typeref:typename:void
SetBeaconEnabled	core/mac/mac.hpp	/^    void SetBeaconEnabled(bool aEnabled) { mBeaconsEnabled = aEnabled; }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetBit	core/meshcop/meshcop.hpp	/^    void SetBit(uint8_t aBit) { m8[BitIndex(aBit)] |= BitFlag(aBit); }$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
SetBit	ncp/changed_props_set.hpp	/^    static void SetBit(uint64_t &aBitset, uint8_t aBitIndex) { aBitset |= (1ULL << aBitIndex); }$/;"	f	class:ot::Ncp::ChangedPropsSet	typeref:typename:void
SetBlockNumber	core/net/dns_types.hpp	/^        void SetBlockNumber(uint8_t aBlockNumber) { mBlockNumber = aBlockNumber; }$/;"	f	class:ot::Dns::NsecRecord::TypeBitMap	typeref:typename:void
SetBlockWiseBlockNumber	core/coap/coap_message.hpp	/^    void SetBlockWiseBlockNumber(uint32_t aBlockNumber) { GetHelpData().mBlockWiseData.mBlockNum/;"	f	class:ot::Coap::Message	typeref:typename:void
SetBlockWiseBlockSize	core/coap/coap_message.hpp	/^    void SetBlockWiseBlockSize(otCoapBlockSzx aBlockSize) { GetHelpData().mBlockWiseData.mBlockS/;"	f	class:ot::Coap::Message	typeref:typename:void
SetBorderAgentLocator	core/meshcop/meshcop_tlvs.hpp	/^    void SetBorderAgentLocator(uint16_t aLocator) { mLocator = BigEndian::HostSwap16(aLocator); /;"	f	class:ot::MeshCoP::BorderAgentLocatorTlv	typeref:typename:void
SetBothSourceDestination	core/mac/mac_types.cpp	/^void PanIds::SetBothSourceDestination(PanId aPanId)$/;"	f	class:ot::Mac::PanIds	typeref:typename:void
SetBuffer	core/common/message.hpp	/^        void          SetBuffer(const Buffer *aBuffer) { mBuffer = aBuffer; }$/;"	f	class:ot::Message::Chunk	typeref:typename:void
SetBuild	core/meshcop/meshcop_tlvs.hpp	/^    void SetBuild(uint16_t aBuild)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
SetBusyPeriod	core/utils/jam_detector.cpp	/^Error JamDetector::SetBusyPeriod(uint8_t aBusyPeriod)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:Error
SetBytes	core/net/ip4_types.hpp	/^    void SetBytes(const uint8_t *aBuffer) { memcpy(mFields.m8, aBuffer, kSize); }$/;"	f	class:ot::Ip4::Address	typeref:typename:void
SetBytes	core/net/ip6_address.cpp	/^void InterfaceIdentifier::SetBytes(const uint8_t *aBuffer) { memcpy(mFields.m8, aBuffer, kSize);/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
SetBytes	core/net/ip6_address.hpp	/^    void SetBytes(const uint8_t *aBuffer) { memcpy(mFields.m8, aBuffer, kSize); }$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetCString	core/utils/parse_cmdline.hpp	/^    void SetCString(char *aString) { mString = aString; }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:void
SetCaCertificateChain	core/coap/coap_secure.hpp	/^    void SetCaCertificateChain(const uint8_t *aX509CaCertificateChain, uint32_t aX509CaCertChain/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetCaCertificateChain	core/meshcop/secure_transport.cpp	/^void SecureTransport::SetCaCertificateChain(const uint8_t *aX509CaCertificateChain, uint32_t aX5/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetCaCertificateChain	core/radio/ble_secure.hpp	/^    void SetCaCertificateChain(const uint8_t *aX509CaCertificateChain, uint32_t aX509CaCertChain/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
SetCallback	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::SetCallback(Listener::Callback aCallback, void *aContext)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
SetCallback	core/backbone_router/ndproxy_table.hpp	/^    void SetCallback(NdProxy::Callback aCallback, void *aContext) { mCallback.Set(aCallback, aCo/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
SetCallback	core/net/mdns.cpp	/^void Core::Entry::SetCallback(const Callback &aCallback)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
SetCallback	core/net/srp_client.hpp	/^        void    SetCallback(AutoStartCallback aCallback, void *aContext) { mCallback.Set(aCallba/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
SetCallback	core/net/srp_client.hpp	/^    void SetCallback(ClientCallback aCallback, void *aContext) { mCallback.Set(aCallback, aConte/;"	f	class:ot::Srp::Client	typeref:typename:void
SetCallback	core/thread/network_data_publisher.hpp	/^        void SetCallback(DnsSrpServiceCallback aCallback, void *aContext) { mCallback.Set(aCallb/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
SetCallbacks	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::SetCallbacks(const struct RadioSpinelCallbacks &aCallbacks)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
SetCanEvict	core/thread/address_resolver.hpp	/^        void SetCanEvict(bool aCanEvict) { mInfo.mOther.mCanEvict = aCanEvict; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetCcaEnergyDetectThreshold	core/radio/radio.hpp	/^inline Error Radio::SetCcaEnergyDetectThreshold(int8_t aThreshold)$/;"	f	class:ot::Radio	typeref:typename:Error
SetCcaEnergyDetectThreshold	core/radio/radio.hpp	/^inline Error Radio::SetCcaEnergyDetectThreshold(int8_t) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
SetCcaEnergyDetectThreshold	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetCcaEnergyDetectThreshold(int8_t aThreshold)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetCcaFailureRateThreshold	core/utils/channel_manager.cpp	/^void ChannelManager::SetCcaFailureRateThreshold(uint16_t aThreshold)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
SetCcmEnabled	core/thread/mle_router.hpp	/^    void SetCcmEnabled(bool aEnabled) { mCcmEnabled = aEnabled; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetCertificate	core/coap/coap_secure.hpp	/^    void SetCertificate(const uint8_t *aX509Cert,$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetCertificate	core/meshcop/secure_transport.cpp	/^void SecureTransport::SetCertificate(const uint8_t *aX509Certificate,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetCertificate	core/radio/ble_secure.hpp	/^    void SetCertificate(const uint8_t *aX509Cert,$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
SetChannel	core/common/message.hpp	/^    void SetChannel(uint8_t aChannel) { GetMetadata().mChannel = aChannel; }$/;"	f	class:ot::Message	typeref:typename:void
SetChannel	core/mac/link_raw.cpp	/^Error LinkRaw::SetChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetChannel	core/mac/mac_frame.hpp	/^    void SetChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetChannel	core/mac/mac_links.hpp	/^    void SetChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
SetChannel	core/radio/trel_packet.hpp	/^    void SetChannel(uint8_t aChannel) { mChannel = aChannel; }$/;"	f	class:ot::Trel::Header	typeref:typename:void
SetChannel	core/thread/mle_tlvs.hpp	/^    void SetChannel(uint16_t aChannel) { mChannel = BigEndian::HostSwap16(aChannel); }$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:void
SetChannelAndPage	core/thread/mle_tlvs.cpp	/^void ChannelTlvValue::SetChannelAndPage(uint16_t aChannel)$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:void
SetChannelEnd	posix/platform/power.hpp	/^    void SetChannelEnd(uint8_t aChannelEnd) { mChannelEnd = aChannelEnd; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:void
SetChannelMask	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::SetChannelMask(Mac::ChannelMask aChannelMask)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SetChannelMaxTransmitPower	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetChannelMaxTransmitPower(uint8_t aChannel, int8_t aMaxPower)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetChannelPage	core/meshcop/meshcop_tlvs.hpp	/^        void     SetChannelPage(uint8_t aChannelPage) { mChannelPage = aChannelPage; }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:void
SetChannelPage	core/thread/mle_tlvs.hpp	/^    void SetChannelPage(uint8_t aChannelPage) { mChannelPage = aChannelPage; }$/;"	f	class:ot::Mle::ChannelTlvValue	typeref:typename:void
SetChannelStart	posix/platform/power.hpp	/^    void SetChannelStart(uint8_t aChannelStart) { mChannelStart = aChannelStart; }$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:void
SetChannelTargetPower	core/utils/power_calibration.cpp	/^Error PowerCalibration::SetChannelTargetPower(uint8_t aChannel, int16_t aTargetPower)$/;"	f	class:ot::Utils::PowerCalibration	typeref:typename:Error
SetChannelTargetPower	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetChannelTargetPower(uint8_t aChannel, int16_t aTargetPower)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetChecksum	core/net/icmp6.hpp	/^        void SetChecksum(uint16_t aChecksum) { mChecksum = BigEndian::HostSwap16(aChecksum); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:void
SetChecksum	core/net/ip4_types.hpp	/^        void SetChecksum(uint16_t aChecksum) { mChecksum = BigEndian::HostSwap16(aChecksum); }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:void
SetChecksum	core/net/ip4_types.hpp	/^    void SetChecksum(uint16_t aChecksum) { mHeaderChecksum = BigEndian::HostSwap16(aChecksum); }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetChecksum	core/net/nd6.hpp	/^        void SetChecksum(uint16_t aChecksum) { mChecksum = BigEndian::HostSwap16(aChecksum); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetChecksum	core/net/udp6.hpp	/^        void SetChecksum(uint16_t aChecksum) { mChecksum = BigEndian::HostSwap16(aChecksum); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:void
SetChildId	core/thread/network_diagnostic_tlvs.hpp	/^    void SetChildId(uint16_t aChildId)$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:void
SetChildMask	core/common/message.cpp	/^void Message::SetChildMask(uint16_t aChildIndex) { GetMetadata().mChildMask.Set(aChildIndex, tru/;"	f	class:ot::Message	typeref:typename:void
SetChildRouterLinks	core/thread/mle_router.cpp	/^Error MleRouter::SetChildRouterLinks(uint8_t aChildRouterLinks)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SetChildStateToValid	core/thread/mle_router.cpp	/^void MleRouter::SetChildStateToValid(Child &aChild)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetChildUseShortAddress	core/thread/indirect_sender.cpp	/^void IndirectSender::SetChildUseShortAddress(Child &aChild, bool aUseShortAddress)$/;"	f	class:ot::IndirectSender	typeref:typename:void
SetClass	core/net/dns_types.hpp	/^    void SetClass(uint16_t aClass) { mClass = BigEndian::HostSwap16(aClass); }$/;"	f	class:ot::Dns::Question	typeref:typename:void
SetClass	core/net/dns_types.hpp	/^    void SetClass(uint16_t aClass) { mClass = BigEndian::HostSwap16(aClass); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:void
SetClientId	core/meshcop/secure_transport.cpp	/^Error SecureTransport::SetClientId(const uint8_t *aClientId, uint8_t aLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
SetClockAccuracy	core/mac/mac_types.hpp	/^    void SetClockAccuracy(uint8_t aClockAccuracy) { mClockAccuracy = aClockAccuracy; }$/;"	f	class:ot::Mac::CslAccuracy	typeref:typename:void
SetCode	core/coap/coap_message.hpp	/^    void SetCode(Code aCode) { GetHelpData().mHeader.mCode = static_cast<uint8_t>(aCode); }$/;"	f	class:ot::Coap::Message	typeref:typename:void
SetCode	core/net/dhcp6.hpp	/^    void SetCode(Code aCode) { mCode = BigEndian::HostSwap16(static_cast<uint16_t>(aCode)); }$/;"	f	class:ot::Dhcp6::Option	typeref:typename:void
SetCode	core/net/icmp6.hpp	/^        void SetCode(Code aCode) { mCode = static_cast<uint8_t>(aCode); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:void
SetCode	core/net/ip4_types.hpp	/^        void SetCode(uint8_t aCode) { mCode = aCode; }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:void
SetCoexEnabled	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetCoexEnabled(bool aEnabled)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetCommandId	core/mac/mac_frame.cpp	/^Error Frame::SetCommandId(uint8_t aCommandId)$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
SetCommandTimeout	cli/cli.cpp	/^void Interpreter::SetCommandTimeout(uint32_t aTimeoutMilli)$/;"	f	class:ot::Cli::Interpreter	typeref:typename:void
SetCommercialCommissioningMode	core/meshcop/meshcop_tlvs.hpp	/^    void SetCommercialCommissioningMode(bool aCcm)$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:void
SetCommissionerSessionId	core/meshcop/meshcop_tlvs.hpp	/^    void SetCommissionerSessionId(uint16_t aSessionId) { mSessionId = BigEndian::HostSwap16(aSes/;"	f	class:ot::MeshCoP::CommissionerSessionIdTlv	typeref:typename:void
SetCommissioningData	core/thread/network_data_leader_ftd.cpp	/^Error Leader::SetCommissioningData(const Message &aMessage)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
SetCommissioningData	core/thread/network_data_leader_ftd.cpp	/^Error Leader::SetCommissioningData(const void *aData, uint8_t aDataLength)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
SetCompress	core/thread/network_data_tlvs.hpp	/^    void SetCompress(void) { mFlags |= kCompressFlag; }$/;"	f	class:ot::NetworkData::ContextTlv	typeref:typename:void
SetConfig	core/backbone_router/bbr_local.cpp	/^Error Local::SetConfig(const Config &aConfig)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:Error
SetConflictCallback	core/net/mdns.hpp	/^    void SetConflictCallback(ConflictCallback aCallback) { mConflictCallback = aCallback; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
SetConnectedCallback	core/coap/coap_secure.hpp	/^    void SetConnectedCallback(ConnectedCallback aCallback, void *aContext)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetContextIdReuseDelay	core/thread/network_data_leader.hpp	/^    void SetContextIdReuseDelay(uint32_t aDelay) { mContextIds.SetReuseDelay(aDelay); }$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
SetCoprocessorReady	lib/spinel/spinel_driver.hpp	/^    void SetCoprocessorReady(void) { mIsCoprocessorReady = true; }$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
SetCslAccuracy	core/thread/router.hpp	/^    void SetCslAccuracy(const Mac::CslAccuracy &aCslAccuracy) { mCslAccuracy = aCslAccuracy; }$/;"	f	class:ot::Parent	typeref:typename:void
SetCslChannel	core/mac/mac.cpp	/^void Mac::SetCslChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetCslChannel	core/thread/csl_tx_scheduler.hpp	/^        void    SetCslChannel(uint8_t aChannel) { mCslChannel = aChannel; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslClockAccuracy	core/thread/mle_tlvs.hpp	/^    void SetCslClockAccuracy(uint8_t aCslClockAccuracy) { mCslClockAccuracy = aCslClockAccuracy;/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:void
SetCslIe	core/mac/mac_frame.cpp	/^void Frame::SetCslIe(uint16_t aCslPeriod, uint16_t aCslPhase)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetCslIePresent	core/mac/mac_frame.hpp	/^    void SetCslIePresent(bool aCslPresent) { mInfo.mTxInfo.mCslPresent = aCslPresent; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetCslLastHeard	core/thread/csl_tx_scheduler.hpp	/^        void      SetCslLastHeard(TimeMilli aCslLastHeard) { mCslLastHeard = aCslLastHeard; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslParentAccuracy	core/mac/mac.hpp	/^    void SetCslParentAccuracy(const CslAccuracy &aCslAccuracy)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetCslParentAccuracy	core/mac/sub_mac.hpp	/^    void SetCslParentAccuracy(const CslAccuracy &aCslAccuracy) { mCslParentAccuracy = aCslAccura/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetCslPeriod	core/mac/mac.cpp	/^void Mac::SetCslPeriod(uint16_t aPeriod)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetCslPeriod	core/thread/csl_tx_scheduler.hpp	/^        void     SetCslPeriod(uint16_t aPeriod) { mCslPeriod = aPeriod; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslPhase	core/thread/csl_tx_scheduler.hpp	/^        void     SetCslPhase(uint16_t aPhase) { mCslPhase = aPhase; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslSynchronized	core/thread/csl_tx_scheduler.hpp	/^        void SetCslSynchronized(bool aCslSynchronized) { mCslSynchronized = aCslSynchronized; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslTimeout	core/thread/csl_tx_scheduler.hpp	/^        void     SetCslTimeout(uint32_t aTimeout) { mCslTimeout = aTimeout; }$/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetCslTimeout	core/thread/mle.cpp	/^void Mle::SetCslTimeout(uint32_t aTimeout)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetCslUncertainty	core/thread/mle_tlvs.hpp	/^    void SetCslUncertainty(uint8_t aCslUncertainty) { mCslUncertainty = aCslUncertainty; }$/;"	f	class:ot::Mle::CslClockAccuracyTlv	typeref:typename:void
SetCsmaCaEnabled	core/mac/mac_frame.hpp	/^    void SetCsmaCaEnabled(bool aCsmaCaEnabled) { mInfo.mTxInfo.mCsmaCaEnabled = aCsmaCaEnabled; /;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetCurrentKeySequence	core/thread/key_manager.cpp	/^void KeyManager::SetCurrentKeySequence(uint32_t aKeySequence, KeySequenceUpdateMode aUpdateMode)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetDadCounter	core/common/settings.hpp	/^        void SetDadCounter(uint8_t aDadCounter) { mDadCounter = aDadCounter; }$/;"	f	class:ot::SettingsBase::DadInfo	typeref:typename:void
SetData	core/utils/flash.hpp	/^        void           SetData(const uint8_t *aData, uint16_t aDataLength)$/;"	f	class:ot::Flash::Record	typeref:typename:void
SetDataPollPending	core/mac/data_poll_handler.hpp	/^        void SetDataPollPending(bool aPending) { mDataPollPending = aPending; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetDataVersion	core/thread/mle_types.hpp	/^    void SetDataVersion(uint8_t aVersion) { mDataVersion = aVersion; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:void
SetDatagramTag	core/common/message.hpp	/^    void SetDatagramTag(uint32_t aTag) { GetMetadata().mDatagramTag = aTag; }$/;"	f	class:ot::Message	typeref:typename:void
SetDefaultConfig	core/net/dns_client.cpp	/^void Client::SetDefaultConfig(const QueryConfig &aQueryConfig)$/;"	f	class:ot::Dns::Client	typeref:typename:void
SetDefaultHandler	core/coap/coap.hpp	/^    void SetDefaultHandler(RequestHandler aHandler, void *aContext) { mDefaultHandler.Set(aHandl/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
SetDefaultMessageSubType	core/meshcop/secure_transport.hpp	/^    void SetDefaultMessageSubType(Message::SubType aMessageSubType) { mMessageDefaultSubType = a/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetDefaultResponseHeader	core/coap/coap_message.cpp	/^Error Message::SetDefaultResponseHeader(const Message &aRequest)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
SetDefaultRouterPreference	core/net/nd6.cpp	/^void RouterAdvert::Header::SetDefaultRouterPreference(RoutePreference aPreference)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetDefaultRssIn	core/mac/mac_filter.hpp	/^    void SetDefaultRssIn(int8_t aRss) { mDefaultRssIn = aRss; }$/;"	f	class:ot::Mac::Filter	typeref:typename:void
SetDelay	core/utils/channel_manager.cpp	/^Error ChannelManager::SetDelay(uint16_t aDelay)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:Error
SetDelayTimerMinimal	core/meshcop/meshcop_leader.cpp	/^Error Leader::SetDelayTimerMinimal(uint32_t aDelayTimerMinimal)$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:Error
SetDeleted	core/utils/flash.hpp	/^        void SetDeleted(void) { mFlags &= ~kFlagDelete; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetDerLength	core/crypto/ecdsa.hpp	/^        void SetDerLength(uint8_t aDerLength) { mDerLength = aDerLength; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:void
SetDestination	core/mac/mac_types.cpp	/^void PanIds::SetDestination(PanId aPanId)$/;"	f	class:ot::Mac::PanIds	typeref:typename:void
SetDestination	core/net/ip4_types.hpp	/^    void SetDestination(const Address &aDestination) { mDestination = aDestination; }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetDestination	core/net/ip6_headers.hpp	/^    void SetDestination(const Address &aDestination) { mDestination = aDestination; }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetDestination	core/radio/trel_packet.hpp	/^    void SetDestination(const Mac::ExtAddress &aDest) { mDestination = aDest; }$/;"	f	class:ot::Trel::Header	typeref:typename:void
SetDestinationPort	core/meshcop/meshcop_tlvs.hpp	/^    void SetDestinationPort(uint16_t aDestinationPort) { mDestinationPort = BigEndian::HostSwap1/;"	f	class:ot::MeshCoP::UdpEncapsulationTlvHeader	typeref:typename:void
SetDestinationPort	core/net/udp6.hpp	/^        void SetDestinationPort(uint16_t aPort) { mDestinationPort = BigEndian::HostSwap16(aPort/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:void
SetDeviceMode	core/common/settings.hpp	/^        void SetDeviceMode(uint8_t aDeviceMode) { mDeviceMode = aDeviceMode; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetDeviceMode	core/thread/child.cpp	/^void Child::SetDeviceMode(Mle::DeviceMode aMode)$/;"	f	class:ot::Child	typeref:typename:void
SetDeviceMode	core/thread/mle.cpp	/^Error Mle::SetDeviceMode(DeviceMode aDeviceMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SetDeviceMode	core/thread/neighbor.hpp	/^    void SetDeviceMode(Mle::DeviceMode aMode) { mMode = aMode.Get(); }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetDeviceProperties	core/thread/mle_router.cpp	/^void MleRouter::SetDeviceProperties(const DeviceProperties &aDeviceProperties)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetDhcp6PdEnabled	core/border_router/routing_manager.hpp	/^    void SetDhcp6PdEnabled(bool aEnabled) { return mPdPrefixManager.SetEnabled(aEnabled); }$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SetDiagEnabled	lib/spinel/radio_spinel.hpp	/^    void SetDiagEnabled(bool aMode) { mDiagMode = aMode; }$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
SetDirectTransmission	core/common/message.hpp	/^    void SetDirectTransmission(void) { GetMetadata().mDirectTx = true; }$/;"	f	class:ot::Message	typeref:typename:void
SetDiscerner	core/meshcop/joiner.cpp	/^Error Joiner::SetDiscerner(const JoinerDiscerner &aDiscerner)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:Error
SetDiscoveryRequestCallback	core/thread/mle_router.hpp	/^    void SetDiscoveryRequestCallback(otThreadDiscoveryRequestCallback aCallback, void *aContext)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetDnsNameCompressionEnabled	core/instance/instance.hpp	/^    static void SetDnsNameCompressionEnabled(bool aEnabled) { sDnsNameCompressionEnabled = aEnab/;"	f	class:ot::Instance	typeref:typename:void
SetDnsSecurityFlag	core/net/dns_types.hpp	/^    void SetDnsSecurityFlag(void) { GetTtlByteAt(kFlagByteIndex) |= kDnsSecFlag; }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
SetDnsSrpServiceCallback	core/thread/network_data_publisher.hpp	/^    void SetDnsSrpServiceCallback(DnsSrpServiceCallback aCallback, void *aContext)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
SetDoNotEvict	core/common/message.hpp	/^    void SetDoNotEvict(bool aDoNotEvict) { GetMetadata().mDoNotEvict = aDoNotEvict; }$/;"	f	class:ot::Message	typeref:typename:void
SetDomain	core/net/srp_server.cpp	/^Error Server::SetDomain(const char *aDomain)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
SetDomainId	core/utils/slaac_address.hpp	/^        void      SetDomainId(uint8_t aDomainId) { mDomainId = aDomainId; }$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:void
SetDomainName	core/meshcop/network_name.cpp	/^Error NetworkNameManager::SetDomainName(const NameData &aNameData)$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:Error
SetDomainName	core/meshcop/network_name.cpp	/^Error NetworkNameManager::SetDomainName(const char *aNameString)$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:Error
SetDomainName	core/net/srp_client.cpp	/^Error Client::SetDomainName(const char *aName)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
SetDomainPrefix	core/backbone_router/bbr_local.cpp	/^Error Local::SetDomainPrefix(const NetworkData::OnMeshPrefixConfig &aConfig)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:Error
SetDomainPrefixCallback	core/backbone_router/bbr_local.hpp	/^    void SetDomainPrefixCallback(DomainPrefixCallback aCallback, void *aContext)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
SetDscp	core/net/ip4_types.hpp	/^    void SetDscp(uint8_t aDscp) { mDscpEcn = static_cast<uint8_t>((mDscpEcn & ~kDscpMask) | (aDs/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetDscp	core/net/ip6_headers.hpp	/^    void SetDscp(uint8_t aDscp)$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetDstAddr	core/mac/mac_frame.cpp	/^void Frame::SetDstAddr(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetDstAddr	core/mac/mac_frame.cpp	/^void Frame::SetDstAddr(const Address &aAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetDstAddr	core/mac/mac_frame.cpp	/^void Frame::SetDstAddr(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetDstPanId	core/mac/mac_frame.cpp	/^void Frame::SetDstPanId(PanId aPanId)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetDuidHardwareType	core/net/dhcp6.hpp	/^    void SetDuidHardwareType(uint16_t aDuidHardwareType)$/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:void
SetDuidHardwareType	core/net/dhcp6.hpp	/^    void SetDuidHardwareType(uint16_t aDuidHardwareType)$/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:void
SetDuidLinkLayerAddress	core/net/dhcp6.hpp	/^    void SetDuidLinkLayerAddress(const Mac::ExtAddress &aDuidLinkLayerAddress)$/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:void
SetDuidLinkLayerAddress	core/net/dhcp6.hpp	/^    void SetDuidLinkLayerAddress(const Mac::ExtAddress &aDuidLinkLayerAddress)$/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:void
SetDuidType	core/net/dhcp6.hpp	/^    void SetDuidType(DuidType aDuidType) { mDuidType = BigEndian::HostSwap16(static_cast<uint16_/;"	f	class:ot::Dhcp6::ClientIdentifier	typeref:typename:void
SetDuidType	core/net/dhcp6.hpp	/^    void SetDuidType(DuidType aDuidType) { mDuidType = BigEndian::HostSwap16(static_cast<uint16_/;"	f	class:ot::Dhcp6::ServerIdentifier	typeref:typename:void
SetEchoMode	core/net/icmp6.hpp	/^    void SetEchoMode(otIcmp6EchoMode aMode) { mEchoMode = aMode; }$/;"	f	class:ot::Ip6::Icmp	typeref:typename:void
SetEcn	core/net/ip4_types.hpp	/^    void SetEcn(Ecn aEcn) { mDscpEcn = ((mDscpEcn & ~kEcnMask) | aEcn); }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetEcn	core/net/ip6_headers.hpp	/^    void SetEcn(Ecn aEcn) { mVerTcFlow.m8[1] = (mVerTcFlow.m8[1] & ~kEcnMask) | ((aEcn << kEcnOf/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetEcn	core/net/socket.hpp	/^    void SetEcn(Ecn aEcn) { mEcn = aEcn; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetElapsedTime	core/net/dhcp6.hpp	/^    void SetElapsedTime(uint16_t aElapsedTime) { mElapsedTime = BigEndian::HostSwap16(aElapsedTi/;"	f	class:ot::Dhcp6::ElapsedTime	typeref:typename:void
SetEmittingCommandOutput	cli/cli_utils.hpp	/^    void SetEmittingCommandOutput(bool aEmittingOutput) { mEmittingCommandOutput = aEmittingOutp/;"	f	class:ot::Cli::OutputImplementer	typeref:typename:void
SetEmittingCommandOutput	cli/cli_utils.hpp	/^    void SetEmittingCommandOutput(bool) {}$/;"	f	class:ot::Cli::OutputImplementer	typeref:typename:void
SetEmptyCommissionerData	core/meshcop/meshcop_leader.cpp	/^void Leader::SetEmptyCommissionerData(void)$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
SetEnabled	core/backbone_router/bbr_local.cpp	/^void Local::SetEnabled(bool aEnable)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
SetEnabled	core/border_router/routing_manager.cpp	/^Error RoutingManager::SetEnabled(bool aEnabled)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
SetEnabled	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::SetEnabled(bool aEnabled)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
SetEnabled	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::SetEnabled(bool aEnabled)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
SetEnabled	core/mac/mac.cpp	/^void Mac::SetEnabled(bool aEnable)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetEnabled	core/net/mdns.cpp	/^Error Core::SetEnabled(bool aEnable, uint32_t aInfraIfIndex)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
SetEnabled	core/net/nat64_translator.cpp	/^void Translator::SetEnabled(bool aEnabled)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
SetEnabled	core/net/srp_server.cpp	/^void Server::SetEnabled(bool aEnabled)$/;"	f	class:ot::Srp::Server	typeref:typename:void
SetEnabled	core/radio/trel_interface.cpp	/^void Interface::SetEnabled(bool aEnable)$/;"	f	class:ot::Trel::Interface	typeref:typename:void
SetEnabled	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::SetEnabled(bool aEnable)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
SetEnhAckFlags	core/thread/link_metrics_tlvs.hpp	/^    void SetEnhAckFlags(EnhAckFlags aEnhAckFlags) { mEnhAckFlags = aEnhAckFlags; }$/;"	f	class:ot::LinkMetrics::EnhAckConfigSubTlv	typeref:typename:void
SetEnhAckProbingCallback	core/thread/link_metrics.hpp	/^    void SetEnhAckProbingCallback(EnhAckProbingIeReportCallback aCallback, void *aContext)$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:void
SetEnhAckProbingIe	core/mac/mac_frame.cpp	/^void Frame::SetEnhAckProbingIe(const uint8_t *aValue, uint8_t aLen)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetEnhAckProbingMetrics	core/thread/neighbor.hpp	/^    void SetEnhAckProbingMetrics(const LinkMetrics::Metrics &aEnhAckProbingMetrics)$/;"	f	class:ot::Neighbor	typeref:typename:void
SetEntry	core/border_router/routing_manager.hpp	/^            void SetEntry(const void *aEntry) { mPtr2 = aEntry; }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
SetEntry	core/thread/address_resolver.hpp	/^        void                  SetEntry(const CacheEntry *aEntry) { mData[kEntryIndex] = aEntry; /;"	f	class:ot::AddressResolver::Iterator	typeref:typename:void
SetEntryIndex	core/thread/network_data.hpp	/^        void    SetEntryIndex(uint8_t aIndex) { mIteratorBuffer[kEntryPosition] = aIndex; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
SetEntryType	core/border_router/routing_manager.hpp	/^            void SetEntryType(EntryType aType) { mData3 = aType; }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
SetEphemeralKey	core/meshcop/border_agent.cpp	/^Error BorderAgent::SetEphemeralKey(const char *aKeyString, uint32_t aTimeout, uint16_t aUdpPort)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
SetEphemeralKeyCallback	core/meshcop/border_agent.hpp	/^    void SetEphemeralKeyCallback(EphemeralKeyCallback aCallback, void *aContext)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
SetError	core/net/srp_server.hpp	/^        void                     SetError(Error aError) { mError = aError; }$/;"	f	class:ot::Srp::Server::UpdateMetadata	typeref:typename:void
SetExpiration	core/net/dns_types.hpp	/^    void SetExpiration(uint32_t aExpiration) { mExpiration = BigEndian::HostSwap32(aExpiration);/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetExpirationTime	core/net/dns_dso.hpp	/^            void      SetExpirationTime(TimeMilli aTime) { mExpirationTime = aTime; }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:void
SetExpirationTime	core/utils/slaac_address.hpp	/^        void      SetExpirationTime(TimeMilli aTime)$/;"	f	class:ot::Utils::Slaac::SlaacAddress	typeref:typename:void
SetExpireTime	core/backbone_router/multicast_listeners_table.hpp	/^        void SetExpireTime(TimeMilli aExpireTime) { mExpireTime = aExpireTime; }$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener	typeref:typename:void
SetExtAddress	core/common/settings.hpp	/^        void SetExtAddress(const Mac::ExtAddress &aExtAddress) { mExtAddress = aExtAddress; }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
SetExtAddress	core/common/settings.hpp	/^        void SetExtAddress(const Mac::ExtAddress &aExtAddress) { mExtAddress = aExtAddress; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetExtAddress	core/common/settings.hpp	/^        void SetExtAddress(const Mac::ExtAddress &aExtAddress) { mExtAddress = aExtAddress; }$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:void
SetExtAddress	core/mac/link_raw.cpp	/^Error LinkRaw::SetExtAddress(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetExtAddress	core/mac/mac.hpp	/^    void SetExtAddress(const ExtAddress &aExtAddress) { mLinks.SetExtAddress(aExtAddress); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetExtAddress	core/mac/mac_links.hpp	/^    void SetExtAddress(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetExtAddress	core/mac/sub_mac.cpp	/^void SubMac::SetExtAddress(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetExtAddress	core/radio/trel_interface.hpp	/^        void SetExtAddress(const Mac::ExtAddress &aExtAddress) { mExtAddress = aExtAddress; }$/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:void
SetExtAddress	core/thread/neighbor.hpp	/^    void SetExtAddress(const Mac::ExtAddress &aAddress) { mMacAddr = aAddress; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetExtPanId	core/meshcop/extended_panid.cpp	/^void ExtendedPanIdManager::SetExtPanId(const ExtendedPanId &aExtendedPanId)$/;"	f	class:ot::MeshCoP::ExtendedPanIdManager	typeref:typename:void
SetExtPanId	core/radio/trel_interface.hpp	/^        void SetExtPanId(const MeshCoP::ExtendedPanId &aExtPanId) { mExtPanId = aExtPanId; }$/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:void
SetExtended	core/mac/mac_types.hpp	/^    void SetExtended(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Address	typeref:typename:void
SetExtended	core/mac/mac_types.hpp	/^    void SetExtended(const uint8_t *aBuffer, ExtAddress::CopyByteOrder aByteOrder = ExtAddress::/;"	f	class:ot::Mac::Address	typeref:typename:void
SetExtendedAddress	core/radio/radio.cpp	/^void Radio::SetExtendedAddress(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Radio	typeref:typename:void
SetExtendedAddress	core/radio/radio.hpp	/^inline void Radio::SetExtendedAddress(const Mac::ExtAddress &) {}$/;"	f	class:ot::Radio	typeref:typename:void
SetExtendedAddress	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetExtendedAddress(const otExtAddress &aExtAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetExtendedPanId	core/mac/mac_frame.hpp	/^    void SetExtendedPanId(const otExtendedPanId &aExtPanId) { mExtendedPanId = aExtPanId; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
SetExtendedResponseCode	core/net/dns_types.hpp	/^    void SetExtendedResponseCode(uint8_t aExtendedResponse) { GetTtlByteAt(kExtRCodeByteIndex) =/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
SetExternalPollPeriod	core/mac/data_poll_sender.cpp	/^Error DataPollSender::SetExternalPollPeriod(uint32_t aPeriod)$/;"	f	class:ot::DataPollSender	typeref:typename:Error
SetExtraRouterAdvertOptions	core/border_router/routing_manager.cpp	/^Error RoutingManager::SetExtraRouterAdvertOptions(const uint8_t *aOptions, uint16_t aLength)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:Error
SetFavoredChannels	core/utils/channel_manager.cpp	/^void ChannelManager::SetFavoredChannels(uint32_t aChannelMask)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
SetFemLnaGain	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetFemLnaGain(int8_t aGain)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetFilter	core/utils/slaac_address.cpp	/^void Slaac::SetFilter(PrefixFilter aFilter)$/;"	f	class:ot::Utils::Slaac	typeref:typename:void
SetFilterEnabled	core/radio/trel_interface.hpp	/^    void SetFilterEnabled(bool aEnable) { mFiltered = aEnable; }$/;"	f	class:ot::Trel::Interface	typeref:typename:void
SetFireTime	core/net/mdns.cpp	/^void Core::FireTime::SetFireTime(TimeMilli aFireTime)$/;"	f	class:ot::Dns::Multicast::Core::FireTime	typeref:typename:void
SetFirst	core/utils/flash.hpp	/^        void SetFirst(void) { mFlags &= ~kFlagFirst; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetFixedDuaInterfaceIdentifier	core/thread/dua_manager.cpp	/^Error DuaManager::SetFixedDuaInterfaceIdentifier(const Ip6::InterfaceIdentifier &aIid)$/;"	f	class:ot::DuaManager	typeref:typename:Error
SetFlags	core/net/dns_types.hpp	/^    void SetFlags(UseFlags aUseFlags, OwnerFlags aOwnerFlags, uint8_t aSignatoryFlags)$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:void
SetFlags	core/net/sntp_client.hpp	/^        void    SetFlags(uint8_t aFlags) { mFlags = aFlags; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetFlags	core/thread/key_manager.cpp	/^void SecurityPolicy::SetFlags(const uint8_t *aFlags, uint8_t aFlagsLength)$/;"	f	class:ot::SecurityPolicy	typeref:typename:void
SetFlags	core/thread/network_data_tlvs.hpp	/^    void SetFlags(uint16_t aFlags) { mFlags = BigEndian::HostSwap16(aFlags); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:void
SetFlags	core/thread/network_data_tlvs.hpp	/^    void SetFlags(uint8_t aFlags) { mFlags = aFlags; }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:void
SetFlagsIndex	core/thread/network_diagnostic_tlvs.hpp	/^    void     SetFlagsIndex(uint16_t aFlagsIndex) { mFlagsIndex = BigEndian::HostSwap16(aFlagsInd/;"	f	class:ot::NetworkDiagnostic::AnswerTlv	typeref:typename:void
SetFlow	core/net/ip6_headers.hpp	/^    void SetFlow(uint32_t aFlow)$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetFrameAddedCallback	lib/spinel/spinel_buffer.cpp	/^void Buffer::SetFrameAddedCallback(BufferCallback aFrameAddedCallback, void *aFrameAddedContext)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
SetFrameControlField	core/mac/mac_frame.cpp	/^void Frame::SetFrameControlField(uint16_t aFcf) { LittleEndian::WriteUint16(aFcf, mPsdu); }$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetFrameCounter	core/mac/mac_frame.cpp	/^void Frame::SetFrameCounter(uint32_t aFrameCounter)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetFrameCounter	core/mac/sub_mac.cpp	/^void SubMac::SetFrameCounter(uint32_t aFrameCounter, bool aSetIfLarger)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetFrameCounter	core/thread/mle.hpp	/^        void     SetFrameCounter(uint32_t aCounter) { mFrameCounter = LittleEndian::HostSwap32(a/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:void
SetFrameHandler	lib/spinel/spinel_driver.cpp	/^void SpinelDriver::SetFrameHandler(ReceivedFrameHandler aReceivedFrameHandler,$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:void
SetFramePending	core/mac/mac_frame.cpp	/^void Frame::SetFramePending(bool aFramePending)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetFramePurgePending	core/mac/data_poll_handler.hpp	/^        void SetFramePurgePending(bool aPurgePending) { mFramePurgePending = aPurgePending; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetFrameRemovedCallback	lib/spinel/spinel_buffer.cpp	/^void Buffer::SetFrameRemovedCallback(BufferCallback aFrameRemovedCallback, void *aFrameRemovedCo/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
SetFrameReplacePending	core/mac/data_poll_handler.hpp	/^        void SetFrameReplacePending(bool aReplacePending) { mFrameReplacePending = aReplacePendi/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::FavoredOmrPrefix::SetFrom(const NetworkData::OnMeshPrefixConfig &aOnMeshPre/;"	f	class:ot::BorderRouter::RoutingManager::FavoredOmrPrefix	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::FavoredOmrPrefix::SetFrom(const OmrPrefix &aOmrPrefix)$/;"	f	class:ot::BorderRouter::RoutingManager::FavoredOmrPrefix	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefix::SetFrom(const PrefixInfoOption &aPio)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefix::SetFrom(const PrefixTableEntry &aPrefixTableEntry)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefix	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePrefix::SetFrom(const RouteInfoOption &aRio)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:void
SetFrom	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePrefix::SetFrom(const RouterAdvert::Header &aRaHeader)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePrefix	typeref:typename:void
SetFrom	core/common/heap_data.cpp	/^Error Data::SetFrom(const Message &aMessage)$/;"	f	class:ot::Heap::Data	typeref:typename:Error
SetFrom	core/common/heap_data.cpp	/^Error Data::SetFrom(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Heap::Data	typeref:typename:Error
SetFrom	core/common/heap_data.cpp	/^Error Data::SetFrom(const uint8_t *aBuffer, uint16_t aLength)$/;"	f	class:ot::Heap::Data	typeref:typename:Error
SetFrom	core/common/heap_data.cpp	/^void Data::SetFrom(Data &&aData)$/;"	f	class:ot::Heap::Data	typeref:typename:void
SetFrom	core/mac/mac_types.cpp	/^void KeyMaterial::SetFrom(const Key &aKey, bool aIsExportable)$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
SetFrom	core/meshcop/dataset.cpp	/^Error Dataset::SetFrom(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
SetFrom	core/meshcop/dataset.cpp	/^Error Dataset::SetFrom(const Tlvs &aTlvs) { return SetFrom(aTlvs.mTlvs, aTlvs.mLength); }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
SetFrom	core/meshcop/dataset.cpp	/^Error Dataset::SetFrom(const uint8_t *aTlvs, uint8_t aLength)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
SetFrom	core/meshcop/dataset.cpp	/^void Dataset::SetFrom(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
SetFrom	core/meshcop/dataset.cpp	/^void Dataset::SetFrom(const Info &aDatasetInfo)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
SetFrom	core/meshcop/meshcop.cpp	/^Error JoinerPskd::SetFrom(const char *aPskdString)$/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:Error
SetFrom	core/net/dns_client.cpp	/^void Client::QueryConfig::SetFrom(const QueryConfig *aConfig, const QueryConfig &aDefaultConfig)$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetFrom	core/net/mdns.cpp	/^void Core::AddressArray::SetFrom(const Ip6::Address *aAddresses, uint16_t aNumAddresses)$/;"	f	class:ot::Dns::Multicast::Core::AddressArray	typeref:typename:void
SetFrom	core/thread/child.cpp	/^void Child::Info::SetFrom(const Child &aChild)$/;"	f	class:ot::Child::Info	typeref:typename:void
SetFrom	core/thread/link_metrics_types.cpp	/^void SeriesFlags::SetFrom(uint8_t aFlagsMask)$/;"	f	class:ot::LinkMetrics::SeriesFlags	typeref:typename:void
SetFrom	core/thread/mesh_forwarder.cpp	/^void ThreadLinkInfo::SetFrom(const Mac::RxFrame &aFrame)$/;"	f	class:ot::ThreadLinkInfo	typeref:typename:void
SetFrom	core/thread/neighbor.cpp	/^void Neighbor::Info::SetFrom(const Neighbor &aNeighbor)$/;"	f	class:ot::Neighbor::Info	typeref:typename:void
SetFrom	core/thread/network_data_types.cpp	/^void ExternalRouteConfig::SetFrom(Instance            &aInstance,$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:void
SetFrom	core/thread/network_data_types.cpp	/^void LowpanContextInfo::SetFrom(const PrefixTlv &aPrefixTlv, const ContextTlv &aContextTlv)$/;"	f	class:ot::NetworkData::LowpanContextInfo	typeref:typename:void
SetFrom	core/thread/network_data_types.cpp	/^void OnMeshPrefixConfig::SetFrom(const PrefixTlv         &aPrefixTlv,$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:void
SetFrom	core/thread/network_data_types.cpp	/^void ServiceConfig::ServerConfig::SetFrom(const ServerTlv &aServerTlv)$/;"	f	class:ot::NetworkData::ServiceConfig::ServerConfig	typeref:typename:void
SetFrom	core/thread/network_data_types.cpp	/^void ServiceConfig::SetFrom(const ServiceTlv &aServiceTlv, const ServerTlv &aServerTlv)$/;"	f	class:ot::NetworkData::ServiceConfig	typeref:typename:void
SetFrom	core/thread/router.cpp	/^void Router::Info::SetFrom(const Parent &aParent)$/;"	f	class:ot::Router::Info	typeref:typename:void
SetFrom	core/thread/router.cpp	/^void Router::Info::SetFrom(const Router &aRouter)$/;"	f	class:ot::Router::Info	typeref:typename:void
SetFrom	core/thread/router.cpp	/^void Router::SetFrom(const Parent &aParent)$/;"	f	class:ot::Router	typeref:typename:void
SetFrom	core/utils/mesh_diag.cpp	/^void MeshDiag::ChildEntry::SetFrom(const ChildTlv &aChildTlv)$/;"	f	class:ot::Utils::MeshDiag::ChildEntry	typeref:typename:void
SetFrom	core/utils/mesh_diag.cpp	/^void MeshDiag::RouterNeighborEntry::SetFrom(const RouterNeighborTlv &aTlv)$/;"	f	class:ot::Utils::MeshDiag::RouterNeighborEntry	typeref:typename:void
SetFromExtAddress	core/net/ip6_address.cpp	/^void InterfaceIdentifier::SetFromExtAddress(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
SetFromMessage	core/net/dns_types.hpp	/^    void SetFromMessage(const Message &aMessage, uint16_t aOffset)$/;"	f	class:ot::Dns::Name	typeref:typename:void
SetFromTimestamp	core/meshcop/timestamp.cpp	/^void Timestamp::SetFromTimestamp(const otTimestamp &aTimestamp)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
SetFromTlvFlags	core/thread/network_data_types.cpp	/^void ExternalRouteConfig::SetFromTlvFlags(uint8_t aFlags)$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:void
SetFromTlvFlags	core/thread/network_data_types.cpp	/^void OnMeshPrefixConfig::SetFromTlvFlags(uint16_t aFlags)$/;"	f	class:ot::NetworkData::OnMeshPrefixConfig	typeref:typename:void
SetFullName	core/net/srp_server.cpp	/^Error Server::Host::SetFullName(const char *aFullName)$/;"	f	class:ot::Srp::Server::Host	typeref:typename:Error
SetGpioValue	posix/platform/spi_interface.cpp	/^void SpiInterface::SetGpioValue(int aFd, uint8_t aValue)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
SetGroup	core/mac/mac_types.hpp	/^    void SetGroup(bool aGroup)$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
SetHead	core/common/linked_list.hpp	/^    void SetHead(Type *aHead) { mHead = aHead; }$/;"	f	class:ot::LinkedList	typeref:typename:void
SetHeaderAcceptLen	lib/spinel/spi_frame.hpp	/^    void SetHeaderAcceptLen(uint16_t aAcceptLen) { LittleEndian::WriteUint16(aAcceptLen, mBuffer/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:void
SetHeaderDataLen	lib/spinel/spi_frame.hpp	/^    void SetHeaderDataLen(uint16_t aDataLen) { LittleEndian::WriteUint16(aDataLen, mBuffer + kIn/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:void
SetHeaderFlagByte	lib/spinel/spi_frame.hpp	/^    void SetHeaderFlagByte(bool aResetFlag) { mBuffer[kIndexFlagByte] = kFlagPattern | (aResetFl/;"	f	class:ot::Spinel::SpiFrame	typeref:typename:void
SetHopLimit	core/net/ip6_headers.hpp	/^    void SetHopLimit(uint8_t aHopLimit) { mHopLimit = aHopLimit; }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetHopLimit	core/net/socket.hpp	/^    void SetHopLimit(uint8_t aHopLimit) { mHopLimit = aHopLimit; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetHostAddresses	core/net/srp_client.cpp	/^Error Client::SetHostAddresses(const Ip6::Address *aAddresses, uint8_t aNumAddresses)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
SetHostName	core/net/srp_client.cpp	/^Error Client::SetHostName(const char *aName)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
SetIaid	core/net/dhcp6.hpp	/^    void SetIaid(uint32_t aIaid) { mIaid = BigEndian::HostSwap32(aIaid); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:void
SetId	core/common/settings.hpp	/^        void SetId(const MeshCoP::BorderAgent::Id &aId) { mId = aId; }$/;"	f	class:ot::SettingsBase::BorderAgentId	typeref:typename:void
SetId	core/mac/mac_frame.hpp	/^    void SetId(uint16_t aId)$/;"	f	class:ot::Mac::HeaderIe	typeref:typename:void
SetId	core/meshcop/border_agent.cpp	/^Error BorderAgent::SetId(const Id &aId)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
SetId	core/meshcop/commissioner.cpp	/^Error Commissioner::SetId(const char *aId)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SetId	core/net/icmp6.hpp	/^        void SetId(uint16_t aId) { mData.m16[0] = BigEndian::HostSwap16(aId); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:void
SetIdFromIeeeEui64	core/meshcop/joiner.cpp	/^void Joiner::SetIdFromIeeeEui64(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
SetIdSequence	core/thread/mle_tlvs.hpp	/^    void SetIdSequence(uint8_t aSequence) { mIdSequence = aSequence; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetIdSequence	core/thread/thread_tlvs.hpp	/^    void SetIdSequence(uint8_t aSequence) { mIdSequence = aSequence; }$/;"	f	class:ot::ThreadRouterMaskTlv	typeref:typename:void
SetIdentification	core/net/ip4_types.hpp	/^    void SetIdentification(uint16_t aIdentification) { mIdentification = BigEndian::HostSwap16(a/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetIdentification	core/net/ip6_headers.hpp	/^    void SetIdentification(uint32_t aIdentification) { mIdentification = aIdentification; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
SetIePresent	core/mac/mac_frame.cpp	/^void Frame::SetIePresent(bool aIePresent)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetIfInBroadcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfInBroadcastPkts(const uint32_t aIfInBroadcastPkts)$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfInDiscards	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfInDiscards(const uint32_t aIfInDiscards) { mIfInDiscards = BigEndian::HostSwap32(a/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfInErrors	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfInErrors(const uint32_t aIfInErrors) { mIfInErrors = BigEndian::HostSwap32(aIfInEr/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfInUcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfInUcastPkts(const uint32_t aIfInUcastPkts) { mIfInUcastPkts = BigEndian::HostSwap3/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfInUnknownProtos	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfInUnknownProtos(const uint32_t aIfInUnknownProtos)$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfIndex	core/border_router/infra_if.hpp	/^    void SetIfIndex(uint32_t aIfIndex) { mIfIndex = aIfIndex; }$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:void
SetIfOutBroadcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfOutBroadcastPkts(const uint32_t aIfOutBroadcastPkts)$/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfOutDiscards	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfOutDiscards(const uint32_t aIfOutDiscards) { mIfOutDiscards = BigEndian::HostSwap3/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfOutErrors	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfOutErrors(const uint32_t aIfOutErrors) { mIfOutErrors = BigEndian::HostSwap32(aIfO/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIfOutUcastPkts	core/thread/network_diagnostic_tlvs.hpp	/^    void SetIfOutUcastPkts(const uint32_t aIfOutUcastPkts) { mIfOutUcastPkts = BigEndian::HostSw/;"	f	class:ot::NetworkDiagnostic::MacCountersTlv	typeref:typename:void
SetIid	core/net/ip6_address.hpp	/^    void SetIid(const InterfaceIdentifier &aIid) { GetIid() = aIid; }$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetInactivityTimeout	core/net/dns_dso.hpp	/^        void     SetInactivityTimeout(uint32_t aTimeout) { mInactivityTimeout = BigEndian::HostS/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:void
SetInception	core/net/dns_types.hpp	/^    void SetInception(uint32_t aInception) { mInception = BigEndian::HostSwap32(aInception); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetIndex	core/thread/router_table.hpp	/^        void    SetIndex(uint8_t aRouterId, uint8_t aIndex) { mIndexes[aRouterId] = kAllocatedFl/;"	f	class:ot::RouterTable::RouterIdMap	typeref:typename:void
SetIndirectDataSequenceNumber	core/mac/data_poll_handler.hpp	/^        void    SetIndirectDataSequenceNumber(uint8_t aDsn) { mIndirectDsn = aDsn; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetIndirectFragmentOffset	core/thread/indirect_sender.hpp	/^        void     SetIndirectFragmentOffset(uint16_t aFragmentOffset) { mIndirectFragmentOffset =/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetIndirectFrameCounter	core/mac/data_poll_handler.hpp	/^        void     SetIndirectFrameCounter(uint32_t aFrameCounter) { mIndirectFrameCounter = aFram/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetIndirectKeyId	core/mac/data_poll_handler.hpp	/^        void    SetIndirectKeyId(uint8_t aKeyId) { mIndirectKeyId = aKeyId; }$/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetIndirectMessage	core/thread/indirect_sender.hpp	/^        void     SetIndirectMessage(Message *aMessage) { mIndirectMessage = aMessage; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetIndirectSourceMatchPending	core/thread/indirect_sender.hpp	/^        void SetIndirectSourceMatchPending(bool aPending) { mSourceMatchPending = aPending; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetIndirectSourceMatchShort	core/thread/indirect_sender.hpp	/^        void SetIndirectSourceMatchShort(bool aShort) { mUseShortAddress = aShort; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetIndirectTxSuccess	core/thread/indirect_sender.hpp	/^        void SetIndirectTxSuccess(bool aTxStatus) { mIndirectTxSuccess = aTxStatus; }$/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetInfraNetif	posix/platform/infra_if.cpp	/^void InfraNetif::SetInfraNetif(const char *aIfName, int aIcmp6Socket)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
SetInfraNetifIcmp6SocketForBorderRouting	posix/platform/infra_if.cpp	/^void InfraNetif::SetInfraNetifIcmp6SocketForBorderRouting(int aIcmp6Socket)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
SetInitTime	core/border_router/routing_manager.hpp	/^            void SetInitTime(void) { mData1 = TimerMilli::GetNow().GetValue(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
SetInitTime	core/utils/history_tracker.hpp	/^        void      SetInitTime(void) { mData32 = TimerMilli::GetNow().GetValue(); }$/;"	f	class:ot::Utils::HistoryTracker::Iterator	typeref:typename:void
SetInterceptor	core/coap/coap.hpp	/^    void SetInterceptor(Interceptor aInterceptor, void *aContext) { mInterceptor.Set(aIntercepto/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
SetInterval	core/net/dns_dso.hpp	/^            void     SetInterval(uint32_t aInterval) { mInterval = LimitInterval(aInterval); }$/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:void
SetInterval	core/thread/child_supervision.cpp	/^void SupervisionListener::SetInterval(uint16_t aInterval)$/;"	f	class:ot::SupervisionListener	typeref:typename:void
SetIntervalMax	core/common/trickle_timer.cpp	/^void TrickleTimer::SetIntervalMax(uint32_t aIntervalMax)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
SetIntervalMin	core/common/trickle_timer.cpp	/^void TrickleTimer::SetIntervalMin(uint32_t aIntervalMin)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
SetIp4Cidr	core/net/nat64_translator.cpp	/^Error Translator::SetIp4Cidr(const Ip4::Cidr &aCidr)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
SetIsARetransmission	core/mac/mac_frame.hpp	/^    void SetIsARetransmission(bool aIsARetx) { mInfo.mTxInfo.mIsARetx = aIsARetx; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetIsActive	core/net/mdns.cpp	/^void Core::CacheEntry::SetIsActive(bool aIsActive)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
SetIsHeaderUpdated	core/mac/mac_frame.hpp	/^    void SetIsHeaderUpdated(bool aIsHeaderUpdated) { mInfo.mTxInfo.mIsHeaderUpdated = aIsHeaderU/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetIsHostInterface	core/net/socket.hpp	/^    void SetIsHostInterface(bool aIsHost) { mIsHostInterface = aIsHost; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetIsSecurityProcessed	core/mac/mac_frame.hpp	/^    void SetIsSecurityProcessed(bool aIsSecurityProcessed)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetJamState	core/utils/jam_detector.cpp	/^void JamDetector::SetJamState(bool aNewState)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
SetJitter	core/thread/announce_sender.hpp	/^    void SetJitter(uint16_t aJitter) { mJitter = aJitter; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SetJitter	core/thread/mle_router.hpp	/^        void    SetJitter(uint8_t aJitter) { mJitter = aJitter; }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:void
SetJoiner	core/meshcop/meshcop_tlvs.hpp	/^    void SetJoiner(bool aJoiner)$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:void
SetJoinerAdvertisement	core/thread/discover_scanner.cpp	/^Error DiscoverScanner::SetJoinerAdvertisement(uint32_t aOui, const uint8_t *aAdvData, uint8_t aA/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:Error
SetJoinerUdpPort	core/meshcop/joiner_router.cpp	/^void JoinerRouter::SetJoinerUdpPort(uint16_t aJoinerUdpPort)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
SetJoinerUdpPort	core/meshcop/meshcop.hpp	/^    void SetJoinerUdpPort(uint16_t aJoinerUdpPort)$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:void
SetJoiningPermitted	core/mac/mac_frame.hpp	/^    void SetJoiningPermitted(void)$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
SetKeepAliveInterval	core/net/dns_dso.hpp	/^        void     SetKeepAliveInterval(uint32_t aInterval) { mKeepAliveInterval = BigEndian::Host/;"	f	class:ot::Dns::Dso::KeepAliveTlv	typeref:typename:void
SetKek	core/thread/key_manager.cpp	/^void KeyManager::SetKek(const Kek &aKek)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetKek	core/thread/key_manager.hpp	/^    void SetKek(const uint8_t *aKekBytes) { SetKek(*reinterpret_cast<const Kek *>(aKekBytes)); }$/;"	f	class:ot::KeyManager	typeref:typename:void
SetKey	core/crypto/aes_ccm.cpp	/^void AesCcm::SetKey(const Mac::KeyMaterial &aMacKey)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
SetKey	core/crypto/aes_ccm.cpp	/^void AesCcm::SetKey(const uint8_t *aKey, uint16_t aKeyLength)$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
SetKey	core/crypto/aes_ccm.hpp	/^    void SetKey(const Key &aKey) { mEcb.SetKey(aKey); }$/;"	f	class:ot::Crypto::AesCcm	typeref:typename:void
SetKey	core/crypto/aes_ecb.cpp	/^void AesEcb::SetKey(const Key &aKey) { SuccessOrAssert(otPlatCryptoAesSetKey(&mContext, &aKey));/;"	f	class:ot::Crypto::AesEcb	typeref:typename:void
SetKey	core/mac/mac_types.hpp	/^    void SetKey(const Key &aKey) { mKeyMaterial.mKey = aKey; }$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
SetKey	core/net/dns_types.hpp	/^    void SetKey(const Crypto::Ecdsa::P256::PublicKey &aKey) { mKey = aKey; }$/;"	f	class:ot::Dns::Ecdsa256KeyRecord	typeref:typename:void
SetKey	core/utils/flash.hpp	/^        void     SetKey(uint16_t aKey) { mKey = aKey; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetKeyId	core/mac/mac_frame.cpp	/^void Frame::SetKeyId(uint8_t aKeyId)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetKeyId	core/thread/mle.hpp	/^        void     SetKeyId(uint32_t aKeySequence)$/;"	f	class:ot::Mle::Mle::SecurityHeader	typeref:typename:void
SetKeyLease	core/net/srp_server.hpp	/^        void  SetKeyLease(uint32_t aKeyLease) { mKeyLease = aKeyLease; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
SetKeyLeaseInterval	core/net/dns_types.hpp	/^    void SetKeyLeaseInterval(uint32_t aKeyLeaseInterval)$/;"	f	class:ot::Dns::LeaseOption	typeref:typename:void
SetKeyLeaseInterval	core/net/srp_client.hpp	/^    void SetKeyLeaseInterval(uint32_t aInterval)$/;"	f	class:ot::Srp::Client	typeref:typename:void
SetKeyRef	core/crypto/ecdsa.hpp	/^        void SetKeyRef(otCryptoKeyRef aKeyRef) { mKeyRef = aKeyRef; }$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:void
SetKeyRef	core/mac/mac_types.hpp	/^    void SetKeyRef(KeyRef aKeyRef) { mKeyMaterial.mKeyRef = aKeyRef; }$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:void
SetKeySequence	core/common/settings.hpp	/^        void SetKeySequence(uint32_t aKeySequence) { mKeySequence = LittleEndian::HostSwap32(aKe/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetKeySequence	core/thread/neighbor.hpp	/^    void SetKeySequence(uint32_t aKeySequence) { mKeySequence = aKeySequence; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetKeySource	core/mac/mac_frame.cpp	/^void Frame::SetKeySource(const uint8_t *aKeySource)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetKeySwitchGuardTime	core/thread/key_manager.hpp	/^    void SetKeySwitchGuardTime(uint16_t aGuardTime) { mKeySwitchGuardTime = aGuardTime; }$/;"	f	class:ot::KeyManager	typeref:typename:void
SetKeyTag	core/net/dns_types.hpp	/^    void SetKeyTag(uint16_t aKeyTag) { mKeyTag = BigEndian::HostSwap16(aKeyTag); }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetLabels	core/net/dns_types.hpp	/^    void SetLabels(uint8_t aLabels) { mLabels = aLabels; }$/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetLastHeard	core/thread/neighbor.hpp	/^    void SetLastHeard(TimeMilli aLastHeard) { mLastHeard = aLastHeard; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetLastPollRadioType	core/mac/data_poll_handler.hpp	/^        void           SetLastPollRadioType(Mac::RadioType aRadioType) { mLastPollRadioType = aR/;"	f	class:ot::DataPollHandler::ChildInfo	typeref:typename:void
SetLastRxFragmentTag	core/thread/neighbor.cpp	/^void Neighbor::SetLastRxFragmentTag(uint16_t aTag)$/;"	f	class:ot::Neighbor	typeref:typename:void
SetLastRxTimestamp	core/thread/csl_tx_scheduler.hpp	/^        void     SetLastRxTimestamp(uint64_t aLastRxTimestamp) { mLastRxTimestamp = aLastRxTimes/;"	f	class:ot::CslTxScheduler::ChildInfo	typeref:typename:void
SetLastTransactionTime	core/thread/address_resolver.hpp	/^        void     SetLastTransactionTime(uint32_t aTime) { mInfo.mCached.mLastTransactionTime = a/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetLeaderCost	core/thread/mle_tlvs.hpp	/^    void SetLeaderCost(uint8_t aCost) { mLeaderCost = aCost; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetLeaderCost	core/thread/router.hpp	/^    void SetLeaderCost(uint8_t aLeaderCost) { mLeaderCost = aLeaderCost; }$/;"	f	class:ot::Parent	typeref:typename:void
SetLeaderData	core/thread/mle.cpp	/^void Mle::SetLeaderData(const LeaderData &aLeaderData)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetLeaderData	core/thread/mle.cpp	/^void Mle::SetLeaderData(uint32_t aPartitionId, uint8_t aWeighting, uint8_t aLeaderRouterId)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetLeaderRouterId	core/thread/mle_types.hpp	/^    void SetLeaderRouterId(uint8_t aRouterId) { mLeaderRouterId = aRouterId; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:void
SetLeaderWeight	core/thread/mle_router.hpp	/^    void SetLeaderWeight(uint8_t aWeight) { mLeaderWeight = aWeight; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetLease	core/net/srp_server.hpp	/^        void  SetLease(uint32_t aLease) { mLease = aLease; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
SetLeaseConfig	core/net/srp_server.cpp	/^Error Server::SetLeaseConfig(const LeaseConfig &aLeaseConfig)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
SetLeaseInterval	core/net/dns_types.hpp	/^    void SetLeaseInterval(uint32_t aLeaseInterval) { mLeaseInterval = BigEndian::HostSwap32(aLea/;"	f	class:ot::Dns::LeaseOption	typeref:typename:void
SetLeaseInterval	core/net/srp_client.hpp	/^    void SetLeaseInterval(uint32_t aInterval) { mDefaultLease = DetermineLeaseInterval(aInterval/;"	f	class:ot::Srp::Client	typeref:typename:void
SetLeaseRenewTime	core/net/srp_client.hpp	/^        void      SetLeaseRenewTime(TimeMilli aTime) { mData = aTime.GetValue(); }$/;"	f	class:ot::Srp::Client::Service	typeref:typename:void
SetLength	core/common/array.hpp	/^    void SetLength(IndexType aLength) { mLength = aLength; }$/;"	f	class:ot::Array	typeref:typename:void
SetLength	core/common/data.hpp	/^    void SetLength(LengthType aLength) { mLength = aLength; }$/;"	f	class:ot::Data	typeref:typename:void
SetLength	core/common/message.cpp	/^Error Message::SetLength(uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:Error
SetLength	core/common/tlvs.hpp	/^    void SetLength(uint16_t aLength)$/;"	f	class:ot::ExtendedTlv	typeref:typename:void
SetLength	core/common/tlvs.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::Tlv	typeref:typename:void
SetLength	core/mac/mac_frame.hpp	/^    void SetLength(uint16_t aLength) { mLength = aLength; }$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetLength	core/mac/mac_frame.hpp	/^    void SetLength(uint8_t aLength) { mFields.m8[0] = (mFields.m8[0] & ~kLengthMask) | (aLength /;"	f	class:ot::Mac::HeaderIe	typeref:typename:void
SetLength	core/meshcop/dataset.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:void
SetLength	core/net/dhcp6.hpp	/^    void SetLength(uint16_t aLength) { mLength = BigEndian::HostSwap16(aLength); }$/;"	f	class:ot::Dhcp6::Option	typeref:typename:void
SetLength	core/net/dns_types.hpp	/^    void SetLength(uint16_t aLength) { mLength = BigEndian::HostSwap16(aLength); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:void
SetLength	core/net/ip6_address.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
SetLength	core/net/ip6_headers.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::Ip6::ExtensionHeader	typeref:typename:void
SetLength	core/net/ip6_headers.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::Ip6::Option	typeref:typename:void
SetLength	core/net/nd6.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:void
SetLength	core/net/udp6.hpp	/^        void SetLength(uint16_t aLength) { mLength = BigEndian::HostSwap16(aLength); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:void
SetLength	core/thread/network_data.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::NetworkData::MutableNetworkData	typeref:typename:void
SetLength	core/thread/network_data_tlvs.hpp	/^    void SetLength(uint8_t aLength) { mLength = aLength; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
SetLength	core/utils/flash.hpp	/^        void     SetLength(uint16_t aLength) { mLength = aLength; }$/;"	f	class:ot::Flash::RecordHeader	typeref:typename:void
SetLength	lib/spinel/multi_frame_buffer.hpp	/^    otError SetLength(uint16_t aLength)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:otError
SetLifetime	core/common/settings.hpp	/^        void SetLifetime(uint32_t aLifetime) { mLifetime = aLifetime; }$/;"	f	class:ot::SettingsBase::BrOnLinkPrefix	typeref:typename:void
SetLinkAckFrameCounter	core/thread/neighbor.hpp	/^    void SetLinkAckFrameCounter(uint32_t aAckFrameCounter)$/;"	f	class:ot::Neighbor	typeref:typename:void
SetLinkQuality	core/thread/link_quality.hpp	/^    void SetLinkQuality(LinkQuality aLinkQuality) { mLinkQuality = aLinkQuality; }$/;"	f	class:ot::LinkQualityInfo	typeref:typename:void
SetLinkQuality	core/thread/network_diagnostic_tlvs.hpp	/^    void SetLinkQuality(LinkQuality aLinkQuality)$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:void
SetLinkQuality1	core/thread/mle_tlvs.hpp	/^    void SetLinkQuality1(uint8_t aLinkQuality) { mLinkQuality1 = aLinkQuality; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetLinkQuality2	core/thread/mle_tlvs.hpp	/^    void SetLinkQuality2(uint8_t aLinkQuality) { mLinkQuality2 = aLinkQuality; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetLinkQuality3	core/thread/mle_tlvs.hpp	/^    void SetLinkQuality3(uint8_t aLinkQuality) { mLinkQuality3 = aLinkQuality; }$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetLinkQualityIn	core/thread/mle_tlvs.hpp	/^    void SetLinkQualityIn(uint8_t aRouterIndex, uint8_t aLinkQuality)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetLinkQualityOut	core/thread/mle_tlvs.hpp	/^    void SetLinkQualityOut(uint8_t aRouterIndex, LinkQuality aLinkQuality)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetLinkQualityOut	core/thread/router.hpp	/^    void SetLinkQualityOut(LinkQuality aLinkQuality) { mLinkQualityOut = aLinkQuality; }$/;"	f	class:ot::Router	typeref:typename:void
SetLinkSecurityEnabled	core/common/message.hpp	/^    void SetLinkSecurityEnabled(bool aEnabled) { GetMetadata().mLinkSecurity = aEnabled; }$/;"	f	class:ot::Message	typeref:typename:void
SetLinkState	posix/platform/netif.cpp	/^static void SetLinkState(otInstance *aInstance, bool aState)$/;"	f	typeref:typename:void	file:
SetList	core/thread/address_resolver.hpp	/^        void                  SetList(const CacheEntryList *aList) { mData[kListIndex] = aList; /;"	f	class:ot::AddressResolver::Iterator	typeref:typename:void
SetListeningEnabled	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::SetListeningEnabled(otInstance *aInstance, bool aEnable, uint32_t aInfraIfIn/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
SetLocal	core/mac/mac_types.hpp	/^    void SetLocal(bool aLocal)$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
SetLocator	core/meshcop/meshcop.hpp	/^    void SetLocator(uint16_t aLocator)$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:void
SetLocator	core/net/ip6_address.hpp	/^    void SetLocator(uint16_t aLocator) { mFields.m16[3] = BigEndian::HostSwap16(aLocator); }$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
SetLogLevel	core/instance/instance.cpp	/^void Instance::SetLogLevel(LogLevel aLogLevel)$/;"	f	class:ot::Instance	typeref:typename:void
SetLongLivedOperation	core/net/dns_dso.cpp	/^void Dso::Connection::SetLongLivedOperation(bool aLongLivedOperation)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
SetLoopbackToHostAllowed	core/common/message.hpp	/^    void SetLoopbackToHostAllowed(bool aAllowLoopbackToHost)$/;"	f	class:ot::Message	typeref:typename:void
SetLqi	core/mac/mac_frame.hpp	/^    void SetLqi(uint8_t aLqi) { mInfo.mRxInfo.mLqi = aLqi; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:void
SetLqiAverager	core/common/message.hpp	/^    void SetLqiAverager(const LqiAverager &aLqiAverager) { GetMetadata().mLqiAverager = aLqiAver/;"	f	class:ot::Message	typeref:typename:void
SetMacFrameCounter	core/common/settings.hpp	/^        void SetMacFrameCounter(uint32_t aMacFrameCounter)$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetMacFrameCounter	core/mac/link_raw.cpp	/^Error LinkRaw::SetMacFrameCounter(uint32_t aFrameCounter, bool aSetIfLarger)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetMacFrameCounter	core/mac/mac_links.cpp	/^void Links::SetMacFrameCounter(TxFrame &aFrame)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetMacFrameCounter	core/radio/radio.hpp	/^    void SetMacFrameCounter(uint32_t aMacFrameCounter)$/;"	f	class:ot::Radio	typeref:typename:void
SetMacFrameCounter	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetMacFrameCounter(uint32_t aMacFrameCounter, bool aSetIfLarger)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetMacFrameCounterIfLarger	core/radio/radio.hpp	/^    void SetMacFrameCounterIfLarger(uint32_t aMacFrameCounter)$/;"	f	class:ot::Radio	typeref:typename:void
SetMacKey	core/mac/link_raw.cpp	/^Error LinkRaw::SetMacKey(uint8_t    aKeyIdMode,$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetMacKey	core/mac/sub_mac.cpp	/^void SubMac::SetMacKey(uint8_t            aKeyIdMode,$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetMacKey	core/radio/radio.hpp	/^inline void Radio::SetMacKey(uint8_t                 aKeyIdMode,$/;"	f	class:ot::Radio	typeref:typename:void
SetMacKey	core/radio/radio.hpp	/^inline void Radio::SetMacKey(uint8_t,$/;"	f	class:ot::Radio	typeref:typename:void
SetMacKey	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetMacKey(uint8_t                 aKeyIdMode,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetMacKey	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetMacKey(uint8_t         aKeyIdMode,$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetMajor	core/meshcop/meshcop_tlvs.hpp	/^    void SetMajor(uint8_t aMajor)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
SetManagedAddressConfigFlag	core/net/nd6.hpp	/^        void SetManagedAddressConfigFlag(void) { mFlags |= kManagedAddressConfigFlag; }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetMask	core/mac/channel_mask.hpp	/^    void SetMask(uint32_t aMask) { mMask = aMask; }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:void
SetMask	core/meshcop/meshcop_tlvs.hpp	/^        void     SetMask(uint32_t aMask) { mMask = BigEndian::HostSwap32(Reverse32(aMask)); }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:void
SetMaskLength	core/meshcop/meshcop_tlvs.hpp	/^        void     SetMaskLength(uint8_t aMaskLength) { mMaskLength = aMaskLength; }$/;"	f	class:ot::MeshCoP::ChannelMaskTlv::Entry	typeref:typename:void
SetMaxChildIpAddresses	core/thread/mle_router.cpp	/^Error MleRouter::SetMaxChildIpAddresses(uint8_t aMaxIpAddresses)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SetMaxChildrenAllowed	core/thread/child_table.cpp	/^Error ChildTable::SetMaxChildrenAllowed(uint16_t aMaxChildren)$/;"	f	class:ot::ChildTable	typeref:typename:Error
SetMaxConnectionAttempts	core/meshcop/secure_transport.cpp	/^Error SecureTransport::SetMaxConnectionAttempts(uint16_t aMaxAttempts, AutoCloseCallback aCallba/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
SetMaxCsmaBackoffs	core/mac/mac_frame.hpp	/^    void SetMaxCsmaBackoffs(uint8_t aMaxCsmaBackoffs) { mInfo.mTxInfo.mMaxCsmaBackoffs = aMaxCsm/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetMaxCsmaBackoffs	core/mac/mac_links.hpp	/^    void SetMaxCsmaBackoffs(uint8_t aMaxCsmaBackoffs)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
SetMaxFlag	core/net/ip6_mpl.hpp	/^    void SetMaxFlag(void) { mControl |= kMaxFlag; }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:void
SetMaxFrameRetries	core/mac/mac_frame.hpp	/^    void SetMaxFrameRetries(uint8_t aMaxFrameRetries) { mInfo.mTxInfo.mMaxFrameRetries = aMaxFra/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetMaxFrameRetries	core/mac/mac_links.hpp	/^    void SetMaxFrameRetries(uint8_t aMaxFrameRetries)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
SetMaxFrameRetriesDirect	core/mac/mac.hpp	/^    void SetMaxFrameRetriesDirect(uint8_t aMaxFrameRetriesDirect) { mMaxFrameRetriesDirect = aMa/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetMaxFrameRetriesIndirect	core/mac/mac.hpp	/^    void SetMaxFrameRetriesIndirect(uint8_t aMaxFrameRetriesIndirect)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetMaxLength	core/common/frame_builder.hpp	/^    void SetMaxLength(uint16_t aLength) { mMaxLength = aLength; }$/;"	f	class:ot::FrameBuilder	typeref:typename:void
SetMaxMessageSize	core/net/mdns.hpp	/^    void SetMaxMessageSize(uint16_t aMaxSize) { mMaxMessageSize = aMaxSize; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
SetMaxTxAttempts	core/net/dns_client.hpp	/^        void SetMaxTxAttempts(uint8_t aMaxTxAttempts) { mMaxTxAttempts = aMaxTxAttempts; }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetMeshDest	core/common/message.hpp	/^    void SetMeshDest(uint16_t aMeshDest) { GetMetadata().mMeshDest = aMeshDest; }$/;"	f	class:ot::Message	typeref:typename:void
SetMeshLocalIid	core/common/settings.hpp	/^        void SetMeshLocalIid(const Ip6::InterfaceIdentifier &aMeshLocalIid) { mMlIid = aMeshLoca/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetMeshLocalIid	core/thread/address_resolver.hpp	/^        void SetMeshLocalIid(const Ip6::InterfaceIdentifier &aIid) { mInfo.mCached.mMeshLocalIid/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetMeshLocalIid	core/thread/mle.cpp	/^Error Mle::SetMeshLocalIid(const Ip6::InterfaceIdentifier &aMlIid)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
SetMeshLocalPrefix	core/thread/mle.cpp	/^void Mle::SetMeshLocalPrefix(const Ip6::NetworkPrefix &aMeshLocalPrefix)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetMessageId	core/coap/coap_message.hpp	/^    void SetMessageId(uint16_t aMessageId) { GetHelpData().mHeader.mMessageId = BigEndian::HostS/;"	f	class:ot::Coap::Message	typeref:typename:void
SetMessageId	core/net/dns_types.hpp	/^    void SetMessageId(uint16_t aMessageId) { mMessageId = BigEndian::HostSwap16(aMessageId); }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetMessagePool	core/common/message.hpp	/^    void         SetMessagePool(MessagePool *aMessagePool) { GetMetadata().mMessagePool = aMessa/;"	f	class:ot::Message	typeref:typename:void
SetMessageQueue	core/common/message.cpp	/^void Message::SetMessageQueue(MessageQueue *aMessageQueue)$/;"	f	class:ot::Message	typeref:typename:void
SetMetrics	core/thread/link_metrics_types.hpp	/^    void SetMetrics(const Metrics &aMetrics) { mMetrics = aMetrics; }$/;"	f	class:ot::LinkMetrics::MetricsValues	typeref:typename:void
SetMetricsTypeId	core/thread/link_metrics_tlvs.hpp	/^    void SetMetricsTypeId(uint8_t aMetricsTypeId) { mMetricsTypeId = aMetricsTypeId; }$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:void
SetMetricsValue32	core/thread/link_metrics_tlvs.hpp	/^    void SetMetricsValue32(uint32_t aMetricsValue)$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:void
SetMetricsValue8	core/thread/link_metrics_tlvs.hpp	/^    void SetMetricsValue8(uint8_t aMetricsValue)$/;"	f	class:ot::LinkMetrics::ReportSubTlv	typeref:typename:void
SetMgmtResponseCallback	core/thread/link_metrics.hpp	/^    void SetMgmtResponseCallback(MgmtResponseCallback aCallback, void *aContext)$/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:void
SetMinor	core/meshcop/meshcop_tlvs.hpp	/^    void SetMinor(uint8_t aMinor)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
SetMleFrameCounter	core/common/settings.hpp	/^        void SetMleFrameCounter(uint32_t aMleFrameCounter)$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetMleFrameCounter	core/thread/key_manager.hpp	/^    void SetMleFrameCounter(uint32_t aMleFrameCounter) { mMleFrameCounter = aMleFrameCounter; }$/;"	f	class:ot::KeyManager	typeref:typename:void
SetMleFrameCounter	core/thread/neighbor.hpp	/^    void SetMleFrameCounter(uint32_t aFrameCounter) { mValidPending.mValid.mMleFrameCounter = aF/;"	f	class:ot::Neighbor	typeref:typename:void
SetMlrState	core/net/netif.hpp	/^        void SetMlrState(MlrState aState) { mMlrState = aState; }$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress	typeref:typename:void
SetMlrTimeout	core/thread/network_data_service.hpp	/^        void SetMlrTimeout(uint32_t aMlrTimeout) { mMlrTimeout = BigEndian::HostSwap32(aMlrTimeo/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:void
SetMode	core/common/settings.hpp	/^        void SetMode(uint8_t aMode) { mMode = aMode; }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
SetMode	core/mac/mac_filter.hpp	/^    void SetMode(Mode aMode) { mMode = aMode; }$/;"	f	class:ot::Mac::Filter	typeref:typename:void
SetMode	core/thread/network_diagnostic_tlvs.hpp	/^    void SetMode(Mle::DeviceMode aMode) { mMode = aMode.Get(); }$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:void
SetMoreBlocksFlag	core/coap/coap_message.hpp	/^    void SetMoreBlocksFlag(bool aMoreBlocks) { GetHelpData().mBlockWiseData.mMoreBlocks = aMoreB/;"	f	class:ot::Coap::Message	typeref:typename:void
SetMoreFlag	core/net/ip6_headers.hpp	/^    void SetMoreFlag(void) { mOffsetMore = BigEndian::HostSwap16(BigEndian::HostSwap16(mOffsetMo/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
SetMulticastAddressMlrState	core/thread/mlr_manager.cpp	/^void MlrManager::SetMulticastAddressMlrState(MlrState aFromState, MlrState aToState)$/;"	f	class:ot::MlrManager	typeref:typename:void
SetMulticastLoop	core/common/message.hpp	/^    void SetMulticastLoop(bool aMulticastLoop) { GetMetadata().mMulticastLoop = aMulticastLoop; /;"	f	class:ot::Message	typeref:typename:void
SetMulticastLoop	core/net/socket.hpp	/^    void SetMulticastLoop(bool aMulticastLoop) { mMulticastLoop = aMulticastLoop; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetMulticastNetworkPrefix	core/net/ip6_address.cpp	/^void Address::SetMulticastNetworkPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetMulticastNetworkPrefix	core/net/ip6_address.hpp	/^    void SetMulticastNetworkPrefix(const NetworkPrefix &aNetworkPrefix)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetMulticastNetworkPrefix	core/net/ip6_address.hpp	/^    void SetMulticastNetworkPrefix(const Prefix &aPrefix)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetMulticastPromiscuous	core/net/netif.hpp	/^    void SetMulticastPromiscuous(bool aEnabled) { mMulticastPromiscuous = aEnabled; }$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SetMultipanActiveInterface	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetMultipanActiveInterface(spinel_iid_t aIid, bool aCompletePending)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetName	core/net/srp_client.hpp	/^        void SetName(const char *aName) { mName = aName; }$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
SetNat64Mode	core/net/dns_client.hpp	/^        void SetNat64Mode(Nat64Mode aMode) { mNat64Mode = static_cast<otDnsNat64Mode>(aMode); }$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetNat64Prefix	core/net/nat64_translator.cpp	/^void Translator::SetNat64Prefix(const Ip6::Prefix &aNat64Prefix)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
SetNat64PrefixManagerEnabled	core/border_router/routing_manager.cpp	/^void RoutingManager::SetNat64PrefixManagerEnabled(bool aEnabled)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SetNat64ReceiveIp4DatagramCallback	core/net/ip6.hpp	/^    void SetNat64ReceiveIp4DatagramCallback(otNat64ReceiveIp4Callback aCallback, void *aCallback/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
SetNative	core/mac/mac_frame.hpp	/^    void SetNative(void) { mFlags |= kNativeFlag; }$/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
SetNativeCommissioner	core/meshcop/meshcop_tlvs.hpp	/^    void SetNativeCommissioner(bool aNativeCommissioner)$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:void
SetNetDataFullCallback	core/thread/network_data_notifier.cpp	/^void Notifier::SetNetDataFullCallback(NetDataCallback aCallback, void *aContext)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
SetNetworkData	core/thread/network_data_leader.cpp	/^Error Leader::SetNetworkData(uint8_t        aVersion,$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
SetNetworkDataVersion	core/thread/child.hpp	/^    void SetNetworkDataVersion(uint8_t aVersion) { mNetworkDataVersion = aVersion; }$/;"	f	class:ot::Child	typeref:typename:void
SetNetworkIdTimeout	core/thread/mle_router.hpp	/^    void SetNetworkIdTimeout(uint8_t aTimeout) { mNetworkIdTimeout = aTimeout; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetNetworkKey	core/thread/key_manager.cpp	/^void KeyManager::SetNetworkKey(const NetworkKey &aNetworkKey)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetNetworkKeyRef	core/thread/key_manager.cpp	/^void KeyManager::SetNetworkKeyRef(otNetworkKeyRef aKeyRef)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetNetworkName	core/mac/mac_frame.hpp	/^    void SetNetworkName(const MeshCoP::NameData &aNameData) { aNameData.CopyTo(mNetworkName, siz/;"	f	class:ot::Mac::BeaconPayload	typeref:typename:void
SetNetworkName	core/meshcop/meshcop_tlvs.cpp	/^void NetworkNameTlv::SetNetworkName(const NameData &aNameData)$/;"	f	class:ot::MeshCoP::NetworkNameTlv	typeref:typename:void
SetNetworkName	core/meshcop/network_name.cpp	/^Error NetworkNameManager::SetNetworkName(const NameData &aNameData)$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:Error
SetNetworkName	core/meshcop/network_name.cpp	/^Error NetworkNameManager::SetNetworkName(const char *aNameString)$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:Error
SetNetworkTimeOffset	core/common/message.hpp	/^    void SetNetworkTimeOffset(int64_t aNetworkTimeOffset) { GetMetadata().mNetworkTimeOffset = a/;"	f	class:ot::Message	typeref:typename:void
SetNetworkTimeOffset	core/mac/mac_frame.hpp	/^    void SetNetworkTimeOffset(int64_t aNetworkTimeOffset)$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetNext	core/border_router/routing_manager.hpp	/^            void               SetNext(SharedEntry *aNext) { mNext = aNext; }$/;"	f	union:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry	typeref:typename:void
SetNext	core/coap/coap.hpp	/^    void SetNext(ResourceBlockWise *aNext) { static_cast<ResourceBlockWise *>(this)->mNext = aNe/;"	f	class:ot::Coap::ResourceBlockWise	typeref:typename:void
SetNext	core/common/linked_list.hpp	/^    void SetNext(Type *aNext) { static_cast<Type *>(this)->mNext = aNext; }$/;"	f	class:ot::LinkedListEntry	typeref:typename:void
SetNext	core/thread/address_resolver.cpp	/^void AddressResolver::CacheEntry::SetNext(CacheEntry *aEntry)$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetNext	core/utils/heap.hpp	/^    void SetNext(uint16_t aNext)$/;"	f	class:ot::Utils::Block	typeref:typename:void
SetNext	core/utils/srp_client_buffers.hpp	/^        void SetNext(ServiceEntry *aEntry) { mService.mNext = reinterpret_cast<Srp::Client::Serv/;"	f	class:ot::Utils::SrpClientBuffers::ServiceEntry	typeref:typename:void
SetNextBuffer	core/common/message.hpp	/^    void SetNextBuffer(Buffer *aNext) { SetNext(aNext); }$/;"	f	class:ot::Buffer	typeref:typename:void
SetNextHeader	core/net/ip6_headers.hpp	/^    void SetNextHeader(uint8_t aNextHeader) { mNextHeader = aNextHeader; }$/;"	f	class:ot::Ip6::ExtensionHeader	typeref:typename:void
SetNextHeader	core/net/ip6_headers.hpp	/^    void SetNextHeader(uint8_t aNextHeader) { mNextHeader = aNextHeader; }$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
SetNextHeader	core/net/ip6_headers.hpp	/^    void SetNextHeader(uint8_t aNextHeader) { mNextHeader = aNextHeader; }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetNextHopAndCost	core/thread/router.cpp	/^bool Router::SetNextHopAndCost(uint8_t aNextHop, uint8_t aCost)$/;"	f	class:ot::Router	typeref:typename:bool
SetNextHopToInvalid	core/thread/router.cpp	/^bool Router::SetNextHopToInvalid(void) { return SetNextHopAndCost(Mle::kInvalidRouterId, 0); }$/;"	f	class:ot::Router	typeref:typename:bool
SetNone	core/mac/mac_types.hpp	/^    void SetNone(void) { mType = kTypeNone; }$/;"	f	class:ot::Mac::Address	typeref:typename:void
SetOffset	core/common/message.cpp	/^void Message::SetOffset(uint16_t aOffset)$/;"	f	class:ot::Message	typeref:typename:void
SetOffset	core/net/ip6_headers.hpp	/^    void SetOffset(uint16_t aOffset)$/;"	f	class:ot::Ip6::FragmentHeader	typeref:typename:void
SetOnLinkFlag	core/net/nd6.hpp	/^    void SetOnLinkFlag(void) { mFlags |= kOnLinkFlagMask; }$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
SetOptionCode	core/net/dns_types.hpp	/^    void SetOptionCode(uint16_t aOptionCode) { mOptionCode = BigEndian::HostSwap16(aOptionCode);/;"	f	class:ot::Dns::Option	typeref:typename:void
SetOptionLength	core/net/dns_types.hpp	/^    void SetOptionLength(uint16_t aOptionLength) { mOptionLength = BigEndian::HostSwap16(aOption/;"	f	class:ot::Dns::Option	typeref:typename:void
SetOrigin	core/common/message.hpp	/^    void SetOrigin(Origin aOrigin) { GetMetadata().mOrigin = aOrigin; }$/;"	f	class:ot::Message	typeref:typename:void
SetOriginalTtl	core/net/dns_types.hpp	/^    void SetOriginalTtl(uint32_t aOriginalTtl) { mOriginalTtl = BigEndian::HostSwap32(aOriginalT/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetOriginateTimestampFraction	core/net/sntp_client.hpp	/^        void SetOriginateTimestampFraction(uint32_t aFraction)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetOriginateTimestampSeconds	core/net/sntp_client.hpp	/^        void     SetOriginateTimestampSeconds(uint32_t aTimestamp)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetOtherConfigFlag	core/net/nd6.hpp	/^        void SetOtherConfigFlag(void) { mFlags |= kOtherConfigFlag; }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetOui	core/meshcop/meshcop_tlvs.hpp	/^    void SetOui(uint32_t aOui) { BigEndian::WriteUint24(aOui, mOui); }$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
SetOui	core/meshcop/meshcop_tlvs.hpp	/^    void SetOui(uint32_t aOui) { return BigEndian::WriteUint24(aOui, mOui); }$/;"	f	class:ot::MeshCoP::JoinerAdvertisementTlv	typeref:typename:void
SetOverrideFlag	core/net/nd6.hpp	/^    void SetOverrideFlag(void) { mFlags |= kOverrideFlag; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:void
SetPacketNumber	core/radio/trel_packet.hpp	/^    void SetPacketNumber(uint32_t aPacketNumber) { mPacketNumber = BigEndian::HostSwap32(aPacket/;"	f	class:ot::Trel::Header	typeref:typename:void
SetPanChannel	core/mac/mac.cpp	/^Error Mac::SetPanChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
SetPanId	core/common/message.hpp	/^    void SetPanId(uint16_t aPanId) { GetMetadata().mPanId = aPanId; }$/;"	f	class:ot::Message	typeref:typename:void
SetPanId	core/mac/link_raw.cpp	/^Error LinkRaw::SetPanId(uint16_t aPanId)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetPanId	core/mac/mac.cpp	/^void Mac::SetPanId(PanId aPanId)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetPanId	core/mac/mac_links.hpp	/^    void SetPanId(PanId aPanId)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetPanId	core/mac/sub_mac.cpp	/^void SubMac::SetPanId(PanId aPanId)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetPanId	core/radio/radio.hpp	/^inline void Radio::SetPanId(Mac::PanId aPanId) { otPlatRadioSetPanId(GetInstancePtr(), aPanId); /;"	f	class:ot::Radio	typeref:typename:void
SetPanId	core/radio/radio.hpp	/^inline void Radio::SetPanId(Mac::PanId) {}$/;"	f	class:ot::Radio	typeref:typename:void
SetPanId	core/radio/trel_link.hpp	/^    void SetPanId(Mac::PanId aPanId) { mPanId = aPanId; }$/;"	f	class:ot::Trel::Link	typeref:typename:void
SetPanId	core/radio/trel_packet.hpp	/^    void SetPanId(Mac::PanId aPanId) { mPanId = BigEndian::HostSwap16(aPanId); }$/;"	f	class:ot::Trel::Header	typeref:typename:void
SetPanId	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetPanId(uint16_t aPanId)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetParentPriority	core/thread/mle_tlvs.cpp	/^void ConnectivityTlv::SetParentPriority(int8_t aParentPriority)$/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetPartitionId	core/thread/mle_types.hpp	/^    void SetPartitionId(uint32_t aPartitionId) { mPartitionId = aPartitionId; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:void
SetPayloadLength	core/mac/mac_frame.cpp	/^void Frame::SetPayloadLength(uint16_t aLength) { mLength = GetHeaderLength() + GetFooterLength()/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetPayloadLength	core/net/ip6_headers.hpp	/^    void SetPayloadLength(uint16_t aLength) { mPayloadLength = BigEndian::HostSwap16(aLength); }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetPayloadMarker	core/coap/coap_message.cpp	/^Error Message::SetPayloadMarker(void)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
SetPcapCallback	core/mac/mac.hpp	/^    void SetPcapCallback(otLinkPcapCallback aPcapCallback, void *aCallbackContext)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetPcapCallback	core/mac/mac_links.hpp	/^    void SetPcapCallback(otLinkPcapCallback aPcapCallback, void *aCallbackContext)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetPcapCallback	core/mac/sub_mac.hpp	/^    void SetPcapCallback(otLinkPcapCallback aPcapCallback, void *aCallbackContext)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetPeerAddr	core/net/socket.hpp	/^    void SetPeerAddr(const Address &aAddress) { mPeerAddr = aAddress; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetPeerPort	core/net/socket.hpp	/^    void SetPeerPort(uint16_t aPort) { mPeerPort = aPort; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetPending	core/mac/mac.hpp	/^    void     SetPending(Operation aOperation) { mPendingOperations |= (1U << aOperation); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetPeriod	core/mac/mac_frame.hpp	/^    void SetPeriod(uint16_t aPeriod) { mPeriod = LittleEndian::HostSwap16(aPeriod); }$/;"	f	class:ot::Mac::CslIe	typeref:typename:void
SetPeriod	core/thread/announce_sender.hpp	/^    void SetPeriod(uint32_t aPeriod) { mPeriod = aPeriod; }$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SetPhase	core/mac/mac_frame.hpp	/^    void SetPhase(uint16_t aPhase) { mPhase = LittleEndian::HostSwap16(aPhase); }$/;"	f	class:ot::Mac::CslIe	typeref:typename:void
SetPoll	core/net/sntp_client.hpp	/^        void    SetPoll(uint8_t aPoll) { mPoll = aPoll; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetPort	core/common/settings.hpp	/^        void SetPort(uint16_t aPort) { mPort = LittleEndian::HostSwap16(aPort); }$/;"	f	class:ot::SettingsBase::SrpServerInfo	typeref:typename:void
SetPort	core/net/dns_types.hpp	/^    void SetPort(uint16_t aPort) { mPort = BigEndian::HostSwap16(aPort); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:void
SetPort	core/net/socket.hpp	/^    void SetPort(uint16_t aPort) { mPort = aPort; }$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:void
SetPreSharedKey	core/coap/coap_secure.hpp	/^    void SetPreSharedKey(const uint8_t *aPsk, uint16_t aPskLength, const uint8_t *aPskIdentity, /;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetPreSharedKey	core/meshcop/secure_transport.cpp	/^void SecureTransport::SetPreSharedKey(const uint8_t *aPsk,$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetPreSharedKey	core/radio/ble_secure.hpp	/^    void SetPreSharedKey(const uint8_t *aPsk, uint16_t aPskLength, const uint8_t *aPskIdentity, /;"	f	class:ot::Ble::BleSecure	typeref:typename:void
SetPrecision	core/net/sntp_client.hpp	/^        void    SetPrecision(uint8_t aPrecision) { mPrecision = aPrecision; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetPreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::SetPreference(RoutePreference aPreference)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
SetPreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::SetPreference(RoutePreference aPreference)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
SetPreference	core/net/nd6.cpp	/^void RouteInfoOption::SetPreference(RoutePreference aPreference)$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:void
SetPreferenceBasedOnRole	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::SetPreferenceBasedOnRole(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
SetPreferenceBasedOnRole	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::SetPreferenceBasedOnRole(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
SetPreferredLeaderPartitionId	core/thread/mle_router.hpp	/^    void SetPreferredLeaderPartitionId(uint32_t aPartitionId) { mPreferredLeaderPartitionId = aP/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetPreferredLifetime	core/net/dhcp6.hpp	/^    void SetPreferredLifetime(uint32_t aPreferredLifetime)$/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:void
SetPreferredLifetime	core/net/nd6.hpp	/^    void SetPreferredLifetime(uint32_t aPreferredLifetime)$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
SetPreferredRouterId	core/thread/mle_router.cpp	/^Error MleRouter::SetPreferredRouterId(uint8_t aRouterId)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SetPrefix	core/common/settings.hpp	/^        void SetPrefix(const Ip6::Prefix &aPrefix) { mPrefix = aPrefix; }$/;"	f	class:ot::SettingsBase::BrOnLinkPrefix	typeref:typename:void
SetPrefix	core/net/ip6_address.cpp	/^void Address::SetPrefix(const NetworkPrefix &aNetworkPrefix) { mFields.mComponents.mNetworkPrefi/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetPrefix	core/net/ip6_address.cpp	/^void Address::SetPrefix(const Prefix &aPrefix) { CopyBits(mFields.m8, aPrefix.GetBytes(), aPrefi/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetPrefix	core/net/ip6_address.hpp	/^    void SetPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength) { CopyBits(mFields.m8, aPrefix/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetPrefix	core/net/nd6.cpp	/^void PrefixInfoOption::SetPrefix(const Prefix &aPrefix)$/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
SetPrefix	core/net/nd6.cpp	/^void RouteInfoOption::SetPrefix(const Prefix &aPrefix)$/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:void
SetPrefix	core/thread/network_data_types.hpp	/^    void SetPrefix(const Ip6::Prefix &aPrefix) { mPrefix = aPrefix; }$/;"	f	class:ot::NetworkData::ExternalRouteConfig	typeref:typename:void
SetPrefixCallback	core/thread/network_data_publisher.hpp	/^    void SetPrefixCallback(PrefixCallback aCallback, void *aContext) { mPrefixCallback.Set(aCall/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
SetPrerequisiteRecordCount	core/net/dns_types.hpp	/^    void SetPrerequisiteRecordCount(uint16_t aCount) { SetAnswerCount(aCount); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:void
SetPreviousPartitionId	core/common/settings.hpp	/^        void SetPreviousPartitionId(uint32_t aPreviousPartitionId)$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetPreviousPartitionId	core/thread/mle_router.hpp	/^    void SetPreviousPartitionId(uint32_t aPartitionId) { mPreviousPartitionId = aPartitionId; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetPriority	core/common/message.cpp	/^Error Message::SetPriority(Priority aPriority)$/;"	f	class:ot::Message	typeref:typename:Error
SetPriority	core/net/dns_types.hpp	/^    void SetPriority(uint16_t aPriority) { mPriority = BigEndian::HostSwap16(aPriority); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:void
SetPriorityQueue	core/common/message.cpp	/^void Message::SetPriorityQueue(PriorityQueue *aPriorityQueue)$/;"	f	class:ot::Message	typeref:typename:void
SetPromiscuous	core/mac/mac.cpp	/^void Mac::SetPromiscuous(bool aPromiscuous)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetPromiscuous	core/radio/radio.hpp	/^inline void Radio::SetPromiscuous(bool aEnable) { otPlatRadioSetPromiscuous(GetInstancePtr(), aE/;"	f	class:ot::Radio	typeref:typename:void
SetPromiscuous	core/radio/radio.hpp	/^inline void Radio::SetPromiscuous(bool) {}$/;"	f	class:ot::Radio	typeref:typename:void
SetPromiscuous	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetPromiscuous(bool aEnable)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetProtocol	core/net/dns_types.hpp	/^    void SetProtocol(uint8_t aProtocol) { mProtocol = aProtocol; }$/;"	f	class:ot::Dns::KeyRecord	typeref:typename:void
SetProtocol	core/net/ip4_types.hpp	/^    void SetProtocol(uint8_t aProtocol) { mProtocol = aProtocol; }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetProvisioningUrl	core/meshcop/commissioner.cpp	/^Error Commissioner::SetProvisioningUrl(const char *aProvisioningUrl)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
SetPsk	core/coap/coap_secure.cpp	/^void CoapSecure::SetPsk(const MeshCoP::JoinerPskd &aPskd)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetPsk	core/coap/coap_secure.hpp	/^    Error SetPsk(const uint8_t *aPsk, uint8_t aPskLength) { return mDtls.SetPsk(aPsk, aPskLength/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
SetPsk	core/meshcop/secure_transport.cpp	/^Error SecureTransport::SetPsk(const uint8_t *aPsk, uint8_t aPskLength)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
SetPsk	core/radio/ble_secure.cpp	/^void BleSecure::SetPsk(const MeshCoP::JoinerPskd &aPskd)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
SetPsk	core/radio/ble_secure.hpp	/^    Error SetPsk(const uint8_t *aPsk, uint8_t aPskLength) { return mTls.SetPsk(aPsk, aPskLength)/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
SetPskc	core/thread/key_manager.cpp	/^void KeyManager::SetPskc(const Pskc &aPskc)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetPskcRef	core/thread/key_manager.cpp	/^void KeyManager::SetPskcRef(PskcRef aKeyRef)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetQueryCallbacks	core/net/dnssd_server.cpp	/^void Server::SetQueryCallbacks(SubscribeCallback aSubscribe, UnsubscribeCallback aUnsubscribe, v/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
SetQueryType	core/net/dns_types.hpp	/^    void SetQueryType(QueryType aType)$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetQuestionCount	core/net/dns_types.hpp	/^    void SetQuestionCount(uint16_t aCount) { mQdCount = BigEndian::HostSwap16(aCount); }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetQuestionUnicastAllowed	core/net/mdns.hpp	/^    void SetQuestionUnicastAllowed(bool aAllow) { mIsQuestionUnicastAllowed = aAllow; }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
SetRadioFilterEnabled	core/mac/mac.cpp	/^void Mac::SetRadioFilterEnabled(bool aFilterEnabled)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetRadioFilterEnabled	core/mac/sub_mac.hpp	/^    void SetRadioFilterEnabled(bool aFilterEnabled) { mRadioFilterEnabled = aFilterEnabled; }$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetRadioPreference	core/thread/radio_selector.hpp	/^        void    SetRadioPreference(Mac::RadioType aType, uint8_t aValue) { mRadioPreference[aTyp/;"	f	class:ot::RadioSelector::NeighborInfo	typeref:typename:void
SetRadioRegion	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetRadioRegion(uint16_t aRegionCode)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetRadioType	core/common/message.hpp	/^    void SetRadioType(Mac::RadioType aRadioType)$/;"	f	class:ot::Message	typeref:typename:void
SetRadioType	core/mac/mac_frame.hpp	/^    void SetRadioType(RadioType aRadioType) { mRadioType = static_cast<uint8_t>(aRadioType); }$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetRampDown	core/thread/address_resolver.hpp	/^        void SetRampDown(bool aRampDown) { mInfo.mOther.mRampDown = aRampDown; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetRandomMessageId	core/net/dns_types.cpp	/^Error Header::SetRandomMessageId(void)$/;"	f	class:ot::Dns::Header	typeref:typename:Error
SetRawPowerSetting	posix/platform/power.hpp	/^    void SetRawPowerSetting(const RawPowerSetting &aRawPowerSetting) { mRawPowerSetting = aRawPo/;"	f	class:ot::Power::CalibratedPower	typeref:typename:void
SetReceiveDatagramCallback	core/net/ip6.hpp	/^    void SetReceiveDatagramCallback(otIp6ReceiveCallback aCallback, void *aCallbackContext)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
SetReceiveDone	core/mac/link_raw.cpp	/^Error LinkRaw::SetReceiveDone(otLinkRawReceiveDone aCallback)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetReceiveIp6FilterEnabled	core/net/ip6.hpp	/^    void SetReceiveIp6FilterEnabled(bool aEnabled) { mIsReceiveIp6FilterEnabled = aEnabled; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
SetReceiveTimestampFraction	core/net/sntp_client.hpp	/^        void     SetReceiveTimestampFraction(uint32_t aFraction)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetReceiveTimestampSeconds	core/net/sntp_client.hpp	/^        void     SetReceiveTimestampSeconds(uint32_t aTimestamp)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetRecentlyDetached	core/thread/mle.hpp	/^        void SetRecentlyDetached(void) { mRecentlyDetached = true; }$/;"	f	class:ot::Mle::Mle::ParentSearch	typeref:typename:void
SetRecursionAvailableFlag	core/net/dns_types.hpp	/^    void SetRecursionAvailableFlag(void) { mFlags[1] |= kRaFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetRecursionDesiredFlag	core/net/dns_types.hpp	/^    void SetRecursionDesiredFlag(void) { mFlags[0] |= kRdFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetRecursionFlag	core/net/dns_client.hpp	/^        void SetRecursionFlag(RecursionFlag aFlag) { mRecursionFlag = static_cast<otDnsRecursion/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetReferenceId	core/net/sntp_client.hpp	/^        void     SetReferenceId(uint32_t aReferenceId) { mReferenceId = BigEndian::HostSwap32(aR/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetReferenceTimestampFraction	core/net/sntp_client.hpp	/^        void SetReferenceTimestampFraction(uint32_t aFraction)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetReferenceTimestampSeconds	core/net/sntp_client.hpp	/^        void     SetReferenceTimestampSeconds(uint32_t aTimestamp)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetRegion	core/mac/mac.cpp	/^Error Mac::SetRegion(uint16_t aRegionCode)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
SetRegion	core/radio/radio.hpp	/^    Error SetRegion(uint16_t aRegionCode) { return otPlatRadioSetRegion(GetInstancePtr(), aRegio/;"	f	class:ot::Radio	typeref:typename:Error
SetRegion	posix/platform/configuration.cpp	/^otError Configuration::SetRegion(uint16_t aRegionCode)$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
SetRegistrationJitter	core/backbone_router/bbr_local.hpp	/^    void SetRegistrationJitter(uint8_t aRegistrationJitter) { mRegistrationJitter = aRegistratio/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
SetRemoveTime	core/thread/network_data_leader_ftd.cpp	/^void Leader::ContextIds::SetRemoveTime(uint8_t aId, TimeMilli aTime)$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
SetReportCallback	core/thread/link_metrics.hpp	/^    void SetReportCallback(ReportCallback aCallback, void *aContext) { mReportCallback.Set(aCall/;"	f	class:ot::LinkMetrics::Initiator	typeref:typename:void
SetRequestDhcp6PdCallback	core/border_router/routing_manager.hpp	/^    void SetRequestDhcp6PdCallback(PdCallback aCallback, void *aContext)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SetRequestInterval	core/net/dns_dso.hpp	/^            void     SetRequestInterval(uint32_t aInterval) { mRequest = LimitInterval(aInterval/;"	f	class:ot::Dns::Dso::Connection::Timeout	typeref:typename:void
SetRequestTlv	core/thread/child.hpp	/^    void SetRequestTlv(uint8_t aIndex, uint8_t aType) { mRequestTlvs[aIndex] = aType; }$/;"	f	class:ot::Child	typeref:typename:void
SetRequiredRadioTypes	core/mac/mac_links.hpp	/^    void SetRequiredRadioTypes(RadioTypes aRadioTypes) { mRequiredRadioTypes = aRadioTypes; }$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
SetReregistrationDelay	core/thread/network_data_service.hpp	/^        void SetReregistrationDelay(uint16_t aReregistrationDelay)$/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:void
SetReserved	core/common/message.hpp	/^    void     SetReserved(uint16_t aReservedHeader) { GetMetadata().mReserved = aReservedHeader; /;"	f	class:ot::Message	typeref:typename:void
SetResolvingAddress	core/common/message.hpp	/^    void SetResolvingAddress(bool aResolvingAddress) { GetMetadata().mResolvingAddress = aResolv/;"	f	class:ot::Message	typeref:typename:void
SetResourceHandler	core/coap/coap.hpp	/^    void SetResourceHandler(ResourceHandler aHandler) { mResourceHandler = aHandler; }$/;"	f	class:ot::Coap::CoapBase	typeref:typename:void
SetResponseCode	core/net/dns_types.hpp	/^    void SetResponseCode(Response aResponse)$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetResponseCode	core/net/dnssd_server.hpp	/^        void         SetResponseCode(ResponseCode aResponseCode) { mHeader.SetResponseCode(aResp/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
SetResponseTimeout	core/net/dns_client.hpp	/^        void SetResponseTimeout(uint32_t aResponseTimeout) { mResponseTimeout = aResponseTimeout/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetRestOfHeader	core/net/ip4_types.hpp	/^        void SetRestOfHeader(const uint8_t *aRestOfHeader)$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:void
SetRetryDelay	core/net/dns_dso.hpp	/^        void     SetRetryDelay(uint32_t aDelay) { mRetryDelay = BigEndian::HostSwap32(aDelay); }$/;"	f	class:ot::Dns::Dso::RetryDelayTlv	typeref:typename:void
SetRetryDelay	core/thread/address_resolver.hpp	/^        void     SetRetryDelay(uint16_t aDelay) { mInfo.mOther.mRetryDelay = aDelay; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetReuseAddrPortOptions	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::SetReuseAddrPortOptions(int aFd)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
SetReuseDelay	core/thread/network_data_leader.hpp	/^        void     SetReuseDelay(uint32_t aDelay) { mReuseDelay = aDelay; }$/;"	f	class:ot::NetworkData::Leader::ContextIds	typeref:typename:void
SetRevision	core/meshcop/meshcop_tlvs.hpp	/^    void SetRevision(uint8_t aRevision)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv	typeref:typename:void
SetRloc	core/thread/network_data_tlvs.hpp	/^    void SetRloc(uint16_t aRloc16) { mRloc = BigEndian::HostSwap16(aRloc16); }$/;"	f	class:ot::NetworkData::BorderRouterEntry	typeref:typename:void
SetRloc	core/thread/network_data_tlvs.hpp	/^    void SetRloc(uint16_t aRloc16) { mRloc = BigEndian::HostSwap16(aRloc16); }$/;"	f	class:ot::NetworkData::HasRouteEntry	typeref:typename:void
SetRloc16	core/common/settings.hpp	/^        void SetRloc16(uint16_t aRloc16) { mRloc16 = LittleEndian::HostSwap16(aRloc16); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
SetRloc16	core/common/settings.hpp	/^        void SetRloc16(uint16_t aRloc16) { mRloc16 = LittleEndian::HostSwap16(aRloc16); }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetRloc16	core/thread/address_resolver.hpp	/^        void              SetRloc16(Mac::ShortAddress aRloc16) { mRloc16 = aRloc16; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetRloc16	core/thread/mle.cpp	/^void Mle::SetRloc16(uint16_t aRloc16)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetRloc16	core/thread/neighbor.hpp	/^    void SetRloc16(uint16_t aRloc16) { mRloc16 = aRloc16; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetRloc16	core/thread/network_diagnostic_tlvs.hpp	/^    void SetRloc16(uint16_t aRloc16) { mRloc16 = BigEndian::HostSwap16(aRloc16); }$/;"	f	class:ot::NetworkDiagnostic::ChildIp6AddressListTlvValue	typeref:typename:void
SetRole	core/common/settings.hpp	/^        void SetRole(uint8_t aRole) { mRole = aRole; }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetRole	core/thread/mle.cpp	/^void Mle::SetRole(DeviceRole aRole)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetRootDelay	core/net/sntp_client.hpp	/^        void     SetRootDelay(uint32_t aRootDelay) { mRootDelay = BigEndian::HostSwap32(aRootDel/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetRootDispersion	core/net/sntp_client.hpp	/^        void SetRootDispersion(uint32_t aRootDispersion) { mRootDispersion = BigEndian::HostSwap/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetRotationTime	core/meshcop/meshcop_tlvs.hpp	/^    void     SetRotationTime(uint16_t aRotationTime) { mRotationTime = BigEndian::HostSwap16(aRo/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:void
SetRouteCost	core/thread/mle_tlvs.hpp	/^    void SetRouteCost(uint8_t aRouterIndex, uint8_t aRouteCost)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouteData	core/thread/mle_tlvs.hpp	/^    void SetRouteData(uint8_t aRouterIndex, LinkQuality aLinkQualityIn, LinkQuality aLinkQuality/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouteDataLength	core/thread/mle_tlvs.hpp	/^    void SetRouteDataLength(uint8_t aLength) { SetLength(sizeof(mRouterIdSequence) + sizeof(mRou/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouteDataLength	core/thread/mle_tlvs.hpp	/^    void SetRouteDataLength(uint8_t aLength)$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouteInfoOptionPreference	core/border_router/routing_manager.hpp	/^    void SetRouteInfoOptionPreference(RoutePreference aPreference) { mRioAdvertiser.SetPreferenc/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SetRouteLifetime	core/net/nd6.hpp	/^    void SetRouteLifetime(uint32_t aLifetime) { mRouteLifetime = BigEndian::HostSwap32(aLifetime/;"	f	class:ot::Ip6::Nd::RouteInfoOption	typeref:typename:void
SetRoutePreference	core/border_router/routing_manager.hpp	/^    void SetRoutePreference(RoutePreference aPreference) { mRoutePublisher.SetPreference(aPrefer/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
SetRouter	core/border_router/routing_manager.hpp	/^            void SetRouter(const Entry<Router> *aRouter) { mPtr1 = aRouter; }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
SetRouterDowngradeThreshold	core/thread/mle_router.hpp	/^    void SetRouterDowngradeThreshold(uint8_t aThreshold) { mRouterDowngradeThreshold = aThreshol/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetRouterEligible	core/thread/mle_router.cpp	/^Error MleRouter::SetRouterEligible(bool aEligible)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:Error
SetRouterFlag	core/net/nd6.hpp	/^    void SetRouterFlag(void) { mFlags |= kRouterFlag; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:void
SetRouterId	core/thread/mle_router.cpp	/^void MleRouter::SetRouterId(uint8_t aRouterId)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetRouterId	core/thread/mle_tlvs.hpp	/^    void SetRouterId(uint8_t aRouterId) { mRouterIdMask.Add(aRouterId); }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouterIdMask	core/thread/mle_tlvs.hpp	/^    void SetRouterIdMask(const RouterIdSet &aRouterIdSet) { mRouterIdMask = aRouterIdSet; }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouterIdRange	core/thread/router_table.cpp	/^Error RouterTable::SetRouterIdRange(uint8_t aMinRouterId, uint8_t aMaxRouterId)$/;"	f	class:ot::RouterTable	typeref:typename:Error
SetRouterIdSequence	core/thread/mle_tlvs.hpp	/^    void SetRouterIdSequence(uint8_t aSequence) { mRouterIdSequence = aSequence; }$/;"	f	class:ot::Mle::RouteTlv	typeref:typename:void
SetRouterLifetime	core/net/nd6.hpp	/^        void SetRouterLifetime(uint16_t aRouterLifetime) { mRouterLifetime = BigEndian::HostSwap/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetRouterSelectionJitter	core/thread/mle_router.hpp	/^    void SetRouterSelectionJitter(uint8_t aRouterJitter) { mRouterRoleTransition.SetJitter(aRout/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetRouterUpgradeThreshold	core/thread/mle_router.hpp	/^    void SetRouterUpgradeThreshold(uint8_t aThreshold) { mRouterUpgradeThreshold = aThreshold; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetRssAverager	core/common/message.hpp	/^    void SetRssAverager(const RssAverager &aRssAverager) { GetMetadata().mRssAverager = aRssAver/;"	f	class:ot::Message	typeref:typename:void
SetRssi	core/mac/mac_frame.hpp	/^    void SetRssi(int8_t aRssi) { mInfo.mRxInfo.mRssi = aRssi; }$/;"	f	class:ot::Mac::RxFrame	typeref:typename:void
SetRssiThreshold	core/utils/jam_detector.cpp	/^void JamDetector::SetRssiThreshold(int8_t aThreshold)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
SetRxChannelAfterTxDone	core/mac/mac_frame.hpp	/^    void SetRxChannelAfterTxDone(uint8_t aChannel) { mInfo.mTxInfo.mRxChannelAfterTxDone = aChan/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetRxOnWhenIdle	core/mac/mac.cpp	/^void Mac::SetRxOnWhenIdle(bool aRxOnWhenIdle)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetRxOnWhenIdle	core/mac/mac_links.hpp	/^    void SetRxOnWhenIdle(bool aRxOnWhenIdle)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetRxOnWhenIdle	core/mac/sub_mac.cpp	/^void SubMac::SetRxOnWhenIdle(bool aRxOnWhenIdle)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetRxOnWhenIdle	core/radio/radio.hpp	/^inline void Radio::SetRxOnWhenIdle(bool aEnable) { otPlatRadioSetRxOnWhenIdle(GetInstancePtr(), /;"	f	class:ot::Radio	typeref:typename:void
SetRxOnWhenIdle	core/radio/radio.hpp	/^inline void Radio::SetRxOnWhenIdle(bool) {}$/;"	f	class:ot::Radio	typeref:typename:void
SetRxOnWhenIdle	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::SetRxOnWhenIdle(bool aRxOnWhenIdle)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
SetRxOnWhenIdle	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetRxOnWhenIdle(bool aEnable)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetScopeOverride	core/net/netif.hpp	/^        void SetScopeOverride(uint8_t aScope)$/;"	f	class:ot::Ip6::Netif::UnicastAddress	typeref:typename:void
SetSeconds	core/meshcop/timestamp.hpp	/^    void SetSeconds(uint64_t aSeconds)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
SetSecurityControlField	core/mac/mac_frame.cpp	/^void Frame::SetSecurityControlField(uint8_t aSecurityControlField)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetSecurityPolicy	core/meshcop/meshcop_tlvs.cpp	/^void SecurityPolicyTlv::SetSecurityPolicy(const SecurityPolicy &aSecurityPolicy)$/;"	f	class:ot::MeshCoP::SecurityPolicyTlv	typeref:typename:void
SetSecurityPolicy	core/thread/key_manager.cpp	/^void KeyManager::SetSecurityPolicy(const SecurityPolicy &aSecurityPolicy)$/;"	f	class:ot::KeyManager	typeref:typename:void
SetSedBufferSize	core/thread/mle_tlvs.hpp	/^    void SetSedBufferSize(uint16_t aSedBufferSize) { mSedBufferSize = BigEndian::HostSwap16(aSed/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetSedDatagramCount	core/thread/mle_tlvs.hpp	/^    void SetSedDatagramCount(uint8_t aSedDatagramCount) { mSedDatagramCount = aSedDatagramCount;/;"	f	class:ot::Mle::ConnectivityTlv	typeref:typename:void
SetSeedId	core/net/ip6_mpl.hpp	/^    void SetSeedId(uint16_t aSeedId) { mSeedId = BigEndian::HostSwap16(aSeedId); }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:void
SetSequence	core/mac/mac_frame.hpp	/^    void SetSequence(uint8_t aSequence) { GetPsdu()[kSequenceIndex] = aSequence; }$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetSequence	core/mac/mac_frame.hpp	/^    void SetSequence(uint8_t aSequence) { mSequence = aSequence; }$/;"	f	class:ot::Mac::TimeIe	typeref:typename:void
SetSequence	core/mac/mac_links.hpp	/^    void SetSequence(uint8_t aSequence)$/;"	f	class:ot::Mac::TxFrames	typeref:typename:void
SetSequence	core/net/icmp6.hpp	/^        void SetSequence(uint16_t aSequence) { mData.m16[1] = BigEndian::HostSwap16(aSequence); /;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:void
SetSequence	core/net/ip6_mpl.hpp	/^    void SetSequence(uint8_t aSequence) { mSequence = aSequence; }$/;"	f	class:ot::Ip6::MplOption	typeref:typename:void
SetSequenceNumber	core/thread/network_data_service.hpp	/^        void SetSequenceNumber(uint8_t aSequenceNumber) { mSequenceNumber = aSequenceNumber; }$/;"	f	class:ot::NetworkData::Service::BackboneRouter::ServerData	typeref:typename:void
SetSeriesFlagsMask	core/thread/link_metrics_tlvs.hpp	/^    void SetSeriesFlagsMask(uint8_t aSeriesFlagsMask) { mSeriesFlagsMask = aSeriesFlagsMask; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:void
SetSeriesId	core/thread/link_metrics_tlvs.hpp	/^    void SetSeriesId(uint8_t aSeriesId) { mSeriesId = aSeriesId; }$/;"	f	class:ot::LinkMetrics::FwdProbingRegSubTlv	typeref:typename:void
SetServer16	core/thread/network_data_tlvs.hpp	/^    void SetServer16(uint16_t aServer16) { mServer16 = BigEndian::HostSwap16(aServer16); }$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:void
SetServerAddress	core/common/settings.hpp	/^        void SetServerAddress(const Ip6::Address &aAddress) { mServerAddress = aAddress; }$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:void
SetServerPort	core/common/settings.hpp	/^        void SetServerPort(uint16_t aPort) { mServerPort = LittleEndian::HostSwap16(aPort); }$/;"	f	class:ot::SettingsBase::SrpClientInfo	typeref:typename:void
SetServiceHandler	core/net/srp_server.hpp	/^    void SetServiceHandler(otSrpServerServiceUpdateHandler aServiceHandler, void *aServiceHandle/;"	f	class:ot::Srp::Server	typeref:typename:void
SetServiceKeyRecordEnabled	core/net/srp_client.hpp	/^    void SetServiceKeyRecordEnabled(bool aEnabled) { mServiceKeyRecordEnabled = aEnabled; }$/;"	f	class:ot::Srp::Client	typeref:typename:void
SetServiceMode	core/net/dns_client.hpp	/^        void SetServiceMode(ServiceMode aMode) { mServiceMode = static_cast<otDnsServiceMode>(aM/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetSessionId	core/meshcop/meshcop.hpp	/^    void SetSessionId(uint16_t aSessionId)$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:void
SetSessionId	core/meshcop/meshcop_leader.hpp	/^    void SetSessionId(uint16_t aSessionId) { mSessionId = aSessionId; }$/;"	f	class:ot::MeshCoP::Leader	typeref:typename:void
SetShort	core/mac/mac_types.hpp	/^    void SetShort(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::Address	typeref:typename:void
SetShortAddress	core/mac/link_raw.cpp	/^Error LinkRaw::SetShortAddress(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
SetShortAddress	core/mac/mac.hpp	/^    void SetShortAddress(ShortAddress aShortAddress) { mLinks.SetShortAddress(aShortAddress); }$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetShortAddress	core/mac/mac_links.hpp	/^    void SetShortAddress(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::Links	typeref:typename:void
SetShortAddress	core/mac/sub_mac.cpp	/^void SubMac::SetShortAddress(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetShortAddress	core/radio/radio.cpp	/^void Radio::SetShortAddress(Mac::ShortAddress aShortAddress)$/;"	f	class:ot::Radio	typeref:typename:void
SetShortAddress	core/radio/radio.hpp	/^inline void Radio::SetShortAddress(Mac::ShortAddress) {}$/;"	f	class:ot::Radio	typeref:typename:void
SetShortAddress	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetShortAddress(uint16_t aAddress)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetSize	core/net/nd6.hpp	/^    void SetSize(uint16_t aSize) { mLength = static_cast<uint8_t>((aSize + kLengthUnit - 1) \/ k/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:void
SetSize	core/utils/heap.hpp	/^    void SetSize(uint16_t aSize) { mSize = aSize; }$/;"	f	class:ot::Utils::Block	typeref:typename:void
SetSkipLength	lib/spinel/multi_frame_buffer.hpp	/^    otError SetSkipLength(uint16_t aSkipLength)$/;"	f	class:ot::Spinel::MultiFrameBuffer	typeref:typename:otError
SetSockAddr	core/net/socket.hpp	/^    void SetSockAddr(const Address &aAddress) { mSockAddr = aAddress; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetSockAddr	core/radio/trel_interface.hpp	/^        void SetSockAddr(const Ip6::SockAddr &aSockAddr) { mSockAddr = aSockAddr; }$/;"	f	class:ot::Trel::Interface::Peer	typeref:typename:void
SetSockAddrToRloc	core/thread/tmf.cpp	/^void MessageInfo::SetSockAddrToRloc(void) { SetSockAddr(Get<Mle::MleRouter>().GetMeshLocal16());/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:void
SetSockAddrToRlocPeerAddrTo	core/thread/tmf.cpp	/^void MessageInfo::SetSockAddrToRlocPeerAddrTo(const Ip6::Address &aPeerAddress)$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:void
SetSockAddrToRlocPeerAddrTo	core/thread/tmf.cpp	/^void MessageInfo::SetSockAddrToRlocPeerAddrTo(uint16_t aRloc16)$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:void
SetSockAddrToRlocPeerAddrToLeaderAloc	core/thread/tmf.cpp	/^Error MessageInfo::SetSockAddrToRlocPeerAddrToLeaderAloc(void)$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:Error
SetSockAddrToRlocPeerAddrToLeaderRloc	core/thread/tmf.cpp	/^Error MessageInfo::SetSockAddrToRlocPeerAddrToLeaderRloc(void)$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:Error
SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast	core/thread/tmf.cpp	/^void MessageInfo::SetSockAddrToRlocPeerAddrToRealmLocalAllRoutersMulticast(void)$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:void
SetSockPort	core/net/socket.hpp	/^    void SetSockPort(uint16_t aPort) { mSockPort = aPort; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:void
SetSockPortToTmf	core/thread/tmf.hpp	/^    void SetSockPortToTmf(void) { SetSockPort(kUdpPort); }$/;"	f	class:ot::Tmf::MessageInfo	typeref:typename:void
SetSocketOption	posix/platform/mdns_socket.hpp	/^    static otError SetSocketOption(int aFd, int aLevel, int aOption, const ValueType &aValue, co/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
SetSocketOptionValue	posix/platform/mdns_socket.cpp	/^otError MdnsSocket::SetSocketOptionValue(int         aFd,$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:otError
SetSolicitedFlag	core/net/nd6.hpp	/^    void SetSolicitedFlag(void) { mFlags |= kSolicitedFlag; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:void
SetSource	core/mac/mac_types.cpp	/^void PanIds::SetSource(PanId aPanId)$/;"	f	class:ot::Mac::PanIds	typeref:typename:void
SetSource	core/net/ip4_types.hpp	/^    void SetSource(const Address &aSource) { mSource = aSource; }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetSource	core/net/ip6_headers.hpp	/^    void SetSource(const Address &aSource) { mSource = aSource; }$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetSource	core/radio/trel_packet.hpp	/^    void SetSource(const Mac::ExtAddress &aSource) { mSource = aSource; }$/;"	f	class:ot::Trel::Header	typeref:typename:void
SetSourcePort	core/meshcop/meshcop_tlvs.hpp	/^    void SetSourcePort(uint16_t aSourcePort) { mSourcePort = BigEndian::HostSwap16(aSourcePort);/;"	f	class:ot::MeshCoP::UdpEncapsulationTlvHeader	typeref:typename:void
SetSourcePort	core/net/udp6.hpp	/^        void SetSourcePort(uint16_t aPort) { mSourcePort = BigEndian::HostSwap16(aPort); }$/;"	f	class:ot::Ip6::Udp::Header	typeref:typename:void
SetSrcAddr	core/mac/mac_frame.cpp	/^void Frame::SetSrcAddr(ShortAddress aShortAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetSrcAddr	core/mac/mac_frame.cpp	/^void Frame::SetSrcAddr(const Address &aAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetSrcAddr	core/mac/mac_frame.cpp	/^void Frame::SetSrcAddr(const ExtAddress &aExtAddress)$/;"	f	class:ot::Mac::Frame	typeref:typename:void
SetSrcMatchAsShort	core/thread/src_match_controller.cpp	/^void SourceMatchController::SetSrcMatchAsShort(Child &aChild, bool aUseShortAddress)$/;"	f	class:ot::SourceMatchController	typeref:typename:void
SetSrcPanId	core/mac/mac_frame.cpp	/^Error Frame::SetSrcPanId(PanId aPanId)$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
SetSslAuthMode	core/coap/coap_secure.hpp	/^    void SetSslAuthMode(bool aVerifyPeerCertificate) { mDtls.SetSslAuthMode(aVerifyPeerCertifica/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
SetSslAuthMode	core/meshcop/secure_transport.hpp	/^    void SetSslAuthMode(bool aVerifyPeerCertificate) { mVerifyPeerCertificate = aVerifyPeerCerti/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetSslAuthMode	core/radio/ble_secure.hpp	/^    void SetSslAuthMode(bool aVerifyPeerCertificate) { mTls.SetSslAuthMode(aVerifyPeerCertificat/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
SetStable	core/thread/network_data_tlvs.hpp	/^    void SetStable(void) { mType |= kStableMask; }$/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
SetStableDataVersion	core/thread/mle_types.hpp	/^    void SetStableDataVersion(uint8_t aVersion) { mStableDataVersion = aVersion; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:void
SetStartingChannel	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::SetStartingChannel(uint8_t aStartingChannel)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
SetState	core/backbone_router/bbr_local.cpp	/^void Local::SetState(State aState)$/;"	f	class:ot::BackboneRouter::Local	typeref:typename:void
SetState	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::SetState(State aState)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
SetState	core/mac/sub_mac.cpp	/^void SubMac::SetState(State aState)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SetState	core/meshcop/commissioner.cpp	/^void Commissioner::SetState(State aState)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SetState	core/meshcop/joiner.cpp	/^void Joiner::SetState(State aState)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
SetState	core/meshcop/secure_transport.cpp	/^void SecureTransport::SetState(State aState)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:void
SetState	core/net/dns_dso.cpp	/^void Dso::Connection::SetState(State aState)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
SetState	core/net/mdns.cpp	/^void Core::Entry::SetState(State aState)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
SetState	core/net/srp_client.cpp	/^void Client::AutoStart::SetState(State aState)$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:void
SetState	core/net/srp_client.cpp	/^void Client::HostInfo::SetState(ItemState aState)$/;"	f	class:ot::Srp::Client::HostInfo	typeref:typename:void
SetState	core/net/srp_client.cpp	/^void Client::Service::SetState(ItemState aState)$/;"	f	class:ot::Srp::Client::Service	typeref:typename:void
SetState	core/net/srp_client.cpp	/^void Client::SetState(State aState)$/;"	f	class:ot::Srp::Client	typeref:typename:void
SetState	core/radio/trel_link.cpp	/^void Link::SetState(State aState)$/;"	f	class:ot::Trel::Link	typeref:typename:void
SetState	core/thread/neighbor.cpp	/^void Neighbor::SetState(State aState)$/;"	f	class:ot::Neighbor	typeref:typename:void
SetState	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::SetState(State aState)$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
SetStateCallback	core/border_router/routing_manager.hpp	/^        void  SetStateCallback(PdCallback aCallback, void *aContext) { mStateCallback.Set(aCallb/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
SetStateChild	core/thread/mle.cpp	/^void Mle::SetStateChild(uint16_t aRloc16)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetStateDetached	core/thread/mle.cpp	/^void Mle::SetStateDetached(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetStateLeader	core/thread/mle_router.cpp	/^void MleRouter::SetStateLeader(uint16_t aRloc16, LeaderStartMode aStartMode)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetStateRouter	core/thread/mle_router.cpp	/^void MleRouter::SetStateRouter(uint16_t aRloc16)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetStateRouterOrLeader	core/thread/mle_router.cpp	/^void MleRouter::SetStateRouterOrLeader(DeviceRole aRole, uint16_t aRloc16, LeaderStartMode aStar/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetStateToConflict	core/net/mdns.cpp	/^void Core::Entry::SetStateToConflict(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
SetStateToRemoving	core/net/mdns.cpp	/^void Core::Entry::SetStateToRemoving(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
SetStatusCode	core/net/dhcp6.hpp	/^    void SetStatusCode(Status aStatus) { mStatus = BigEndian::HostSwap16(static_cast<uint16_t>(a/;"	f	class:ot::Dhcp6::StatusCode	typeref:typename:void
SetSteeringData	core/thread/mle_router.cpp	/^void MleRouter::SetSteeringData(const Mac::ExtAddress *aExtAddress)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetStoredMacFrameCounter	core/thread/key_manager.hpp	/^    void SetStoredMacFrameCounter(uint32_t aStoredMacFrameCounter) { mStoredMacFrameCounter = aS/;"	f	class:ot::KeyManager	typeref:typename:void
SetStoredMleFrameCounter	core/thread/key_manager.hpp	/^    void SetStoredMleFrameCounter(uint32_t aStoredMleFrameCounter) { mStoredMleFrameCounter = aS/;"	f	class:ot::KeyManager	typeref:typename:void
SetStratum	core/net/sntp_client.hpp	/^        void    SetStratum(uint8_t aStratum) { mStratum = aStratum; }$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetStubRouterFlag	core/net/nd6.hpp	/^    void SetStubRouterFlag(void) { mFlags[0] |= kStubRouterFlag; }$/;"	f	class:ot::Ip6::Nd::RaFlagsExtOption	typeref:typename:void
SetSubTlvOffset	core/thread/network_data.hpp	/^        void    SetSubTlvOffset(uint8_t aOffset) { mIteratorBuffer[kSubTlvPosition] = aOffset; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
SetSubTlvsLength	core/thread/network_data_tlvs.hpp	/^    void SetSubTlvsLength(uint8_t aLength) { SetLength(GetFieldsLength() + aLength); }$/;"	f	class:ot::NetworkData::ServiceTlv	typeref:typename:void
SetSubTlvsLength	core/thread/network_data_tlvs.hpp	/^    void SetSubTlvsLength(uint8_t aLength)$/;"	f	class:ot::NetworkData::PrefixTlv	typeref:typename:void
SetSubType	core/common/message.hpp	/^    void SetSubType(SubType aSubType) { GetMetadata().mSubType = aSubType; }$/;"	f	class:ot::Message	typeref:typename:void
SetSubType	core/mac/mac_frame.hpp	/^    void SetSubType(uint8_t aSubType) { mSubType = aSubType; }$/;"	f	class:ot::Mac::VendorIeHeader	typeref:typename:void
SetSubnetId	core/net/ip6_address.hpp	/^    void SetSubnetId(uint16_t aSubnetId) { mPrefix.mFields.m16[3] = BigEndian::HostSwap16(aSubne/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
SetSupervisionInterval	core/thread/child.hpp	/^    void SetSupervisionInterval(uint16_t aInterval) { mSupervisionInterval = aInterval; }$/;"	f	class:ot::Child	typeref:typename:void
SetSupportedChannelMask	core/mac/mac.cpp	/^void Mac::SetSupportedChannelMask(const ChannelMask &aMask)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
SetSupportedChannels	core/utils/channel_manager.cpp	/^void ChannelManager::SetSupportedChannels(uint32_t aChannelMask)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
SetT1	core/net/dhcp6.hpp	/^    void SetT1(uint32_t aT1) { mT1 = BigEndian::HostSwap32(aT1); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:void
SetT2	core/net/dhcp6.hpp	/^    void SetT2(uint32_t aT2) { mT2 = BigEndian::HostSwap32(aT2); }$/;"	f	class:ot::Dhcp6::IaNa	typeref:typename:void
SetTail	core/common/message.hpp	/^    void           SetTail(Message *aMessage) { mData = aMessage; }$/;"	f	class:ot::MessageQueue	typeref:typename:void
SetTarget	core/thread/address_resolver.hpp	/^        void                SetTarget(const Ip6::Address &aTarget) { mTarget = aTarget; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetTargetAddress	core/net/nd6.hpp	/^    void SetTargetAddress(const Address &aTargetAddress) { mTargetAddress = aTargetAddress; }$/;"	f	class:ot::Ip6::Nd::NeighborAdvertMessage	typeref:typename:void
SetTargetAddress	core/net/nd6.hpp	/^    void SetTargetAddress(const Address &aTargetAddress) { mTargetAddress = aTargetAddress; }$/;"	f	class:ot::Ip6::Nd::NeighborSolicitMessage	typeref:typename:void
SetTemporaryChannel	core/mac/mac.cpp	/^Error Mac::SetTemporaryChannel(uint8_t aChannel)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
SetTestMode	core/net/dnssd_server.hpp	/^    void SetTestMode(uint8_t aTestMode) { mTestMode = aTestMode; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
SetThreadVersionCheckEnabled	core/thread/mle_router.hpp	/^    void SetThreadVersionCheckEnabled(bool aEnabled) { mThreadVersionCheckEnabled = aEnabled; }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SetTicks	core/meshcop/timestamp.hpp	/^    void SetTicks(uint16_t aTicks)$/;"	f	class:ot::MeshCoP::Timestamp	typeref:typename:void
SetTime	core/mac/mac_frame.hpp	/^    void SetTime(uint64_t aTime) { mTime = LittleEndian::HostSwap64(aTime); }$/;"	f	class:ot::Mac::TimeIe	typeref:typename:void
SetTimeIeOffset	core/mac/mac_frame.hpp	/^    void SetTimeIeOffset(uint8_t aOffset) { mInfo.mTxInfo.mIeInfo->mTimeIeOffset = aOffset; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetTimeSync	core/common/message.hpp	/^    void SetTimeSync(bool aEnabled) { GetMetadata().mTimeSync = aEnabled; }$/;"	f	class:ot::Message	typeref:typename:void
SetTimeSyncCallback	core/thread/time_sync_service.hpp	/^    void SetTimeSyncCallback(otNetworkTimeSyncCallbackFn aCallback, void *aCallbackContext)$/;"	f	class:ot::TimeSync	typeref:typename:void
SetTimeSyncEnabled	core/thread/neighbor.hpp	/^    void SetTimeSyncEnabled(bool aEnabled) { mTimeSyncEnabled = aEnabled; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetTimeSyncPeriod	core/thread/mle_tlvs.hpp	/^    void SetTimeSyncPeriod(uint16_t aTimeSyncPeriod) { mTimeSyncPeriod = BigEndian::HostSwap16(a/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:void
SetTimeSyncPeriod	core/thread/time_sync_service.hpp	/^    void SetTimeSyncPeriod(uint16_t aTimeSyncPeriod) { mTimeSyncPeriod = aTimeSyncPeriod; }$/;"	f	class:ot::TimeSync	typeref:typename:void
SetTimeSyncSeq	core/common/message.hpp	/^    void SetTimeSyncSeq(uint8_t aTimeSyncSeq) { GetMetadata().mTimeSyncSeq = aTimeSyncSeq; }$/;"	f	class:ot::Message	typeref:typename:void
SetTimeSyncSeq	core/mac/mac_frame.hpp	/^    void SetTimeSyncSeq(uint8_t aTimeSyncSeq) { mInfo.mTxInfo.mIeInfo->mTimeSyncSeq = aTimeSyncS/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetTimeout	core/common/settings.hpp	/^        void SetTimeout(uint32_t aTimeout) { mTimeout = LittleEndian::HostSwap32(aTimeout); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
SetTimeout	core/thread/address_resolver.hpp	/^        void     SetTimeout(uint16_t aTimeout) { mInfo.mOther.mTimeout = aTimeout; }$/;"	f	class:ot::AddressResolver::CacheEntry	typeref:typename:void
SetTimeout	core/thread/child.hpp	/^    void SetTimeout(uint32_t aTimeout) { mTimeout = aTimeout; }$/;"	f	class:ot::Child	typeref:typename:void
SetTimeout	core/thread/child_supervision.cpp	/^void SupervisionListener::SetTimeout(uint16_t aTimeout)$/;"	f	class:ot::SupervisionListener	typeref:typename:void
SetTimeout	core/thread/mle.cpp	/^void Mle::SetTimeout(uint32_t aTimeout)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
SetTimeout	core/thread/network_diagnostic_tlvs.hpp	/^    void SetTimeout(uint8_t aTimeout)$/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:void
SetTimeoutChildId	core/thread/network_diagnostic_tlvs.hpp	/^    void     SetTimeoutChildId(uint16_t aTimeoutChildIf) { mTimeoutChildId = BigEndian::HostSwap/;"	f	class:ot::NetworkDiagnostic::ChildTableEntry	typeref:typename:void
SetTimeouts	core/net/dns_dso.cpp	/^Error Dso::Connection::SetTimeouts(uint32_t aInactivityTimeout, uint32_t aKeepAliveInterval)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:Error
SetTimer	core/net/tcp6.cpp	/^void Tcp::Endpoint::SetTimer(uint8_t aTimerFlag, uint32_t aDelay)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:void
SetTimestamp	core/common/message.hpp	/^    void SetTimestamp(TimeMilli aTimestamp) { GetMetadata().mTimestamp = aTimestamp; }$/;"	f	class:ot::Message	typeref:typename:void
SetTimestampToNow	core/common/message.hpp	/^    void SetTimestampToNow(void) { SetTimestamp(TimerMilli::GetNow()); }$/;"	f	class:ot::Message	typeref:typename:void
SetTlvOffset	core/thread/network_data.hpp	/^        void    SetTlvOffset(uint8_t aOffset) { mIteratorBuffer[kTlvPosition] = aOffset; }$/;"	f	class:ot::NetworkData::NetworkData::NetworkDataIterator	typeref:typename:void
SetTmfOriginFilterEnabled	core/net/ip6.hpp	/^    void SetTmfOriginFilterEnabled(bool aEnabled) { mTmfOriginFilterEnabled = aEnabled; }$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
SetToAnycastLocator	core/net/ip6_address.hpp	/^    void SetToAnycastLocator(const NetworkPrefix &aNetworkPrefix, uint16_t aAloc16)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToDefault	core/net/nd6.cpp	/^void RouterAdvert::Header::SetToDefault(void)$/;"	f	class:ot::Ip6::Nd::RouterAdvert::Header	typeref:typename:void
SetToDefault	core/thread/key_manager.cpp	/^void SecurityPolicy::SetToDefault(void)$/;"	f	class:ot::SecurityPolicy	typeref:typename:void
SetToDefaultFlags	core/thread/key_manager.cpp	/^void SecurityPolicy::SetToDefaultFlags(void)$/;"	f	class:ot::SecurityPolicy	typeref:typename:void
SetToIp4Mapped	core/net/ip6_address.cpp	/^void Address::SetToIp4Mapped(const Ip4::Address &aIp4Address)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLinkLocalAddress	core/net/ip6_address.cpp	/^void Address::SetToLinkLocalAddress(const InterfaceIdentifier &aIid)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLinkLocalAddress	core/net/ip6_address.cpp	/^void Address::SetToLinkLocalAddress(const Mac::ExtAddress &aExtAddress)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLinkLocalAllNodesMulticast	core/net/ip6_address.cpp	/^void Address::SetToLinkLocalAllNodesMulticast(void) { *this = GetLinkLocalAllNodesMulticast(); }$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLinkLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^void Address::SetToLinkLocalAllRoutersMulticast(void) { *this = GetLinkLocalAllRoutersMulticast(/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLocator	core/net/ip6_address.cpp	/^void Address::SetToLocator(const NetworkPrefix &aNetworkPrefix, uint16_t aLocator)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToLocator	core/net/ip6_address.cpp	/^void InterfaceIdentifier::SetToLocator(uint16_t aLocator)$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:void
SetToNow	core/utils/history_tracker.cpp	/^void HistoryTracker::Timestamp::SetToNow(void)$/;"	f	class:ot::Utils::HistoryTracker::Timestamp	typeref:typename:void
SetToPermitAllJoiners	core/meshcop/meshcop.cpp	/^void SteeringData::SetToPermitAllJoiners(void)$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
SetToRealmLocalAllMplForwarders	core/net/ip6_address.cpp	/^void Address::SetToRealmLocalAllMplForwarders(void) { *this = GetRealmLocalAllMplForwarders(); }$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToRealmLocalAllNodesMulticast	core/net/ip6_address.cpp	/^void Address::SetToRealmLocalAllNodesMulticast(void) { *this = GetRealmLocalAllNodesMulticast();/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToRealmLocalAllRoutersMulticast	core/net/ip6_address.cpp	/^void Address::SetToRealmLocalAllRoutersMulticast(void) { *this = GetRealmLocalAllRoutersMulticas/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToRoutingLocator	core/net/ip6_address.hpp	/^    void SetToRoutingLocator(const NetworkPrefix &aNetworkPrefix, uint16_t aRloc16)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
SetToken	core/coap/coap_message.cpp	/^Error Message::SetToken(const uint8_t *aToken, uint8_t aTokenLength)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
SetTokenFromMessage	core/coap/coap_message.cpp	/^Error Message::SetTokenFromMessage(const Message &aMessage)$/;"	f	class:ot::Coap::Message	typeref:typename:Error
SetTokenLength	core/coap/coap_message.hpp	/^    void SetTokenLength(uint8_t aTokenLength)$/;"	f	class:ot::Coap::Message	typeref:typename:void
SetTotalLength	core/net/ip4_types.hpp	/^    void SetTotalLength(uint16_t aLength) { mTotalLength = BigEndian::HostSwap16(aLength); }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetTrafficClass	core/net/ip6_headers.hpp	/^    void SetTrafficClass(uint8_t aTc)$/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetTransactionId	core/net/dhcp6.hpp	/^    void SetTransactionId(const TransactionId &aTransactionId) { mTransactionId = aTransactionId/;"	f	class:ot::Dhcp6::Header	typeref:typename:void
SetTransmitPower	core/radio/max_power_table.hpp	/^    void SetTransmitPower(uint8_t aChannel, int8_t aPower) { mPowerTable[aChannel - Radio::kChan/;"	f	class:ot::MaxPowerTable	typeref:typename:void
SetTransmitPower	core/radio/radio.hpp	/^inline Error Radio::SetTransmitPower(int8_t aPower) { return otPlatRadioSetTransmitPower(GetInst/;"	f	class:ot::Radio	typeref:typename:Error
SetTransmitPower	core/radio/radio.hpp	/^inline Error Radio::SetTransmitPower(int8_t) { return kErrorNotImplemented; }$/;"	f	class:ot::Radio	typeref:typename:Error
SetTransmitPower	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SetTransmitPower(int8_t aPower)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SetTransmitTimestampFraction	core/net/sntp_client.hpp	/^        void     SetTransmitTimestampFraction(uint32_t aFraction)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetTransmitTimestampSeconds	core/net/sntp_client.hpp	/^        void     SetTransmitTimestampSeconds(uint32_t aTimestamp)$/;"	f	class:ot::Sntp::Client::Header	typeref:typename:void
SetTransportProto	core/net/dns_client.hpp	/^        void SetTransportProto(TransportProto aTransportProto)$/;"	f	class:ot::Dns::Client::QueryConfig	typeref:typename:void
SetTruncationFlag	core/net/dns_types.hpp	/^    void SetTruncationFlag(void) { mFlags[0] |= kTcFlagMask; }$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetTtl	core/net/dns_types.hpp	/^    void SetTtl(uint32_t aTtl) { mTtl = BigEndian::HostSwap32(aTtl); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:void
SetTtl	core/net/ip4_types.hpp	/^    void SetTtl(uint8_t aTtl) { mTtl = aTtl; }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetTtl	core/net/srp_client.hpp	/^    void SetTtl(uint32_t aTtl) { mTtl = aTtl; }$/;"	f	class:ot::Srp::Client	typeref:typename:void
SetTtl	core/net/srp_server.hpp	/^        void  SetTtl(uint32_t aTtl) { mTtl = aTtl; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
SetTtlConfig	core/net/srp_server.cpp	/^Error Server::SetTtlConfig(const TtlConfig &aTtlConfig)$/;"	f	class:ot::Srp::Server	typeref:typename:Error
SetTxDelay	core/mac/mac_frame.hpp	/^    void SetTxDelay(uint32_t aTxDelay) { mInfo.mTxInfo.mTxDelay = aTxDelay; }$/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetTxDelayBaseTime	core/mac/mac_frame.hpp	/^    void SetTxDelayBaseTime(uint32_t aTxDelayBaseTime) { mInfo.mTxInfo.mTxDelayBaseTime = aTxDel/;"	f	class:ot::Mac::TxFrame	typeref:typename:void
SetTxSuccess	core/common/message.hpp	/^    void SetTxSuccess(bool aTxSuccess) { GetMetadata().mTxSuccess = aTxSuccess; }$/;"	f	class:ot::Message	typeref:typename:void
SetTxtData	core/net/dns_types.hpp	/^        void        SetTxtData(const uint8_t *aTxtData) { mPtr = aTxtData; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:void
SetTxtDataFromMessage	core/net/srp_server.cpp	/^Error Server::Service::SetTxtDataFromMessage(const Message &aMessage, uint16_t aOffset, uint16_t/;"	f	class:ot::Srp::Server::Service	typeref:typename:Error
SetTxtDataLength	core/net/dns_types.hpp	/^        void        SetTxtDataLength(uint16_t aLength) { mData[kIndexTxtLength] = aLength; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:void
SetTxtDataPosition	core/net/dns_types.hpp	/^        void        SetTxtDataPosition(uint16_t aValue) { mData[kIndexTxtPosition] = aValue; }$/;"	f	class:ot::Dns::TxtEntry::Iterator	typeref:typename:void
SetType	core/border_router/routing_manager.hpp	/^            void SetType(Type aType) { mData2 = aType; }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker::Iterator	typeref:typename:void
SetType	core/coap/coap_message.hpp	/^    void SetType(Type aType)$/;"	f	class:ot::Coap::Message	typeref:typename:void
SetType	core/common/message.hpp	/^    void SetType(Type aType) { GetMetadata().mType = aType; }$/;"	f	class:ot::Message	typeref:typename:void
SetType	core/common/tlvs.hpp	/^    void SetType(uint8_t aType) { mType = aType; }$/;"	f	class:ot::Tlv	typeref:typename:void
SetType	core/meshcop/meshcop_tlvs.hpp	/^    void SetType(MeshCoP::Tlv::Type aType) { ot::ExtendedTlv::SetType(static_cast<uint8_t>(aType/;"	f	class:ot::MeshCoP::ExtendedTlv	typeref:typename:void
SetType	core/meshcop/meshcop_tlvs.hpp	/^    void SetType(Type aType) { ot::Tlv::SetType(static_cast<uint8_t>(aType)); }$/;"	f	class:ot::MeshCoP::Tlv	typeref:typename:void
SetType	core/net/dhcp6.hpp	/^    void SetType(Type aType) { mType = aType; }$/;"	f	class:ot::Dhcp6::Header	typeref:typename:void
SetType	core/net/dns_types.hpp	/^    void SetType(Type aType)$/;"	f	class:ot::Dns::Header	typeref:typename:void
SetType	core/net/dns_types.hpp	/^    void SetType(uint16_t aType) { mType = BigEndian::HostSwap16(aType); }$/;"	f	class:ot::Dns::Question	typeref:typename:void
SetType	core/net/dns_types.hpp	/^    void SetType(uint16_t aType) { mType = BigEndian::HostSwap16(aType); }$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:void
SetType	core/net/icmp6.hpp	/^        void SetType(Type aType) { mType = static_cast<uint8_t>(aType); }$/;"	f	class:ot::Ip6::Icmp::Header	typeref:typename:void
SetType	core/net/ip4_types.hpp	/^        void SetType(uint8_t aType) { mType = aType; }$/;"	f	class:ot::Ip4::Icmp::Header	typeref:typename:void
SetType	core/net/ip6_headers.hpp	/^    void SetType(uint8_t aType) { mType = aType; }$/;"	f	class:ot::Ip6::Option	typeref:typename:void
SetType	core/net/nd6.hpp	/^    void SetType(Type aType) { mType = aType; }$/;"	f	class:ot::Ip6::Nd::Option	typeref:typename:void
SetType	core/thread/mle_tlvs.hpp	/^    void SetType(Type aType) { ot::Tlv::SetType(static_cast<uint8_t>(aType)); }$/;"	f	class:ot::Mle::Tlv	typeref:typename:void
SetType	core/thread/network_data_tlvs.hpp	/^    void SetType(Type aType) { mType = (mType & ~kTypeMask) | ((aType << kTypeOffset) & kTypeMas/;"	f	class:ot::NetworkData::NetworkDataTlv	typeref:typename:void
SetType	core/thread/network_diagnostic_tlvs.hpp	/^    void SetType(Type aType) { ot::Tlv::SetType(static_cast<uint8_t>(aType)); }$/;"	f	class:ot::NetworkDiagnostic::Tlv	typeref:typename:void
SetType	core/thread/thread_tlvs.hpp	/^    void SetType(Type aType) { ot::Tlv::SetType(static_cast<uint8_t>(aType)); }$/;"	f	class:ot::ThreadTlv	typeref:typename:void
SetTypeCovered	core/net/dns_types.hpp	/^    void SetTypeCovered(uint8_t aTypeCovered) { mTypeCovered = BigEndian::HostSwap16(aTypeCovere/;"	f	class:ot::Dns::SigRecord	typeref:typename:void
SetUdpForwarder	core/net/udp6.hpp	/^    void SetUdpForwarder(otUdpForwarder aForwarder, void *aContext) { mUdpForwarder.Set(aForward/;"	f	class:ot::Ip6::Udp	typeref:typename:void
SetUdpPayloadSize	core/net/dns_types.hpp	/^    void SetUdpPayloadSize(uint16_t aPayloadSize) { SetClass(aPayloadSize); }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
SetUncertainty	core/mac/mac_types.hpp	/^    void SetUncertainty(uint8_t aUncertainty) { mUncertainty = aUncertainty; }$/;"	f	class:ot::Mac::CslAccuracy	typeref:typename:void
SetUnixEra	core/net/sntp_client.hpp	/^    void SetUnixEra(uint32_t aUnixEra) { mUnixEra = aUnixEra; }$/;"	f	class:ot::Sntp::Client	typeref:typename:void
SetUnspecifiedToDefault	core/utils/ping_sender.cpp	/^void PingSender::Config::SetUnspecifiedToDefault(void)$/;"	f	class:ot::Utils::PingSender::Config	typeref:typename:void
SetUp	posix/platform/daemon.cpp	/^void Daemon::SetUp(void)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
SetUp	posix/platform/infra_if.cpp	/^void InfraNetif::SetUp(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
SetUp	posix/platform/mdns_socket.cpp	/^void MdnsSocket::SetUp(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
SetUp	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::SetUp(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
SetUp	posix/platform/udp.cpp	/^void Udp::SetUp(void) { Mainloop::Manager::Get().Add(*this); }$/;"	f	class:ot::Posix::Udp	typeref:typename:void
SetUpdateRecordCount	core/net/dns_types.hpp	/^    void SetUpdateRecordCount(uint16_t aCount) { SetAuthorityRecordCount(aCount); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:void
SetUpstreamQueryEnabled	core/net/dnssd_server.hpp	/^    void SetUpstreamQueryEnabled(bool aEnabled) { mEnableUpstreamQuery = aEnabled; }$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
SetUseNativeMdns	core/net/dnssd.hpp	/^    void SetUseNativeMdns(bool aUseMdns) { mUseNativeMdns = aUseMdns; }$/;"	f	class:ot::Dnssd	typeref:typename:void
SetUseShortLeaseOption	core/net/srp_client.hpp	/^    void SetUseShortLeaseOption(bool aUseShort) { mUseShortLeaseOption = aUseShort; }$/;"	f	class:ot::Srp::Client	typeref:typename:void
SetUseShortLeaseOption	core/net/srp_server.hpp	/^        void  SetUseShortLeaseOption(bool aUse) { mUseShortLeaseOption = aUse; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:void
SetUserCommands	cli/cli.cpp	/^otError Interpreter::SetUserCommands(const otCliCommand *aCommands, uint8_t aLength, void *aCont/;"	f	class:ot::Cli::Interpreter	typeref:typename:otError
SetValidLifetime	core/net/dhcp6.hpp	/^    void SetValidLifetime(uint32_t aValidLifetime) { mValidLifetime = BigEndian::HostSwap32(aVal/;"	f	class:ot::Dhcp6::IaAddress	typeref:typename:void
SetValidLifetime	core/net/nd6.hpp	/^    void SetValidLifetime(uint32_t aValidLifetime) { mValidLifetime = BigEndian::HostSwap32(aVal/;"	f	class:ot::Ip6::Nd::PrefixInfoOption	typeref:typename:void
SetValidPktCnt	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::MulticastForwardingCache::SetValidPktCnt(unsigned long aValidPktCn/;"	f	class:ot::Posix::MulticastRoutingManager::MulticastForwardingCache	typeref:typename:void
SetValue	core/common/time.hpp	/^    void SetValue(uint32_t aValue) { mValue = aValue; }$/;"	f	class:ot::Time	typeref:typename:void
SetVendorAppUrl	core/thread/network_diagnostic.cpp	/^Error Server::SetVendorAppUrl(const char *aVendorAppUrl)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
SetVendorModel	core/thread/network_diagnostic.cpp	/^Error Server::SetVendorModel(const char *aVendorModel)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
SetVendorName	core/thread/network_diagnostic.cpp	/^Error Server::SetVendorName(const char *aVendorName)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
SetVendorOui	core/mac/mac_frame.hpp	/^    void SetVendorOui(uint32_t aVendorOui) { LittleEndian::WriteUint24(aVendorOui, mOui); }$/;"	f	class:ot::Mac::VendorIeHeader	typeref:typename:void
SetVendorRestorePropertiesCallback	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::SetVendorRestorePropertiesCallback(otRadioSpinelVendorRestorePropertiesCallbac/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
SetVendorSwVersion	core/thread/network_diagnostic.cpp	/^Error Server::SetVendorSwVersion(const char *aVendorSwVersion)$/;"	f	class:ot::NetworkDiagnostic::Server	typeref:typename:Error
SetVerionTrafficClassFlow	core/net/ip6_headers.hpp	/^    void SetVerionTrafficClassFlow(uint32_t aVerTcFlow) { mVerTcFlow.m32 = BigEndian::HostSwap32/;"	f	class:ot::Ip6::Header	typeref:typename:void
SetVersion	core/coap/coap_message.hpp	/^    void SetVersion(uint8_t aVersion)$/;"	f	class:ot::Coap::Message	typeref:typename:void
SetVersion	core/common/settings.hpp	/^        void SetVersion(uint16_t aVersion) { mVersion = LittleEndian::HostSwap16(aVersion); }$/;"	f	class:ot::SettingsBase::ChildInfo	typeref:typename:void
SetVersion	core/common/settings.hpp	/^        void SetVersion(uint16_t aVersion) { mVersion = LittleEndian::HostSwap16(aVersion); }$/;"	f	class:ot::SettingsBase::NetworkInfo	typeref:typename:void
SetVersion	core/common/settings.hpp	/^        void SetVersion(uint16_t aVersion) { mVersion = LittleEndian::HostSwap16(aVersion); }$/;"	f	class:ot::SettingsBase::ParentInfo	typeref:typename:void
SetVersion	core/meshcop/meshcop_tlvs.hpp	/^    void SetVersion(uint8_t aVersion)$/;"	f	class:ot::MeshCoP::DiscoveryRequestTlv	typeref:typename:void
SetVersion	core/meshcop/meshcop_tlvs.hpp	/^    void SetVersion(uint8_t aVersion)$/;"	f	class:ot::MeshCoP::DiscoveryResponseTlv	typeref:typename:void
SetVersion	core/net/dns_types.hpp	/^    void SetVersion(uint8_t aVersion) { GetTtlByteAt(kVersionByteIndex) = aVersion; }$/;"	f	class:ot::Dns::OptRecord	typeref:typename:void
SetVersion	core/thread/neighbor.hpp	/^    void SetVersion(uint16_t aVersion) { mVersion = aVersion; }$/;"	f	class:ot::Neighbor	typeref:typename:void
SetVersionIhl	core/net/ip4_types.hpp	/^    void SetVersionIhl(uint8_t aVersionIhl) { mVersIhl = aVersionIhl; }$/;"	f	class:ot::Ip4::Header	typeref:typename:void
SetWaitingForMessageUpdate	core/thread/indirect_sender.hpp	/^        void SetWaitingForMessageUpdate(bool aNeedsUpdate) { mWaitingForMessageUpdate = aNeedsUp/;"	f	class:ot::IndirectSender::ChildInfo	typeref:typename:void
SetWeight	core/net/dns_types.hpp	/^    void SetWeight(uint16_t aWeight) { mWeight = BigEndian::HostSwap16(aWeight); }$/;"	f	class:ot::Dns::SrvRecord	typeref:typename:void
SetWeighting	core/thread/mle_types.hpp	/^    void SetWeighting(uint8_t aWeighting) { mWeighting = aWeighting; }$/;"	f	class:ot::Mle::LeaderData	typeref:typename:void
SetWindow	core/utils/jam_detector.cpp	/^Error JamDetector::SetWindow(uint8_t aWindow)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:Error
SetXtalThreshold	core/thread/mle_tlvs.hpp	/^    void SetXtalThreshold(uint16_t aXtalThreshold) { mXtalThreshold = BigEndian::HostSwap16(aXta/;"	f	class:ot::Mle::TimeParameterTlv	typeref:typename:void
SetXtalThreshold	core/thread/time_sync_service.hpp	/^    void SetXtalThreshold(uint16_t aXtalThreshold) { mXtalThreshold = aXtalThreshold; }$/;"	f	class:ot::TimeSync	typeref:typename:void
SetZoneRecordCount	core/net/dns_types.hpp	/^    void SetZoneRecordCount(uint16_t aCount) { SetQuestionCount(aCount); }$/;"	f	class:ot::Dns::UpdateHeader	typeref:typename:void
Settings	core/common/message.cpp	/^Message::Settings::Settings(LinkSecurityMode aSecurityMode, Priority aPriority)$/;"	f	class:ot::Message::Settings
Settings	core/common/message.hpp	/^        explicit Settings(Priority aPriority)$/;"	f	class:ot::Message::Settings
Settings	core/common/settings.hpp	/^    explicit Settings(Instance &aInstance)$/;"	f	class:ot::Settings
SettingsBase	core/common/settings.hpp	/^    explicit SettingsBase(Instance &aInstance)$/;"	f	class:ot::SettingsBase
SettingsDriver	core/common/settings_driver.hpp	/^    explicit SettingsDriver(Instance &aInstance)$/;"	f	class:ot::SettingsDriver
Setup	core/meshcop/secure_transport.cpp	/^Error SecureTransport::Setup(bool aClient)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:Error
SetupGpioEvent	posix/platform/spi_interface.cpp	/^int SpiInterface::SetupGpioEvent(int         aFd,$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:int
SetupGpioHandle	posix/platform/spi_interface.cpp	/^int SpiInterface::SetupGpioHandle(int aFd, uint8_t aLine, uint32_t aHandleFlags, const char *aLa/;"	f	class:ot::Posix::SpiInterface	typeref:typename:int
Sha256	core/crypto/sha256.cpp	/^Sha256::Sha256(void)$/;"	f	class:ot::Crypto::Sha256
SharedCallback	core/net/mdns.hpp	/^            explicit SharedCallback(AddressCallback aCallback) { mAddress = aCallback; }$/;"	f	union:ot::Dns::Multicast::Core::ResultCallback::SharedCallback
SharedCallback	core/net/mdns.hpp	/^            explicit SharedCallback(BrowseCallback aCallback) { mBrowse = aCallback; }$/;"	f	union:ot::Dns::Multicast::Core::ResultCallback::SharedCallback
SharedCallback	core/net/mdns.hpp	/^            explicit SharedCallback(SrvCallback aCallback) { mSrv = aCallback; }$/;"	f	union:ot::Dns::Multicast::Core::ResultCallback::SharedCallback
SharedCallback	core/net/mdns.hpp	/^            explicit SharedCallback(TxtCallback aCallback) { mTxt = aCallback; }$/;"	f	union:ot::Dns::Multicast::Core::ResultCallback::SharedCallback
SharedEntry	core/border_router/routing_manager.hpp	/^            SharedEntry(void) { mNext = nullptr; }$/;"	f	union:ot::BorderRouter::RoutingManager::RxRaTracker::SharedEntry
ShouldAdvertiseLocalAsRio	core/border_router/routing_manager.cpp	/^bool RoutingManager::OmrPrefixManager::ShouldAdvertiseLocalAsRio(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:bool
ShouldAllowZeroHopLimit	core/net/socket.hpp	/^    bool ShouldAllowZeroHopLimit(void) const { return mAllowZeroHopLimit; }$/;"	f	class:ot::Ip6::MessageInfo	typeref:typename:bool
ShouldAnswerNsec	core/net/mdns.cpp	/^bool Core::Entry::ShouldAnswerNsec(TimeMilli aNow) const { return mMulticastNsecPending && (mNse/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:bool
ShouldAppendInAdditionalDataSection	core/net/mdns.hpp	/^        bool ShouldAppendInAdditionalDataSection(void) const { return (mAppendState == kToAppend/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
ShouldAppendTo	core/net/mdns.cpp	/^bool Core::RecordInfo::ShouldAppendTo(TxMessage &aResponse, TimeMilli aNow) const$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:bool
ShouldAttemptChannelChange	core/utils/channel_manager.cpp	/^bool ChannelManager::ShouldAttemptChannelChange(void)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:bool
ShouldClearAppendStateOnReinit	core/net/mdns.cpp	/^bool Core::TxMessage::ShouldClearAppendStateOnReinit(const Entry &aEntry) const$/;"	f	class:ot::Dns::Multicast::Core::TxMessage	typeref:typename:bool
ShouldDeferHostSend	ncp/ncp_base.cpp	/^bool NcpBase::ShouldDeferHostSend(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:bool
ShouldDelete	core/net/mdns.cpp	/^bool Core::CacheEntry::ShouldDelete(TimeMilli aNow) const { return !mIsActive && (mDeleteTime <=/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:bool
ShouldDowngrade	core/thread/mle_router.cpp	/^bool MleRouter::ShouldDowngrade(uint8_t aNeighborId, const RouteTlv &aRouteTlv) const$/;"	f	class:ot::Mle::MleRouter	typeref:typename:bool
ShouldDrop	core/thread/mesh_forwarder.hpp	/^            bool ShouldDrop(void) const { return mShouldDrop; }$/;"	f	class:ot::MeshForwarder::FragmentPriorityList::Entry	typeref:typename:bool
ShouldEscape	posix/client.cpp	/^static bool ShouldEscape(char aChar)$/;"	f	namespace:__anon7e280f770111	typeref:typename:bool	file:
ShouldExpire	core/net/mdns.cpp	/^bool Core::CacheRecordInfo::ShouldExpire(TimeMilli aNow) const { return IsPresent() && (GetExpir/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:bool
ShouldForwardDuaToBackbone	core/backbone_router/bbr_manager.cpp	/^bool Manager::ShouldForwardDuaToBackbone(const Ip6::Address &aAddress)$/;"	f	class:ot::BackboneRouter::Manager	typeref:typename:bool
ShouldForwardToUpstream	core/net/dnssd_server.cpp	/^bool Server::ShouldForwardToUpstream(const Request &aRequest)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:bool
ShouldHandleAckTimeout	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleAckTimeout(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleCsmaBackOff	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleCsmaBackOff(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleEchoRequest	core/net/icmp6.cpp	/^bool Icmp::ShouldHandleEchoRequest(const MessageInfo &aMessageInfo)$/;"	f	class:ot::Ip6::Icmp	typeref:typename:bool
ShouldHandleEnergyScan	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleEnergyScan(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleRetries	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleRetries(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleTransitionToSleep	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleTransitionToSleep(void) const { return (mRxOnWhenIdle || !RadioSupports/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleTransmitSecurity	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleTransmitSecurity(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHandleTransmitTargetTime	core/mac/sub_mac.cpp	/^bool SubMac::ShouldHandleTransmitTargetTime(void) const$/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
ShouldHostAutoAddressRegister	core/net/srp_client.cpp	/^bool Client::ShouldHostAutoAddressRegister(const Ip6::Netif::UnicastAddress &aUnicastAddress) co/;"	f	class:ot::Srp::Client	typeref:typename:bool
ShouldPublishUlaRoute	core/border_router/routing_manager.cpp	/^bool RoutingManager::OnLinkPrefixManager::ShouldPublishUlaRoute(void) const$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:bool
ShouldQuery	core/net/mdns.cpp	/^bool Core::CacheEntry::ShouldQuery(TimeMilli aNow) { return mQueryPending && (mNextQueryTime <= /;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:bool
ShouldRenewEarly	core/net/srp_client.cpp	/^bool Client::ShouldRenewEarly(const Service &aService) const$/;"	f	class:ot::Srp::Client	typeref:typename:bool
ShouldSendBeacon	core/mac/mac.cpp	/^bool Mac::ShouldSendBeacon(void) const$/;"	f	class:ot::Mac::Mac	typeref:typename:bool
ShouldStartInitialQueries	core/net/mdns.cpp	/^bool Core::AddrCache::ShouldStartInitialQueries(void) const$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:bool
ShouldStartInitialQueries	core/net/mdns.cpp	/^bool Core::ServiceCache::ShouldStartInitialQueries(void) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:bool
ShouldSuppressKnownAnswer	core/net/mdns.cpp	/^bool Core::RxMessage::ShouldSuppressKnownAnswer(const Name         &aServiceType,$/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
ShouldSuppressKnownAnswer	core/net/mdns.cpp	/^bool Core::RxMessage::ShouldSuppressKnownAnswer(const Question &aQuestion, const ServiceType &aS/;"	f	class:ot::Dns::Multicast::Core::RxMessage	typeref:typename:bool
ShouldSuppressKnownAnswer	core/net/mdns.cpp	/^bool Core::ServiceEntry::ShouldSuppressKnownAnswer(uint32_t aTtl, const char *aSubLabel) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:bool
ShouldSuppressKnownAnswer	core/net/mdns.cpp	/^bool Core::ServiceType::ShouldSuppressKnownAnswer(uint32_t aTtl) const$/;"	f	class:ot::Dns::Multicast::Core::ServiceType	typeref:typename:bool
ShouldUpdateHostAutoAddresses	core/net/srp_client.cpp	/^bool Client::ShouldUpdateHostAutoAddresses(void) const$/;"	f	class:ot::Srp::Client	typeref:typename:bool
ShouldUseNativeMdns	core/net/dnssd.hpp	/^    bool ShouldUseNativeMdns(void) const { return mUseNativeMdns; }$/;"	f	class:ot::Dnssd	typeref:typename:bool
ShouldUsePlatformUdp	core/net/udp6.cpp	/^bool Udp::ShouldUsePlatformUdp(const Udp::SocketHandle &aSocket) const$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
ShouldUsePlatformUdp	core/net/udp6.cpp	/^bool Udp::ShouldUsePlatformUdp(uint16_t aPort) const$/;"	f	class:ot::Ip6::Udp	typeref:typename:bool
ShouldUseShortLeaseOption	core/net/srp_server.hpp	/^        bool  ShouldUseShortLeaseOption(void) const { return mUseShortLeaseOption; }$/;"	f	class:ot::Srp::Server::Host	typeref:typename:bool
ShouldWakeHost	ncp/ncp_base.cpp	/^bool NcpBase::ShouldWakeHost(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:bool
SiftHeapElemDown	core/backbone_router/multicast_listeners_table.cpp	/^bool MulticastListenersTable::SiftHeapElemDown(uint16_t aIndex)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:bool
SiftHeapElemUp	core/backbone_router/multicast_listeners_table.cpp	/^void MulticastListenersTable::SiftHeapElemUp(uint16_t aIndex)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable	typeref:typename:void
Sign	core/crypto/ecdsa.hpp	/^        Error Sign(const Sha256::Hash &aHash, Signature &aSignature) const$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPair	typeref:typename:Error
Sign	core/crypto/ecdsa.hpp	/^        Error Sign(const Sha256::Hash &aHash, Signature &aSignature) const$/;"	f	class:ot::Crypto::Ecdsa::P256::KeyPairAsRef	typeref:typename:Error
Signal	core/common/notifier.cpp	/^void Notifier::Signal(Event aEvent)$/;"	f	class:ot::Notifier	typeref:typename:void
Signal	core/thread/neighbor_table.cpp	/^void NeighborTable::Signal(Event aEvent, const Neighbor &aNeighbor)$/;"	f	class:ot::NeighborTable	typeref:typename:void
SignalAdvCompleted	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::SignalAdvCompleted(AdvInfo &aAdvInfo)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
SignalAnyStateChange	core/net/dns_dso.cpp	/^void Dso::Connection::SignalAnyStateChange(void)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:void
SignalDatasetChange	core/meshcop/dataset_manager.cpp	/^void DatasetManager::SignalDatasetChange(void) const$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SignalFrameCounterUsed	core/mac/sub_mac.cpp	/^void SubMac::SignalFrameCounterUsed(uint32_t aFrameCounter, uint8_t aKeyId)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SignalFrameCounterUsedOnTxDone	core/mac/sub_mac.cpp	/^void SubMac::SignalFrameCounterUsedOnTxDone(const TxFrame &aFrame)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
SignalIfFirst	core/common/notifier.cpp	/^void Notifier::SignalIfFirst(Event aEvent)$/;"	f	class:ot::Notifier	typeref:typename:void
SignalInstanceInit	core/instance/extension_example.cpp	/^void ExtensionBase::SignalInstanceInit(void)$/;"	f	class:ot::Extension::ExtensionBase	typeref:typename:void
SignalJoinerEvent	core/meshcop/commissioner.cpp	/^void Commissioner::SignalJoinerEvent(JoinerEvent aEvent, const Joiner *aJoiner) const$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:void
SignalMulticastAddressChange	core/net/netif.cpp	/^void Netif::SignalMulticastAddressChange(AddressEvent aEvent, const MulticastAddress &aAddress, /;"	f	class:ot::Ip6::Netif	typeref:typename:void
SignalMulticastAddressesChange	core/net/netif.cpp	/^void Netif::SignalMulticastAddressesChange(AddressEvent            aEvent,$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SignalNcpInit	core/instance/extension_example.cpp	/^void ExtensionBase::SignalNcpInit(Ncp::NcpBase &aNcpBase)$/;"	f	class:ot::Extension::ExtensionBase	typeref:typename:void
SignalNetDataChanged	core/thread/network_data_leader.cpp	/^void Leader::SignalNetDataChanged(void)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
SignalNetworkDataFull	core/thread/network_data_notifier.hpp	/^    void SignalNetworkDataFull(void) { mNetDataFullTask.Post(); }$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
SignalNetworkNameChange	core/meshcop/network_name.cpp	/^Error NetworkNameManager::SignalNetworkNameChange(Error aError)$/;"	f	class:ot::MeshCoP::NetworkNameManager	typeref:typename:Error
SignalServerToCommit	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::AdvInfo::SignalServerToCommit(void)$/;"	f	class:ot::Srp::AdvertisingProxy::AdvInfo	typeref:typename:void
SignalTableChanged	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::SignalTableChanged(void) { mSignalTask.Post(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
SignalTableChanged	core/thread/router_table.cpp	/^void RouterTable::SignalTableChanged(void) { mChangedTask.Post(); }$/;"	f	class:ot::RouterTable	typeref:typename:void
SignalUnicastAddressChange	core/net/netif.cpp	/^void Netif::SignalUnicastAddressChange(AddressEvent aEvent, const UnicastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SizeForLength	core/net/ip6_address.hpp	/^    static uint8_t SizeForLength(uint8_t aLength) { return BytesForBitSize(aLength); }$/;"	f	class:ot::Ip6::Prefix	typeref:typename:uint8_t
SkipAddrFieldIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::SkipAddrFieldIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
SkipOver	core/common/frame_data.cpp	/^void FrameData::SkipOver(uint16_t aLength) { Init(GetBytes() + aLength, GetLength() - aLength); /;"	f	class:ot::FrameData	typeref:typename:void
SkipRecord	core/net/dns_types.cpp	/^Error ResourceRecord::SkipRecord(const Message &aMessage, uint16_t &aOffset) const$/;"	f	class:ot::Dns::ResourceRecord	typeref:typename:Error
SkipSecurityHeaderIndex	core/mac/mac_frame.cpp	/^uint8_t Frame::SkipSecurityHeaderIndex(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:uint8_t
Slaac	core/utils/slaac_address.cpp	/^Slaac::Slaac(Instance &aInstance)$/;"	f	class:ot::Utils::Slaac
Sleep	core/mac/mac_links.hpp	/^    void Sleep(void)$/;"	f	class:ot::Mac::Links	typeref:typename:void
Sleep	core/mac/sub_mac.cpp	/^Error SubMac::Sleep(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:Error
Sleep	core/radio/radio.hpp	/^inline Error Radio::Sleep(void) { return kErrorNone; }$/;"	f	class:ot::Radio	typeref:typename:Error
Sleep	core/radio/radio.hpp	/^inline Error Radio::Sleep(void)$/;"	f	class:ot::Radio	typeref:typename:Error
Sleep	core/radio/trel_link.cpp	/^void Link::Sleep(void)$/;"	f	class:ot::Trel::Link	typeref:typename:void
Sleep	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Sleep(void)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
Snprintf	lib/spinel/logger.cpp	/^uint32_t Logger::Snprintf(char *aDest, uint32_t aSize, const char *aFormat, ...)$/;"	f	class:ot::Spinel::Logger	typeref:typename:uint32_t
SockAddr	core/net/socket.hpp	/^    SockAddr(const Address &aAddress, uint16_t aPort)$/;"	f	class:ot::Ip6::SockAddr
SockAddr	core/net/socket.hpp	/^    SockAddr(void) { Clear(); }$/;"	f	class:ot::Ip6::SockAddr
SockAddr	core/net/socket.hpp	/^    explicit SockAddr(uint16_t aPort)$/;"	f	class:ot::Ip6::SockAddr
Socket	core/net/udp6.cpp	/^Udp::Socket::Socket(Instance &aInstance)$/;"	f	class:ot::Ip6::Udp::Socket
SocketWithCloseExec	posix/platform/misc.cpp	/^int SocketWithCloseExec(int aDomain, int aType, int aProtocol, SocketBlockOption aBlockOption)$/;"	f	typeref:typename:int
Solicit	core/net/dhcp6_client.cpp	/^void Client::Solicit(uint16_t aRloc16)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
SourceMatchController	core/thread/src_match_controller.cpp	/^SourceMatchController::SourceMatchController(Instance &aInstance)$/;"	f	class:ot::SourceMatchController
SpiFrame	lib/spinel/spi_frame.hpp	/^    explicit SpiFrame(uint8_t *aBuffer)$/;"	f	class:ot::Spinel::SpiFrame
SpiInterface	posix/platform/spi_interface.cpp	/^SpiInterface::SpiInterface(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::SpiInterface
SpiTransactionComplete	ncp/ncp_spi.cpp	/^bool NcpSpi::SpiTransactionComplete(uint8_t *aOutputBuf,$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:bool
SpiTransactionComplete	ncp/ncp_spi.cpp	/^bool NcpSpi::SpiTransactionComplete(void    *aContext,$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:bool
SpiTransactionProcess	ncp/ncp_spi.cpp	/^void NcpSpi::SpiTransactionProcess(void *aContext) { reinterpret_cast<NcpSpi *>(aContext)->SpiTr/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
SpiTransactionProcess	ncp/ncp_spi.cpp	/^void NcpSpi::SpiTransactionProcess(void)$/;"	f	class:ot::Ncp::NcpSpi	typeref:typename:void
SpinelDriver	lib/spinel/spinel_driver.cpp	/^SpinelDriver::SpinelDriver(void)$/;"	f	class:ot::Spinel::SpinelDriver
SpinelManager	posix/platform/spinel_manager.cpp	/^SpinelManager::SpinelManager(void)$/;"	f	class:ot::Posix::SpinelManager
SpinelStatusToOtError	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::SpinelStatusToOtError(spinel_status_t aStatus)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
SrpClient	cli/cli_srp_client.cpp	/^SrpClient::SrpClient(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::SrpClient
SrpClientBuffers	core/utils/srp_client_buffers.cpp	/^SrpClientBuffers::SrpClientBuffers(Instance &aInstance)$/;"	f	class:ot::Utils::SrpClientBuffers
SrpClientErrorToSpinelError	ncp/ncp_base_mtd.cpp	/^static spinel_srp_client_error_t SrpClientErrorToSpinelError(otError aError)$/;"	f	namespace:ot::Ncp	typeref:typename:spinel_srp_client_error_t	file:
SrpClientItemStateToSpinel	ncp/ncp_base_mtd.cpp	/^static spinel_srp_client_item_state_t SrpClientItemStateToSpinel(otSrpClientItemState aItemState/;"	f	namespace:ot::Ncp	typeref:typename:spinel_srp_client_item_state_t	file:
SrpServer	cli/cli_srp_server.hpp	/^    SrpServer(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::SrpServer
Start	core/backbone_router/backbone_tmf.cpp	/^Error BackboneTmfAgent::Start(void)$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:Error
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::Start(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::Start(void) { DetermineFavoredPrefix(); }$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::Start(void) {}$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::RsSender::Start(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender	typeref:typename:void
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::Start(void) { HandleNetDataChange(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
Start	core/border_router/routing_manager.cpp	/^void RoutingManager::Start(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
Start	core/border_router/routing_manager.hpp	/^        void               Start(void) { StartStop(\/* aStart= *\/ true); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
Start	core/border_router/routing_manager.hpp	/^        void Start(void) { Evaluate(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
Start	core/coap/coap.cpp	/^Error Coap::Start(uint16_t aPort, Ip6::NetifIdentifier aNetifIdentifier)$/;"	f	class:ot::Coap::Coap	typeref:typename:Error
Start	core/coap/coap_secure.cpp	/^Error CoapSecure::Start(MeshCoP::SecureTransport::TransportCallback aCallback, void *aContext)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Start	core/coap/coap_secure.cpp	/^Error CoapSecure::Start(uint16_t aPort) { return Start(aPort, \/* aMaxAttempts *\/ 0, nullptr, n/;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Start	core/coap/coap_secure.cpp	/^Error CoapSecure::Start(uint16_t aPort, uint16_t aMaxAttempts, AutoStopCallback aCallback, void /;"	f	class:ot::Coap::CoapSecure	typeref:typename:Error
Start	core/common/timer.cpp	/^void TimerMicro::Start(uint32_t aDelay) { StartAt(GetNow(), aDelay); }$/;"	f	class:ot::TimerMicro	typeref:typename:void
Start	core/common/timer.cpp	/^void TimerMilli::Start(uint32_t aDelay) { StartAt(GetNow(), aDelay); }$/;"	f	class:ot::TimerMilli	typeref:typename:void
Start	core/common/trickle_timer.cpp	/^void TrickleTimer::Start(Mode aMode, uint32_t aIntervalMin, uint32_t aIntervalMax, uint16_t aRed/;"	f	class:ot::TrickleTimer	typeref:typename:void
Start	core/crypto/hmac_sha256.cpp	/^void HmacSha256::Start(const Key &aKey) { SuccessOrAssert(otPlatCryptoHmacSha256Start(&mContext,/;"	f	class:ot::Crypto::HmacSha256	typeref:typename:void
Start	core/crypto/sha256.cpp	/^void Sha256::Start(void) { SuccessOrAssert(otPlatCryptoSha256Start(&mContext)); }$/;"	f	class:ot::Crypto::Sha256	typeref:typename:void
Start	core/meshcop/border_agent.cpp	/^Error BorderAgent::Start(uint16_t aUdpPort)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
Start	core/meshcop/border_agent.cpp	/^Error BorderAgent::Start(uint16_t aUdpPort, const uint8_t *aPsk, uint8_t aPskLength)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:Error
Start	core/meshcop/border_agent.hpp	/^    void Start(void) { IgnoreError(Start(kUdpPort)); }$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
Start	core/meshcop/commissioner.cpp	/^Error Commissioner::Start(StateCallback aStateCallback, JoinerCallback aJoinerCallback, void *aC/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
Start	core/meshcop/joiner.cpp	/^Error Joiner::Start(const char      *aPskd,$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:Error
Start	core/meshcop/joiner_router.cpp	/^void JoinerRouter::Start(void)$/;"	f	class:ot::MeshCoP::JoinerRouter	typeref:typename:void
Start	core/meshcop/tcat_agent.cpp	/^Error TcatAgent::Start(const TcatAgent::VendorInfo &aVendorInfo,$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:Error
Start	core/net/dhcp6_client.cpp	/^void Client::Start(void)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
Start	core/net/dhcp6_server.cpp	/^void Server::Start(void)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
Start	core/net/dns_client.cpp	/^Error Client::Start(void)$/;"	f	class:ot::Dns::Client	typeref:typename:Error
Start	core/net/dnssd_server.cpp	/^Error Server::Start(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:Error
Start	core/net/mdns.cpp	/^Error Core::Start(const BrowserResolverType &aBrowserOrResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
Start	core/net/sntp_client.cpp	/^Error Client::Start(void)$/;"	f	class:ot::Sntp::Client	typeref:typename:Error
Start	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::Start(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
Start	core/net/srp_client.cpp	/^Error Client::Start(const Ip6::SockAddr &aServerSockAddr, Requester aRequester)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
Start	core/net/srp_client.hpp	/^    Error Start(const Ip6::SockAddr &aServerSockAddr) { return Start(aServerSockAddr, kRequester/;"	f	class:ot::Srp::Client	typeref:typename:Error
Start	core/net/srp_server.cpp	/^void Server::Start(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
Start	core/radio/ble_secure.cpp	/^Error BleSecure::Start(ConnectCallback aConnectHandler, ReceiveCallback aReceiveHandler, bool aT/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
Start	core/thread/child_supervision.cpp	/^void SupervisionListener::Start(void) { RestartTimer(); }$/;"	f	class:ot::SupervisionListener	typeref:typename:void
Start	core/thread/indirect_sender.hpp	/^    void Start(void) { mEnabled = true; }$/;"	f	class:ot::IndirectSender	typeref:typename:void
Start	core/thread/key_manager.cpp	/^void KeyManager::Start(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
Start	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::Start(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
Start	core/thread/mle.cpp	/^Error Mle::Start(StartMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
Start	core/thread/mle.hpp	/^    Error Start(void) { return Start(kNormalAttach); }$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
Start	core/thread/network_data_leader_ftd.cpp	/^void Leader::Start(Mle::LeaderStartMode aStartMode)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:void
Start	core/thread/tmf.cpp	/^Error Agent::Start(void) { return Coap::Start(kUdpPort, Ip6::kNetifThread); }$/;"	f	class:ot::Tmf::Agent	typeref:typename:Error
Start	core/utils/channel_monitor.cpp	/^Error ChannelMonitor::Start(void)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:Error
Start	core/utils/jam_detector.cpp	/^Error JamDetector::Start(Handler aHandler, void *aContext)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:Error
Start	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::Start(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
StartAnnouncing	core/net/mdns.cpp	/^void Core::HostEntry::StartAnnouncing(void)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
StartAnnouncing	core/net/mdns.cpp	/^void Core::RecordInfo::StartAnnouncing(void)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
StartAnnouncing	core/net/mdns.cpp	/^void Core::ServiceEntry::StartAnnouncing(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
StartAt	core/common/timer.cpp	/^void TimerMicro::StartAt(TimeMicro aStartTime, uint32_t aDelay)$/;"	f	class:ot::TimerMicro	typeref:typename:void
StartAt	core/common/timer.cpp	/^void TimerMilli::StartAt(TimeMilli aStartTime, uint32_t aDelay)$/;"	f	class:ot::TimerMilli	typeref:typename:void
StartAt	core/common/trickle_timer.hpp	/^    void StartAt(void) {}$/;"	f	class:ot::TrickleTimer	typeref:typename:void
StartAutoSelectTimer	core/utils/channel_manager.cpp	/^void ChannelManager::StartAutoSelectTimer(void)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
StartBrowser	core/net/mdns.cpp	/^Error Core::StartBrowser(const Browser &aBrowser) { return Start<BrowseCache, Browser>(aBrowser)/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StartCsmaBackoff	core/mac/sub_mac.cpp	/^void SubMac::StartCsmaBackoff(void)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
StartDatasetUpdate	core/utils/channel_manager.cpp	/^void ChannelManager::StartDatasetUpdate(void)$/;"	f	class:ot::Utils::ChannelManager	typeref:typename:void
StartDelayTimer	core/meshcop/dataset_manager.cpp	/^void PendingDatasetManager::StartDelayTimer(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
StartDelayTimer	core/meshcop/dataset_manager.cpp	/^void PendingDatasetManager::StartDelayTimer(void)$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
StartInitialQueries	core/net/mdns.cpp	/^void Core::CacheEntry::StartInitialQueries(void)$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
StartIp4AddressResolver	core/net/mdns.cpp	/^Error Core::StartIp4AddressResolver(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StartIp6AddressResolver	core/net/mdns.cpp	/^Error Core::StartIp6AddressResolver(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StartLeader	core/meshcop/dataset_manager_ftd.cpp	/^void ActiveDatasetManager::StartLeader(void) { IgnoreError(GenerateLocal()); }$/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
StartLeader	core/meshcop/dataset_manager_ftd.cpp	/^void ActiveDatasetManager::StartLeader(void) {}$/;"	f	class:ot::MeshCoP::ActiveDatasetManager	typeref:typename:void
StartLeader	core/meshcop/dataset_manager_ftd.cpp	/^void PendingDatasetManager::StartLeader(void) { StartDelayTimer(); }$/;"	f	class:ot::MeshCoP::PendingDatasetManager	typeref:typename:void
StartListening	core/net/dns_dso.cpp	/^void Dso::StartListening(AcceptHandler aAcceptHandler)$/;"	f	class:ot::Dns::Dso	typeref:typename:void
StartNewInterval	core/common/trickle_timer.cpp	/^void TrickleTimer::StartNewInterval(void)$/;"	f	class:ot::TrickleTimer	typeref:typename:void
StartOperation	core/mac/mac.cpp	/^void Mac::StartOperation(Operation aOperation)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
StartPolling	core/mac/data_poll_sender.cpp	/^void DataPollSender::StartPolling(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
StartProbing	core/net/mdns.cpp	/^void Core::Entry::StartProbing(void)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
StartQuery	core/net/dns_client.cpp	/^Error Client::StartQuery(QueryInfo &aInfo, const char *aLabel, const char *aName, QueryType aSec/;"	f	class:ot::Dns::Client	typeref:typename:Error
StartSrvResolver	core/net/mdns.cpp	/^Error Core::StartSrvResolver(const SrvResolver &aResolver) { return Start<SrvCache, SrvResolver>/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StartStop	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::StartStop(bool aStart)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
StartTimeout	core/thread/mle_router.cpp	/^void MleRouter::RouterRoleTransition::StartTimeout(void)$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:void
StartTimer	core/thread/mle.cpp	/^void Mle::ParentSearch::StartTimer(void)$/;"	f	class:ot::Mle::Mle::ParentSearch	typeref:typename:void
StartTimerForBackoff	core/mac/sub_mac.cpp	/^void SubMac::StartTimerForBackoff(uint8_t aBackoffExponent)$/;"	f	class:ot::Mac::SubMac	typeref:typename:void
StartTxtResolver	core/net/mdns.cpp	/^Error Core::StartTxtResolver(const TxtResolver &aResolver) { return Start<TxtCache, TxtResolver>/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StartsWith	core/common/data.hpp	/^    bool StartsWith(const Data &aOtherData) const$/;"	f	class:ot::Data	typeref:typename:bool
StateToString	cli/cli_commissioner.cpp	/^const char *Commissioner::StateToString(otCommissionerState aState)$/;"	f	class:ot::Cli::Commissioner	typeref:typename:const char *
StateToString	core/backbone_router/bbr_leader.cpp	/^const char *Leader::StateToString(State aState)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:const char *
StateToString	core/border_router/routing_manager.cpp	/^const char *RoutingManager::OnLinkPrefixManager::StateToString(State aState)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:const char *
StateToString	core/border_router/routing_manager.cpp	/^const char *RoutingManager::PdPrefixManager::StateToString(State aState)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:const char *
StateToString	core/border_router/routing_manager.cpp	/^const char *RoutingManager::RoutePublisher::StateToString(State aState)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:const char *
StateToString	core/mac/sub_mac.cpp	/^const char *SubMac::StateToString(State aState)$/;"	f	class:ot::Mac::SubMac	typeref:typename:const char *
StateToString	core/meshcop/commissioner.cpp	/^const char *Commissioner::StateToString(State aState)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:const char *
StateToString	core/meshcop/joiner.cpp	/^const char *Joiner::StateToString(State aState)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:const char *
StateToString	core/meshcop/meshcop_tlvs.cpp	/^const char *StateTlv::StateToString(State aState)$/;"	f	class:ot::MeshCoP::StateTlv	typeref:typename:const char *
StateToString	core/meshcop/secure_transport.cpp	/^const char *SecureTransport::StateToString(State aState)$/;"	f	class:ot::MeshCoP::SecureTransport	typeref:typename:const char *
StateToString	core/net/dns_dso.cpp	/^const char *Dso::Connection::StateToString(State aState)$/;"	f	class:ot::Dns::Dso::Connection	typeref:typename:const char *
StateToString	core/net/nat64_translator.cpp	/^const char *StateToString(State aState)$/;"	f	namespace:ot::Nat64	typeref:typename:const char *
StateToString	core/net/srp_client.cpp	/^const char *Client::AutoStart::StateToString(State aState)$/;"	f	class:ot::Srp::Client::AutoStart	typeref:typename:const char *
StateToString	core/net/srp_client.cpp	/^const char *Client::StateToString(State aState)$/;"	f	class:ot::Srp::Client	typeref:typename:const char *
StateToString	core/radio/trel_link.cpp	/^const char *Link::StateToString(State aState)$/;"	f	class:ot::Trel::Link	typeref:typename:const char *
StateToString	core/thread/neighbor.cpp	/^const char *Neighbor::StateToString(State aState)$/;"	f	class:ot::Neighbor	typeref:typename:const char *
StateToString	core/thread/network_data_publisher.cpp	/^const char *Publisher::Entry::StateToString(State aState)$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:const char *
Statistics	core/utils/ping_sender.hpp	/^        Statistics(void) { Clear(); }$/;"	f	struct:ot::Utils::PingSender::Statistics
SteeringDataCheck	core/thread/network_data_leader.cpp	/^Error Leader::SteeringDataCheck(const FilterIndexes &aFilterIndexes) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
SteeringDataCheckJoiner	core/thread/network_data_leader.cpp	/^Error Leader::SteeringDataCheckJoiner(const Mac::ExtAddress &aEui64) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
SteeringDataCheckJoiner	core/thread/network_data_leader.cpp	/^Error Leader::SteeringDataCheckJoiner(const MeshCoP::JoinerDiscerner &aDiscerner) const$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
Stop	cli/cli_coap_secure.cpp	/^void CoapSecure::Stop(void)$/;"	f	class:ot::Cli::CoapSecure	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::Nat64PrefixManager::Stop(void)$/;"	f	class:ot::BorderRouter::RoutingManager::Nat64PrefixManager	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::Stop(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::OnLinkPrefixManager::Stop(void)$/;"	f	class:ot::BorderRouter::RoutingManager::OnLinkPrefixManager	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::RsSender::Stop(void) { mTimer.Stop(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RsSender	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::Stop(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
Stop	core/border_router/routing_manager.cpp	/^void RoutingManager::Stop(void)$/;"	f	class:ot::BorderRouter::RoutingManager	typeref:typename:void
Stop	core/border_router/routing_manager.hpp	/^        void               Stop(void) { StartStop(\/* aStart= *\/ false); }$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
Stop	core/border_router/routing_manager.hpp	/^        void Stop(void) { Unpublish(); }$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
Stop	core/coap/coap.cpp	/^Error Coap::Stop(void)$/;"	f	class:ot::Coap::Coap	typeref:typename:Error
Stop	core/coap/coap_secure.cpp	/^void CoapSecure::Stop(void)$/;"	f	class:ot::Coap::CoapSecure	typeref:typename:void
Stop	core/common/timer.cpp	/^void TimerMicro::Stop(void) { Get<Scheduler>().Remove(*this); }$/;"	f	class:ot::TimerMicro	typeref:typename:void
Stop	core/common/timer.cpp	/^void TimerMilli::Stop(void) { Get<Scheduler>().Remove(*this); }$/;"	f	class:ot::TimerMilli	typeref:typename:void
Stop	core/common/trickle_timer.hpp	/^    void Stop(void) { TimerMilli::Stop(); }$/;"	f	class:ot::TrickleTimer	typeref:typename:void
Stop	core/meshcop/border_agent.cpp	/^void BorderAgent::Stop(void)$/;"	f	class:ot::MeshCoP::BorderAgent	typeref:typename:void
Stop	core/meshcop/commissioner.cpp	/^Error Commissioner::Stop(ResignMode aResignMode)$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
Stop	core/meshcop/commissioner.hpp	/^    Error Stop(void) { return Stop(kSendKeepAliveToResign); }$/;"	f	class:ot::MeshCoP::Commissioner	typeref:typename:Error
Stop	core/meshcop/joiner.cpp	/^void Joiner::Stop(void)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
Stop	core/meshcop/tcat_agent.cpp	/^void TcatAgent::Stop(void)$/;"	f	class:ot::MeshCoP::TcatAgent	typeref:typename:void
Stop	core/net/dhcp6_client.cpp	/^void Client::Stop(void)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
Stop	core/net/dhcp6_server.cpp	/^void Server::Stop(void) { IgnoreError(mSocket.Close()); }$/;"	f	class:ot::Dhcp6::Server	typeref:typename:void
Stop	core/net/dns_client.cpp	/^void Client::Stop(void)$/;"	f	class:ot::Dns::Client	typeref:typename:void
Stop	core/net/dnssd_server.cpp	/^void Server::Stop(void)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
Stop	core/net/mdns.cpp	/^Error Core::Stop(const BrowserResolverType &aBrowserOrResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
Stop	core/net/sntp_client.cpp	/^Error Client::Stop(void)$/;"	f	class:ot::Sntp::Client	typeref:typename:Error
Stop	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::Stop(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
Stop	core/net/srp_client.cpp	/^void Client::Stop(Requester aRequester, StopMode aMode)$/;"	f	class:ot::Srp::Client	typeref:typename:void
Stop	core/net/srp_client.hpp	/^    void Stop(void) { Stop(kRequesterUser, kResetRetryInterval); }$/;"	f	class:ot::Srp::Client	typeref:typename:void
Stop	core/net/srp_server.cpp	/^void Server::Stop(void)$/;"	f	class:ot::Srp::Server	typeref:typename:void
Stop	core/radio/ble_secure.cpp	/^void BleSecure::Stop(void)$/;"	f	class:ot::Ble::BleSecure	typeref:typename:void
Stop	core/thread/announce_sender.cpp	/^void AnnounceSender::Stop(void)$/;"	f	class:ot::AnnounceSender	typeref:typename:void
Stop	core/thread/announce_sender.cpp	/^void AnnounceSenderBase::Stop(void)$/;"	f	class:ot::AnnounceSenderBase	typeref:typename:void
Stop	core/thread/child_supervision.cpp	/^void SupervisionListener::Stop(void) { mTimer.Stop(); }$/;"	f	class:ot::SupervisionListener	typeref:typename:void
Stop	core/thread/discover_scanner.hpp	/^    void          Stop(void) { HandleDiscoverComplete(); }$/;"	f	class:ot::Mle::DiscoverScanner	typeref:typename:void
Stop	core/thread/indirect_sender.cpp	/^void IndirectSender::Stop(void)$/;"	f	class:ot::IndirectSender	typeref:typename:void
Stop	core/thread/key_manager.cpp	/^void KeyManager::Stop(void) { mKeyRotationTimer.Stop(); }$/;"	f	class:ot::KeyManager	typeref:typename:void
Stop	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::Stop(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
Stop	core/thread/mle.cpp	/^void Mle::Stop(StopMode aMode)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
Stop	core/thread/mle.hpp	/^    void Stop(void) { Stop(kUpdateNetworkDatasets); }$/;"	f	class:ot::Mle::Mle	typeref:typename:void
Stop	core/utils/channel_monitor.cpp	/^Error ChannelMonitor::Stop(void)$/;"	f	class:ot::Utils::ChannelMonitor	typeref:typename:Error
Stop	core/utils/jam_detector.cpp	/^Error JamDetector::Stop(void)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:Error
Stop	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::Stop(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
Stop	core/utils/ping_sender.cpp	/^void PingSender::Stop(void)$/;"	f	class:ot::Utils::PingSender	typeref:typename:void
StopAdvertiseTrickleTimer	core/thread/mle_router.cpp	/^void MleRouter::StopAdvertiseTrickleTimer(void) { mAdvertiseTrickleTimer.Stop(); }$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
StopBrowser	core/net/mdns.cpp	/^Error Core::StopBrowser(const Browser &aBrowser) { return Stop<BrowseCache, Browser>(aBrowser); /;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StopFastPolls	core/mac/data_poll_sender.cpp	/^void DataPollSender::StopFastPolls(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
StopInitialQueries	core/net/mdns.hpp	/^        void  StopInitialQueries(void) { mInitalQueries = kNumberOfInitalQueries; }$/;"	f	class:ot::Dns::Multicast::Core::CacheEntry	typeref:typename:void
StopIp4AddressResolver	core/net/mdns.cpp	/^Error Core::StopIp4AddressResolver(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StopIp6AddressResolver	core/net/mdns.cpp	/^Error Core::StopIp6AddressResolver(const AddressResolver &aResolver)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StopLeader	core/thread/mle_router.cpp	/^void MleRouter::StopLeader(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
StopListening	core/net/dns_dso.cpp	/^void Dso::StopListening(void) { otPlatDsoEnableListening(&GetInstance(), false); }$/;"	f	class:ot::Dns::Dso	typeref:typename:void
StopListening	core/net/tcp6.cpp	/^Error Tcp::Listener::StopListening(void)$/;"	f	class:ot::Ip6::Tcp::Listener	typeref:typename:Error
StopPolling	core/mac/data_poll_sender.cpp	/^void DataPollSender::StopPolling(void)$/;"	f	class:ot::DataPollSender	typeref:typename:void
StopSrvResolver	core/net/mdns.cpp	/^Error Core::StopSrvResolver(const SrvResolver &aResolver) { return Stop<SrvCache, SrvResolver>(a/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
StopTimeout	core/thread/mle_router.hpp	/^        void    StopTimeout(void) { mTimeout = 0; }$/;"	f	class:ot::Mle::MleRouter::RouterRoleTransition	typeref:typename:void
StopTxtResolver	core/net/mdns.cpp	/^Error Core::StopTxtResolver(const TxtResolver &aResolver) { return Stop<TxtCache, TxtResolver>(a/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
Store	core/thread/dua_manager.cpp	/^Error DuaManager::Store(void)$/;"	f	class:ot::DuaManager	typeref:typename:Error
Store	core/thread/mle.cpp	/^Error Mle::Store(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:Error
StoreChild	core/thread/child_table.cpp	/^Error ChildTable::StoreChild(const Child &aChild)$/;"	f	class:ot::ChildTable	typeref:typename:Error
StoreNetworkKey	core/thread/key_manager.cpp	/^void KeyManager::StoreNetworkKey(const NetworkKey &aNetworkKey, bool aOverWriteExisting)$/;"	f	class:ot::KeyManager	typeref:typename:void
StorePskc	core/thread/key_manager.cpp	/^void KeyManager::StorePskc(const Pskc &aPskc)$/;"	f	class:ot::KeyManager	typeref:typename:void
StreamWrite	ncp/ncp_base.cpp	/^otError NcpBase::StreamWrite(int aStreamId, const uint8_t *aDataPtr, int aDataLen)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
String	core/common/heap_string.hpp	/^    String(String &&aString)$/;"	f	class:ot::Heap::String
String	core/common/heap_string.hpp	/^    String(void)$/;"	f	class:ot::Heap::String
String	core/common/string.hpp	/^    String(void)$/;"	f	class:ot::String
StringConvertToLowercase	core/common/string.cpp	/^void StringConvertToLowercase(char *aString)$/;"	f	namespace:ot	typeref:typename:void
StringConvertToUppercase	core/common/string.cpp	/^void StringConvertToUppercase(char *aString)$/;"	f	namespace:ot	typeref:typename:void
StringCopy	core/common/string.cpp	/^Error StringCopy(char *aTargetBuffer, uint16_t aTargetSize, const char *aSource, StringEncodingC/;"	f	namespace:ot	typeref:typename:Error
StringCopy	core/common/string.hpp	/^Error StringCopy(char (&aTargetBuffer)[kSize],$/;"	f	namespace:ot	typeref:typename:Error
StringEndsWith	core/common/string.cpp	/^bool StringEndsWith(const char *aString, char aChar)$/;"	f	namespace:ot	typeref:typename:bool
StringEndsWith	core/common/string.cpp	/^bool StringEndsWith(const char *aString, const char *aSubString, StringMatchMode aMode)$/;"	f	namespace:ot	typeref:typename:bool
StringFind	core/common/string.cpp	/^const char *StringFind(const char *aString, char aChar)$/;"	f	namespace:ot	typeref:typename:const char *
StringFind	core/common/string.cpp	/^const char *StringFind(const char *aString, const char *aSubString, StringMatchMode aMode)$/;"	f	namespace:ot	typeref:typename:const char *
StringLength	core/common/string.cpp	/^uint16_t StringLength(const char *aString, uint16_t aMaxLength)$/;"	f	namespace:ot	typeref:typename:uint16_t
StringMatch	core/common/string.cpp	/^bool StringMatch(const char *aFirstString, const char *aSecondString, StringMatchMode aMode)$/;"	f	namespace:ot	typeref:typename:bool
StringParseUint8	core/common/string.cpp	/^Error StringParseUint8(const char *&aString, uint8_t &aUint8)$/;"	f	namespace:ot	typeref:typename:Error
StringParseUint8	core/common/string.cpp	/^Error StringParseUint8(const char *&aString, uint8_t &aUint8, uint8_t aMaxValue)$/;"	f	namespace:ot	typeref:typename:Error
StringStartsWith	core/common/string.cpp	/^bool StringStartsWith(const char *aString, const char *aPrefixString, StringMatchMode aMode)$/;"	f	namespace:ot	typeref:typename:bool
StringToRegionCode	posix/platform/configuration.hpp	/^    uint16_t StringToRegionCode(const char *aString) const$/;"	f	class:ot::Posix::Configuration	typeref:typename:uint16_t
StringWriter	core/common/string.cpp	/^StringWriter::StringWriter(char *aBuffer, uint16_t aSize)$/;"	f	class:ot::StringWriter
Stringify	cli/cli_utils.hpp	/^    static const char *Stringify(EnumType aEnum,$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
Strip	posix/platform/config_file.cpp	/^void ConfigFile::Strip(char *aString) const$/;"	f	class:ot::Posix::ConfigFile	typeref:typename:void
StripName	core/net/dns_types.hpp	/^    template <uint16_t kNameBufferSize> static Error StripName(char (&aName)[kNameBufferSize], c/;"	f	class:ot::Dns::Name	typeref:typename:Error
SubMac	core/mac/sub_mac.cpp	/^SubMac::SubMac(Instance &aInstance)$/;"	f	class:ot::Mac::SubMac
Subject	core/thread/link_metrics.cpp	/^Subject::Subject(Instance &aInstance)$/;"	f	class:ot::LinkMetrics::Subject
SubnetMask	core/net/ip4_types.hpp	/^    uint32_t SubnetMask(void) const { return ~HostMask(); }$/;"	f	class:ot::Ip4::Cidr	typeref:typename:uint32_t
SubscribeAllNodesMulticast	core/net/netif.cpp	/^void Netif::SubscribeAllNodesMulticast(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SubscribeAllRoutersMulticast	core/net/netif.cpp	/^void Netif::SubscribeAllRoutersMulticast(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SubscribeExternalMulticast	core/net/netif.cpp	/^Error Netif::SubscribeExternalMulticast(const Address &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:Error
SubscribeMulticast	core/backbone_router/backbone_tmf.cpp	/^void BackboneTmfAgent::SubscribeMulticast(const Ip6::Address &aAddress)$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:void
SubscribeMulticast	core/net/netif.cpp	/^void Netif::SubscribeMulticast(MulticastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
SupervisionListener	core/thread/child_supervision.cpp	/^SupervisionListener::SupervisionListener(Instance &aInstance)$/;"	f	class:ot::SupervisionListener
SupportsChannelPage	core/radio/radio.hpp	/^    static constexpr bool SupportsChannelPage(uint8_t aChannelPage)$/;"	f	class:ot::Radio	typeref:typename:bool
Swap	core/utils/flash.cpp	/^void Flash::Swap(void)$/;"	f	class:ot::Flash	typeref:typename:void
Swap16	core/common/encoding.hpp	/^inline uint16_t Swap16(uint16_t v) { return (((v & 0x00ffU) << 8) & 0xff00) | (((v & 0xff00U) >>/;"	f	namespace:ot	typeref:typename:uint16_t
Swap32	core/common/encoding.hpp	/^inline uint32_t Swap32(uint32_t v)$/;"	f	namespace:ot	typeref:typename:uint32_t
Swap64	core/common/encoding.hpp	/^inline uint64_t Swap64(uint64_t v)$/;"	f	namespace:ot	typeref:typename:uint64_t
SwapIpSets	posix/platform/firewall.cpp	/^inline otError IpSetManager::SwapIpSets(const char *aSetName1, const char *aSetName2)$/;"	f	class:ot::Posix::IpSetManager	typeref:typename:otError
SyncLocalWithLeader	core/meshcop/dataset_manager.cpp	/^void DatasetManager::SyncLocalWithLeader(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::DatasetManager	typeref:typename:void
SynchronizeChildNetworkData	core/thread/mle_router.cpp	/^void MleRouter::SynchronizeChildNetworkData(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
SynchronizeServerData	core/thread/network_data_notifier.cpp	/^void Notifier::SynchronizeServerData(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:void
SynthesizeFromCidrAndHost	core/net/ip4_types.cpp	/^void Address::SynthesizeFromCidrAndHost(const Cidr &aCidr, const uint32_t aHost)$/;"	f	class:ot::Ip4::Address	typeref:typename:void
SynthesizeFromIp4Address	core/net/ip6_address.cpp	/^void Address::SynthesizeFromIp4Address(const Prefix &aPrefix, const Ip4::Address &aIp4Address)$/;"	f	class:ot::Ip6::Address	typeref:typename:void
TakeFrom	core/common/heap_array.hpp	/^    void TakeFrom(Array &&aOther)$/;"	f	class:ot::Heap::Array	typeref:typename:void
TakeFrom	core/common/heap_data.cpp	/^void Data::TakeFrom(Data &aData)$/;"	f	class:ot::Heap::Data	typeref:typename:void
TakeOrCopyMessagePtr	core/net/ip6.cpp	/^Error Ip6::TakeOrCopyMessagePtr(OwnedPtr<Message> &aTargetPtr,$/;"	f	class:ot::Ip6::Ip6	typeref:typename:Error
Tasklet	core/common/tasklet.hpp	/^    Tasklet(Instance &aInstance, Handler aHandler)$/;"	f	class:ot::Tasklet
TaskletContext	core/common/tasklet.hpp	/^    TaskletContext(Instance &aInstance, Handler aHandler, void *aContext)$/;"	f	class:ot::TaskletContext
TaskletIn	core/common/tasklet.hpp	/^    explicit TaskletIn(Instance &aInstance)$/;"	f	class:ot::TaskletIn
Tcat	cli/cli_tcat.hpp	/^    Tcat(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::Tcat
TcatAgent	core/meshcop/tcat_agent.cpp	/^TcatAgent::TcatAgent(Instance &aInstance)$/;"	f	class:ot::MeshCoP::TcatAgent
TcatStart	core/radio/ble_secure.cpp	/^Error BleSecure::TcatStart(const MeshCoP::TcatAgent::VendorInfo &aVendorInfo,$/;"	f	class:ot::Ble::BleSecure	typeref:typename:Error
Tcp	core/net/tcp6.cpp	/^Tcp::Tcp(Instance &aInstance)$/;"	f	class:ot::Ip6::Tcp
TcpExample	cli/cli_tcp.cpp	/^TcpExample::TcpExample(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::TcpExample
TearDown	posix/platform/daemon.cpp	/^void Daemon::TearDown(void)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
TearDown	posix/platform/infra_if.cpp	/^void InfraNetif::TearDown(void)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
TearDown	posix/platform/mdns_socket.cpp	/^void MdnsSocket::TearDown(void)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
TearDown	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::TearDown(void)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
TearDown	posix/platform/udp.cpp	/^void Udp::TearDown(void) { Mainloop::Manager::Get().Remove(*this); }$/;"	f	class:ot::Posix::Udp	typeref:typename:void
ThreadErrorToSpinelStatus	ncp/ncp_base.cpp	/^spinel_status_t NcpBase::ThreadErrorToSpinelStatus(otError aError)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:spinel_status_t
ThreadNetif	core/thread/thread_netif.cpp	/^ThreadNetif::ThreadNetif(Instance &aInstance)$/;"	f	class:ot::ThreadNetif
ThreeWayCompare	core/common/num_utils.hpp	/^template <> inline int ThreeWayCompare(bool aFirst, bool aSecond)$/;"	f	namespace:ot	typeref:typename:int
ThreeWayCompare	core/common/num_utils.hpp	/^template <typename Type> int ThreeWayCompare(Type aFirst, Type aSecond)$/;"	f	namespace:ot	typeref:typename:int
Tidy	core/net/ip6_address.cpp	/^void Prefix::Tidy(void)$/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
Time	core/common/time.hpp	/^    explicit Time(uint32_t aValue) { SetValue(aValue); }$/;"	f	class:ot::Time
TimeSync	core/thread/time_sync_service.cpp	/^TimeSync::TimeSync(Instance &aInstance)$/;"	f	class:ot::TimeSync
TimeTicker	core/common/time_ticker.cpp	/^TimeTicker::TimeTicker(Instance &aInstance)$/;"	f	class:ot::TimeTicker
Timeout	core/net/dns_dso.hpp	/^            explicit Timeout(uint32_t aInterval)$/;"	f	class:ot::Dns::Dso::Connection::Timeout
Timer	core/common/timer.hpp	/^    Timer(Instance &aInstance, Handler aHandler)$/;"	f	class:ot::Timer
TimerContext	core/net/mdns.cpp	/^Core::TimerContext::TimerContext(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::TimerContext
TimerFlagToIndex	core/net/tcp6.cpp	/^uint8_t Tcp::Endpoint::TimerFlagToIndex(uint8_t aTimerFlag)$/;"	f	class:ot::Ip6::Tcp::Endpoint	typeref:typename:uint8_t
TimerMicro	core/common/timer.hpp	/^    TimerMicro(Instance &aInstance, Handler aHandler)$/;"	f	class:ot::TimerMicro
TimerMicroIn	core/common/timer.hpp	/^    explicit TimerMicroIn(Instance &aInstance)$/;"	f	class:ot::TimerMicroIn
TimerMilli	core/common/timer.hpp	/^    TimerMilli(Instance &aInstance, Handler aHandler)$/;"	f	class:ot::TimerMilli
TimerMilliContext	core/common/timer.hpp	/^    TimerMilliContext(Instance &aInstance, Handler aHandler, void *aContext)$/;"	f	class:ot::TimerMilliContext
TimerMilliIn	core/common/timer.hpp	/^    explicit TimerMilliIn(Instance &aInstance)$/;"	f	class:ot::TimerMilliIn
TlvIterator	core/thread/network_data_tlvs.hpp	/^    TlvIterator(const NetworkDataTlv *aStart, const NetworkDataTlv *aEnd)$/;"	f	class:ot::NetworkData::TlvIterator
TlvIterator	core/thread/network_data_tlvs.hpp	/^    TlvIterator(const uint8_t *aBuffer, uint8_t aLength)$/;"	f	class:ot::NetworkData::TlvIterator
TlvIterator	core/thread/network_data_tlvs.hpp	/^    explicit TlvIterator(const PrefixTlv &aPrefixTlv)$/;"	f	class:ot::NetworkData::TlvIterator
TlvIterator	core/thread/network_data_tlvs.hpp	/^    explicit TlvIterator(const ServiceTlv &aServiceTlv)$/;"	f	class:ot::NetworkData::TlvIterator
To2BitUint	core/common/preference.cpp	/^uint8_t Preference::To2BitUint(int8_t aPrf) { return (aPrf == 0) ? k2BitMedium : ((aPrf > 0) ? k/;"	f	class:ot::Preference	typeref:typename:uint8_t
ToHeader	core/meshcop/border_agent.cpp	/^Error BorderAgent::ForwardContext::ToHeader(Coap::Message &aMessage, uint8_t aCode) const$/;"	f	class:ot::MeshCoP::BorderAgent::ForwardContext	typeref:typename:Error
ToInfoString	core/mac/mac_frame.cpp	/^Frame::InfoString Frame::ToInfoString(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Frame::InfoString
ToInfoString	core/thread/link_quality.cpp	/^LinkQualityInfo::InfoString LinkQualityInfo::ToInfoString(void) const$/;"	f	class:ot::LinkQualityInfo	typeref:typename:LinkQualityInfo::InfoString
ToLowercase	core/common/string.cpp	/^char ToLowercase(char aChar)$/;"	f	namespace:ot	typeref:typename:char
ToString	core/border_router/infra_if.cpp	/^InfraIf::InfoString InfraIf::ToString(void) const$/;"	f	class:ot::BorderRouter::InfraIf	typeref:typename:InfraIf::InfoString
ToString	core/common/preference.cpp	/^const char *Preference::ToString(int8_t aPrf) { return (aPrf == 0) ? "medium" : ((aPrf > 0) ? "h/;"	f	class:ot::Preference	typeref:typename:const char *
ToString	core/diags/factory_diags.hpp	/^        InfoString ToString(void) const$/;"	f	struct:ot::FactoryDiags::Diags::RawPowerSetting	typeref:typename:InfoString
ToString	core/mac/channel_mask.cpp	/^ChannelMask::InfoString ChannelMask::ToString(void) const$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:ChannelMask::InfoString
ToString	core/mac/mac_types.cpp	/^Address::InfoString Address::ToString(void) const$/;"	f	class:ot::Mac::Address	typeref:typename:Address::InfoString
ToString	core/mac/mac_types.cpp	/^ExtAddress::InfoString ExtAddress::ToString(void) const$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:ExtAddress::InfoString
ToString	core/mac/mac_types.cpp	/^RadioTypes::InfoString RadioTypes::ToString(void) const$/;"	f	class:ot::Mac::RadioTypes	typeref:typename:RadioTypes::InfoString
ToString	core/meshcop/extended_panid.cpp	/^ExtendedPanId::InfoString ExtendedPanId::ToString(void) const$/;"	f	class:ot::MeshCoP::ExtendedPanId	typeref:typename:ExtendedPanId::InfoString
ToString	core/meshcop/meshcop.cpp	/^JoinerDiscerner::InfoString JoinerDiscerner::ToString(void) const$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:JoinerDiscerner::InfoString
ToString	core/net/ip4_types.cpp	/^Address::InfoString Address::ToString(void) const$/;"	f	class:ot::Ip4::Address	typeref:typename:Address::InfoString
ToString	core/net/ip4_types.cpp	/^Cidr::InfoString Cidr::ToString(void) const$/;"	f	class:ot::Ip4::Cidr	typeref:typename:Cidr::InfoString
ToString	core/net/ip4_types.cpp	/^void Address::ToString(StringWriter &aWriter) const$/;"	f	class:ot::Ip4::Address	typeref:typename:void
ToString	core/net/ip4_types.cpp	/^void Address::ToString(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Ip4::Address	typeref:typename:void
ToString	core/net/ip4_types.cpp	/^void Cidr::ToString(StringWriter &aWriter) const$/;"	f	class:ot::Ip4::Cidr	typeref:typename:void
ToString	core/net/ip4_types.cpp	/^void Cidr::ToString(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Ip4::Cidr	typeref:typename:void
ToString	core/net/ip6_address.cpp	/^Address::InfoString Address::ToString(void) const$/;"	f	class:ot::Ip6::Address	typeref:typename:Address::InfoString
ToString	core/net/ip6_address.cpp	/^InterfaceIdentifier::InfoString InterfaceIdentifier::ToString(void) const$/;"	f	class:ot::Ip6::InterfaceIdentifier	typeref:typename:InterfaceIdentifier::InfoString
ToString	core/net/ip6_address.cpp	/^Prefix::InfoString Prefix::ToString(void) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:Prefix::InfoString
ToString	core/net/ip6_address.cpp	/^void Address::ToString(StringWriter &aWriter) const$/;"	f	class:ot::Ip6::Address	typeref:typename:void
ToString	core/net/ip6_address.cpp	/^void Address::ToString(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Ip6::Address	typeref:typename:void
ToString	core/net/ip6_address.cpp	/^void Prefix::ToString(StringWriter &aWriter) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
ToString	core/net/ip6_address.cpp	/^void Prefix::ToString(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:void
ToString	core/net/nat64_translator.cpp	/^Translator::AddressMapping::InfoString Translator::AddressMapping::ToString(void) const$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:Translator::AddressMapping::InfoString
ToString	core/net/socket.cpp	/^SockAddr::InfoString SockAddr::ToString(void) const$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:SockAddr::InfoString
ToString	core/net/socket.cpp	/^void SockAddr::ToString(StringWriter &aWriter) const$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:void
ToString	core/net/socket.cpp	/^void SockAddr::ToString(char *aBuffer, uint16_t aSize) const$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:void
ToString	core/radio/trel_packet.cpp	/^Header::InfoString Header::ToString(void) const$/;"	f	class:ot::Trel::Header	typeref:typename:Header::InfoString
ToString	core/thread/link_quality.cpp	/^RssAverager::InfoString RssAverager::ToString(void) const$/;"	f	class:ot::RssAverager	typeref:typename:RssAverager::InfoString
ToString	core/thread/mle_types.cpp	/^DeviceMode::InfoString DeviceMode::ToString(void) const$/;"	f	class:ot::Mle::DeviceMode	typeref:typename:DeviceMode::InfoString
ToString	core/thread/network_data_publisher.cpp	/^Publisher::Entry::InfoString Publisher::Entry::ToString(bool aIncludeState) const$/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:Publisher::Entry::InfoString
ToString	posix/platform/power.cpp	/^CalibratedPower::InfoString CalibratedPower::ToString(void) const$/;"	f	class:ot::Power::CalibratedPower	typeref:typename:CalibratedPower::InfoString
ToString	posix/platform/power.cpp	/^RawPowerSetting::InfoString RawPowerSetting::ToString(void) const$/;"	f	class:ot::Power::RawPowerSetting	typeref:typename:RawPowerSetting::InfoString
ToString	posix/platform/power.cpp	/^TargetPower::InfoString TargetPower::ToString(void) const$/;"	f	class:ot::Power::TargetPower	typeref:typename:TargetPower::InfoString
ToUlong	core/common/num_utils.hpp	/^inline unsigned long ToUlong(uint32_t aUint32) { return static_cast<unsigned long>(aUint32); }$/;"	f	namespace:ot	typeref:typename:unsigned long
ToUlong	lib/utils/math.hpp	/^inline unsigned long ToUlong(uint32_t aUint32) { return static_cast<unsigned long>(aUint32); }$/;"	f	namespace:ot::Lib::Utils	typeref:typename:unsigned long
ToUppercase	core/common/string.cpp	/^char ToUppercase(char aChar)$/;"	f	namespace:ot	typeref:typename:char
ToYesNo	core/common/string.cpp	/^const char *ToYesNo(bool aBool)$/;"	f	namespace:ot	typeref:typename:const char *
ToggleGroup	core/mac/mac_types.hpp	/^    void ToggleGroup(void) { m8[0] ^= kGroupFlag; }$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
ToggleLocal	core/mac/mac_types.hpp	/^    void ToggleLocal(void) { m8[0] ^= kLocalFlag; }$/;"	f	class:ot::Mac::ExtAddress	typeref:typename:void
Touch	core/net/nat64_translator.hpp	/^        void       Touch(TimeMilli aNow) { mExpiry = aNow + kAddressMappingIdleTimeoutMsec; }$/;"	f	class:ot::Nat64::Translator::AddressMapping	typeref:typename:void
TranslateFromIp6	core/net/nat64_translator.cpp	/^Translator::Result Translator::TranslateFromIp6(Message &aMessage)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Translator::Result
TranslateIcmp4	core/net/nat64_translator.cpp	/^Error Translator::TranslateIcmp4(Message &aMessage)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
TranslateIcmp6	core/net/nat64_translator.cpp	/^Error Translator::TranslateIcmp6(Message &aMessage)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Error
TranslateToIp6	core/net/nat64_translator.cpp	/^Translator::Result Translator::TranslateToIp6(Message &aMessage)$/;"	f	class:ot::Nat64::Translator	typeref:typename:Translator::Result
Translator	core/net/nat64_translator.cpp	/^Translator::Translator(Instance &aInstance)$/;"	f	class:ot::Nat64::Translator
Transmit	core/mac/link_raw.cpp	/^Error LinkRaw::Transmit(otLinkRawTransmitDone aCallback)$/;"	f	class:ot::Mac::LinkRaw	typeref:typename:Error
Transmit	core/radio/radio.cpp	/^Error Radio::Transmit(Mac::TxFrame &aFrame)$/;"	f	class:ot::Radio	typeref:typename:Error
Transmit	core/radio/radio.hpp	/^inline Error Radio::Transmit(Mac::TxFrame &) { return kErrorAbort; }$/;"	f	class:ot::Radio	typeref:typename:Error
Transmit	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::Transmit(otRadioFrame &aFrame)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
TransmitDone	core/mac/sub_mac_callbacks.cpp	/^void SubMac::Callbacks::TransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aError)$/;"	f	class:ot::Mac::SubMac::Callbacks	typeref:typename:void
TransmitDone	lib/spinel/radio_spinel.cpp	/^void RadioSpinel::TransmitDone(otRadioFrame *aFrame, otRadioFrame *aAckFrame, otError aError)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
TrickleTimer	core/common/trickle_timer.cpp	/^TrickleTimer::TrickleTimer(Instance &aInstance, Handler aHandler)$/;"	f	class:ot::TrickleTimer
TriggerCallback	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::TriggerCallback(NdProxy::Event aEvent, const Ip6::InterfaceIdentifier &aAddre/;"	f	class:ot::BackboneRouter::NdProxyTable	typeref:typename:void
TriggerReset	posix/platform/spi_interface.cpp	/^void SpiInterface::TriggerReset(void)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
TryNextJoinerRouter	core/meshcop/joiner.cpp	/^void Joiner::TryNextJoinerRouter(Error aPrevError)$/;"	f	class:ot::MeshCoP::Joiner	typeref:typename:void
TryRefreshDnsServerList	posix/platform/resolver.cpp	/^void Resolver::TryRefreshDnsServerList(void)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
TtlConfig	core/net/srp_server.cpp	/^Server::TtlConfig::TtlConfig(void)$/;"	f	class:ot::Srp::Server::TtlConfig
TxFrames	core/mac/mac_links.cpp	/^TxFrames::TxFrames(Instance &aInstance)$/;"	f	class:ot::Mac::TxFrames
TxMessage	core/net/mdns.cpp	/^Core::TxMessage::TxMessage(Instance &aInstance, Type aType)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage
TxMessage	core/net/mdns.cpp	/^Core::TxMessage::TxMessage(Instance &aInstance, Type aType, const AddressInfo &aUnicastDest)$/;"	f	class:ot::Dns::Multicast::Core::TxMessage
TxMessageHistory	core/net/mdns.cpp	/^Core::TxMessageHistory::TxMessageHistory(Instance &aInstance)$/;"	f	class:ot::Dns::Multicast::Core::TxMessageHistory
TxRaInfo	core/border_router/routing_manager.hpp	/^        TxRaInfo(void)$/;"	f	struct:ot::BorderRouter::RoutingManager::TxRaInfo
TxtEntry	core/net/dns_types.hpp	/^    TxtEntry(const char *aKey, const uint8_t *aValue, uint8_t aValueLength) { Init(aKey, aValue,/;"	f	class:ot::Dns::TxtEntry
TypeToString	core/meshcop/dataset.cpp	/^const char *Dataset::TypeToString(Type aType) { return (aType == kActive) ? "Active" : "Pending"/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:const char *
Udp	core/net/udp6.cpp	/^Udp::Udp(Instance &aInstance)$/;"	f	class:ot::Ip6::Udp
UdpExample	cli/cli_udp.cpp	/^UdpExample::UdpExample(otInstance *aInstance, OutputImplementer &aOutputImplementer)$/;"	f	class:ot::Cli::UdpExample
Uint64ToString	cli/cli_utils.cpp	/^const char *Utils::Uint64ToString(uint64_t aUint64, Uint64StringBuffer &aBuffer)$/;"	f	class:ot::Cli::Utils	typeref:typename:const char *
UintSafeMinus	core/radio/radio.cpp	/^inline uint64_t UintSafeMinus(uint64_t aLhs, uint64_t aRhs) { return aLhs > aRhs ? (aLhs - aRhs)/;"	f	namespace:ot	typeref:typename:uint64_t
UnblockInboundMulticastForwardingCache	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::UnblockInboundMulticastForwardingCache(const Ip6::Address &aGroupA/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
UndoLastWrites	lib/spinel/multi_frame_buffer.hpp	/^    void UndoLastWrites(uint16_t aUndoLength)$/;"	f	class:ot::Spinel::FrameWritePointer	typeref:typename:void
Unpublish	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::Unpublish(void)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
Unpublish	core/thread/network_data_publisher.cpp	/^void Publisher::DnsSrpServiceEntry::Unpublish(void)$/;"	f	class:ot::NetworkData::Publisher::DnsSrpServiceEntry	typeref:typename:void
Unpublish	core/thread/network_data_publisher.cpp	/^void Publisher::PrefixEntry::Unpublish(void)$/;"	f	class:ot::NetworkData::Publisher::PrefixEntry	typeref:typename:void
UnpublishDnsSrpService	core/thread/network_data_publisher.hpp	/^    void UnpublishDnsSrpService(void) { mDnsSrpServiceEntry.Unpublish(); }$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:void
UnpublishPrefix	core/thread/network_data_publisher.cpp	/^Error Publisher::UnpublishPrefix(const Ip6::Prefix &aPrefix)$/;"	f	class:ot::NetworkData::Publisher	typeref:typename:Error
Unregister	core/net/mdns.cpp	/^template <typename EntryType, typename ItemInfo> Error Core::Unregister(const ItemInfo &aItemInf/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
Unregister	core/net/mdns.cpp	/^void Core::Entry::Unregister(const Key &aKey)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
Unregister	core/net/mdns.cpp	/^void Core::HostEntry::Unregister(const Host &aHost)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
Unregister	core/net/mdns.cpp	/^void Core::HostEntry::Unregister(const Key &aKey)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
Unregister	core/net/mdns.cpp	/^void Core::ServiceEntry::Unregister(const Key &aKey)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
Unregister	core/net/mdns.cpp	/^void Core::ServiceEntry::Unregister(const Service &aService)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
UnregisterAllSubjects	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::UnregisterAllSubjects(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
UnregisterEap	core/utils/link_metrics_manager.cpp	/^Error LinkMetricsManager::Subject::UnregisterEap(Instance &aInstance)$/;"	f	class:ot::Utils::LinkMetricsManager::Subject	typeref:typename:Error
UnregisterHost	core/net/dnssd.cpp	/^void Dnssd::UnregisterHost(const Host &aHost, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dnssd	typeref:typename:void
UnregisterHost	core/net/mdns.cpp	/^Error Core::UnregisterHost(const Host &aHost) { return Unregister<HostEntry>(aHost); }$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
UnregisterHost	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterHost(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnregisterHostAndItsServicesAndKeys	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterHostAndItsServicesAndKeys(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnregisterKey	core/net/dnssd.cpp	/^void Dnssd::UnregisterKey(const Key &aKey, RequestId aRequestId, RegisterCallback aCallback)$/;"	f	class:ot::Dnssd	typeref:typename:void
UnregisterKey	core/net/mdns.cpp	/^Error Core::UnregisterKey(const Key &aKey)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
UnregisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterKey(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnregisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterKey(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnregisterKey	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterKey(const char *aName, const char *aServiceType)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnregisterReceiver	core/common/time_ticker.cpp	/^void TimeTicker::UnregisterReceiver(Receiver aReceiver)$/;"	f	class:ot::TimeTicker	typeref:typename:void
UnregisterService	core/net/dnssd.cpp	/^void Dnssd::UnregisterService(const Service &aService, RequestId aRequestId, RegisterCallback aC/;"	f	class:ot::Dnssd	typeref:typename:void
UnregisterService	core/net/mdns.cpp	/^Error Core::UnregisterService(const Service &aService) { return Unregister<ServiceEntry>(aServic/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:Error
UnregisterService	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UnregisterService(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UnsubscribeAllExternalMulticastAddresses	core/net/netif.cpp	/^void Netif::UnsubscribeAllExternalMulticastAddresses(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
UnsubscribeAllNodesMulticast	core/net/netif.cpp	/^void Netif::UnsubscribeAllNodesMulticast(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
UnsubscribeAllRoutersMulticast	core/net/netif.cpp	/^void Netif::UnsubscribeAllRoutersMulticast(void)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
UnsubscribeExternalMulticast	core/net/netif.cpp	/^Error Netif::UnsubscribeExternalMulticast(const Address &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:Error
UnsubscribeMulticast	core/backbone_router/backbone_tmf.cpp	/^void BackboneTmfAgent::UnsubscribeMulticast(const Ip6::Address &aAddress)$/;"	f	class:ot::BackboneRouter::BackboneTmfAgent	typeref:typename:void
UnsubscribeMulticast	core/net/netif.cpp	/^void Netif::UnsubscribeMulticast(const MulticastAddress &aAddress)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
Up	core/thread/thread_netif.cpp	/^void ThreadNetif::Up(void)$/;"	f	class:ot::ThreadNetif	typeref:typename:void
Update	core/backbone_router/bbr_leader.cpp	/^void Leader::Update(void)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
Update	core/backbone_router/ndproxy_table.cpp	/^void NdProxyTable::NdProxy::Update(uint16_t aRloc16, uint32_t aTimeSinceLastTransaction)$/;"	f	class:ot::BackboneRouter::NdProxyTable::NdProxy	typeref:typename:void
Update	core/common/crc16.cpp	/^void Crc16::Update(uint8_t aByte)$/;"	f	class:ot::Crc16	typeref:typename:void
Update	core/common/notifier.hpp	/^    template <typename Type> Error Update(Type &aVariable, const Type &aNewValue, Event aEvent)$/;"	f	class:ot::Notifier	typeref:typename:Error
Update	core/crypto/hmac_sha256.cpp	/^void HmacSha256::Update(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Crypto::HmacSha256	typeref:typename:void
Update	core/crypto/hmac_sha256.cpp	/^void HmacSha256::Update(const void *aBuf, uint16_t aBufLength)$/;"	f	class:ot::Crypto::HmacSha256	typeref:typename:void
Update	core/crypto/hmac_sha256.hpp	/^    template <typename ObjectType> void Update(const ObjectType &aObject)$/;"	f	class:ot::Crypto::HmacSha256	typeref:typename:void
Update	core/crypto/sha256.cpp	/^void Sha256::Update(const Message &aMessage, uint16_t aOffset, uint16_t aLength)$/;"	f	class:ot::Crypto::Sha256	typeref:typename:void
Update	core/crypto/sha256.cpp	/^void Sha256::Update(const void *aBuf, uint16_t aBufLength)$/;"	f	class:ot::Crypto::Sha256	typeref:typename:void
Update	core/crypto/sha256.hpp	/^    template <typename ObjectType> void Update(const ObjectType &aObject)$/;"	f	class:ot::Crypto::Sha256	typeref:typename:void
Update	core/meshcop/dataset.hpp	/^        template <Component kComponent> typename TypeFor<kComponent>::Type &Update(void)$/;"	f	class:ot::MeshCoP::Dataset::Info	typeref:typename:TypeFor<kComponent>::Type &
Update	core/thread/child.cpp	/^void Child::AddressIterator::Update(void)$/;"	f	class:ot::Child::AddressIterator	typeref:typename:void
Update	core/thread/csl_tx_scheduler.cpp	/^void CslTxScheduler::Update(void)$/;"	f	class:ot::CslTxScheduler	typeref:typename:void
Update	core/thread/network_data_leader.hpp	/^        void Update(const NetworkDataTlv &aTlv)$/;"	f	class:ot::NetworkData::Leader::ChangedFlags	typeref:typename:void
Update	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::Update(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
Update	posix/platform/daemon.cpp	/^void Daemon::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
Update	posix/platform/infra_if.cpp	/^void InfraNetif::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::InfraNetif	typeref:typename:void
Update	posix/platform/mainloop.cpp	/^void Manager::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Mainloop::Manager	typeref:typename:void
Update	posix/platform/mdns_socket.cpp	/^void MdnsSocket::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::MdnsSocket	typeref:typename:void
Update	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
Update	posix/platform/udp.cpp	/^void Udp::Update(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Udp	typeref:typename:void
UpdateAddrResolverCacheTable	core/net/srp_server.cpp	/^void Server::UpdateAddrResolverCacheTable(const Ip6::MessageInfo &aMessageInfo, const Host &aHos/;"	f	class:ot::Srp::Server	typeref:typename:void
UpdateAddresses	core/net/dhcp6_client.cpp	/^void Client::UpdateAddresses(void)$/;"	f	class:ot::Dhcp6::Client	typeref:typename:void
UpdateAdvIdRangeOn	core/net/srp_advertising_proxy.cpp	/^template <> void AdvertisingProxy::UpdateAdvIdRangeOn(Host &aHost)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UpdateAdvIdRangeOn	core/net/srp_advertising_proxy.cpp	/^template <> void AdvertisingProxy::UpdateAdvIdRangeOn(Service &aService)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UpdateAdvPioFlags	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::UpdateAdvPioFlags(bool aAdvPioFlag)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
UpdateAdvertiseInterval	core/thread/mle_router.cpp	/^void MleRouter::UpdateAdvertiseInterval(void)$/;"	f	class:ot::Mle::MleRouter	typeref:typename:void
UpdateAgedEntries	core/utils/history_tracker.cpp	/^void HistoryTracker::List::UpdateAgedEntries(uint16_t aMaxSize, Timestamp aTimestamps[])$/;"	f	class:ot::Utils::HistoryTracker::List	typeref:typename:void
UpdateAgedEntries	core/utils/history_tracker.hpp	/^        void UpdateAgedEntries(void) { List::UpdateAgedEntries(kMaxSize, mTimestamps); }$/;"	f	class:ot::Utils::HistoryTracker::EntryList	typeref:typename:void
UpdateBackboneRouterPrimary	core/backbone_router/bbr_leader.cpp	/^void Leader::UpdateBackboneRouterPrimary(void)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
UpdateBloomFilter	core/meshcop/meshcop.cpp	/^void SteeringData::UpdateBloomFilter(const HashBitIndexes &aIndexes)$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
UpdateBloomFilter	core/meshcop/meshcop.cpp	/^void SteeringData::UpdateBloomFilter(const JoinerDiscerner &aDiscerner)$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
UpdateBloomFilter	core/meshcop/meshcop.cpp	/^void SteeringData::UpdateBloomFilter(const Mac::ExtAddress &aJoinerId)$/;"	f	class:ot::MeshCoP::SteeringData	typeref:typename:void
UpdateBorderRoutingCounters	core/net/ip6.cpp	/^void Ip6::UpdateBorderRoutingCounters(const Header &aHeader, uint16_t aMessageLength, bool aIsIn/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
UpdateBuffer	core/common/heap_data.cpp	/^Error Data::UpdateBuffer(uint16_t aNewLength)$/;"	f	class:ot::Heap::Data	typeref:typename:Error
UpdateCacheEntry	core/thread/address_resolver.cpp	/^Error AddressResolver::UpdateCacheEntry(const Ip6::Address &aEid, Mac::ShortAddress aRloc16)$/;"	f	class:ot::AddressResolver	typeref:typename:Error
UpdateCacheFlushFlagIn	core/net/mdns.cpp	/^void Core::UpdateCacheFlushFlagIn(ResourceRecord &aResourceRecord, Section aSection)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
UpdateCalibratedPower	posix/platform/configuration.cpp	/^otError Configuration::UpdateCalibratedPower(void)$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
UpdateChangedProps	ncp/ncp_base.cpp	/^void NcpBase::UpdateChangedProps(Tasklet &aTasklet)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
UpdateChangedProps	ncp/ncp_base.cpp	/^void NcpBase::UpdateChangedProps(void)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
UpdateChannelMasks	posix/platform/configuration.cpp	/^otError Configuration::UpdateChannelMasks(const Power::Domain &aDomain)$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
UpdateCheckDelay	core/thread/dua_manager.cpp	/^void DuaManager::UpdateCheckDelay(uint8_t aDelay)$/;"	f	class:ot::DuaManager	typeref:typename:void
UpdateCommissioningData	core/thread/network_data_leader_ftd.cpp	/^Error Leader::UpdateCommissioningData(uint16_t aDataLength, CommissioningDataTlv *&aDataTlv)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
UpdateCompressOffset	core/net/mdns.cpp	/^void Core::UpdateCompressOffset(uint16_t &aOffset, uint16_t aNewOffset)$/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
UpdateCsl	core/mac/mac.cpp	/^void Mac::UpdateCsl(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
UpdateCsl	core/mac/mac_links.hpp	/^    bool UpdateCsl(uint16_t aPeriod, uint8_t aChannel, otShortAddress aShortAddr, const otExtAdd/;"	f	class:ot::Mac::Links	typeref:typename:bool
UpdateCsl	core/mac/sub_mac.cpp	/^bool SubMac::UpdateCsl(uint16_t aPeriod, uint8_t aChannel, otShortAddress aShortAddr, const otEx/;"	f	class:ot::Mac::SubMac	typeref:typename:bool
UpdateCslSampleTime	core/radio/radio.hpp	/^inline void Radio::UpdateCslSampleTime(uint32_t aCslSampleTime)$/;"	f	class:ot::Radio	typeref:typename:void
UpdateCslSampleTime	core/radio/radio.hpp	/^inline void Radio::UpdateCslSampleTime(uint32_t) {}$/;"	f	class:ot::Radio	typeref:typename:void
UpdateDefaultConfigAddress	core/net/dns_client.cpp	/^void Client::UpdateDefaultConfigAddress(void)$/;"	f	class:ot::Dns::Client	typeref:typename:void
UpdateDefaultRouteFlag	core/border_router/routing_manager.cpp	/^void RoutingManager::OmrPrefixManager::UpdateDefaultRouteFlag(bool aDefaultRoute)$/;"	f	class:ot::BorderRouter::RoutingManager::OmrPrefixManager	typeref:typename:void
UpdateDomainPrefixConfig	core/backbone_router/bbr_leader.cpp	/^void Leader::UpdateDomainPrefixConfig(void)$/;"	f	class:ot::BackboneRouter::Leader	typeref:typename:void
UpdateEcnOrDrop	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::UpdateEcnOrDrop(Message &aMessage, bool aPreparingToSend)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
UpdateExternalRoutes	posix/platform/netif.cpp	/^static void UpdateExternalRoutes(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
UpdateFcs	lib/hdlc/hdlc.cpp	/^uint16_t UpdateFcs(uint16_t aFcs, uint8_t aByte)$/;"	f	namespace:ot::Hdlc	typeref:typename:uint16_t
UpdateFdSet	posix/platform/hdlc_interface.cpp	/^void HdlcInterface::UpdateFdSet(void *aMainloopContext)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:void
UpdateFdSet	posix/platform/resolver.cpp	/^void Resolver::UpdateFdSet(otSysMainloopContext &aContext)$/;"	f	class:ot::Posix::Resolver	typeref:typename:void
UpdateFdSet	posix/platform/spi_interface.cpp	/^void SpiInterface::UpdateFdSet(void *aMainloopContext)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:void
UpdateFdSet	posix/platform/vendor_interface_example.cpp	/^void VendorInterface::UpdateFdSet(void *aMainloopContext)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:void
UpdateFireTimeOn	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateFireTimeOn(FireTime &aFireTime)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateFor	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::TxQueueStats::UpdateFor(const Message &aMessage)$/;"	f	class:ot::MeshForwarder::TxQueueStats	typeref:typename:void
UpdateFragmentPriority	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::UpdateFragmentPriority(Lowpan::FragmentHeader &aFragmentHeader,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
UpdateHeader	core/net/dns_types.hpp	/^    UpdateHeader(void) { SetQueryType(kQueryTypeUpdate); }$/;"	f	class:ot::Dns::UpdateHeader
UpdateHistory	core/utils/jam_detector.cpp	/^void JamDetector::UpdateHistory(bool aDidExceedThreshold)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
UpdateHostInfoStateOnAddressChange	core/net/srp_client.cpp	/^Error Client::UpdateHostInfoStateOnAddressChange(void)$/;"	f	class:ot::Srp::Client	typeref:typename:Error
UpdateIdleMode	core/mac/mac.cpp	/^void Mac::UpdateIdleMode(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
UpdateIn	core/coap/coap.cpp	/^void CoapBase::Metadata::UpdateIn(Message &aMessage) const$/;"	f	class:ot::Coap::CoapBase::Metadata	typeref:typename:void
UpdateIn	core/net/dnssd_server.cpp	/^void Server::ProxyQueryInfo::UpdateIn(ProxyQuery &aQuery) const$/;"	f	class:ot::Dns::ServiceDiscovery::Server::ProxyQueryInfo	typeref:typename:void
UpdateIn	core/net/ip6_mpl.cpp	/^void Mpl::Metadata::UpdateIn(Message &aMessage) const { aMessage.Write(aMessage.GetLength() - si/;"	f	class:ot::Ip6::Mpl::Metadata	typeref:typename:void
UpdateIn	core/net/sntp_client.hpp	/^        void UpdateIn(Message &aMessage) const { aMessage.Write(aMessage.GetLength() - sizeof(*t/;"	f	class:ot::Sntp::Client::QueryMetadata	typeref:typename:void
UpdateInconsistentData	core/thread/network_data_notifier.cpp	/^Error Notifier::UpdateInconsistentData(void)$/;"	f	class:ot::NetworkData::Notifier	typeref:typename:Error
UpdateIndirectMessage	core/thread/indirect_sender.cpp	/^void IndirectSender::UpdateIndirectMessage(Child &aChild)$/;"	f	class:ot::IndirectSender	typeref:typename:void
UpdateIp4HeaderChecksum	core/net/checksum.cpp	/^void Checksum::UpdateIp4HeaderChecksum(Ip4::Header &aHeader)$/;"	f	class:ot::Checksum	typeref:typename:void
UpdateIp6Route	core/thread/mesh_forwarder.cpp	/^Error MeshForwarder::UpdateIp6Route(Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
UpdateIp6RouteFtd	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::UpdateIp6RouteFtd(const Ip6::Header &aIp6Header, Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
UpdateIpSets	posix/platform/firewall.cpp	/^void UpdateIpSets(otInstance *aInstance)$/;"	f	namespace:ot::Posix	typeref:typename:void
UpdateJamState	core/utils/jam_detector.cpp	/^void JamDetector::UpdateJamState(void)$/;"	f	class:ot::Utils::JamDetector	typeref:typename:void
UpdateKeyMaterial	core/thread/key_manager.cpp	/^void KeyManager::UpdateKeyMaterial(void)$/;"	f	class:ot::KeyManager	typeref:typename:void
UpdateKeyRegistrationStatus	core/net/srp_advertising_proxy.cpp	/^template <typename Entry> void AdvertisingProxy::UpdateKeyRegistrationStatus(Entry &aEntry, cons/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UpdateLink	posix/platform/netif.cpp	/^static void UpdateLink(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
UpdateLinkInfoFrom	core/common/message.cpp	/^void Message::UpdateLinkInfoFrom(const ThreadLinkInfo &aLinkInfo)$/;"	f	class:ot::Message	typeref:typename:void
UpdateLinkLocalAddress	core/thread/mle.cpp	/^void Mle::UpdateLinkLocalAddress(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
UpdateLinkMetricsStates	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::UpdateLinkMetricsStates(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
UpdateLocalSubscriptions	core/thread/mlr_manager.cpp	/^void MlrManager::UpdateLocalSubscriptions(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
UpdateMeshRoute	core/thread/mesh_forwarder_ftd.cpp	/^Error MeshForwarder::UpdateMeshRoute(Message &aMessage)$/;"	f	class:ot::MeshForwarder	typeref:typename:Error
UpdateMessageChecksum	core/net/checksum.cpp	/^void Checksum::UpdateMessageChecksum(Message            &aMessage,$/;"	f	class:ot::Checksum	typeref:typename:void
UpdateMetadata	core/net/srp_server.cpp	/^Server::UpdateMetadata::UpdateMetadata(Instance &aInstance, Host &aHost, const MessageMetadata &/;"	f	class:ot::Srp::Server::UpdateMetadata
UpdateMldReport	posix/platform/multicast_routing.cpp	/^void MulticastRoutingManager::UpdateMldReport(const Ip6::Address &aAddress, bool isAdd)$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:void
UpdateMulticast	posix/platform/netif.cpp	/^static void UpdateMulticast(otInstance *aInstance, const otIp6Address &aAddress, bool aIsAdded)$/;"	f	typeref:typename:void	file:
UpdateMulticastRouteInfo	posix/platform/multicast_routing.cpp	/^bool MulticastRoutingManager::UpdateMulticastRouteInfo(MulticastForwardingCache &aMfc) const$/;"	f	class:ot::Posix::MulticastRoutingManager	typeref:typename:bool
UpdateNeighborLinkFailures	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::UpdateNeighborLinkFailures(Neighbor &aNeighbor,$/;"	f	class:ot::MeshForwarder	typeref:typename:void
UpdateNeighborLinkInfo	core/mac/mac.cpp	/^void Mac::UpdateNeighborLinkInfo(Neighbor &aNeighbor, const RxFrame &aRxFrame)$/;"	f	class:ot::Mac::Mac	typeref:typename:void
UpdateNeighborOnSentFrame	core/thread/mesh_forwarder.cpp	/^Neighbor *MeshForwarder::UpdateNeighborOnSentFrame(Mac::TxFrame       &aFrame,$/;"	f	class:ot::MeshForwarder	typeref:typename:Neighbor *
UpdateNextTime	core/net/mdns.cpp	/^void Core::TimerContext::UpdateNextTime(TimeMilli aTime)$/;"	f	class:ot::Dns::Multicast::Core::TimerContext	typeref:typename:void
UpdateOmrRoutes	posix/platform/netif.cpp	/^static void UpdateOmrRoutes(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
UpdateOnDeferredAck	core/thread/radio_selector.cpp	/^void RadioSelector::UpdateOnDeferredAck(Neighbor &aNeighbor, Error aTxError, bool &aAllowNeighbo/;"	f	class:ot::RadioSelector	typeref:typename:void
UpdateOnReceive	core/thread/child_supervision.cpp	/^void SupervisionListener::UpdateOnReceive(const Mac::Address &aSourceAddress, bool aIsSecure)$/;"	f	class:ot::SupervisionListener	typeref:typename:void
UpdateOnReceive	core/thread/radio_selector.cpp	/^void RadioSelector::UpdateOnReceive(Neighbor &aNeighbor, Mac::RadioType aRadioType, bool aIsDupl/;"	f	class:ot::RadioSelector	typeref:typename:void
UpdateOnReceivedAnnounce	core/thread/announce_sender.cpp	/^void AnnounceSender::UpdateOnReceivedAnnounce(void) { mTrickleTimer.IndicateConsistent(); }$/;"	f	class:ot::AnnounceSender	typeref:typename:void
UpdateOnSend	core/thread/child_supervision.cpp	/^void ChildSupervisor::UpdateOnSend(Child &aChild) { aChild.ResetSecondsSinceLastSupervision(); }$/;"	f	class:ot::ChildSupervisor	typeref:typename:void
UpdateOnSendDone	core/thread/radio_selector.cpp	/^void RadioSelector::UpdateOnSendDone(Mac::TxFrame &aFrame, Error aTxError)$/;"	f	class:ot::RadioSelector	typeref:typename:void
UpdateOnTimeTick	core/thread/mesh_forwarder_ftd.cpp	/^bool MeshForwarder::FragmentPriorityList::UpdateOnTimeTick(void)$/;"	f	class:ot::MeshForwarder::FragmentPriorityList	typeref:typename:bool
UpdateParseErrorCount	lib/spinel/radio_spinel.hpp	/^    void UpdateParseErrorCount(otError aError)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:void
UpdatePreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RioAdvertiser::UpdatePreference(RoutePreference aPreference)$/;"	f	class:ot::BorderRouter::RoutingManager::RioAdvertiser	typeref:typename:void
UpdatePreference	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::UpdatePreference(RoutePreference aPreference)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
UpdatePreference	core/thread/radio_selector.cpp	/^LogLevel RadioSelector::UpdatePreference(Neighbor &aNeighbor, Mac::RadioType aRadioType, int16_t/;"	f	class:ot::RadioSelector	typeref:typename:LogLevel
UpdatePreferredFlagOn	core/net/netif.cpp	/^void Netif::UpdatePreferredFlagOn(UnicastAddress &aAddress, bool aPreferred)$/;"	f	class:ot::Ip6::Netif	typeref:typename:void
UpdatePrefix	core/thread/network_data_leader_ftd.cpp	/^Leader::UpdateStatus Leader::UpdatePrefix(PrefixTlv &aPrefix) { return UpdateTlv(aPrefix, aPrefi/;"	f	class:ot::NetworkData::Leader	typeref:typename:Leader::UpdateStatus
UpdateProperty	core/net/mdns.cpp	/^template <typename UintType> void Core::RecordInfo::UpdateProperty(UintType &aProperty, UintType/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateProperty	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateProperty(AddressArray &aAddrProperty, const Ip6::Address *aAddrs, u/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateProperty	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateProperty(Heap::Data &aDataProperty, const uint8_t *aData, uint16_t /;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateProperty	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateProperty(Heap::String &aStringProperty, const char *aString)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateProxiedSubscriptions	core/thread/mlr_manager.cpp	/^void MlrManager::UpdateProxiedSubscriptions(Child &aChild, const MlrAddressArray &aOldMlrRegiste/;"	f	class:ot::MlrManager	typeref:typename:void
UpdatePublishedRoute	core/border_router/routing_manager.cpp	/^void RoutingManager::RoutePublisher::UpdatePublishedRoute(State aNewState)$/;"	f	class:ot::BorderRouter::RoutingManager::RoutePublisher	typeref:typename:void
UpdateQuery	core/net/dns_client.hpp	/^    void        UpdateQuery(Query &aQuery, const QueryInfo &aInfo) { aQuery.Write(0, aInfo); }$/;"	f	class:ot::Dns::Client	typeref:typename:void
UpdateQueryAndFireTimeOn	core/net/mdns.cpp	/^void Core::CacheRecordInfo::UpdateQueryAndFireTimeOn(CacheEntry &aCacheEntry)$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:void
UpdateQueue	core/coap/coap.cpp	/^void ResponsesQueue::UpdateQueue(void)$/;"	f	class:ot::Coap::ResponsesQueue	typeref:typename:void
UpdateReadWriteStartPointers	lib/spinel/spinel_buffer.cpp	/^void Buffer::UpdateReadWriteStartPointers(void)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
UpdateReassemblyList	core/net/ip6.cpp	/^void Ip6::UpdateReassemblyList(void)$/;"	f	class:ot::Ip6::Ip6	typeref:typename:void
UpdateReassemblyList	core/thread/mesh_forwarder.cpp	/^bool MeshForwarder::UpdateReassemblyList(void)$/;"	f	class:ot::MeshForwarder	typeref:typename:bool
UpdateRecordLength	core/net/dnssd_server.cpp	/^void Server::Response::UpdateRecordLength(ResourceRecord &aRecord, uint16_t aOffset)$/;"	f	class:ot::Dns::ServiceDiscovery::Server::Response	typeref:typename:void
UpdateRecordLengthInMessage	core/net/mdns.cpp	/^void Core::UpdateRecordLengthInMessage(ResourceRecord &aRecord, Message &aMessage, uint16_t aOff/;"	f	class:ot::Dns::Multicast::Core	typeref:typename:void
UpdateRecordLengthInMessage	core/net/srp_client.cpp	/^void Client::UpdateRecordLengthInMessage(Dns::ResourceRecord &aRecord, uint16_t aOffset, Message/;"	f	class:ot::Srp::Client	typeref:typename:void
UpdateRecordStateAfterQuery	core/net/mdns.cpp	/^void Core::AddrCache::UpdateRecordStateAfterQuery(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::AddrCache	typeref:typename:void
UpdateRecordStateAfterQuery	core/net/mdns.cpp	/^void Core::BrowseCache::UpdateRecordStateAfterQuery(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::BrowseCache	typeref:typename:void
UpdateRecordStateAfterQuery	core/net/mdns.cpp	/^void Core::ServiceCache::UpdateRecordStateAfterQuery(TimeMilli aNow) { mRecord.UpdateStateAfterQ/;"	f	class:ot::Dns::Multicast::Core::ServiceCache	typeref:typename:void
UpdateRecordsState	core/net/mdns.cpp	/^void Core::Entry::UpdateRecordsState(const TxMessage &aResponse)$/;"	f	class:ot::Dns::Multicast::Core::Entry	typeref:typename:void
UpdateRecordsState	core/net/mdns.cpp	/^void Core::HostEntry::UpdateRecordsState(const TxMessage &aResponse)$/;"	f	class:ot::Dns::Multicast::Core::HostEntry	typeref:typename:void
UpdateRecordsState	core/net/mdns.cpp	/^void Core::ServiceEntry::UpdateRecordsState(const TxMessage &aResponse)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
UpdateRegistrationDelay	core/thread/dua_manager.cpp	/^void DuaManager::UpdateRegistrationDelay(uint8_t aDelay)$/;"	f	class:ot::DuaManager	typeref:typename:void
UpdateReregistrationDelay	core/thread/dua_manager.cpp	/^void DuaManager::UpdateReregistrationDelay(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
UpdateReregistrationDelay	core/thread/mlr_manager.cpp	/^void MlrManager::UpdateReregistrationDelay(bool aRereg)$/;"	f	class:ot::MlrManager	typeref:typename:void
UpdateResponseCounters	core/net/dnssd_server.cpp	/^void Server::UpdateResponseCounters(ResponseCode aResponseCode)$/;"	f	class:ot::Dns::ServiceDiscovery::Server	typeref:typename:void
UpdateResponseCounters	core/net/srp_server.cpp	/^void Server::UpdateResponseCounters(Dns::UpdateHeader::Response aResponseCode)$/;"	f	class:ot::Srp::Server	typeref:typename:void
UpdateRloc	core/thread/network_data_local.cpp	/^void Local::UpdateRloc(PrefixTlv &aPrefixTlv)$/;"	f	class:ot::NetworkData::Local	typeref:typename:void
UpdateRloc	core/thread/network_data_local.cpp	/^void Local::UpdateRloc(ServiceTlv &aService)$/;"	f	class:ot::NetworkData::Local	typeref:typename:void
UpdateRloc	core/thread/network_data_local.cpp	/^void Local::UpdateRloc(void)$/;"	f	class:ot::NetworkData::Local	typeref:typename:void
UpdateRoleTimeCounters	core/thread/mle.cpp	/^void Mle::UpdateRoleTimeCounters(DeviceRole aRole)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
UpdateRouterIdSet	core/thread/router_table.cpp	/^void RouterTable::UpdateRouterIdSet(uint8_t aRouterIdSequence, const Mle::RouterIdSet &aRouterId/;"	f	class:ot::RouterTable	typeref:typename:void
UpdateRouterOnRx	core/border_router/routing_manager.cpp	/^void RoutingManager::RxRaTracker::UpdateRouterOnRx(Router &aRouter)$/;"	f	class:ot::BorderRouter::RoutingManager::RxRaTracker	typeref:typename:void
UpdateRoutes	core/thread/mesh_forwarder_ftd.cpp	/^void MeshForwarder::UpdateRoutes(const FrameData &aFrameData, const Mac::Addresses &aMeshAddrs)$/;"	f	class:ot::MeshForwarder	typeref:typename:void
UpdateRoutes	core/thread/router_table.cpp	/^void RouterTable::UpdateRoutes(const Mle::RouteTlv &aRouteTlv, uint8_t aNeighborId)$/;"	f	class:ot::RouterTable	typeref:typename:void
UpdateRoutesOnFed	core/thread/router_table.cpp	/^void RouterTable::UpdateRoutesOnFed(const Mle::RouteTlv &aRouteTlv, uint8_t aParentId)$/;"	f	class:ot::RouterTable	typeref:typename:void
UpdateScanChannel	core/mac/mac.cpp	/^Error Mac::UpdateScanChannel(void)$/;"	f	class:ot::Mac::Mac	typeref:typename:Error
UpdateSeedSet	core/net/ip6_mpl.cpp	/^Error Mpl::UpdateSeedSet(uint16_t aSeedId, uint8_t aSequence)$/;"	f	class:ot::Ip6::Mpl	typeref:typename:Error
UpdateSendMessage	core/thread/mesh_forwarder.cpp	/^void MeshForwarder::UpdateSendMessage(Error aFrameTxError, Mac::Address &aMacDest, Neighbor *aNe/;"	f	class:ot::MeshForwarder	typeref:typename:void
UpdateService	core/net/dhcp6_server.cpp	/^Error Server::UpdateService(void)$/;"	f	class:ot::Dhcp6::Server	typeref:typename:Error
UpdateService	core/net/nd_agent.cpp	/^void Agent::UpdateService(void)$/;"	f	class:ot::NeighborDiscovery::Agent	typeref:typename:void
UpdateService	core/thread/network_data_leader_ftd.cpp	/^Leader::UpdateStatus Leader::UpdateService(ServiceTlv &aService) { return UpdateTlv(aService, aS/;"	f	class:ot::NetworkData::Leader	typeref:typename:Leader::UpdateStatus
UpdateServiceAlocs	core/thread/mle.cpp	/^void Mle::UpdateServiceAlocs(void)$/;"	f	class:ot::Mle::Mle	typeref:typename:void
UpdateServiceStateToRemove	core/net/srp_client.cpp	/^void Client::UpdateServiceStateToRemove(Service &aService)$/;"	f	class:ot::Srp::Client	typeref:typename:void
UpdateServiceTypes	core/net/mdns.cpp	/^void Core::ServiceEntry::UpdateServiceTypes(void)$/;"	f	class:ot::Dns::Multicast::Core::ServiceEntry	typeref:typename:void
UpdateSnoopedCacheEntry	core/thread/address_resolver.cpp	/^void AddressResolver::UpdateSnoopedCacheEntry(const Ip6::Address &aEid,$/;"	f	class:ot::AddressResolver	typeref:typename:void
UpdateState	core/net/nat64_translator.cpp	/^void Translator::UpdateState(bool aAlwaysNotify)$/;"	f	class:ot::Nat64::Translator	typeref:typename:void
UpdateState	core/net/srp_advertising_proxy.cpp	/^void AdvertisingProxy::UpdateState(void)$/;"	f	class:ot::Srp::AdvertisingProxy	typeref:typename:void
UpdateState	core/net/srp_client.cpp	/^void Client::UpdateState(void)$/;"	f	class:ot::Srp::Client	typeref:typename:void
UpdateState	core/thread/mle.cpp	/^void Mle::ParentSearch::UpdateState(void)$/;"	f	class:ot::Mle::Mle::ParentSearch	typeref:typename:void
UpdateState	core/thread/network_data_publisher.cpp	/^void Publisher::Entry::UpdateState(uint8_t aNumEntries, uint8_t aNumPreferredEntries, uint8_t aD/;"	f	class:ot::NetworkData::Publisher::Entry	typeref:typename:void
UpdateState	core/utils/link_metrics_manager.cpp	/^Error LinkMetricsManager::Subject::UpdateState(Instance &aInstance)$/;"	f	class:ot::Utils::LinkMetricsManager::Subject	typeref:typename:Error
UpdateStateAfterAnswer	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateStateAfterAnswer(const TxMessage &aResponse)$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateStateAfterQuery	core/net/mdns.cpp	/^void Core::CacheRecordInfo::UpdateStateAfterQuery(TimeMilli aNow)$/;"	f	class:ot::Dns::Multicast::Core::CacheRecordInfo	typeref:typename:void
UpdateSteeringData	core/meshcop/meshcop.hpp	/^    SteeringData &UpdateSteeringData(void)$/;"	f	class:ot::MeshCoP::CommissioningDataset	typeref:typename:SteeringData &
UpdateSubjects	core/utils/link_metrics_manager.cpp	/^void LinkMetricsManager::UpdateSubjects(void)$/;"	f	class:ot::Utils::LinkMetricsManager	typeref:typename:void
UpdateTargetPower	posix/platform/configuration.cpp	/^otError Configuration::UpdateTargetPower(const Power::Domain &aDomain)$/;"	f	class:ot::Posix::Configuration	typeref:typename:otError
UpdateTime	core/radio/radio.cpp	/^void RadioStatistics::UpdateTime(void)$/;"	f	class:ot::RadioStatistics	typeref:typename:void
UpdateTimeTickerRegistration	core/thread/dua_manager.cpp	/^void DuaManager::UpdateTimeTickerRegistration(void)$/;"	f	class:ot::DuaManager	typeref:typename:void
UpdateTimeTickerRegistration	core/thread/mlr_manager.cpp	/^void MlrManager::UpdateTimeTickerRegistration(void)$/;"	f	class:ot::MlrManager	typeref:typename:void
UpdateTlv	core/thread/network_data_leader_ftd.cpp	/^Leader::UpdateStatus Leader::UpdateTlv(NetworkDataTlv &aTlv, const NetworkDataTlv *aSubTlvs)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Leader::UpdateStatus
UpdateTtl	core/net/mdns.cpp	/^void Core::RecordInfo::UpdateTtl(uint32_t aTtl) { return UpdateProperty(mTtl, aTtl); }$/;"	f	class:ot::Dns::Multicast::Core::RecordInfo	typeref:typename:void
UpdateUnicast	posix/platform/netif.cpp	/^static void UpdateUnicast(otInstance *aInstance, const otIp6AddressInfo &aAddressInfo, bool aIsA/;"	f	typeref:typename:void	file:
UpdateUnicastLinux	posix/platform/netif.cpp	/^static void UpdateUnicastLinux(otInstance *aInstance, const otIp6AddressInfo &aAddressInfo, bool/;"	f	typeref:typename:void	file:
UpdateUnsecurePorts	core/net/ip6_filter.cpp	/^Error Filter::UpdateUnsecurePorts(Action aAction, uint16_t aPort)$/;"	f	class:ot::Ip6::Filter	typeref:typename:Error
Uptime	core/common/uptime.cpp	/^Uptime::Uptime(Instance &aInstance)$/;"	f	class:ot::Uptime
UptimeToString	core/common/uptime.cpp	/^void Uptime::UptimeToString(uint64_t aUptime, StringWriter &aWriter, bool aIncludeMsec)$/;"	f	class:ot::Uptime	typeref:typename:void
UriFromPath	core/thread/uri_paths.cpp	/^Uri UriFromPath(const char *aPath)$/;"	f	namespace:ot	typeref:typename:Uri
UriToString	core/thread/network_diagnostic.cpp	/^const char *Client::UriToString(Uri aUri)$/;"	f	class:ot::NetworkDiagnostic::Client	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriActiveGet>(void) { return "ActiveGet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriActiveReplace>(void) { return "ActiveReplace"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriActiveSet>(void) { return "ActiveSet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAddressError>(void) { return "AddressError"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAddressNotify>(void) { return "AddressNotify"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAddressQuery>(void) { return "AddressQuery"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAddressRelease>(void) { return "AddressRelease"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAddressSolicit>(void) { return "AddressSolicit"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAnnounceBegin>(void) { return "AnnounceBegin"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriAnycastLocate>(void) { return "AnycastLocate"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriBackboneAnswer>(void) { return "BackboneAnswer"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriBackboneMlr>(void) { return "BackboneMlr"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriBackboneQuery>(void) { return "BackboneQuery"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriCommissionerGet>(void) { return "CommissionerGet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriCommissionerKeepAlive>(void) { return "CommissionerKeepA/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriCommissionerPetition>(void) { return "CommissionerPetiti/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriCommissionerSet>(void) { return "CommissionerSet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDatasetChanged>(void) { return "DatasetChanged"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDiagnosticGetAnswer>(void) { return "DiagGetAnswer"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDiagnosticGetQuery>(void) { return "DiagGetQuery"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDiagnosticGetRequest>(void) { return "DiagGetRequest"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDiagnosticReset>(void) { return "DiagReset"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDuaRegistrationNotify>(void) { return "DuaRegNotify"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriDuaRegistrationRequest>(void) { return "DuaRegRequest"; /;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriEnergyReport>(void) { return "EnergyReport"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriEnergyScan>(void) { return "EnergyScan"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriJoinerEntrust>(void) { return "JoinerEntrust"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriJoinerFinalize>(void) { return "JoinerFinalize"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriLeaderKeepAlive>(void) { return "LeaderKeepAlive"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriLeaderPetition>(void) { return "LeaderPetition"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriMlr>(void) { return "Mlr"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriPanIdConflict>(void) { return "PanIdConflict"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriPanIdQuery>(void) { return "PanIdQuery"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriPendingGet>(void) { return "PendingGet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriPendingSet>(void) { return "PendingSet"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriProxyRx>(void) { return "ProxyRx"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriProxyTx>(void) { return "ProxyTx"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriRelayRx>(void) { return "RelayRx"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriRelayTx>(void) { return "RelayTx"; }$/;"	f	namespace:ot	typeref:typename:const char *
UriToString	core/thread/uri_paths.cpp	/^template <> const char *UriToString<kUriServerData>(void) { return "ServerData"; }$/;"	f	namespace:ot	typeref:typename:const char *
Url	lib/url/url.cpp	/^Url::Url(void)$/;"	f	class:ot::Url::Url
UsToSDec	cli/cli.cpp	/^inline unsigned long UsToSDec(uint64_t aUs) { return ToUlong(static_cast<uint32_t>(aUs % 1000000/;"	f	namespace:ot::Cli	typeref:typename:unsigned long
UsToSInt	cli/cli.cpp	/^inline unsigned long UsToSInt(uint64_t aUs) { return ToUlong(static_cast<uint32_t>(aUs \/ 100000/;"	f	namespace:ot::Cli	typeref:typename:unsigned long
Utils	cli/cli_utils.hpp	/^    Utils(otInstance *aInstance, OutputImplementer &aImplementer)$/;"	f	class:ot::Cli::Utils
Validate	core/net/nd6.cpp	/^const Option *Option::Iterator::Validate(const Option *aOption) const$/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:const Option *
Validate	core/thread/network_data_leader_ftd.cpp	/^Error Leader::Validate(const NetworkData &aNetworkData, uint16_t aRloc16)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
Validate	core/utils/verhoeff_checksum.cpp	/^Error VerhoeffChecksum::Validate(const char *aDecimalString)$/;"	f	class:ot::Utils::VerhoeffChecksum	typeref:typename:Error
ValidatePrefix	core/thread/network_data_leader_ftd.cpp	/^Error Leader::ValidatePrefix(const PrefixTlv &aPrefix, uint16_t aRloc16)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
ValidatePsdu	core/mac/mac_frame.cpp	/^Error Frame::ValidatePsdu(void) const$/;"	f	class:ot::Mac::Frame	typeref:typename:Error
ValidateService	core/thread/network_data_leader_ftd.cpp	/^Error Leader::ValidateService(const ServiceTlv &aService, uint16_t aRloc16)$/;"	f	class:ot::NetworkData::Leader	typeref:typename:Error
ValidateTlvs	core/meshcop/dataset.cpp	/^Error Dataset::ValidateTlvs(void) const$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
VendorCommandHandler	ncp/example_vendor_hook.cpp	/^otError NcpBase::VendorCommandHandler(uint8_t aHeader, unsigned int aCommand)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
VendorGetPropertyHandler	ncp/example_vendor_hook.cpp	/^otError NcpBase::VendorGetPropertyHandler(spinel_prop_key_t aPropKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
VendorHandleFrameRemovedFromNcpBuffer	ncp/example_vendor_hook.cpp	/^void NcpBase::VendorHandleFrameRemovedFromNcpBuffer(Spinel::Buffer::FrameTag aFrameTag)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:void
VendorHandleValueIs	lib/spinel/example_vendor_hook.cpp	/^otError RadioSpinel::VendorHandleValueIs(spinel_prop_key_t aPropKey)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
VendorInterface	posix/platform/vendor_interface_example.cpp	/^VendorInterface::VendorInterface(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::VendorInterface
VendorInterfaceImpl	posix/platform/vendor_interface_example.cpp	/^    explicit VendorInterfaceImpl(const Url::Url &aRadioUrl)$/;"	f	class:ot::Posix::VendorInterfaceImpl	file:
VendorRadioSpinel	lib/spinel/example_vendor_hook.hpp	/^    VendorRadioSpinel(void)$/;"	f	class:ot::Spinel::VendorRadioSpinel
VendorSetPropertyHandler	ncp/example_vendor_hook.cpp	/^otError NcpBase::VendorSetPropertyHandler(spinel_prop_key_t aPropKey)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
VendorStackVersionTlv	core/meshcop/meshcop_tlvs.hpp	/^    VendorStackVersionTlv(void)$/;"	f	class:ot::MeshCoP::VendorStackVersionTlv
Verify	core/crypto/ecdsa.hpp	/^        Error Verify(const Sha256::Hash &aHash, const Signature &aSignature) const$/;"	f	class:ot::Crypto::Ecdsa::P256::PublicKey	typeref:typename:Error
VerifyMessageChecksum	core/net/checksum.cpp	/^Error Checksum::VerifyMessageChecksum(const Message &aMessage, const Ip6::MessageInfo &aMessageI/;"	f	class:ot::Checksum	typeref:typename:Error
VerifySignature	core/net/srp_server.cpp	/^Error Server::VerifySignature(const Host::Key  &aKey,$/;"	f	class:ot::Srp::Server	typeref:typename:Error
VerifyTxtData	core/net/dns_types.cpp	/^bool TxtRecord::VerifyTxtData(const uint8_t *aTxtData, uint16_t aTxtLength, bool aAllowEmpty)$/;"	f	class:ot::Dns::TxtRecord	typeref:typename:bool
VirtualTimeInit	posix/platform/spinel_manager.cpp	/^void SpinelManager::VirtualTimeInit(void)$/;"	f	class:ot::Posix::SpinelManager	typeref:typename:void
WaitForFrame	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::WaitForFrame(uint64_t aTimeoutUs)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
WaitForFrame	posix/platform/spi_interface.cpp	/^otError SpiInterface::WaitForFrame(uint64_t aTimeoutUs)$/;"	f	class:ot::Posix::SpiInterface	typeref:typename:otError
WaitForFrame	posix/platform/vendor_interface_example.cpp	/^otError VendorInterface::WaitForFrame(uint64_t aTimeoutUs)$/;"	f	class:ot::Posix::VendorInterface	typeref:typename:otError
WaitForWritable	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::WaitForWritable(void)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
WaitResponse	lib/spinel/radio_spinel.cpp	/^otError RadioSpinel::WaitResponse(bool aHandleRcpTimeout)$/;"	f	class:ot::Spinel::RadioSpinel	typeref:typename:otError
WaitResponse	lib/spinel/spinel_driver.cpp	/^otError SpinelDriver::WaitResponse(void)$/;"	f	class:ot::Spinel::SpinelDriver	typeref:typename:otError
Wipe	core/common/settings.cpp	/^void Settings::Wipe(void)$/;"	f	class:ot::Settings	typeref:typename:void
Wipe	core/common/settings_driver.hpp	/^    void Wipe(void)$/;"	f	class:ot::SettingsDriver	typeref:typename:void
Wipe	core/utils/flash.cpp	/^void Flash::Wipe(void)$/;"	f	class:ot::Flash	typeref:typename:void
WithdrawPrefix	core/border_router/routing_manager.cpp	/^void RoutingManager::PdPrefixManager::WithdrawPrefix(void)$/;"	f	class:ot::BorderRouter::RoutingManager::PdPrefixManager	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint16_t aValue, uint8_t *aBuffer) { WriteUint16(aValue, aBuffer);/;"	f	namespace:ot::BigEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint16_t aValue, uint8_t *aBuffer) { WriteUint16(aValue, aBuffer);/;"	f	namespace:ot::LittleEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint32_t aValue, uint8_t *aBuffer) { WriteUint32(aValue, aBuffer);/;"	f	namespace:ot::BigEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint32_t aValue, uint8_t *aBuffer) { WriteUint32(aValue, aBuffer);/;"	f	namespace:ot::LittleEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint64_t aValue, uint8_t *aBuffer) { WriteUint64(aValue, aBuffer);/;"	f	namespace:ot::BigEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint64_t aValue, uint8_t *aBuffer) { WriteUint64(aValue, aBuffer);/;"	f	namespace:ot::LittleEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint8_t aValue, uint8_t *aBuffer) { *aBuffer = aValue; }$/;"	f	namespace:ot::BigEndian	typeref:typename:void
Write	core/common/encoding.hpp	/^template <> inline void Write(uint8_t aValue, uint8_t *aBuffer) { *aBuffer = aValue; }$/;"	f	namespace:ot::LittleEndian	typeref:typename:void
Write	core/common/frame_builder.hpp	/^    template <typename ObjectType> void Write(uint16_t aOffset, const ObjectType &aObject)$/;"	f	class:ot::FrameBuilder	typeref:typename:void
Write	core/common/message.hpp	/^    template <typename ObjectType> void Write(uint16_t aOffset, const ObjectType &aObject)$/;"	f	class:ot::Message	typeref:typename:void
Write	core/meshcop/dataset.hpp	/^    template <typename SimpleTlvType> Error Write(const typename SimpleTlvType::ValueType &aValu/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
Write	core/meshcop/dataset.hpp	/^    template <typename UintTlvType> Error Write(typename UintTlvType::UintValueType aValue)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
Write	core/net/tcp6_ext.cpp	/^Error TcpCircularSendBuffer::Write(Tcp::Endpoint &aEndpoint,$/;"	f	class:ot::Ip6::TcpCircularSendBuffer	typeref:typename:Error
Write	posix/platform/hdlc_interface.cpp	/^otError HdlcInterface::Write(const uint8_t *aFrame, uint16_t aLength)$/;"	f	class:ot::Posix::HdlcInterface	typeref:typename:otError
WriteBool	lib/spinel/spinel_encoder.hpp	/^    otError WriteBool(bool aBool) { return mNcpBuffer.InFrameFeedByte(aBool ? 0x01 : 0x00); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteByte	lib/spinel/multi_frame_buffer.hpp	/^    otError WriteByte(uint8_t aByte)$/;"	f	class:ot::Spinel::FrameWritePointer	typeref:typename:otError
WriteBytes	core/common/frame_builder.cpp	/^void FrameBuilder::WriteBytes(uint16_t aOffset, const void *aBuffer, uint16_t aLength)$/;"	f	class:ot::FrameBuilder	typeref:typename:void
WriteBytes	core/common/message.cpp	/^void Message::WriteBytes(uint16_t aOffset, const void *aBuf, uint16_t aLength)$/;"	f	class:ot::Message	typeref:typename:void
WriteBytesFromMessage	core/common/message.cpp	/^void Message::WriteBytesFromMessage(uint16_t       aWriteOffset,$/;"	f	class:ot::Message	typeref:typename:void
WriteData	core/common/message.hpp	/^    template <DataLengthType kDataLengthType> void WriteData(uint16_t aOffset, const Data<kDataL/;"	f	class:ot::Message	typeref:typename:void
WriteData	lib/spinel/spinel_encoder.hpp	/^    otError WriteData(const uint8_t *aData, uint16_t aDataLen) { return mNcpBuffer.InFrameFeedDa/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteDataWithLen	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteDataWithLen(const uint8_t *aData, uint16_t aDataLen)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteEui48	lib/spinel/spinel_encoder.hpp	/^    otError WriteEui48(const spinel_eui48_t &aEui48) { return WriteEui48(aEui48.bytes); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteEui48	lib/spinel/spinel_encoder.hpp	/^    otError WriteEui48(const uint8_t *aEui48) { return WriteData(aEui48, sizeof(spinel_eui48_t))/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteEui64	lib/spinel/spinel_encoder.hpp	/^    otError WriteEui64(const otExtAddress &aExtAddress) { return WriteEui64(aExtAddress.m8); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteEui64	lib/spinel/spinel_encoder.hpp	/^    otError WriteEui64(const spinel_eui64_t &aEui64) { return WriteEui64(aEui64.bytes); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteEui64	lib/spinel/spinel_encoder.hpp	/^    otError WriteEui64(const uint8_t *aEui64) { return WriteData(aEui64, sizeof(spinel_eui64_t))/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteExtendedOptionField	core/coap/coap_message.cpp	/^uint8_t Message::WriteExtendedOptionField(uint16_t aValue, uint8_t *&aBuffer)$/;"	f	class:ot::Coap::Message	typeref:typename:uint8_t
WriteInt16	lib/spinel/spinel_encoder.hpp	/^    otError WriteInt16(int16_t aInt16) { return WriteUint16(static_cast<uint16_t>(aInt16)); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteInt32	lib/spinel/spinel_encoder.hpp	/^    otError WriteInt32(int32_t aInt32) { return WriteUint32(static_cast<uint32_t>(aInt32)); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteInt64	lib/spinel/spinel_encoder.hpp	/^    otError WriteInt64(int64_t aInt64) { return WriteUint64(static_cast<uint64_t>(aInt64)); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteInt8	lib/spinel/spinel_encoder.hpp	/^    otError WriteInt8(int8_t aInt8) { return WriteUint8(static_cast<uint8_t>(aInt8)); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteIp6Address	lib/spinel/spinel_encoder.hpp	/^    otError WriteIp6Address(const otIp6Address &aIp6Addr) { return WriteIp6Address(aIp6Addr.mFie/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteIp6Address	lib/spinel/spinel_encoder.hpp	/^    otError WriteIp6Address(const spinel_ipv6addr_t &aIp6Addr) { return WriteIp6Address(aIp6Addr/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteIp6Address	lib/spinel/spinel_encoder.hpp	/^    otError WriteIp6Address(const uint8_t *aIp6AddrBuf) { return WriteData(aIp6AddrBuf, sizeof(s/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteLastStatusFrame	ncp/ncp_base.cpp	/^otError NcpBase::WriteLastStatusFrame(uint8_t aHeader, spinel_status_t aLastStatus)$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
WriteMessage	lib/spinel/spinel_encoder.hpp	/^    otError WriteMessage(otMessage *aMessage) { return mNcpBuffer.InFrameFeedMessage(aMessage); /;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WritePacked	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WritePacked(const char *aPackFormat, ...)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WritePosition	lib/spinel/spinel_buffer.hpp	/^        WritePosition(void)$/;"	f	struct:ot::Spinel::Buffer::WritePosition
WritePropertyValueInsertedRemovedFrame	ncp/ncp_base.cpp	/^otError NcpBase::WritePropertyValueInsertedRemovedFrame(uint8_t           aHeader,$/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
WritePropertyValueIsFrame	ncp/ncp_base.cpp	/^otError NcpBase::WritePropertyValueIsFrame(uint8_t aHeader, spinel_prop_key_t aPropKey, bool aIs/;"	f	class:ot::Ncp::NcpBase	typeref:typename:otError
WriteTlv	core/meshcop/dataset.cpp	/^Error Dataset::WriteTlv(Tlv::Type aType, const void *aValue, uint8_t aLength)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
WriteTlv	core/meshcop/dataset.cpp	/^Error Dataset::WriteTlv(const Tlv &aTlv) { return WriteTlv(aTlv.GetType(), aTlv.GetValue(), aTlv/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
WriteTlvsFrom	core/meshcop/dataset.cpp	/^Error Dataset::WriteTlvsFrom(const Dataset &aDataset)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
WriteTlvsFrom	core/meshcop/dataset.cpp	/^Error Dataset::WriteTlvsFrom(const Dataset::Info &aDatasetInfo)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
WriteTlvsFrom	core/meshcop/dataset.cpp	/^Error Dataset::WriteTlvsFrom(const uint8_t *aTlvs, uint8_t aLength)$/;"	f	class:ot::MeshCoP::Dataset	typeref:typename:Error
WriteTo	core/net/mdns.cpp	/^void Core::RecordCounts::WriteTo(Header &aHeader) const$/;"	f	class:ot::Dns::Multicast::Core::RecordCounts	typeref:typename:void
WriteToMessage	core/net/checksum.cpp	/^void Checksum::WriteToMessage(uint16_t aOffset, Message &aMessage) const$/;"	f	class:ot::Checksum	typeref:typename:void
WriteUint16	core/common/encoding.hpp	/^inline void WriteUint16(uint16_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:void
WriteUint16	core/common/encoding.hpp	/^inline void WriteUint16(uint16_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:void
WriteUint16	lib/spinel/multi_frame_buffer.hpp	/^        static void WriteUint16(uint16_t aValue, uint8_t *aBuffer)$/;"	f	class:ot::Spinel::MultiFrameBuffer::LittleEndian	typeref:typename:void
WriteUint16	lib/spinel/spi_frame.hpp	/^        static void WriteUint16(uint16_t aValue, uint8_t *aBuffer)$/;"	f	class:ot::Spinel::SpiFrame::LittleEndian	typeref:typename:void
WriteUint16	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteUint16(uint16_t aUint16)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteUint16At	lib/spinel/spinel_buffer.cpp	/^void Buffer::WriteUint16At(uint8_t *aBufPtr, uint16_t aValue, Direction aDirection)$/;"	f	class:ot::Spinel::Buffer	typeref:typename:void
WriteUint24	core/common/encoding.hpp	/^inline void WriteUint24(uint32_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:void
WriteUint24	core/common/encoding.hpp	/^inline void WriteUint24(uint32_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:void
WriteUint32	core/common/encoding.hpp	/^inline void WriteUint32(uint32_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:void
WriteUint32	core/common/encoding.hpp	/^inline void WriteUint32(uint32_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:void
WriteUint32	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteUint32(uint32_t aUint32)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteUint64	core/common/encoding.hpp	/^inline void WriteUint64(uint64_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::BigEndian	typeref:typename:void
WriteUint64	core/common/encoding.hpp	/^inline void WriteUint64(uint64_t aValue, uint8_t *aBuffer)$/;"	f	namespace:ot::LittleEndian	typeref:typename:void
WriteUint64	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteUint64(uint64_t aUint64)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteUint8	lib/spinel/spinel_encoder.hpp	/^    otError WriteUint8(uint8_t aUint8) { return mNcpBuffer.InFrameFeedByte(aUint8); }$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteUintPacked	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteUintPacked(unsigned int aUint)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteUtf8	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteUtf8(const char *aUtf8)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteVPacked	lib/spinel/spinel_encoder.cpp	/^otError Encoder::WriteVPacked(const char *aPackFormat, va_list aArgs)$/;"	f	class:ot::Spinel::Encoder	typeref:typename:otError
WriteValueAs	core/common/tlvs.hpp	/^    template <typename SimpleTlvType> void WriteValueAs(const typename SimpleTlvType::ValueType /;"	f	class:ot::Tlv	typeref:typename:void
WriteValueAs	core/common/tlvs.hpp	/^    template <typename UintTlvType> void WriteValueAs(typename UintTlvType::UintValueType aValue/;"	f	class:ot::Tlv	typeref:typename:void
Zone	core/net/dns_types.hpp	/^    explicit Zone(uint16_t aClass = ResourceRecord::kClassInternet)$/;"	f	class:ot::Dns::Zone
__anon770100710102	posix/platform/system.cpp	/^        [](void *aContext, const char *aFormat, va_list aArguments) -> int {$/;"	f	function:otSysCliInitUsingDaemon	typeref:typename:int	file:
begin	core/backbone_router/multicast_listeners_table.cpp	/^MulticastListenersTable::Listener *MulticastListenersTable::IteratorBuilder::begin(void)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::IteratorBuilder	typeref:typename:MulticastListenersTable::Listener *
begin	core/backbone_router/ndproxy_table.hpp	/^        Iterator begin(void) { return Iterator(GetInstance(), mFilter); }$/;"	f	class:ot::BackboneRouter::NdProxyTable::IteratorBuilder	typeref:typename:Iterator
begin	core/coap/coap_message.cpp	/^Message::ConstIterator MessageQueue::begin(void) const { return Message::ConstIterator(GetHead()/;"	f	class:ot::Coap::MessageQueue	typeref:typename:Message::ConstIterator
begin	core/coap/coap_message.cpp	/^Message::Iterator MessageQueue::begin(void) { return Message::Iterator(GetHead()); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:Message::Iterator
begin	core/common/array.hpp	/^    Type       *begin(void) { return &mElements[0]; }$/;"	f	class:ot::Array	typeref:typename:Type *
begin	core/common/array.hpp	/^    const Type *begin(void) const { return &mElements[0]; }$/;"	f	class:ot::Array	typeref:typename:const Type *
begin	core/common/heap_array.hpp	/^    Type       *begin(void) { return (mLength > 0) ? mArray : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
begin	core/common/heap_array.hpp	/^    const Type *begin(void) const { return (mLength > 0) ? mArray : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
begin	core/common/linked_list.hpp	/^    ConstIterator begin(void) const { return ConstIterator(GetHead()); }$/;"	f	class:ot::LinkedList	typeref:typename:ConstIterator
begin	core/common/linked_list.hpp	/^    Iterator begin(void) { return Iterator(GetHead()); }$/;"	f	class:ot::LinkedList	typeref:typename:Iterator
begin	core/common/message.cpp	/^Message::ConstIterator MessageQueue::begin(void) const { return Message::ConstIterator(GetHead()/;"	f	class:ot::MessageQueue	typeref:typename:Message::ConstIterator
begin	core/common/message.cpp	/^Message::ConstIterator PriorityQueue::begin(void) const { return Message::ConstIterator(GetHead(/;"	f	class:ot::PriorityQueue	typeref:typename:Message::ConstIterator
begin	core/common/message.cpp	/^Message::Iterator MessageQueue::begin(void) { return Message::Iterator(GetHead()); }$/;"	f	class:ot::MessageQueue	typeref:typename:Message::Iterator
begin	core/common/message.cpp	/^Message::Iterator PriorityQueue::begin(void) { return Message::Iterator(GetHead()); }$/;"	f	class:ot::PriorityQueue	typeref:typename:Message::Iterator
begin	core/common/settings.hpp	/^        ChildInfoIterator begin(void) { return ChildInfoIterator(GetInstance()); }$/;"	f	class:ot::Settings::ChildInfoIteratorBuilder	typeref:typename:ChildInfoIterator
begin	core/net/nd6.hpp	/^        Option::Iterator begin(void) const { return Option::Iterator(GetOptionStart(), GetDataEn/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:Option::Iterator
begin	core/net/netif.hpp	/^                Iterator begin(void) { return Iterator(mNetif, mFilter); }$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder	typeref:typename:Iterator
begin	core/thread/child.hpp	/^        AddressIterator begin(void) { return AddressIterator(mChild, mFilter); }$/;"	f	class:ot::Child::AddressIteratorBuilder	typeref:typename:AddressIterator
begin	core/thread/child_table.hpp	/^        Iterator begin(void) { return Iterator(GetInstance(), mFilter); }$/;"	f	class:ot::ChildTable::IteratorBuilder	typeref:typename:Iterator
begin	core/thread/router_table.hpp	/^    Router       *begin(void) { return mRouters.begin(); }$/;"	f	class:ot::RouterTable	typeref:typename:Router *
begin	core/thread/router_table.hpp	/^    const Router *begin(void) const { return mRouters.begin(); }$/;"	f	class:ot::RouterTable	typeref:typename:const Router *
begin	lib/spinel/spinel_driver.hpp	/^        Type       *begin(void) { return &mElements[0]; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:Type *
begin	lib/spinel/spinel_driver.hpp	/^        const Type *begin(void) const { return &mElements[0]; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:const Type *
createListenSocketOrDie	posix/platform/daemon.cpp	/^void Daemon::createListenSocketOrDie(void)$/;"	f	class:ot::Posix::Daemon	typeref:typename:void
demangleSymbol	posix/platform/backtrace.cpp	/^static void demangleSymbol(int aIndex, const char *aSymbol)$/;"	f	typeref:typename:void	file:
destroyTunnel	posix/platform/netif.cpp	/^static otError destroyTunnel(void)$/;"	f	typeref:typename:otError	file:
dumpStack	posix/platform/backtrace.cpp	/^static void dumpStack(void)$/;"	f	typeref:typename:void	file:
end	core/backbone_router/multicast_listeners_table.cpp	/^MulticastListenersTable::Listener *MulticastListenersTable::IteratorBuilder::end(void)$/;"	f	class:ot::BackboneRouter::MulticastListenersTable::IteratorBuilder	typeref:typename:MulticastListenersTable::Listener *
end	core/backbone_router/ndproxy_table.hpp	/^        Iterator end(void) { return Iterator(GetInstance(), Iterator::kEndIterator); }$/;"	f	class:ot::BackboneRouter::NdProxyTable::IteratorBuilder	typeref:typename:Iterator
end	core/coap/coap_message.hpp	/^    Message::ConstIterator end(void) const { return Message::ConstIterator(); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:Message::ConstIterator
end	core/coap/coap_message.hpp	/^    Message::Iterator end(void) { return Message::Iterator(); }$/;"	f	class:ot::Coap::MessageQueue	typeref:typename:Message::Iterator
end	core/common/array.hpp	/^    Type       *end(void) { return &mElements[mLength]; }$/;"	f	class:ot::Array	typeref:typename:Type *
end	core/common/array.hpp	/^    const Type *end(void) const { return &mElements[mLength]; }$/;"	f	class:ot::Array	typeref:typename:const Type *
end	core/common/heap_array.hpp	/^    Type       *end(void) { return (mLength > 0) ? &mArray[mLength] : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:Type *
end	core/common/heap_array.hpp	/^    const Type *end(void) const { return (mLength > 0) ? &mArray[mLength] : nullptr; }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type *
end	core/common/linked_list.hpp	/^    ConstIterator end(void) const { return ConstIterator(nullptr); }$/;"	f	class:ot::LinkedList	typeref:typename:ConstIterator
end	core/common/linked_list.hpp	/^    Iterator end(void) { return Iterator(nullptr); }$/;"	f	class:ot::LinkedList	typeref:typename:Iterator
end	core/common/message.hpp	/^    Message::ConstIterator end(void) const { return Message::ConstIterator(); }$/;"	f	class:ot::MessageQueue	typeref:typename:Message::ConstIterator
end	core/common/message.hpp	/^    Message::ConstIterator end(void) const { return Message::ConstIterator(); }$/;"	f	class:ot::PriorityQueue	typeref:typename:Message::ConstIterator
end	core/common/message.hpp	/^    Message::Iterator end(void) { return Message::Iterator(); }$/;"	f	class:ot::MessageQueue	typeref:typename:Message::Iterator
end	core/common/message.hpp	/^    Message::Iterator end(void) { return Message::Iterator(); }$/;"	f	class:ot::PriorityQueue	typeref:typename:Message::Iterator
end	core/common/settings.hpp	/^        ChildInfoIterator end(void) { return ChildInfoIterator(GetInstance(), ChildInfoIterator:/;"	f	class:ot::Settings::ChildInfoIteratorBuilder	typeref:typename:ChildInfoIterator
end	core/net/nd6.hpp	/^        Option::Iterator end(void) const { return Option::Iterator(); }$/;"	f	class:ot::Ip6::Nd::RouterAdvert::RxMessage	typeref:typename:Option::Iterator
end	core/net/netif.hpp	/^                Iterator end(void) { return Iterator(mNetif, Iterator::kEndIterator); }$/;"	f	class:ot::Ip6::Netif::ExternalMulticastAddress::Iterator::Builder	typeref:typename:Iterator
end	core/thread/child.hpp	/^        AddressIterator end(void) { return AddressIterator(mChild, AddressIterator::kEndIterator/;"	f	class:ot::Child::AddressIteratorBuilder	typeref:typename:AddressIterator
end	core/thread/child_table.hpp	/^        Iterator end(void) { return Iterator(GetInstance()); }$/;"	f	class:ot::ChildTable::IteratorBuilder	typeref:typename:Iterator
end	core/thread/router_table.hpp	/^    Router       *end(void) { return mRouters.end(); }$/;"	f	class:ot::RouterTable	typeref:typename:Router *
end	core/thread/router_table.hpp	/^    const Router *end(void) const { return mRouters.end(); }$/;"	f	class:ot::RouterTable	typeref:typename:const Router *
end	lib/spinel/spinel_driver.hpp	/^        Type       *end(void) { return &mElements[mLength]; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:Type *
end	lib/spinel/spinel_driver.hpp	/^        const Type *end(void) const { return &mElements[mLength]; }$/;"	f	class:ot::Spinel::SpinelDriver::Array	typeref:typename:const Type *
flush_gcov	lib/platform/reset_util.h	/^static void flush_gcov(void)$/;"	f	typeref:typename:void
get802154RadioUrl	posix/platform/system.cpp	/^static const char *get802154RadioUrl(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:const char *	file:
getIcmp6RaMessage	posix/platform/netif.cpp	/^static const uint8_t *getIcmp6RaMessage(const uint8_t *data, ssize_t length)$/;"	f	typeref:typename:const uint8_t *	file:
getIpVersion	posix/platform/netif.cpp	/^static uint8_t getIpVersion(const uint8_t *data)$/;"	f	typeref:typename:uint8_t	file:
getSettingsFileName	posix/platform/settings.cpp	/^static void getSettingsFileName(otInstance *aInstance, char aFileName[kMaxFileNameSize], bool aS/;"	f	typeref:typename:void	file:
getTrelRadioUrl	posix/platform/system.cpp	/^static const char *getTrelRadioUrl(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:const char *	file:
handleMbedtlsEntropyPoll	core/crypto/crypto_platform.cpp	/^static int handleMbedtlsEntropyPoll(void *aData, unsigned char *aOutput, size_t aInLen, size_t */;"	f	typeref:typename:int	file:
helloWorldCommand	cli/cli_extension_example.c	/^static otError helloWorldCommand(void *aContext, uint8_t aArgsLength, char *aArgs[])$/;"	f	typeref:typename:otError	file:
isRequiredAnycast	posix/platform/netif.cpp	/^static bool isRequiredAnycast(const uint8_t *aAddress, uint8_t aPrefixLength)$/;"	f	typeref:typename:bool	file:
isSameIp4Cidr	posix/platform/netif.cpp	/^static bool isSameIp4Cidr(const otIp4Cidr &aCidr1, const otIp4Cidr &aCidr2)$/;"	f	typeref:typename:bool	file:
isSensitiveKey	posix/platform/settings.cpp	/^static bool isSensitiveKey(uint16_t aKey)$/;"	f	typeref:typename:bool	file:
logAddrEvent	posix/platform/netif.cpp	/^static void logAddrEvent(bool isAdd, const otIp6Address &aAddress, otError error)$/;"	f	typeref:typename:void	file:
main	lib/spinel/spinel.c	/^int main(void)$/;"	f	typeref:typename:int
main	posix/client.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	posix/main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	posix/platform/settings.cpp	/^int main()$/;"	f	typeref:typename:int
microTimerHandler	posix/platform/alarm.cpp	/^static void microTimerHandler(int aSignal, siginfo_t *aSignalInfo, void *aUserContext)$/;"	f	typeref:typename:void	file:
mldListenerInit	posix/platform/netif.cpp	/^static void mldListenerInit(void)$/;"	f	typeref:typename:void	file:
nat64Init	posix/platform/netif.cpp	/^void nat64Init(void)$/;"	f	typeref:typename:void
operator !=	core/common/equatable.hpp	/^    bool operator!=(const Type &aOther) const { return !(*static_cast<const Type *>(this) == aOt/;"	f	class:ot::Unequatable	typeref:typename:bool
operator !=	core/common/heap_string.hpp	/^    bool operator!=(const char *aCString) const { return !(*this == aCString); }$/;"	f	class:ot::Heap::String	typeref:typename:bool
operator !=	core/common/iterator_utils.hpp	/^    bool operator!=(const IteratorType &aOther) const { return mItem != aOther.mItem; }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:bool
operator !=	core/common/ptr_wrapper.hpp	/^    bool operator!=(const Ptr &aOther) const { return (mPointer != aOther.mPointer); }$/;"	f	class:ot::Ptr	typeref:typename:bool
operator !=	core/common/ptr_wrapper.hpp	/^    bool operator!=(const Type *aPointer) const { return (mPointer != aPointer); }$/;"	f	class:ot::Ptr	typeref:typename:bool
operator !=	core/diags/factory_diags.hpp	/^        bool operator!=(const PowerSettings &aOther) const$/;"	f	struct:ot::FactoryDiags::Diags::PowerSettings	typeref:typename:bool
operator !=	core/diags/factory_diags.hpp	/^        bool operator!=(const RawPowerSetting &aOther) const$/;"	f	struct:ot::FactoryDiags::Diags::RawPowerSetting	typeref:typename:bool
operator !=	core/utils/parse_cmdline.hpp	/^    bool operator!=(const char *aString) const { return !(*this == aString); }$/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:bool
operator !=	posix/platform/power.hpp	/^    bool operator!=(const char *aCString) const { return (aCString == nullptr) ? true : strcmp(m/;"	f	class:ot::Power::Domain	typeref:typename:bool
operator *	core/coap/coap_message.hpp	/^        Message &operator*(void) { return static_cast<Message &>(ot::Message::Iterator::operator/;"	f	class:ot::Coap::Message::Iterator	typeref:typename:Message &
operator *	core/coap/coap_message.hpp	/^        const Message &operator*(void) { return static_cast<const Message &>(ot::Message::ConstI/;"	f	class:ot::Coap::Message::ConstIterator	typeref:typename:const Message &
operator *	core/common/iterator_utils.hpp	/^    ItemType &operator*(void) { return *mItem; }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:ItemType &
operator *	core/common/ptr_wrapper.hpp	/^    Type &operator*(void) { return *mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:Type &
operator *	core/common/ptr_wrapper.hpp	/^    const Type &operator*(void) const { return *mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:const Type &
operator *	core/common/settings.hpp	/^        const ChildInfo &operator*(void) const { return mChildInfo; }$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:const ChildInfo &
operator *	core/net/nd6.hpp	/^        const Option &operator*(void) { return *mOption; }$/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:const Option &
operator *	core/thread/child.hpp	/^        const Ip6::Address &operator*(void) const { return *GetAddress(); }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:const Ip6::Address &
operator +	core/common/time.hpp	/^    Time operator+(uint32_t aDuration) const { return Time(mValue + aDuration); }$/;"	f	class:ot::Time	typeref:typename:Time
operator ++	core/common/iterator_utils.hpp	/^    void operator++(int) { static_cast<IteratorType *>(this)->Advance(); }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:void
operator ++	core/common/iterator_utils.hpp	/^    void operator++(void) { static_cast<IteratorType *>(this)->Advance(); }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:void
operator ++	core/common/settings.hpp	/^        void operator++(int) { Advance(); }$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:void
operator ++	core/common/settings.hpp	/^        void operator++(void) { Advance(); }$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:void
operator ++	core/net/nd6.hpp	/^        void          operator++(int) { Advance(); }$/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:void
operator ++	core/net/nd6.hpp	/^        void          operator++(void) { Advance(); }$/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:void
operator ++	core/thread/child.hpp	/^        void operator++(int) { mIndex++, Update(); }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:void
operator ++	core/thread/child.hpp	/^        void operator++(void) { mIndex++, Update(); }$/;"	f	class:ot::Child::AddressIterator	typeref:typename:void
operator +=	core/common/time.hpp	/^    void operator+=(uint32_t aDuration) { mValue += aDuration; }$/;"	f	class:ot::Time	typeref:typename:void
operator -	core/common/time.hpp	/^    Time operator-(uint32_t aDuration) const { return Time(mValue - aDuration); }$/;"	f	class:ot::Time	typeref:typename:Time
operator -	core/common/time.hpp	/^    uint32_t operator-(const Time &aOther) const { return mValue - aOther.mValue; }$/;"	f	class:ot::Time	typeref:typename:uint32_t
operator -	core/mac/mac_types.hpp	/^    RadioTypes operator-(const RadioTypes &aOther) const { return RadioTypes(mBitMask & ~aOther./;"	f	class:ot::Mac::RadioTypes	typeref:typename:RadioTypes
operator -=	core/common/time.hpp	/^    void operator-=(uint32_t aDuration) { mValue -= aDuration; }$/;"	f	class:ot::Time	typeref:typename:void
operator ->	core/coap/coap_message.hpp	/^        Message *operator->(void) { return static_cast<Message *>(ot::Message::Iterator::operato/;"	f	class:ot::Coap::Message::Iterator	typeref:typename:Message *
operator ->	core/coap/coap_message.hpp	/^        const Message *operator->(void)$/;"	f	class:ot::Coap::Message::ConstIterator	typeref:typename:const Message *
operator ->	core/common/iterator_utils.hpp	/^    ItemType *operator->(void) { return mItem; }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:ItemType *
operator ->	core/common/ptr_wrapper.hpp	/^    Type *operator->(void) { return mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:Type *
operator ->	core/common/ptr_wrapper.hpp	/^    const Type *operator->(void) const { return mPointer; }$/;"	f	class:ot::Ptr	typeref:typename:const Type *
operator <	core/backbone_router/multicast_listeners_table.hpp	/^        bool operator<(const Listener &aOther) const { return GetExpireTime() < aOther.GetExpire/;"	f	class:ot::BackboneRouter::MulticastListenersTable::Listener	typeref:typename:bool
operator <	core/common/time.hpp	/^    bool operator<(const Time &aOther) const { return SerialNumber::IsLess(mValue, aOther.mValue/;"	f	class:ot::Time	typeref:typename:bool
operator <	core/net/ip6_address.cpp	/^bool Prefix::operator<(const Prefix &aOther) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
operator <	core/net/ip6_address.hpp	/^    bool operator<(const Address &aOther) const { return memcmp(mFields.m8, aOther.mFields.m8, s/;"	f	class:ot::Ip6::Address	typeref:typename:bool
operator <=	core/common/time.hpp	/^    bool operator<=(const Time &aOther) const { return (aOther >= *this); }$/;"	f	class:ot::Time	typeref:typename:bool
operator =	core/common/array.hpp	/^    Array &operator=(const Array &aOtherArray)$/;"	f	class:ot::Array	typeref:typename:Array &
operator =	core/common/owned_ptr.hpp	/^    OwnedPtr &operator=(OwnedPtr &&aOther)$/;"	f	class:ot::OwnedPtr	typeref:typename:OwnedPtr &
operator =	core/common/retain_ptr.hpp	/^    RetainPtr &operator=(const RetainPtr &aOther)$/;"	f	class:ot::RetainPtr	typeref:typename:RetainPtr &
operator =	core/mac/mac_types.cpp	/^KeyMaterial &KeyMaterial::operator=(const KeyMaterial &aOther)$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:KeyMaterial &
operator ==	core/common/data.hpp	/^    bool operator==(const Data &aOtherData) const$/;"	f	class:ot::Data	typeref:typename:bool
operator ==	core/common/equatable.hpp	/^    bool operator==(const Type &aOther) const$/;"	f	class:ot::Equatable	typeref:typename:bool
operator ==	core/common/heap_data.hpp	/^    bool operator==(const Data &aOtherData) const { return mData == aOtherData.mData; }$/;"	f	class:ot::Heap::Data	typeref:typename:bool
operator ==	core/common/heap_string.cpp	/^bool String::operator==(const char *aCString) const$/;"	f	class:ot::Heap::String	typeref:typename:bool
operator ==	core/common/heap_string.hpp	/^    bool operator==(const String &aString) const { return (*this == aString.AsCString()); }$/;"	f	class:ot::Heap::String	typeref:typename:bool
operator ==	core/common/iterator_utils.hpp	/^    bool operator==(const IteratorType &aOther) const { return mItem == aOther.mItem; }$/;"	f	class:ot::ItemPtrIterator	typeref:typename:bool
operator ==	core/common/ptr_wrapper.hpp	/^    bool operator==(const Ptr &aOther) const { return (mPointer == aOther.mPointer); }$/;"	f	class:ot::Ptr	typeref:typename:bool
operator ==	core/common/ptr_wrapper.hpp	/^    bool operator==(const Type *aPointer) const { return (mPointer == aPointer); }$/;"	f	class:ot::Ptr	typeref:typename:bool
operator ==	core/common/settings.hpp	/^        bool operator==(const ChildInfoIterator &aOther) const$/;"	f	class:ot::Settings::ChildInfoIterator	typeref:typename:bool
operator ==	core/common/time.hpp	/^    bool operator==(const Time &aOther) const { return mValue == aOther.mValue; }$/;"	f	class:ot::Time	typeref:typename:bool
operator ==	core/mac/channel_mask.hpp	/^    bool operator==(const ChannelMask &aAnother) const { return (mMask == aAnother.mMask); }$/;"	f	class:ot::Mac::ChannelMask	typeref:typename:bool
operator ==	core/mac/mac_types.cpp	/^bool KeyMaterial::operator==(const KeyMaterial &aOther) const$/;"	f	class:ot::Mac::KeyMaterial	typeref:typename:bool
operator ==	core/meshcop/meshcop.cpp	/^bool JoinerDiscerner::operator==(const JoinerDiscerner &aOther) const$/;"	f	class:ot::MeshCoP::JoinerDiscerner	typeref:typename:bool
operator ==	core/meshcop/meshcop.cpp	/^bool JoinerPskd::operator==(const JoinerPskd &aOther) const$/;"	f	class:ot::MeshCoP::JoinerPskd	typeref:typename:bool
operator ==	core/meshcop/network_name.cpp	/^bool NetworkName::operator==(const NetworkName &aOther) const { return GetAsData() == aOther.Get/;"	f	class:ot::MeshCoP::NetworkName	typeref:typename:bool
operator ==	core/net/ip4_types.cpp	/^bool Cidr::operator==(const Cidr &aOther) const$/;"	f	class:ot::Ip4::Cidr	typeref:typename:bool
operator ==	core/net/ip6_address.cpp	/^bool Prefix::operator==(const Prefix &aOther) const$/;"	f	class:ot::Ip6::Prefix	typeref:typename:bool
operator ==	core/net/nd6.hpp	/^        bool          operator==(const Iterator &aOther) const { return mOption == aOther.mOptio/;"	f	class:ot::Ip6::Nd::Option::Iterator	typeref:typename:bool
operator ==	core/net/socket.hpp	/^    bool operator==(const SockAddr &aOther) const$/;"	f	class:ot::Ip6::SockAddr	typeref:typename:bool
operator ==	core/thread/child.hpp	/^        bool operator==(const AddressIterator &aOther) const { return (mIndex == aOther.mIndex);/;"	f	class:ot::Child::AddressIterator	typeref:typename:bool
operator ==	core/thread/mle_types.cpp	/^bool RxChallenge::operator==(const TxChallenge &aTxChallenge) const$/;"	f	class:ot::Mle::RxChallenge	typeref:typename:bool
operator ==	core/thread/network_data_tlvs.hpp	/^    bool operator==(const ServerTlv &aOther) const$/;"	f	class:ot::NetworkData::ServerTlv	typeref:typename:bool
operator ==	core/thread/network_data_types.cpp	/^bool ServiceConfig::ServerConfig::operator==(const ServerConfig &aOther) const$/;"	f	class:ot::NetworkData::ServiceConfig::ServerConfig	typeref:typename:bool
operator ==	core/thread/network_data_types.cpp	/^bool ServiceConfig::operator==(const ServiceConfig &aOther) const$/;"	f	class:ot::NetworkData::ServiceConfig	typeref:typename:bool
operator ==	core/utils/parse_cmdline.cpp	/^bool Arg::operator==(const char *aString) const { return !IsEmpty() && (strcmp(mString, aString)/;"	f	class:ot::Utils::CmdLineParser::Arg	typeref:typename:bool
operator ==	posix/platform/power.hpp	/^    bool operator==(const Domain &aOther) const { return strcmp(m8, aOther.m8) == 0; }$/;"	f	class:ot::Power::Domain	typeref:typename:bool
operator >	core/common/time.hpp	/^    bool operator>(const Time &aOther) const { return (aOther < *this); }$/;"	f	class:ot::Time	typeref:typename:bool
operator >=	core/common/time.hpp	/^    bool operator>=(const Time &aOther) const { return !(*this < aOther); }$/;"	f	class:ot::Time	typeref:typename:bool
operator []	core/common/array.hpp	/^    Type &operator[](IndexType aIndex) { return mElements[aIndex]; }$/;"	f	class:ot::Array	typeref:typename:Type &
operator []	core/common/array.hpp	/^    const Type &operator[](IndexType aIndex) const { return mElements[aIndex]; }$/;"	f	class:ot::Array	typeref:typename:const Type &
operator []	core/common/heap_array.hpp	/^    Type &operator[](IndexType aIndex) { return mArray[aIndex]; }$/;"	f	class:ot::Heap::Array	typeref:typename:Type &
operator []	core/common/heap_array.hpp	/^    const Type &operator[](IndexType aIndex) const { return mArray[aIndex]; }$/;"	f	class:ot::Heap::Array	typeref:typename:const Type &
operator new	core/common/new.hpp	/^inline void *operator new(size_t, void *p) throw() { return p; }$/;"	f	typeref:typename:void *
operator new	lib/utils/utils.hpp	/^inline void *operator new(size_t, void *p) throw() { return p; }$/;"	f	typeref:typename:void *
otAppCliDeinit	posix/cli_readline.cpp	/^extern "C" void otAppCliDeinit(void) { rl_callback_handler_remove(); }$/;"	f	typeref:typename:void
otAppCliDeinit	posix/cli_stdio.cpp	/^extern "C" void otAppCliDeinit(void) {}$/;"	f	typeref:typename:void
otAppCliInit	posix/cli_readline.cpp	/^extern "C" void otAppCliInit(otInstance *aInstance)$/;"	f	typeref:typename:void
otAppCliInit	posix/cli_stdio.cpp	/^extern "C" void otAppCliInit(otInstance *aInstance) { otCliInit(aInstance, OutputCallback, nullp/;"	f	typeref:typename:void
otAppCliProcess	posix/cli_readline.cpp	/^extern "C" void otAppCliProcess(const otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otAppCliProcess	posix/cli_stdio.cpp	/^extern "C" void otAppCliProcess(const otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otAppCliUpdate	posix/cli_readline.cpp	/^extern "C" void otAppCliUpdate(otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otAppCliUpdate	posix/cli_stdio.cpp	/^extern "C" void otAppCliUpdate(otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otAppNcpInit	ncp/example_vendor_hook.cpp	/^extern "C" void otAppNcpInit(otInstance *aInstance)$/;"	f	typeref:typename:void
otAppNcpInitMulti	ncp/example_vendor_hook.cpp	/^extern "C" void otAppNcpInitMulti(otInstance **aInstances, uint8_t count)$/;"	f	typeref:typename:void
otBackboneRouterConfigNextDuaRegistrationResponse	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterConfigNextDuaRegistrationResponse(otInstance                     *aInstance/;"	f	typeref:typename:void
otBackboneRouterConfigNextMulticastListenerRegistrationResponse	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterConfigNextMulticastListenerRegistrationResponse(otInstance *aInstance, uint/;"	f	typeref:typename:void
otBackboneRouterGetConfig	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterGetConfig(otInstance *aInstance, otBackboneRouterConfig *aConfig)$/;"	f	typeref:typename:void
otBackboneRouterGetDomainPrefix	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterGetDomainPrefix(otInstance *aInstance, otBorderRouterConfig *aConfig)$/;"	f	typeref:typename:otError
otBackboneRouterGetNdProxyInfo	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterGetNdProxyInfo(otInstance                  *aInstance,$/;"	f	typeref:typename:otError
otBackboneRouterGetPrimary	core/api/backbone_router_api.cpp	/^otError otBackboneRouterGetPrimary(otInstance *aInstance, otBackboneRouterConfig *aConfig)$/;"	f	typeref:typename:otError
otBackboneRouterGetRegistrationJitter	core/api/backbone_router_ftd_api.cpp	/^uint8_t otBackboneRouterGetRegistrationJitter(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otBackboneRouterGetState	core/api/backbone_router_ftd_api.cpp	/^otBackboneRouterState otBackboneRouterGetState(otInstance *aInstance)$/;"	f	typeref:typename:otBackboneRouterState
otBackboneRouterMulticastListenerAdd	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterMulticastListenerAdd(otInstance *aInstance, const otIp6Address *aAddress/;"	f	typeref:typename:otError
otBackboneRouterMulticastListenerClear	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterMulticastListenerClear(otInstance *aInstance)$/;"	f	typeref:typename:void
otBackboneRouterMulticastListenerGetNext	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterMulticastListenerGetNext(otInstance                            *aInstanc/;"	f	typeref:typename:otError
otBackboneRouterRegister	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterRegister(otInstance *aInstance)$/;"	f	typeref:typename:otError
otBackboneRouterSetConfig	core/api/backbone_router_ftd_api.cpp	/^otError otBackboneRouterSetConfig(otInstance *aInstance, const otBackboneRouterConfig *aConfig)$/;"	f	typeref:typename:otError
otBackboneRouterSetDomainPrefixCallback	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterSetDomainPrefixCallback(otInstance                          *aInstance,$/;"	f	typeref:typename:void
otBackboneRouterSetEnabled	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otBackboneRouterSetMulticastListenerCallback	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterSetMulticastListenerCallback(otInstance                               *aIns/;"	f	typeref:typename:void
otBackboneRouterSetNdProxyCallback	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterSetNdProxyCallback(otInstance                     *aInstance,$/;"	f	typeref:typename:void
otBackboneRouterSetRegistrationJitter	core/api/backbone_router_ftd_api.cpp	/^void otBackboneRouterSetRegistrationJitter(otInstance *aInstance, uint8_t aJitter)$/;"	f	typeref:typename:void
otBleSecureConnect	core/api/ble_secure_api.cpp	/^otError otBleSecureConnect(otInstance *aInstance) { return AsCoreType(aInstance).Get<Ble::BleSec/;"	f	typeref:typename:otError
otBleSecureDisconnect	core/api/ble_secure_api.cpp	/^void otBleSecureDisconnect(otInstance *aInstance) { AsCoreType(aInstance).Get<Ble::BleSecure>()./;"	f	typeref:typename:void
otBleSecureFlush	core/api/ble_secure_api.cpp	/^otError otBleSecureFlush(otInstance *aInstance) { return AsCoreType(aInstance).Get<Ble::BleSecur/;"	f	typeref:typename:otError
otBleSecureGetPeerCertificateBase64	core/api/ble_secure_api.cpp	/^otError otBleSecureGetPeerCertificateBase64(otInstance *aInstance, unsigned char *aPeerCert, siz/;"	f	typeref:typename:otError
otBleSecureGetPeerSubjectAttributeByOid	core/api/ble_secure_api.cpp	/^otError otBleSecureGetPeerSubjectAttributeByOid(otInstance *aInstance,$/;"	f	typeref:typename:otError
otBleSecureGetThreadAttributeFromOwnCertificate	core/api/ble_secure_api.cpp	/^otError otBleSecureGetThreadAttributeFromOwnCertificate(otInstance *aInstance,$/;"	f	typeref:typename:otError
otBleSecureGetThreadAttributeFromPeerCertificate	core/api/ble_secure_api.cpp	/^otError otBleSecureGetThreadAttributeFromPeerCertificate(otInstance *aInstance,$/;"	f	typeref:typename:otError
otBleSecureIsCommandClassAuthorized	core/api/ble_secure_api.cpp	/^bool otBleSecureIsCommandClassAuthorized(otInstance *aInstance, otTcatCommandClass aCommandClass/;"	f	typeref:typename:bool
otBleSecureIsConnected	core/api/ble_secure_api.cpp	/^bool otBleSecureIsConnected(otInstance *aInstance) { return AsCoreType(aInstance).Get<Ble::BleSe/;"	f	typeref:typename:bool
otBleSecureIsConnectionActive	core/api/ble_secure_api.cpp	/^bool otBleSecureIsConnectionActive(otInstance *aInstance)$/;"	f	typeref:typename:bool
otBleSecureIsTcatEnabled	core/api/ble_secure_api.cpp	/^bool otBleSecureIsTcatEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otBleSecureSend	core/api/ble_secure_api.cpp	/^otError otBleSecureSend(otInstance *aInstance, uint8_t *aBuf, uint16_t aLength)$/;"	f	typeref:typename:otError
otBleSecureSendApplicationTlv	core/api/ble_secure_api.cpp	/^otError otBleSecureSendApplicationTlv(otInstance *aInstance, uint8_t *aBuf, uint16_t aLength)$/;"	f	typeref:typename:otError
otBleSecureSendMessage	core/api/ble_secure_api.cpp	/^otError otBleSecureSendMessage(otInstance *aInstance, otMessage *aMessage)$/;"	f	typeref:typename:otError
otBleSecureSetCaCertificateChain	core/api/ble_secure_api.cpp	/^void otBleSecureSetCaCertificateChain(otInstance    *aInstance,$/;"	f	typeref:typename:void
otBleSecureSetCertificate	core/api/ble_secure_api.cpp	/^void otBleSecureSetCertificate(otInstance    *aInstance,$/;"	f	typeref:typename:void
otBleSecureSetPsk	core/api/ble_secure_api.cpp	/^void otBleSecureSetPsk(otInstance    *aInstance,$/;"	f	typeref:typename:void
otBleSecureSetSslAuthMode	core/api/ble_secure_api.cpp	/^void otBleSecureSetSslAuthMode(otInstance *aInstance, bool aVerifyPeerCertificate)$/;"	f	typeref:typename:void
otBleSecureStart	core/api/ble_secure_api.cpp	/^otError otBleSecureStart(otInstance              *aInstance,$/;"	f	typeref:typename:otError
otBleSecureStop	core/api/ble_secure_api.cpp	/^void otBleSecureStop(otInstance *aInstance) { AsCoreType(aInstance).Get<Ble::BleSecure>().Stop()/;"	f	typeref:typename:void
otBleSecureTcatStart	core/api/ble_secure_api.cpp	/^otError otBleSecureTcatStart(otInstance *aInstance, const otTcatVendorInfo *aVendorInfo, otHandl/;"	f	typeref:typename:otError
otBorderAgentClearEphemeralKey	core/api/border_agent_api.cpp	/^void otBorderAgentClearEphemeralKey(otInstance *aInstance)$/;"	f	typeref:typename:void
otBorderAgentGetId	core/api/border_agent_api.cpp	/^otError otBorderAgentGetId(otInstance *aInstance, otBorderAgentId *aId)$/;"	f	typeref:typename:otError
otBorderAgentGetState	core/api/border_agent_api.cpp	/^otBorderAgentState otBorderAgentGetState(otInstance *aInstance)$/;"	f	typeref:typename:otBorderAgentState
otBorderAgentGetUdpPort	core/api/border_agent_api.cpp	/^uint16_t otBorderAgentGetUdpPort(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otBorderAgentIsEphemeralKeyActive	core/api/border_agent_api.cpp	/^bool otBorderAgentIsEphemeralKeyActive(otInstance *aInstance)$/;"	f	typeref:typename:bool
otBorderAgentSetEphemeralKey	core/api/border_agent_api.cpp	/^otError otBorderAgentSetEphemeralKey(otInstance *aInstance,$/;"	f	typeref:typename:otError
otBorderAgentSetEphemeralKeyCallback	core/api/border_agent_api.cpp	/^void otBorderAgentSetEphemeralKeyCallback(otInstance                       *aInstance,$/;"	f	typeref:typename:void
otBorderAgentSetId	core/api/border_agent_api.cpp	/^otError otBorderAgentSetId(otInstance *aInstance, const otBorderAgentId *aId)$/;"	f	typeref:typename:otError
otBorderRouterAddOnMeshPrefix	core/api/border_router_api.cpp	/^otError otBorderRouterAddOnMeshPrefix(otInstance *aInstance, const otBorderRouterConfig *aConfig/;"	f	typeref:typename:otError
otBorderRouterAddRoute	core/api/border_router_api.cpp	/^otError otBorderRouterAddRoute(otInstance *aInstance, const otExternalRouteConfig *aConfig)$/;"	f	typeref:typename:otError
otBorderRouterGetNetData	core/api/border_router_api.cpp	/^otError otBorderRouterGetNetData(otInstance *aInstance, bool aStable, uint8_t *aData, uint8_t *a/;"	f	typeref:typename:otError
otBorderRouterGetNextOnMeshPrefix	core/api/border_router_api.cpp	/^otError otBorderRouterGetNextOnMeshPrefix(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otBorderRouterGetNextRoute	core/api/border_router_api.cpp	/^otError otBorderRouterGetNextRoute(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otBorderRouterRegister	core/api/border_router_api.cpp	/^otError otBorderRouterRegister(otInstance *aInstance)$/;"	f	typeref:typename:otError
otBorderRouterRemoveOnMeshPrefix	core/api/border_router_api.cpp	/^otError otBorderRouterRemoveOnMeshPrefix(otInstance *aInstance, const otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRouterRemoveRoute	core/api/border_router_api.cpp	/^otError otBorderRouterRemoveRoute(otInstance *aInstance, const otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRouterSetNetDataFullCallback	core/api/border_router_api.cpp	/^void otBorderRouterSetNetDataFullCallback(otInstance                       *aInstance,$/;"	f	typeref:typename:void
otBorderRoutingClearRouteInfoOptionPreference	core/api/border_routing_api.cpp	/^void otBorderRoutingClearRouteInfoOptionPreference(otInstance *aInstance)$/;"	f	typeref:typename:void
otBorderRoutingClearRoutePreference	core/api/border_routing_api.cpp	/^void otBorderRoutingClearRoutePreference(otInstance *aInstance)$/;"	f	typeref:typename:void
otBorderRoutingDhcp6PdGetState	core/api/border_routing_api.cpp	/^otBorderRoutingDhcp6PdState otBorderRoutingDhcp6PdGetState(otInstance *aInstance)$/;"	f	typeref:typename:otBorderRoutingDhcp6PdState
otBorderRoutingDhcp6PdSetEnabled	core/api/border_routing_api.cpp	/^void otBorderRoutingDhcp6PdSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otBorderRoutingDhcp6PdSetRequestCallback	core/api/border_routing_api.cpp	/^void otBorderRoutingDhcp6PdSetRequestCallback(otInstance                           *aInstance,$/;"	f	typeref:typename:void
otBorderRoutingGetFavoredNat64Prefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetFavoredNat64Prefix(otInstance        *aInstance,$/;"	f	typeref:typename:otError
otBorderRoutingGetFavoredOmrPrefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetFavoredOmrPrefix(otInstance *aInstance, otIp6Prefix *aPrefix, otRouteP/;"	f	typeref:typename:otError
otBorderRoutingGetFavoredOnLinkPrefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetFavoredOnLinkPrefix(otInstance *aInstance, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRoutingGetNat64Prefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetNat64Prefix(otInstance *aInstance, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRoutingGetNextPrefixTableEntry	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetNextPrefixTableEntry(otInstance                         *aInstance,$/;"	f	typeref:typename:otError
otBorderRoutingGetNextRouterEntry	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetNextRouterEntry(otInstance                         *aInstance,$/;"	f	typeref:typename:otError
otBorderRoutingGetOmrPrefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetOmrPrefix(otInstance *aInstance, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRoutingGetOnLinkPrefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetOnLinkPrefix(otInstance *aInstance, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otBorderRoutingGetPdOmrPrefix	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetPdOmrPrefix(otInstance *aInstance, otBorderRoutingPrefixTableEntry *aP/;"	f	typeref:typename:otError
otBorderRoutingGetPdProcessedRaInfo	core/api/border_routing_api.cpp	/^otError otBorderRoutingGetPdProcessedRaInfo(otInstance *aInstance, otPdProcessedRaInfo *aPdProce/;"	f	typeref:typename:otError
otBorderRoutingGetRouteInfoOptionPreference	core/api/border_routing_api.cpp	/^otRoutePreference otBorderRoutingGetRouteInfoOptionPreference(otInstance *aInstance)$/;"	f	typeref:typename:otRoutePreference
otBorderRoutingGetRoutePreference	core/api/border_routing_api.cpp	/^otRoutePreference otBorderRoutingGetRoutePreference(otInstance *aInstance)$/;"	f	typeref:typename:otRoutePreference
otBorderRoutingGetState	core/api/border_routing_api.cpp	/^otBorderRoutingState otBorderRoutingGetState(otInstance *aInstance)$/;"	f	typeref:typename:otBorderRoutingState
otBorderRoutingInit	core/api/border_routing_api.cpp	/^otError otBorderRoutingInit(otInstance *aInstance, uint32_t aInfraIfIndex, bool aInfraIfIsRunnin/;"	f	typeref:typename:otError
otBorderRoutingPrefixTableInitIterator	core/api/border_routing_api.cpp	/^void otBorderRoutingPrefixTableInitIterator(otInstance *aInstance, otBorderRoutingPrefixTableIte/;"	f	typeref:typename:void
otBorderRoutingSetEnabled	core/api/border_routing_api.cpp	/^otError otBorderRoutingSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:otError
otBorderRoutingSetExtraRouterAdvertOptions	core/api/border_routing_api.cpp	/^otError otBorderRoutingSetExtraRouterAdvertOptions(otInstance *aInstance, const uint8_t *aOption/;"	f	typeref:typename:otError
otBorderRoutingSetRouteInfoOptionPreference	core/api/border_routing_api.cpp	/^void otBorderRoutingSetRouteInfoOptionPreference(otInstance *aInstance, otRoutePreference aPrefe/;"	f	typeref:typename:void
otBorderRoutingSetRoutePreference	core/api/border_routing_api.cpp	/^void otBorderRoutingSetRoutePreference(otInstance *aInstance, otRoutePreference aPreference)$/;"	f	typeref:typename:void
otChannelManagerGetAutoChannelSelectionEnabled	core/api/channel_manager_api.cpp	/^bool otChannelManagerGetAutoChannelSelectionEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otChannelManagerGetAutoChannelSelectionInterval	core/api/channel_manager_api.cpp	/^uint32_t otChannelManagerGetAutoChannelSelectionInterval(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelManagerGetAutoCslChannelSelectionEnabled	core/api/channel_manager_api.cpp	/^bool otChannelManagerGetAutoCslChannelSelectionEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otChannelManagerGetCcaFailureRateThreshold	core/api/channel_manager_api.cpp	/^uint16_t otChannelManagerGetCcaFailureRateThreshold(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otChannelManagerGetDelay	core/api/channel_manager_api.cpp	/^uint16_t otChannelManagerGetDelay(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otChannelManagerGetFavoredChannels	core/api/channel_manager_api.cpp	/^uint32_t otChannelManagerGetFavoredChannels(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelManagerGetRequestedChannel	core/api/channel_manager_api.cpp	/^uint8_t otChannelManagerGetRequestedChannel(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otChannelManagerGetSupportedChannels	core/api/channel_manager_api.cpp	/^uint32_t otChannelManagerGetSupportedChannels(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelManagerRequestChannelChange	core/api/channel_manager_api.cpp	/^void otChannelManagerRequestChannelChange(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:void
otChannelManagerRequestChannelSelect	core/api/channel_manager_api.cpp	/^otError otChannelManagerRequestChannelSelect(otInstance *aInstance, bool aSkipQualityCheck)$/;"	f	typeref:typename:otError
otChannelManagerRequestCslChannelSelect	core/api/channel_manager_api.cpp	/^otError otChannelManagerRequestCslChannelSelect(otInstance *aInstance, bool aSkipQualityCheck)$/;"	f	typeref:typename:otError
otChannelManagerSetAutoChannelSelectionEnabled	core/api/channel_manager_api.cpp	/^void otChannelManagerSetAutoChannelSelectionEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otChannelManagerSetAutoChannelSelectionInterval	core/api/channel_manager_api.cpp	/^otError otChannelManagerSetAutoChannelSelectionInterval(otInstance *aInstance, uint32_t aInterva/;"	f	typeref:typename:otError
otChannelManagerSetAutoCslChannelSelectionEnabled	core/api/channel_manager_api.cpp	/^void otChannelManagerSetAutoCslChannelSelectionEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otChannelManagerSetCcaFailureRateThreshold	core/api/channel_manager_api.cpp	/^void otChannelManagerSetCcaFailureRateThreshold(otInstance *aInstance, uint16_t aThreshold)$/;"	f	typeref:typename:void
otChannelManagerSetDelay	core/api/channel_manager_api.cpp	/^otError otChannelManagerSetDelay(otInstance *aInstance, uint16_t aDelay)$/;"	f	typeref:typename:otError
otChannelManagerSetFavoredChannels	core/api/channel_manager_api.cpp	/^void otChannelManagerSetFavoredChannels(otInstance *aInstance, uint32_t aChannelMask)$/;"	f	typeref:typename:void
otChannelManagerSetSupportedChannels	core/api/channel_manager_api.cpp	/^void otChannelManagerSetSupportedChannels(otInstance *aInstance, uint32_t aChannelMask)$/;"	f	typeref:typename:void
otChannelMonitorGetChannelOccupancy	core/api/channel_monitor_api.cpp	/^uint16_t otChannelMonitorGetChannelOccupancy(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:uint16_t
otChannelMonitorGetRssiThreshold	core/api/channel_monitor_api.cpp	/^int8_t otChannelMonitorGetRssiThreshold(otInstance *aInstance)$/;"	f	typeref:typename:int8_t
otChannelMonitorGetSampleCount	core/api/channel_monitor_api.cpp	/^uint32_t otChannelMonitorGetSampleCount(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelMonitorGetSampleInterval	core/api/channel_monitor_api.cpp	/^uint32_t otChannelMonitorGetSampleInterval(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelMonitorGetSampleWindow	core/api/channel_monitor_api.cpp	/^uint32_t otChannelMonitorGetSampleWindow(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otChannelMonitorIsEnabled	core/api/channel_monitor_api.cpp	/^bool otChannelMonitorIsEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otChannelMonitorSetEnabled	core/api/channel_monitor_api.cpp	/^otError otChannelMonitorSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:otError
otChildSupervisionGetCheckFailureCounter	core/api/child_supervision_api.cpp	/^uint16_t otChildSupervisionGetCheckFailureCounter(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otChildSupervisionGetCheckTimeout	core/api/child_supervision_api.cpp	/^uint16_t otChildSupervisionGetCheckTimeout(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otChildSupervisionGetInterval	core/api/child_supervision_api.cpp	/^uint16_t otChildSupervisionGetInterval(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otChildSupervisionResetCheckFailureCounter	core/api/child_supervision_api.cpp	/^void otChildSupervisionResetCheckFailureCounter(otInstance *aInstance)$/;"	f	typeref:typename:void
otChildSupervisionSetCheckTimeout	core/api/child_supervision_api.cpp	/^void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)$/;"	f	typeref:typename:void
otChildSupervisionSetInterval	core/api/child_supervision_api.cpp	/^void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)$/;"	f	typeref:typename:void
otCliAppendResult	cli/cli.cpp	/^extern "C" void otCliAppendResult(otError aError) { Interpreter::GetInterpreter().OutputResult(a/;"	f	namespace:ot::Cli	typeref:typename:void
otCliInit	cli/cli.cpp	/^extern "C" void otCliInit(otInstance *aInstance, otCliOutputCallback aCallback, void *aContext)$/;"	f	namespace:ot::Cli	typeref:typename:void
otCliInputLine	cli/cli.cpp	/^extern "C" void otCliInputLine(char *aBuf) { Interpreter::GetInterpreter().ProcessLine(aBuf); }$/;"	f	namespace:ot::Cli	typeref:typename:void
otCliOutputBytes	cli/cli.cpp	/^extern "C" void otCliOutputBytes(const uint8_t *aBytes, uint8_t aLength)$/;"	f	namespace:ot::Cli	typeref:typename:void
otCliOutputFormat	cli/cli.cpp	/^extern "C" void otCliOutputFormat(const char *aFmt, ...)$/;"	f	namespace:ot::Cli	typeref:typename:void
otCliPlatLogv	cli/cli.cpp	/^extern "C" void otCliPlatLogv(otLogLevel aLogLevel, otLogRegion aLogRegion, const char *aFormat,/;"	f	namespace:ot::Cli	typeref:typename:void
otCliSetUserCommands	cli/cli.cpp	/^extern "C" otError otCliSetUserCommands(const otCliCommand *aUserCommands, uint8_t aLength, void/;"	f	namespace:ot::Cli	typeref:typename:otError
otCliVendorSetUserCommands	cli/cli_extension_example.c	/^void otCliVendorSetUserCommands(void)$/;"	f	typeref:typename:void
otCoapAddBlockWiseResource	core/api/coap_api.cpp	/^void otCoapAddBlockWiseResource(otInstance *aInstance, otCoapBlockwiseResource *aResource)$/;"	f	typeref:typename:void
otCoapAddResource	core/api/coap_api.cpp	/^void otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)$/;"	f	typeref:typename:void
otCoapBlockSizeFromExponent	core/api/coap_api.cpp	/^uint16_t otCoapBlockSizeFromExponent(otCoapBlockSzx aSize)$/;"	f	typeref:typename:uint16_t
otCoapMessageAppendBlock1Option	core/api/coap_api.cpp	/^otError otCoapMessageAppendBlock1Option(otMessage *aMessage, uint32_t aNum, bool aMore, otCoapBl/;"	f	typeref:typename:otError
otCoapMessageAppendBlock2Option	core/api/coap_api.cpp	/^otError otCoapMessageAppendBlock2Option(otMessage *aMessage, uint32_t aNum, bool aMore, otCoapBl/;"	f	typeref:typename:otError
otCoapMessageAppendContentFormatOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendContentFormatOption(otMessage *aMessage, otCoapOptionContentFormat aC/;"	f	typeref:typename:otError
otCoapMessageAppendMaxAgeOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendMaxAgeOption(otMessage *aMessage, uint32_t aMaxAge)$/;"	f	typeref:typename:otError
otCoapMessageAppendObserveOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendObserveOption(otMessage *aMessage, uint32_t aObserve)$/;"	f	typeref:typename:otError
otCoapMessageAppendOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendOption(otMessage *aMessage, uint16_t aNumber, uint16_t aLength, const/;"	f	typeref:typename:otError
otCoapMessageAppendProxyUriOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendProxyUriOption(otMessage *aMessage, const char *aUriPath)$/;"	f	typeref:typename:otError
otCoapMessageAppendUintOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendUintOption(otMessage *aMessage, uint16_t aNumber, uint32_t aValue)$/;"	f	typeref:typename:otError
otCoapMessageAppendUriPathOptions	core/api/coap_api.cpp	/^otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)$/;"	f	typeref:typename:otError
otCoapMessageAppendUriQueryOption	core/api/coap_api.cpp	/^otError otCoapMessageAppendUriQueryOption(otMessage *aMessage, const char *aUriQuery)$/;"	f	typeref:typename:otError
otCoapMessageCodeToString	core/api/coap_api.cpp	/^const char *otCoapMessageCodeToString(const otMessage *aMessage) { return AsCoapMessage(aMessage/;"	f	typeref:typename:const char *
otCoapMessageGenerateToken	core/api/coap_api.cpp	/^void otCoapMessageGenerateToken(otMessage *aMessage, uint8_t aTokenLength)$/;"	f	typeref:typename:void
otCoapMessageGetCode	core/api/coap_api.cpp	/^otCoapCode otCoapMessageGetCode(const otMessage *aMessage)$/;"	f	typeref:typename:otCoapCode
otCoapMessageGetMessageId	core/api/coap_api.cpp	/^uint16_t otCoapMessageGetMessageId(const otMessage *aMessage) { return AsCoapMessage(aMessage).G/;"	f	typeref:typename:uint16_t
otCoapMessageGetToken	core/api/coap_api.cpp	/^const uint8_t *otCoapMessageGetToken(const otMessage *aMessage) { return AsCoapMessage(aMessage)/;"	f	typeref:typename:const uint8_t *
otCoapMessageGetTokenLength	core/api/coap_api.cpp	/^uint8_t otCoapMessageGetTokenLength(const otMessage *aMessage) { return AsCoapMessage(aMessage)./;"	f	typeref:typename:uint8_t
otCoapMessageGetType	core/api/coap_api.cpp	/^otCoapType otCoapMessageGetType(const otMessage *aMessage)$/;"	f	typeref:typename:otCoapType
otCoapMessageInit	core/api/coap_api.cpp	/^void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)$/;"	f	typeref:typename:void
otCoapMessageInitResponse	core/api/coap_api.cpp	/^otError otCoapMessageInitResponse(otMessage *aResponse, const otMessage *aRequest, otCoapType aT/;"	f	typeref:typename:otError
otCoapMessageSetCode	core/api/coap_api.cpp	/^void otCoapMessageSetCode(otMessage *aMessage, otCoapCode aCode) { AsCoapMessage(aMessage).SetCo/;"	f	typeref:typename:void
otCoapMessageSetPayloadMarker	core/api/coap_api.cpp	/^otError otCoapMessageSetPayloadMarker(otMessage *aMessage) { return AsCoapMessage(aMessage).SetP/;"	f	typeref:typename:otError
otCoapMessageSetToken	core/api/coap_api.cpp	/^otError otCoapMessageSetToken(otMessage *aMessage, const uint8_t *aToken, uint8_t aTokenLength)$/;"	f	typeref:typename:otError
otCoapNewMessage	core/api/coap_api.cpp	/^otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)$/;"	f	typeref:typename:otMessage *
otCoapOptionIteratorGetFirstOption	core/api/coap_api.cpp	/^const otCoapOption *otCoapOptionIteratorGetFirstOption(otCoapOptionIterator *aIterator)$/;"	f	typeref:typename:const otCoapOption *
otCoapOptionIteratorGetFirstOptionMatching	core/api/coap_api.cpp	/^const otCoapOption *otCoapOptionIteratorGetFirstOptionMatching(otCoapOptionIterator *aIterator, /;"	f	typeref:typename:const otCoapOption *
otCoapOptionIteratorGetNextOption	core/api/coap_api.cpp	/^const otCoapOption *otCoapOptionIteratorGetNextOption(otCoapOptionIterator *aIterator)$/;"	f	typeref:typename:const otCoapOption *
otCoapOptionIteratorGetNextOptionMatching	core/api/coap_api.cpp	/^const otCoapOption *otCoapOptionIteratorGetNextOptionMatching(otCoapOptionIterator *aIterator, u/;"	f	typeref:typename:const otCoapOption *
otCoapOptionIteratorGetOptionUintValue	core/api/coap_api.cpp	/^otError otCoapOptionIteratorGetOptionUintValue(otCoapOptionIterator *aIterator, uint64_t *aValue/;"	f	typeref:typename:otError
otCoapOptionIteratorGetOptionValue	core/api/coap_api.cpp	/^otError otCoapOptionIteratorGetOptionValue(otCoapOptionIterator *aIterator, void *aValue)$/;"	f	typeref:typename:otError
otCoapOptionIteratorInit	core/api/coap_api.cpp	/^otError otCoapOptionIteratorInit(otCoapOptionIterator *aIterator, const otMessage *aMessage)$/;"	f	typeref:typename:otError
otCoapRemoveBlockWiseResource	core/api/coap_api.cpp	/^void otCoapRemoveBlockWiseResource(otInstance *aInstance, otCoapBlockwiseResource *aResource)$/;"	f	typeref:typename:void
otCoapRemoveResource	core/api/coap_api.cpp	/^void otCoapRemoveResource(otInstance *aInstance, otCoapResource *aResource)$/;"	f	typeref:typename:void
otCoapSecureAddBlockWiseResource	core/api/coap_secure_api.cpp	/^void otCoapSecureAddBlockWiseResource(otInstance *aInstance, otCoapBlockwiseResource *aResource)$/;"	f	typeref:typename:void
otCoapSecureAddResource	core/api/coap_secure_api.cpp	/^void otCoapSecureAddResource(otInstance *aInstance, otCoapResource *aResource)$/;"	f	typeref:typename:void
otCoapSecureConnect	core/api/coap_secure_api.cpp	/^otError otCoapSecureConnect(otInstance                     *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureDisconnect	core/api/coap_secure_api.cpp	/^void otCoapSecureDisconnect(otInstance *aInstance) { AsCoreType(aInstance).GetApplicationCoapSec/;"	f	typeref:typename:void
otCoapSecureGetPeerCertificateBase64	core/api/coap_secure_api.cpp	/^otError otCoapSecureGetPeerCertificateBase64(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureIsClosed	core/api/coap_secure_api.cpp	/^bool otCoapSecureIsClosed(otInstance *aInstance) { return AsCoreType(aInstance).GetApplicationCo/;"	f	typeref:typename:bool
otCoapSecureIsConnected	core/api/coap_secure_api.cpp	/^bool otCoapSecureIsConnected(otInstance *aInstance)$/;"	f	typeref:typename:bool
otCoapSecureIsConnectionActive	core/api/coap_secure_api.cpp	/^bool otCoapSecureIsConnectionActive(otInstance *aInstance)$/;"	f	typeref:typename:bool
otCoapSecureRemoveBlockWiseResource	core/api/coap_secure_api.cpp	/^void otCoapSecureRemoveBlockWiseResource(otInstance *aInstance, otCoapBlockwiseResource *aResour/;"	f	typeref:typename:void
otCoapSecureRemoveResource	core/api/coap_secure_api.cpp	/^void otCoapSecureRemoveResource(otInstance *aInstance, otCoapResource *aResource)$/;"	f	typeref:typename:void
otCoapSecureSendRequest	core/api/coap_secure_api.cpp	/^otError otCoapSecureSendRequest(otInstance           *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureSendRequestBlockWise	core/api/coap_secure_api.cpp	/^otError otCoapSecureSendRequestBlockWise(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureSendResponse	core/api/coap_secure_api.cpp	/^otError otCoapSecureSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo/;"	f	typeref:typename:otError
otCoapSecureSendResponseBlockWise	core/api/coap_secure_api.cpp	/^otError otCoapSecureSendResponseBlockWise(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureSetCaCertificateChain	core/api/coap_secure_api.cpp	/^void otCoapSecureSetCaCertificateChain(otInstance    *aInstance,$/;"	f	typeref:typename:void
otCoapSecureSetCertificate	core/api/coap_secure_api.cpp	/^void otCoapSecureSetCertificate(otInstance    *aInstance,$/;"	f	typeref:typename:void
otCoapSecureSetClientConnectedCallback	core/api/coap_secure_api.cpp	/^void otCoapSecureSetClientConnectedCallback(otInstance                     *aInstance,$/;"	f	typeref:typename:void
otCoapSecureSetDefaultHandler	core/api/coap_secure_api.cpp	/^void otCoapSecureSetDefaultHandler(otInstance *aInstance, otCoapRequestHandler aHandler, void *a/;"	f	typeref:typename:void
otCoapSecureSetPsk	core/api/coap_secure_api.cpp	/^void otCoapSecureSetPsk(otInstance    *aInstance,$/;"	f	typeref:typename:void
otCoapSecureSetSslAuthMode	core/api/coap_secure_api.cpp	/^void otCoapSecureSetSslAuthMode(otInstance *aInstance, bool aVerifyPeerCertificate)$/;"	f	typeref:typename:void
otCoapSecureStart	core/api/coap_secure_api.cpp	/^otError otCoapSecureStart(otInstance *aInstance, uint16_t aPort)$/;"	f	typeref:typename:otError
otCoapSecureStartWithMaxConnAttempts	core/api/coap_secure_api.cpp	/^otError otCoapSecureStartWithMaxConnAttempts(otInstance                  *aInstance,$/;"	f	typeref:typename:otError
otCoapSecureStop	core/api/coap_secure_api.cpp	/^void otCoapSecureStop(otInstance *aInstance) { AsCoreType(aInstance).GetApplicationCoapSecure()./;"	f	typeref:typename:void
otCoapSendRequestBlockWiseWithParameters	core/api/coap_api.cpp	/^otError otCoapSendRequestBlockWiseWithParameters(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otCoapSendRequestWithParameters	core/api/coap_api.cpp	/^otError otCoapSendRequestWithParameters(otInstance               *aInstance,$/;"	f	typeref:typename:otError
otCoapSendResponseBlockWiseWithParameters	core/api/coap_api.cpp	/^otError otCoapSendResponseBlockWiseWithParameters(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otCoapSendResponseWithParameters	core/api/coap_api.cpp	/^otError otCoapSendResponseWithParameters(otInstance               *aInstance,$/;"	f	typeref:typename:otError
otCoapSetDefaultHandler	core/api/coap_api.cpp	/^void otCoapSetDefaultHandler(otInstance *aInstance, otCoapRequestHandler aHandler, void *aContex/;"	f	typeref:typename:void
otCoapStart	core/api/coap_api.cpp	/^otError otCoapStart(otInstance *aInstance, uint16_t aPort)$/;"	f	typeref:typename:otError
otCoapStop	core/api/coap_api.cpp	/^otError otCoapStop(otInstance *aInstance) { return AsCoreType(aInstance).GetApplicationCoap().St/;"	f	typeref:typename:otError
otCommissionerAddJoiner	core/api/commissioner_api.cpp	/^otError otCommissionerAddJoiner(otInstance *aInstance, const otExtAddress *aEui64, const char *a/;"	f	typeref:typename:otError
otCommissionerAddJoinerWithDiscerner	core/api/commissioner_api.cpp	/^otError otCommissionerAddJoinerWithDiscerner(otInstance              *aInstance,$/;"	f	typeref:typename:otError
otCommissionerAnnounceBegin	core/api/commissioner_api.cpp	/^otError otCommissionerAnnounceBegin(otInstance         *aInstance,$/;"	f	typeref:typename:otError
otCommissionerEnergyScan	core/api/commissioner_api.cpp	/^otError otCommissionerEnergyScan(otInstance                        *aInstance,$/;"	f	typeref:typename:otError
otCommissionerGetId	core/api/commissioner_api.cpp	/^const char *otCommissionerGetId(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otCommissionerGetNextJoinerInfo	core/api/commissioner_api.cpp	/^otError otCommissionerGetNextJoinerInfo(otInstance *aInstance, uint16_t *aIterator, otJoinerInfo/;"	f	typeref:typename:otError
otCommissionerGetProvisioningUrl	core/api/commissioner_api.cpp	/^const char *otCommissionerGetProvisioningUrl(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otCommissionerGetSessionId	core/api/commissioner_api.cpp	/^uint16_t otCommissionerGetSessionId(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otCommissionerGetState	core/api/commissioner_api.cpp	/^otCommissionerState otCommissionerGetState(otInstance *aInstance)$/;"	f	typeref:typename:otCommissionerState
otCommissionerPanIdQuery	core/api/commissioner_api.cpp	/^otError otCommissionerPanIdQuery(otInstance                         *aInstance,$/;"	f	typeref:typename:otError
otCommissionerRemoveJoiner	core/api/commissioner_api.cpp	/^otError otCommissionerRemoveJoiner(otInstance *aInstance, const otExtAddress *aEui64)$/;"	f	typeref:typename:otError
otCommissionerRemoveJoinerWithDiscerner	core/api/commissioner_api.cpp	/^otError otCommissionerRemoveJoinerWithDiscerner(otInstance *aInstance, const otJoinerDiscerner */;"	f	typeref:typename:otError
otCommissionerSendMgmtGet	core/api/commissioner_api.cpp	/^otError otCommissionerSendMgmtGet(otInstance *aInstance, const uint8_t *aTlvs, uint8_t aLength)$/;"	f	typeref:typename:otError
otCommissionerSendMgmtSet	core/api/commissioner_api.cpp	/^otError otCommissionerSendMgmtSet(otInstance                   *aInstance,$/;"	f	typeref:typename:otError
otCommissionerSetId	core/api/commissioner_api.cpp	/^otError otCommissionerSetId(otInstance *aInstance, const char *aId)$/;"	f	typeref:typename:otError
otCommissionerSetProvisioningUrl	core/api/commissioner_api.cpp	/^otError otCommissionerSetProvisioningUrl(otInstance *aInstance, const char *aProvisioningUrl)$/;"	f	typeref:typename:otError
otCommissionerStart	core/api/commissioner_api.cpp	/^otError otCommissionerStart(otInstance                  *aInstance,$/;"	f	typeref:typename:otError
otCommissionerStop	core/api/commissioner_api.cpp	/^otError otCommissionerStop(otInstance *aInstance) { return AsCoreType(aInstance).Get<MeshCoP::Co/;"	f	typeref:typename:otError
otConvertDurationInSecondsToString	core/api/thread_api.cpp	/^void otConvertDurationInSecondsToString(uint32_t aDuration, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otCryptoAesCcm	core/api/crypto_api.cpp	/^void otCryptoAesCcm(const otCryptoKey *aKey,$/;"	f	typeref:typename:void
otCryptoHmacSha256	core/api/crypto_api.cpp	/^void otCryptoHmacSha256(const otCryptoKey *aKey, const uint8_t *aBuf, uint16_t aBufLength, otCry/;"	f	typeref:typename:void
otDatasetConvertToTlvs	core/api/dataset_api.cpp	/^void otDatasetConvertToTlvs(const otOperationalDataset *aDataset, otOperationalDatasetTlvs *aDat/;"	f	typeref:typename:void
otDatasetCreateNewNetwork	core/api/dataset_ftd_api.cpp	/^otError otDatasetCreateNewNetwork(otInstance *aInstance, otOperationalDataset *aDataset)$/;"	f	typeref:typename:otError
otDatasetGeneratePskc	core/api/dataset_api.cpp	/^otError otDatasetGeneratePskc(const char            *aPassPhrase,$/;"	f	typeref:typename:otError
otDatasetGetActive	core/api/dataset_api.cpp	/^otError otDatasetGetActive(otInstance *aInstance, otOperationalDataset *aDataset)$/;"	f	typeref:typename:otError
otDatasetGetActiveTlvs	core/api/dataset_api.cpp	/^otError otDatasetGetActiveTlvs(otInstance *aInstance, otOperationalDatasetTlvs *aDataset)$/;"	f	typeref:typename:otError
otDatasetGetDelayTimerMinimal	core/api/dataset_ftd_api.cpp	/^uint32_t otDatasetGetDelayTimerMinimal(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otDatasetGetPending	core/api/dataset_api.cpp	/^otError otDatasetGetPending(otInstance *aInstance, otOperationalDataset *aDataset)$/;"	f	typeref:typename:otError
otDatasetGetPendingTlvs	core/api/dataset_api.cpp	/^otError otDatasetGetPendingTlvs(otInstance *aInstance, otOperationalDatasetTlvs *aDataset)$/;"	f	typeref:typename:otError
otDatasetIsCommissioned	core/api/dataset_api.cpp	/^bool otDatasetIsCommissioned(otInstance *aInstance)$/;"	f	typeref:typename:bool
otDatasetParseTlvs	core/api/dataset_api.cpp	/^otError otDatasetParseTlvs(const otOperationalDatasetTlvs *aDatasetTlvs, otOperationalDataset *a/;"	f	typeref:typename:otError
otDatasetSendMgmtActiveGet	core/api/dataset_api.cpp	/^otError otDatasetSendMgmtActiveGet(otInstance                           *aInstance,$/;"	f	typeref:typename:otError
otDatasetSendMgmtActiveSet	core/api/dataset_api.cpp	/^otError otDatasetSendMgmtActiveSet(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otDatasetSendMgmtPendingGet	core/api/dataset_api.cpp	/^otError otDatasetSendMgmtPendingGet(otInstance                           *aInstance,$/;"	f	typeref:typename:otError
otDatasetSendMgmtPendingSet	core/api/dataset_api.cpp	/^otError otDatasetSendMgmtPendingSet(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otDatasetSetActive	core/api/dataset_api.cpp	/^otError otDatasetSetActive(otInstance *aInstance, const otOperationalDataset *aDataset)$/;"	f	typeref:typename:otError
otDatasetSetActiveTlvs	core/api/dataset_api.cpp	/^otError otDatasetSetActiveTlvs(otInstance *aInstance, const otOperationalDatasetTlvs *aDataset)$/;"	f	typeref:typename:otError
otDatasetSetDelayTimerMinimal	core/api/dataset_ftd_api.cpp	/^otError otDatasetSetDelayTimerMinimal(otInstance *aInstance, uint32_t aDelayTimerMinimal)$/;"	f	typeref:typename:otError
otDatasetSetPending	core/api/dataset_api.cpp	/^otError otDatasetSetPending(otInstance *aInstance, const otOperationalDataset *aDataset)$/;"	f	typeref:typename:otError
otDatasetSetPendingTlvs	core/api/dataset_api.cpp	/^otError otDatasetSetPendingTlvs(otInstance *aInstance, const otOperationalDatasetTlvs *aDataset)$/;"	f	typeref:typename:otError
otDatasetUpdateTlvs	core/api/dataset_api.cpp	/^otError otDatasetUpdateTlvs(const otOperationalDataset *aDataset, otOperationalDatasetTlvs *aDat/;"	f	typeref:typename:otError
otDatasetUpdaterCancelUpdate	core/api/dataset_updater_api.cpp	/^void otDatasetUpdaterCancelUpdate(otInstance *aInstance)$/;"	f	typeref:typename:void
otDatasetUpdaterIsUpdateOngoing	core/api/dataset_updater_api.cpp	/^bool otDatasetUpdaterIsUpdateOngoing(otInstance *aInstance)$/;"	f	typeref:typename:bool
otDatasetUpdaterRequestUpdate	core/api/dataset_updater_api.cpp	/^otError otDatasetUpdaterRequestUpdate(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otDiagIsEnabled	core/api/diags_api.cpp	/^bool otDiagIsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<FactoryDiags::Dia/;"	f	typeref:typename:bool
otDiagProcessCmd	core/api/diags_api.cpp	/^otError otDiagProcessCmd(otInstance *aInstance, uint8_t aArgsLength, char *aArgs[], char *aOutpu/;"	f	typeref:typename:otError
otDiagProcessCmdLine	core/api/diags_api.cpp	/^otError otDiagProcessCmdLine(otInstance *aInstance, const char *aString, char *aOutput, size_t a/;"	f	typeref:typename:otError
otDnsAddressResponseGetAddress	core/api/dns_api.cpp	/^otError otDnsAddressResponseGetAddress(const otDnsAddressResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsAddressResponseGetHostName	core/api/dns_api.cpp	/^otError otDnsAddressResponseGetHostName(const otDnsAddressResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsBrowseResponseGetHostAddress	core/api/dns_api.cpp	/^otError otDnsBrowseResponseGetHostAddress(const otDnsBrowseResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsBrowseResponseGetServiceInfo	core/api/dns_api.cpp	/^otError otDnsBrowseResponseGetServiceInfo(const otDnsBrowseResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsBrowseResponseGetServiceInstance	core/api/dns_api.cpp	/^otError otDnsBrowseResponseGetServiceInstance(const otDnsBrowseResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsBrowseResponseGetServiceName	core/api/dns_api.cpp	/^otError otDnsBrowseResponseGetServiceName(const otDnsBrowseResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsClientBrowse	core/api/dns_api.cpp	/^otError otDnsClientBrowse(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otDnsClientGetDefaultConfig	core/api/dns_api.cpp	/^const otDnsQueryConfig *otDnsClientGetDefaultConfig(otInstance *aInstance)$/;"	f	typeref:typename:const otDnsQueryConfig *
otDnsClientResolveAddress	core/api/dns_api.cpp	/^otError otDnsClientResolveAddress(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otDnsClientResolveIp4Address	core/api/dns_api.cpp	/^otError otDnsClientResolveIp4Address(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otDnsClientResolveService	core/api/dns_api.cpp	/^otError otDnsClientResolveService(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otDnsClientResolveServiceAndHostAddress	core/api/dns_api.cpp	/^otError otDnsClientResolveServiceAndHostAddress(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otDnsClientSetDefaultConfig	core/api/dns_api.cpp	/^void otDnsClientSetDefaultConfig(otInstance *aInstance, const otDnsQueryConfig *aConfig)$/;"	f	typeref:typename:void
otDnsEncodeTxtData	core/api/dns_api.cpp	/^otError otDnsEncodeTxtData(const otDnsTxtEntry *aTxtEntries,$/;"	f	typeref:typename:otError
otDnsGetNextTxtEntry	core/api/dns_api.cpp	/^otError otDnsGetNextTxtEntry(otDnsTxtEntryIterator *aIterator, otDnsTxtEntry *aEntry)$/;"	f	typeref:typename:otError
otDnsInitTxtEntryIterator	core/api/dns_api.cpp	/^void otDnsInitTxtEntryIterator(otDnsTxtEntryIterator *aIterator, const uint8_t *aTxtData, uint16/;"	f	typeref:typename:void
otDnsIsNameCompressionEnabled	core/api/dns_api.cpp	/^bool otDnsIsNameCompressionEnabled(void) { return Instance::IsDnsNameCompressionEnabled(); }$/;"	f	typeref:typename:bool
otDnsServiceResponseGetHostAddress	core/api/dns_api.cpp	/^otError otDnsServiceResponseGetHostAddress(const otDnsServiceResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsServiceResponseGetServiceInfo	core/api/dns_api.cpp	/^otError otDnsServiceResponseGetServiceInfo(const otDnsServiceResponse *aResponse, otDnsServiceIn/;"	f	typeref:typename:otError
otDnsServiceResponseGetServiceName	core/api/dns_api.cpp	/^otError otDnsServiceResponseGetServiceName(const otDnsServiceResponse *aResponse,$/;"	f	typeref:typename:otError
otDnsSetNameCompressionEnabled	core/api/dns_api.cpp	/^void otDnsSetNameCompressionEnabled(bool aEnabled) { Instance::SetDnsNameCompressionEnabled(aEna/;"	f	typeref:typename:void
otDnssdGetCounters	core/api/dns_server_api.cpp	/^const otDnssdCounters *otDnssdGetCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otDnssdCounters *
otDnssdGetNextQuery	core/api/dns_server_api.cpp	/^const otDnssdQuery *otDnssdGetNextQuery(otInstance *aInstance, const otDnssdQuery *aQuery)$/;"	f	typeref:typename:const otDnssdQuery *
otDnssdGetQueryTypeAndName	core/api/dns_server_api.cpp	/^otDnssdQueryType otDnssdGetQueryTypeAndName(const otDnssdQuery *aQuery, char (*aNameOutput)[OT_D/;"	f	typeref:typename:otDnssdQueryType
otDnssdQueryHandleDiscoveredHost	core/api/dns_server_api.cpp	/^void otDnssdQueryHandleDiscoveredHost(otInstance *aInstance, const char *aHostFullName, otDnssdH/;"	f	typeref:typename:void
otDnssdQueryHandleDiscoveredServiceInstance	core/api/dns_server_api.cpp	/^void otDnssdQueryHandleDiscoveredServiceInstance(otInstance                 *aInstance,$/;"	f	typeref:typename:void
otDnssdQuerySetCallbacks	core/api/dns_server_api.cpp	/^void otDnssdQuerySetCallbacks(otInstance                     *aInstance,$/;"	f	typeref:typename:void
otDnssdUpstreamQueryIsEnabled	core/api/dns_server_api.cpp	/^bool otDnssdUpstreamQueryIsEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otDnssdUpstreamQuerySetEnabled	core/api/dns_server_api.cpp	/^void otDnssdUpstreamQuerySetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otDumpCritPlat	core/api/logging_api.cpp	/^void otDumpCritPlat(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	typeref:typename:void
otDumpDebgPlat	core/api/logging_api.cpp	/^void otDumpDebgPlat(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	typeref:typename:void
otDumpInfoPlat	core/api/logging_api.cpp	/^void otDumpInfoPlat(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	typeref:typename:void
otDumpNotePlat	core/api/logging_api.cpp	/^void otDumpNotePlat(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	typeref:typename:void
otDumpWarnPlat	core/api/logging_api.cpp	/^void otDumpWarnPlat(const char *aText, const void *aData, uint16_t aDataLength)$/;"	f	typeref:typename:void
otExitCodeToString	lib/platform/exit_code.c	/^const char *otExitCodeToString(uint8_t aExitCode)$/;"	f	typeref:typename:const char *
otExitCodeToString	posix/platform/settings.cpp	/^const char *otExitCodeToString(uint8_t aExitCode)$/;"	f	typeref:typename:const char *
otGetRadioVersionString	core/api/instance_api.cpp	/^const char *otGetRadioVersionString(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otGetVersionString	core/api/instance_api.cpp	/^const char *otGetVersionString(void)$/;"	f	typeref:typename:const char *
otHeapCAlloc	core/api/heap_api.cpp	/^void *otHeapCAlloc(size_t aCount, size_t aSize) { return ot::Heap::CAlloc(aCount, aSize); }$/;"	f	typeref:typename:void *
otHeapCAlloc	core/api/heap_api.cpp	/^void *otHeapCAlloc(size_t aCount, size_t aSize)$/;"	f	typeref:typename:void *
otHeapFree	core/api/heap_api.cpp	/^void otHeapFree(void *aPointer) { ot::Heap::Free(aPointer); }$/;"	f	typeref:typename:void
otHeapFree	core/api/heap_api.cpp	/^void otHeapFree(void *aPointer)$/;"	f	typeref:typename:void
otHistoryTrackerEntryAgeToString	core/api/history_tracker_api.cpp	/^void otHistoryTrackerEntryAgeToString(uint32_t aEntryAge, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otHistoryTrackerInitIterator	core/api/history_tracker_api.cpp	/^void otHistoryTrackerInitIterator(otHistoryTrackerIterator *aIterator) { AsCoreType(aIterator).I/;"	f	typeref:typename:void
otHistoryTrackerIterateExternalRouteHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerExternalRouteInfo *otHistoryTrackerIterateExternalRouteHistory($/;"	f	typeref:typename:const otHistoryTrackerExternalRouteInfo *
otHistoryTrackerIterateMulticastAddressHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerMulticastAddressInfo *otHistoryTrackerIterateMulticastAddressHistory($/;"	f	typeref:typename:const otHistoryTrackerMulticastAddressInfo *
otHistoryTrackerIterateNeighborHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerNeighborInfo *otHistoryTrackerIterateNeighborHistory(otInstance           /;"	f	typeref:typename:const otHistoryTrackerNeighborInfo *
otHistoryTrackerIterateNetInfoHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerNetworkInfo *otHistoryTrackerIterateNetInfoHistory(otInstance             /;"	f	typeref:typename:const otHistoryTrackerNetworkInfo *
otHistoryTrackerIterateOnMeshPrefixHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerOnMeshPrefixInfo *otHistoryTrackerIterateOnMeshPrefixHistory(otInstance   /;"	f	typeref:typename:const otHistoryTrackerOnMeshPrefixInfo *
otHistoryTrackerIterateRouterHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerRouterInfo *otHistoryTrackerIterateRouterHistory(otInstance               /;"	f	typeref:typename:const otHistoryTrackerRouterInfo *
otHistoryTrackerIterateRxHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerMessageInfo *otHistoryTrackerIterateRxHistory(otInstance               *aI/;"	f	typeref:typename:const otHistoryTrackerMessageInfo *
otHistoryTrackerIterateTxHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerMessageInfo *otHistoryTrackerIterateTxHistory(otInstance               *aI/;"	f	typeref:typename:const otHistoryTrackerMessageInfo *
otHistoryTrackerIterateUnicastAddressHistory	core/api/history_tracker_api.cpp	/^const otHistoryTrackerUnicastAddressInfo *otHistoryTrackerIterateUnicastAddressHistory($/;"	f	typeref:typename:const otHistoryTrackerUnicastAddressInfo *
otIcmp6GetEchoMode	core/api/icmp6_api.cpp	/^otIcmp6EchoMode otIcmp6GetEchoMode(otInstance *aInstance)$/;"	f	typeref:typename:otIcmp6EchoMode
otIcmp6RegisterHandler	core/api/icmp6_api.cpp	/^otError otIcmp6RegisterHandler(otInstance *aInstance, otIcmp6Handler *aHandler)$/;"	f	typeref:typename:otError
otIcmp6SendEchoRequest	core/api/icmp6_api.cpp	/^otError otIcmp6SendEchoRequest(otInstance          *aInstance,$/;"	f	typeref:typename:otError
otIcmp6SetEchoMode	core/api/icmp6_api.cpp	/^void otIcmp6SetEchoMode(otInstance *aInstance, otIcmp6EchoMode aMode)$/;"	f	typeref:typename:void
otInstanceErasePersistentInfo	core/api/instance_api.cpp	/^otError otInstanceErasePersistentInfo(otInstance *aInstance) { return AsCoreType(aInstance).Eras/;"	f	typeref:typename:otError
otInstanceFactoryReset	core/api/instance_api.cpp	/^void otInstanceFactoryReset(otInstance *aInstance) { AsCoreType(aInstance).FactoryReset(); }$/;"	f	typeref:typename:void
otInstanceFinalize	core/api/instance_api.cpp	/^void otInstanceFinalize(otInstance *aInstance) { AsCoreType(aInstance).Finalize(); }$/;"	f	typeref:typename:void
otInstanceGetId	core/api/instance_api.cpp	/^uint32_t otInstanceGetId(otInstance *aInstance) { return AsCoreType(aInstance).GetId(); }$/;"	f	typeref:typename:uint32_t
otInstanceGetUptime	core/api/instance_api.cpp	/^uint64_t otInstanceGetUptime(otInstance *aInstance) { return AsCoreType(aInstance).Get<Uptime>()/;"	f	typeref:typename:uint64_t
otInstanceGetUptimeAsString	core/api/instance_api.cpp	/^void otInstanceGetUptimeAsString(otInstance *aInstance, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otInstanceInit	core/api/instance_api.cpp	/^otInstance *otInstanceInit(void *aInstanceBuffer, size_t *aInstanceBufferSize)$/;"	f	typeref:typename:otInstance *
otInstanceInitMultiple	core/api/instance_api.cpp	/^otInstance *otInstanceInitMultiple(uint8_t aIdx)$/;"	f	typeref:typename:otInstance *
otInstanceInitSingle	core/api/instance_api.cpp	/^otInstance *otInstanceInitSingle(void) { return &Instance::InitSingle(); }$/;"	f	typeref:typename:otInstance *
otInstanceIsInitialized	core/api/instance_api.cpp	/^bool otInstanceIsInitialized(otInstance *aInstance)$/;"	f	typeref:typename:bool
otInstanceReset	core/api/instance_api.cpp	/^void otInstanceReset(otInstance *aInstance) { AsCoreType(aInstance).Reset(); }$/;"	f	typeref:typename:void
otInstanceResetRadioStack	core/api/instance_api.cpp	/^void otInstanceResetRadioStack(otInstance *aInstance) { AsCoreType(aInstance).ResetRadioStack();/;"	f	typeref:typename:void
otInstanceResetToBootloader	core/api/instance_api.cpp	/^otError otInstanceResetToBootloader(otInstance *aInstance) { return AsCoreType(aInstance).ResetT/;"	f	typeref:typename:otError
otIp4AddressFromString	core/api/nat64_api.cpp	/^otError otIp4AddressFromString(const char *aString, otIp4Address *aAddress)$/;"	f	typeref:typename:otError
otIp4AddressToString	core/api/nat64_api.cpp	/^void otIp4AddressToString(const otIp4Address *aAddress, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otIp4CidrFromString	core/api/nat64_api.cpp	/^otError otIp4CidrFromString(const char *aString, otIp4Cidr *aCidr) { return AsCoreType(aCidr).Fr/;"	f	typeref:typename:otError
otIp4CidrToString	core/api/nat64_api.cpp	/^void otIp4CidrToString(const otIp4Cidr *aCidr, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otIp4ExtractFromIp6Address	core/api/nat64_api.cpp	/^void otIp4ExtractFromIp6Address(uint8_t aPrefixLength, const otIp6Address *aIp6Address, otIp4Add/;"	f	typeref:typename:void
otIp4FromIp4MappedIp6Address	core/api/nat64_api.cpp	/^otError otIp4FromIp4MappedIp6Address(const otIp6Address *aIp6Address, otIp4Address *aIp4Address)$/;"	f	typeref:typename:otError
otIp4IsAddressEqual	core/api/nat64_api.cpp	/^bool otIp4IsAddressEqual(const otIp4Address *aFirst, const otIp4Address *aSecond)$/;"	f	typeref:typename:bool
otIp4NewMessage	core/api/nat64_api.cpp	/^otMessage *otIp4NewMessage(otInstance *aInstance, const otMessageSettings *aSettings)$/;"	f	typeref:typename:otMessage *
otIp4ToIp4MappedIp6Address	core/api/nat64_api.cpp	/^void otIp4ToIp4MappedIp6Address(const otIp4Address *aIp4Address, otIp6Address *aIp6Address)$/;"	f	typeref:typename:void
otIp6AddUnicastAddress	core/api/ip6_api.cpp	/^otError otIp6AddUnicastAddress(otInstance *aInstance, const otNetifAddress *aAddress)$/;"	f	typeref:typename:otError
otIp6AddUnsecurePort	core/api/ip6_api.cpp	/^otError otIp6AddUnsecurePort(otInstance *aInstance, uint16_t aPort)$/;"	f	typeref:typename:otError
otIp6AddressFromString	core/api/ip6_api.cpp	/^otError otIp6AddressFromString(const char *aString, otIp6Address *aAddress)$/;"	f	typeref:typename:otError
otIp6AddressToString	core/api/ip6_api.cpp	/^void otIp6AddressToString(const otIp6Address *aAddress, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otIp6ArePrefixesEqual	core/api/ip6_api.cpp	/^bool otIp6ArePrefixesEqual(const otIp6Prefix *aFirst, const otIp6Prefix *aSecond)$/;"	f	typeref:typename:bool
otIp6GetBorderRoutingCounters	core/api/ip6_api.cpp	/^const otBorderRoutingCounters *otIp6GetBorderRoutingCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otBorderRoutingCounters *
otIp6GetMulticastAddresses	core/api/ip6_api.cpp	/^const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)$/;"	f	typeref:typename:const otNetifMulticastAddress *
otIp6GetPrefix	core/api/ip6_api.cpp	/^void otIp6GetPrefix(const otIp6Address *aAddress, uint8_t aLength, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:void
otIp6GetUnicastAddresses	core/api/ip6_api.cpp	/^const otNetifAddress *otIp6GetUnicastAddresses(otInstance *aInstance)$/;"	f	typeref:typename:const otNetifAddress *
otIp6GetUnsecurePorts	core/api/ip6_api.cpp	/^const uint16_t *otIp6GetUnsecurePorts(otInstance *aInstance, uint8_t *aNumEntries)$/;"	f	typeref:typename:const uint16_t *
otIp6HasUnicastAddress	core/api/ip6_api.cpp	/^bool otIp6HasUnicastAddress(otInstance *aInstance, const otIp6Address *aAddress)$/;"	f	typeref:typename:bool
otIp6IsAddressEqual	core/api/ip6_api.cpp	/^bool otIp6IsAddressEqual(const otIp6Address *aFirst, const otIp6Address *aSecond)$/;"	f	typeref:typename:bool
otIp6IsAddressUnspecified	core/api/ip6_api.cpp	/^bool otIp6IsAddressUnspecified(const otIp6Address *aAddress) { return AsCoreType(aAddress).IsUns/;"	f	typeref:typename:bool
otIp6IsEnabled	core/api/ip6_api.cpp	/^bool otIp6IsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<ThreadNetif>().IsU/;"	f	typeref:typename:bool
otIp6IsMulticastPromiscuousEnabled	core/api/ip6_api.cpp	/^bool otIp6IsMulticastPromiscuousEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otIp6IsReceiveFilterEnabled	core/api/ip6_api.cpp	/^bool otIp6IsReceiveFilterEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otIp6IsSlaacEnabled	core/api/ip6_api.cpp	/^bool otIp6IsSlaacEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Utils::Slaac>/;"	f	typeref:typename:bool
otIp6NewMessage	core/api/ip6_api.cpp	/^otMessage *otIp6NewMessage(otInstance *aInstance, const otMessageSettings *aSettings)$/;"	f	typeref:typename:otMessage *
otIp6NewMessageFromBuffer	core/api/ip6_api.cpp	/^otMessage *otIp6NewMessageFromBuffer(otInstance              *aInstance,$/;"	f	typeref:typename:otMessage *
otIp6PrefixFromString	core/api/ip6_api.cpp	/^otError otIp6PrefixFromString(const char *aString, otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otIp6PrefixMatch	core/api/ip6_api.cpp	/^uint8_t otIp6PrefixMatch(const otIp6Address *aFirst, const otIp6Address *aSecond)$/;"	f	typeref:typename:uint8_t
otIp6PrefixToString	core/api/ip6_api.cpp	/^void otIp6PrefixToString(const otIp6Prefix *aPrefix, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otIp6ProtoToString	core/api/ip6_api.cpp	/^const char *otIp6ProtoToString(uint8_t aIpProto) { return Ip6::Ip6::IpProtoToString(aIpProto); }$/;"	f	typeref:typename:const char *
otIp6RegisterMulticastListeners	core/api/ip6_api.cpp	/^otError otIp6RegisterMulticastListeners(otInstance                             *aInstance,$/;"	f	typeref:typename:otError
otIp6RemoveAllUnsecurePorts	core/api/ip6_api.cpp	/^void otIp6RemoveAllUnsecurePorts(otInstance *aInstance)$/;"	f	typeref:typename:void
otIp6RemoveUnicastAddress	core/api/ip6_api.cpp	/^otError otIp6RemoveUnicastAddress(otInstance *aInstance, const otIp6Address *aAddress)$/;"	f	typeref:typename:otError
otIp6RemoveUnsecurePort	core/api/ip6_api.cpp	/^otError otIp6RemoveUnsecurePort(otInstance *aInstance, uint16_t aPort)$/;"	f	typeref:typename:otError
otIp6ResetBorderRoutingCounters	core/api/ip6_api.cpp	/^void otIp6ResetBorderRoutingCounters(otInstance *aInstance)$/;"	f	typeref:typename:void
otIp6SelectSourceAddress	core/api/ip6_api.cpp	/^otError otIp6SelectSourceAddress(otInstance *aInstance, otMessageInfo *aMessageInfo)$/;"	f	typeref:typename:otError
otIp6Send	core/api/ip6_api.cpp	/^otError otIp6Send(otInstance *aInstance, otMessage *aMessage)$/;"	f	typeref:typename:otError
otIp6SetAddressCallback	core/api/ip6_api.cpp	/^void otIp6SetAddressCallback(otInstance *aInstance, otIp6AddressCallback aCallback, void *aCallb/;"	f	typeref:typename:void
otIp6SetEnabled	core/api/ip6_api.cpp	/^otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:otError
otIp6SetMeshLocalIid	core/api/ip6_api.cpp	/^otError otIp6SetMeshLocalIid(otInstance *aInstance, const otIp6InterfaceIdentifier *aIid)$/;"	f	typeref:typename:otError
otIp6SetMulticastPromiscuousEnabled	core/api/ip6_api.cpp	/^void otIp6SetMulticastPromiscuousEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otIp6SetReceiveCallback	core/api/ip6_api.cpp	/^void otIp6SetReceiveCallback(otInstance *aInstance, otIp6ReceiveCallback aCallback, void *aCallb/;"	f	typeref:typename:void
otIp6SetReceiveFilterEnabled	core/api/ip6_api.cpp	/^void otIp6SetReceiveFilterEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otIp6SetSlaacEnabled	core/api/ip6_api.cpp	/^void otIp6SetSlaacEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otIp6SetSlaacPrefixFilter	core/api/ip6_api.cpp	/^void otIp6SetSlaacPrefixFilter(otInstance *aInstance, otIp6SlaacPrefixFilter aFilter)$/;"	f	typeref:typename:void
otIp6SockAddrToString	core/api/ip6_api.cpp	/^void otIp6SockAddrToString(const otSockAddr *aSockAddr, char *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:void
otIp6SubscribeMulticastAddress	core/api/ip6_api.cpp	/^otError otIp6SubscribeMulticastAddress(otInstance *aInstance, const otIp6Address *aAddress)$/;"	f	typeref:typename:otError
otIp6UnsubscribeMulticastAddress	core/api/ip6_api.cpp	/^otError otIp6UnsubscribeMulticastAddress(otInstance *aInstance, const otIp6Address *aAddress)$/;"	f	typeref:typename:otError
otJamDetectionGetBusyPeriod	core/api/jam_detection_api.cpp	/^uint8_t otJamDetectionGetBusyPeriod(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otJamDetectionGetHistoryBitmap	core/api/jam_detection_api.cpp	/^uint64_t otJamDetectionGetHistoryBitmap(otInstance *aInstance)$/;"	f	typeref:typename:uint64_t
otJamDetectionGetRssiThreshold	core/api/jam_detection_api.cpp	/^int8_t otJamDetectionGetRssiThreshold(otInstance *aInstance)$/;"	f	typeref:typename:int8_t
otJamDetectionGetState	core/api/jam_detection_api.cpp	/^bool otJamDetectionGetState(otInstance *aInstance)$/;"	f	typeref:typename:bool
otJamDetectionGetWindow	core/api/jam_detection_api.cpp	/^uint8_t otJamDetectionGetWindow(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otJamDetectionIsEnabled	core/api/jam_detection_api.cpp	/^bool otJamDetectionIsEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otJamDetectionSetBusyPeriod	core/api/jam_detection_api.cpp	/^otError otJamDetectionSetBusyPeriod(otInstance *aInstance, uint8_t aBusyPeriod)$/;"	f	typeref:typename:otError
otJamDetectionSetRssiThreshold	core/api/jam_detection_api.cpp	/^otError otJamDetectionSetRssiThreshold(otInstance *aInstance, int8_t aRssiThreshold)$/;"	f	typeref:typename:otError
otJamDetectionSetWindow	core/api/jam_detection_api.cpp	/^otError otJamDetectionSetWindow(otInstance *aInstance, uint8_t aWindow)$/;"	f	typeref:typename:otError
otJamDetectionStart	core/api/jam_detection_api.cpp	/^otError otJamDetectionStart(otInstance *aInstance, otJamDetectionCallback aCallback, void *aCont/;"	f	typeref:typename:otError
otJamDetectionStop	core/api/jam_detection_api.cpp	/^otError otJamDetectionStop(otInstance *aInstance) { return AsCoreType(aInstance).Get<Utils::JamD/;"	f	typeref:typename:otError
otJoinerGetDiscerner	core/api/joiner_api.cpp	/^const otJoinerDiscerner *otJoinerGetDiscerner(otInstance *aInstance)$/;"	f	typeref:typename:const otJoinerDiscerner *
otJoinerGetId	core/api/joiner_api.cpp	/^const otExtAddress *otJoinerGetId(otInstance *aInstance)$/;"	f	typeref:typename:const otExtAddress *
otJoinerGetState	core/api/joiner_api.cpp	/^otJoinerState otJoinerGetState(otInstance *aInstance)$/;"	f	typeref:typename:otJoinerState
otJoinerSetDiscerner	core/api/joiner_api.cpp	/^otError otJoinerSetDiscerner(otInstance *aInstance, otJoinerDiscerner *aDiscerner)$/;"	f	typeref:typename:otError
otJoinerStart	core/api/joiner_api.cpp	/^otError otJoinerStart(otInstance      *aInstance,$/;"	f	typeref:typename:otError
otJoinerStateToString	core/api/joiner_api.cpp	/^const char *otJoinerStateToString(otJoinerState aState)$/;"	f	typeref:typename:const char *
otJoinerStop	core/api/joiner_api.cpp	/^void otJoinerStop(otInstance *aInstance) { AsCoreType(aInstance).Get<MeshCoP::Joiner>().Stop(); /;"	f	typeref:typename:void
otLinkActiveScan	core/api/link_api.cpp	/^otError otLinkActiveScan(otInstance              *aInstance,$/;"	f	typeref:typename:otError
otLinkConvertLinkQualityToRss	core/api/link_api.cpp	/^int8_t otLinkConvertLinkQualityToRss(otInstance *aInstance, uint8_t aLinkQuality)$/;"	f	typeref:typename:int8_t
otLinkConvertRssToLinkQuality	core/api/link_api.cpp	/^uint8_t otLinkConvertRssToLinkQuality(otInstance *aInstance, int8_t aRss)$/;"	f	typeref:typename:uint8_t
otLinkEnergyScan	core/api/link_api.cpp	/^otError otLinkEnergyScan(otInstance              *aInstance,$/;"	f	typeref:typename:otError
otLinkFilterAddAddress	core/api/link_api.cpp	/^otError otLinkFilterAddAddress(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otLinkFilterAddRssIn	core/api/link_api.cpp	/^otError otLinkFilterAddRssIn(otInstance *aInstance, const otExtAddress *aExtAddress, int8_t aRss/;"	f	typeref:typename:otError
otLinkFilterClearAddresses	core/api/link_api.cpp	/^void otLinkFilterClearAddresses(otInstance *aInstance)$/;"	f	typeref:typename:void
otLinkFilterClearAllRssIn	core/api/link_api.cpp	/^void otLinkFilterClearAllRssIn(otInstance *aInstance) { AsCoreType(aInstance).Get<Mac::Filter>()/;"	f	typeref:typename:void
otLinkFilterClearDefaultRssIn	core/api/link_api.cpp	/^void otLinkFilterClearDefaultRssIn(otInstance *aInstance)$/;"	f	typeref:typename:void
otLinkFilterGetAddressMode	core/api/link_api.cpp	/^otMacFilterAddressMode otLinkFilterGetAddressMode(otInstance *aInstance)$/;"	f	typeref:typename:otMacFilterAddressMode
otLinkFilterGetNextAddress	core/api/link_api.cpp	/^otError otLinkFilterGetNextAddress(otInstance *aInstance, otMacFilterIterator *aIterator, otMacF/;"	f	typeref:typename:otError
otLinkFilterGetNextRssIn	core/api/link_api.cpp	/^otError otLinkFilterGetNextRssIn(otInstance *aInstance, otMacFilterIterator *aIterator, otMacFil/;"	f	typeref:typename:otError
otLinkFilterRemoveAddress	core/api/link_api.cpp	/^void otLinkFilterRemoveAddress(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:void
otLinkFilterRemoveRssIn	core/api/link_api.cpp	/^void otLinkFilterRemoveRssIn(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:void
otLinkFilterSetAddressMode	core/api/link_api.cpp	/^void otLinkFilterSetAddressMode(otInstance *aInstance, otMacFilterAddressMode aMode)$/;"	f	typeref:typename:void
otLinkFilterSetDefaultRssIn	core/api/link_api.cpp	/^void otLinkFilterSetDefaultRssIn(otInstance *aInstance, int8_t aRss)$/;"	f	typeref:typename:void
otLinkGetCcaFailureRate	core/api/link_api.cpp	/^uint16_t otLinkGetCcaFailureRate(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otLinkGetChannel	core/api/link_api.cpp	/^uint8_t otLinkGetChannel(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otLinkGetChannel	core/api/link_raw_api.cpp	/^uint8_t otLinkGetChannel(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::LinkRaw>/;"	f	typeref:typename:uint8_t
otLinkGetCounters	core/api/link_api.cpp	/^const otMacCounters *otLinkGetCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otMacCounters *
otLinkGetCslChannel	core/api/link_api.cpp	/^uint8_t otLinkGetCslChannel(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>(/;"	f	typeref:typename:uint8_t
otLinkGetCslPeriod	core/api/link_api.cpp	/^uint32_t otLinkGetCslPeriod(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otLinkGetCslTimeout	core/api/link_api.cpp	/^uint32_t otLinkGetCslTimeout(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otLinkGetExtendedAddress	core/api/link_api.cpp	/^const otExtAddress *otLinkGetExtendedAddress(otInstance *aInstance)$/;"	f	typeref:typename:const otExtAddress *
otLinkGetExtendedAddress	core/api/link_raw_api.cpp	/^const otExtAddress *otLinkGetExtendedAddress(otInstance *aInstance)$/;"	f	typeref:typename:const otExtAddress *
otLinkGetFactoryAssignedIeeeEui64	core/api/link_api.cpp	/^void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)$/;"	f	typeref:typename:void
otLinkGetFactoryAssignedIeeeEui64	core/api/link_raw_api.cpp	/^void otLinkGetFactoryAssignedIeeeEui64(otInstance *aInstance, otExtAddress *aEui64)$/;"	f	typeref:typename:void
otLinkGetMaxFrameRetriesDirect	core/api/link_api.cpp	/^uint8_t otLinkGetMaxFrameRetriesDirect(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otLinkGetMaxFrameRetriesIndirect	core/api/link_api.cpp	/^uint8_t otLinkGetMaxFrameRetriesIndirect(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otLinkGetPanId	core/api/link_api.cpp	/^otPanId otLinkGetPanId(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>().Get/;"	f	typeref:typename:otPanId
otLinkGetPanId	core/api/link_raw_api.cpp	/^otPanId otLinkGetPanId(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::LinkRaw>()/;"	f	typeref:typename:otPanId
otLinkGetPollPeriod	core/api/link_api.cpp	/^uint32_t otLinkGetPollPeriod(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otLinkGetRegion	core/api/link_api.cpp	/^otError otLinkGetRegion(otInstance *aInstance, uint16_t *aRegionCode)$/;"	f	typeref:typename:otError
otLinkGetShortAddress	core/api/link_api.cpp	/^otShortAddress otLinkGetShortAddress(otInstance *aInstance)$/;"	f	typeref:typename:otShortAddress
otLinkGetShortAddress	core/api/link_raw_api.cpp	/^uint16_t otLinkGetShortAddress(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otLinkGetSupportedChannelMask	core/api/link_api.cpp	/^uint32_t otLinkGetSupportedChannelMask(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otLinkGetTxDirectRetrySuccessHistogram	core/api/link_api.cpp	/^const uint32_t *otLinkGetTxDirectRetrySuccessHistogram(otInstance *aInstance, uint8_t *aNumberOf/;"	f	typeref:typename:const uint32_t *
otLinkGetTxIndirectRetrySuccessHistogram	core/api/link_api.cpp	/^const uint32_t *otLinkGetTxIndirectRetrySuccessHistogram(otInstance *aInstance, uint8_t *aNumber/;"	f	typeref:typename:const uint32_t *
otLinkIsActiveScanInProgress	core/api/link_api.cpp	/^bool otLinkIsActiveScanInProgress(otInstance *aInstance)$/;"	f	typeref:typename:bool
otLinkIsCslEnabled	core/api/link_api.cpp	/^bool otLinkIsCslEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>().Is/;"	f	typeref:typename:bool
otLinkIsCslSupported	core/api/link_api.cpp	/^bool otLinkIsCslSupported(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>()./;"	f	typeref:typename:bool
otLinkIsEnabled	core/api/link_api.cpp	/^bool otLinkIsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>().IsEna/;"	f	typeref:typename:bool
otLinkIsEnergyScanInProgress	core/api/link_api.cpp	/^bool otLinkIsEnergyScanInProgress(otInstance *aInstance)$/;"	f	typeref:typename:bool
otLinkIsInTransmitState	core/api/link_api.cpp	/^bool otLinkIsInTransmitState(otInstance *aInstance)$/;"	f	typeref:typename:bool
otLinkIsPromiscuous	core/api/link_api.cpp	/^bool otLinkIsPromiscuous(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Mac>().I/;"	f	typeref:typename:bool
otLinkIsRadioFilterEnabled	core/api/link_api.cpp	/^bool otLinkIsRadioFilterEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otLinkMetricsConfigEnhAckProbing	core/api/link_metrics_api.cpp	/^otError otLinkMetricsConfigEnhAckProbing(otInstance                                *aInstance,$/;"	f	typeref:typename:otError
otLinkMetricsConfigForwardTrackingSeries	core/api/link_metrics_api.cpp	/^otError otLinkMetricsConfigForwardTrackingSeries(otInstance                       *aInstance,$/;"	f	typeref:typename:otError
otLinkMetricsManagerGetMetricsValueByExtAddr	core/api/link_metrics_api.cpp	/^otError otLinkMetricsManagerGetMetricsValueByExtAddr(otInstance          *aInstance,$/;"	f	typeref:typename:otError
otLinkMetricsManagerIsEnabled	core/api/link_metrics_api.cpp	/^bool otLinkMetricsManagerIsEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otLinkMetricsManagerSetEnabled	core/api/link_metrics_api.cpp	/^void otLinkMetricsManagerSetEnabled(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:void
otLinkMetricsQuery	core/api/link_metrics_api.cpp	/^otError otLinkMetricsQuery(otInstance                 *aInstance,$/;"	f	typeref:typename:otError
otLinkMetricsSendLinkProbe	core/api/link_metrics_api.cpp	/^otError otLinkMetricsSendLinkProbe(otInstance         *aInstance,$/;"	f	typeref:typename:otError
otLinkRawEnergyScan	core/api/link_raw_api.cpp	/^otError otLinkRawEnergyScan(otInstance             *aInstance,$/;"	f	typeref:typename:otError
otLinkRawGetCaps	core/api/link_raw_api.cpp	/^otRadioCaps otLinkRawGetCaps(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::Link/;"	f	typeref:typename:otRadioCaps
otLinkRawGetPromiscuous	core/api/link_raw_api.cpp	/^bool otLinkRawGetPromiscuous(otInstance *aInstance) { return AsCoreType(aInstance).Get<Radio>()./;"	f	typeref:typename:bool
otLinkRawGetRadioTime	core/api/link_raw_api.cpp	/^uint64_t otLinkRawGetRadioTime(otInstance *aInstance)$/;"	f	typeref:typename:uint64_t
otLinkRawGetRssi	core/api/link_raw_api.cpp	/^int8_t otLinkRawGetRssi(otInstance *aInstance) { return AsCoreType(aInstance).Get<Radio>().GetRs/;"	f	typeref:typename:int8_t
otLinkRawGetTransmitBuffer	core/api/link_raw_api.cpp	/^otRadioFrame *otLinkRawGetTransmitBuffer(otInstance *aInstance)$/;"	f	typeref:typename:otRadioFrame *
otLinkRawIsEnabled	core/api/link_raw_api.cpp	/^bool otLinkRawIsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::LinkRaw>(/;"	f	typeref:typename:bool
otLinkRawReceive	core/api/link_raw_api.cpp	/^otError otLinkRawReceive(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mac::LinkRaw>/;"	f	typeref:typename:otError
otLinkRawSetMacFrameCounter	core/api/link_raw_api.cpp	/^otError otLinkRawSetMacFrameCounter(otInstance *aInstance, uint32_t aMacFrameCounter)$/;"	f	typeref:typename:otError
otLinkRawSetMacFrameCounterIfLarger	core/api/link_raw_api.cpp	/^otError otLinkRawSetMacFrameCounterIfLarger(otInstance *aInstance, uint32_t aMacFrameCounter)$/;"	f	typeref:typename:otError
otLinkRawSetMacKey	core/api/link_raw_api.cpp	/^otError otLinkRawSetMacKey(otInstance     *aInstance,$/;"	f	typeref:typename:otError
otLinkRawSetPromiscuous	core/api/link_raw_api.cpp	/^otError otLinkRawSetPromiscuous(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otLinkRawSetReceiveDone	core/api/link_raw_api.cpp	/^otError otLinkRawSetReceiveDone(otInstance *aInstance, otLinkRawReceiveDone aCallback)$/;"	f	typeref:typename:otError
otLinkRawSetShortAddress	core/api/link_raw_api.cpp	/^otError otLinkRawSetShortAddress(otInstance *aInstance, uint16_t aShortAddress)$/;"	f	typeref:typename:otError
otLinkRawSleep	core/api/link_raw_api.cpp	/^otError otLinkRawSleep(otInstance *aInstance)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchAddExtEntry	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchAddExtEntry(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchAddShortEntry	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchAddShortEntry(otInstance *aInstance, uint16_t aShortAddress)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchClearExtEntries	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchClearExtEntries(otInstance *aInstance)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchClearExtEntry	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchClearExtEntry(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchClearShortEntries	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchClearShortEntries(otInstance *aInstance)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchClearShortEntry	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchClearShortEntry(otInstance *aInstance, uint16_t aShortAddress)$/;"	f	typeref:typename:otError
otLinkRawSrcMatchEnable	core/api/link_raw_api.cpp	/^otError otLinkRawSrcMatchEnable(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otLinkRawTransmit	core/api/link_raw_api.cpp	/^otError otLinkRawTransmit(otInstance *aInstance, otLinkRawTransmitDone aCallback)$/;"	f	typeref:typename:otError
otLinkResetCounters	core/api/link_api.cpp	/^void otLinkResetCounters(otInstance *aInstance) { AsCoreType(aInstance).Get<Mac::Mac>().ResetCou/;"	f	typeref:typename:void
otLinkResetTxRetrySuccessHistogram	core/api/link_api.cpp	/^void otLinkResetTxRetrySuccessHistogram(otInstance *aInstance)$/;"	f	typeref:typename:void
otLinkSendDataRequest	core/api/link_api.cpp	/^otError otLinkSendDataRequest(otInstance *aInstance)$/;"	f	typeref:typename:otError
otLinkSendEmptyData	core/api/link_api.cpp	/^otError otLinkSendEmptyData(otInstance *aInstance)$/;"	f	typeref:typename:otError
otLinkSetChannel	core/api/link_api.cpp	/^otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:otError
otLinkSetChannel	core/api/link_raw_api.cpp	/^otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:otError
otLinkSetCslChannel	core/api/link_api.cpp	/^otError otLinkSetCslChannel(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:otError
otLinkSetCslPeriod	core/api/link_api.cpp	/^otError otLinkSetCslPeriod(otInstance *aInstance, uint32_t aPeriod)$/;"	f	typeref:typename:otError
otLinkSetCslTimeout	core/api/link_api.cpp	/^otError otLinkSetCslTimeout(otInstance *aInstance, uint32_t aTimeout)$/;"	f	typeref:typename:otError
otLinkSetEnabled	core/api/link_api.cpp	/^otError otLinkSetEnabled(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otLinkSetExtendedAddress	core/api/link_api.cpp	/^otError otLinkSetExtendedAddress(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otLinkSetExtendedAddress	core/api/link_raw_api.cpp	/^otError otLinkSetExtendedAddress(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otLinkSetMaxFrameRetriesDirect	core/api/link_api.cpp	/^void otLinkSetMaxFrameRetriesDirect(otInstance *aInstance, uint8_t aMaxFrameRetriesDirect)$/;"	f	typeref:typename:void
otLinkSetMaxFrameRetriesIndirect	core/api/link_api.cpp	/^void otLinkSetMaxFrameRetriesIndirect(otInstance *aInstance, uint8_t aMaxFrameRetriesIndirect)$/;"	f	typeref:typename:void
otLinkSetPanId	core/api/link_api.cpp	/^otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)$/;"	f	typeref:typename:otError
otLinkSetPanId	core/api/link_raw_api.cpp	/^otError otLinkSetPanId(otInstance *aInstance, uint16_t aPanId)$/;"	f	typeref:typename:otError
otLinkSetPcapCallback	core/api/link_api.cpp	/^void otLinkSetPcapCallback(otInstance *aInstance, otLinkPcapCallback aPcapCallback, void *aCallb/;"	f	typeref:typename:void
otLinkSetPollPeriod	core/api/link_api.cpp	/^otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)$/;"	f	typeref:typename:otError
otLinkSetPromiscuous	core/api/link_api.cpp	/^otError otLinkSetPromiscuous(otInstance *aInstance, bool aPromiscuous)$/;"	f	typeref:typename:otError
otLinkSetRadioFilterEnabled	core/api/link_api.cpp	/^void otLinkSetRadioFilterEnabled(otInstance *aInstance, bool aFilterEnabled)$/;"	f	typeref:typename:void
otLinkSetRegion	core/api/link_api.cpp	/^otError otLinkSetRegion(otInstance *aInstance, uint16_t aRegionCode)$/;"	f	typeref:typename:otError
otLinkSetSupportedChannelMask	core/api/link_api.cpp	/^otError otLinkSetSupportedChannelMask(otInstance *aInstance, uint32_t aChannelMask)$/;"	f	typeref:typename:otError
otLogCli	core/api/logging_api.cpp	/^void otLogCli(otLogLevel aLogLevel, const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogCritPlat	core/api/logging_api.cpp	/^void otLogCritPlat(const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogCritPlat	posix/platform/settings.cpp	/^void otLogCritPlat(const char *aFormat, ...) { OT_UNUSED_VARIABLE(aFormat); }$/;"	f	typeref:typename:void
otLogDebgPlat	core/api/logging_api.cpp	/^void otLogDebgPlat(const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogGenerateNextHexDumpLine	core/api/logging_api.cpp	/^otError otLogGenerateNextHexDumpLine(otLogHexDumpInfo *aInfo)$/;"	f	typeref:typename:otError
otLogInfoPlat	core/api/logging_api.cpp	/^void otLogInfoPlat(const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogNotePlat	core/api/logging_api.cpp	/^void otLogNotePlat(const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogPlat	core/api/logging_api.cpp	/^void otLogPlat(otLogLevel aLogLevel, const char *aPlatModuleName, const char *aFormat, ...)$/;"	f	typeref:typename:void
otLogPlatArgs	core/api/logging_api.cpp	/^void otLogPlatArgs(otLogLevel aLogLevel, const char *aPlatModuleName, const char *aFormat, va_li/;"	f	typeref:typename:void
otLogWarnPlat	core/api/logging_api.cpp	/^void otLogWarnPlat(const char *aFormat, ...)$/;"	f	typeref:typename:void
otLoggingGetLevel	core/api/logging_api.cpp	/^otLogLevel otLoggingGetLevel(void) { return static_cast<otLogLevel>(Instance::GetLogLevel()); }$/;"	f	typeref:typename:otLogLevel
otLoggingSetLevel	core/api/logging_api.cpp	/^otError otLoggingSetLevel(otLogLevel aLogLevel)$/;"	f	typeref:typename:otError
otMdnsAllocateIterator	core/api/mdns_api.cpp	/^otMdnsIterator *otMdnsAllocateIterator(otInstance *aInstance)$/;"	f	typeref:typename:otMdnsIterator *
otMdnsFreeIterator	core/api/mdns_api.cpp	/^void otMdnsFreeIterator(otInstance *aInstance, otMdnsIterator *aIterator)$/;"	f	typeref:typename:void
otMdnsGetNextHost	core/api/mdns_api.cpp	/^otError otMdnsGetNextHost(otInstance *aInstance, otMdnsIterator *aIterator, otMdnsHost *aHost, o/;"	f	typeref:typename:otError
otMdnsGetNextKey	core/api/mdns_api.cpp	/^otError otMdnsGetNextKey(otInstance *aInstance, otMdnsIterator *aIterator, otMdnsKey *aKey, otMd/;"	f	typeref:typename:otError
otMdnsGetNextService	core/api/mdns_api.cpp	/^otError otMdnsGetNextService(otInstance       *aInstance,$/;"	f	typeref:typename:otError
otMdnsIsEnabled	core/api/mdns_api.cpp	/^bool otMdnsIsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Dns::Multicast::C/;"	f	typeref:typename:bool
otMdnsIsQuestionUnicastAllowed	core/api/mdns_api.cpp	/^bool otMdnsIsQuestionUnicastAllowed(otInstance *aInstance)$/;"	f	typeref:typename:bool
otMdnsRegisterHost	core/api/mdns_api.cpp	/^otError otMdnsRegisterHost(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otMdnsRegisterKey	core/api/mdns_api.cpp	/^otError otMdnsRegisterKey(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otMdnsRegisterService	core/api/mdns_api.cpp	/^otError otMdnsRegisterService(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otMdnsSetConflictCallback	core/api/mdns_api.cpp	/^void otMdnsSetConflictCallback(otInstance *aInstance, otMdnsConflictCallback aCallback)$/;"	f	typeref:typename:void
otMdnsSetEnabled	core/api/mdns_api.cpp	/^otError otMdnsSetEnabled(otInstance *aInstance, bool aEnable, uint32_t aInfraIfIndex)$/;"	f	typeref:typename:otError
otMdnsSetQuestionUnicastAllowed	core/api/mdns_api.cpp	/^void otMdnsSetQuestionUnicastAllowed(otInstance *aInstance, bool aAllow)$/;"	f	typeref:typename:void
otMdnsStartBrowser	core/api/mdns_api.cpp	/^otError otMdnsStartBrowser(otInstance *aInstance, const otMdnsBrowser *aBroswer)$/;"	f	typeref:typename:otError
otMdnsStartIp4AddressResolver	core/api/mdns_api.cpp	/^otError otMdnsStartIp4AddressResolver(otInstance *aInstance, const otMdnsAddressResolver *aResol/;"	f	typeref:typename:otError
otMdnsStartIp6AddressResolver	core/api/mdns_api.cpp	/^otError otMdnsStartIp6AddressResolver(otInstance *aInstance, const otMdnsAddressResolver *aResol/;"	f	typeref:typename:otError
otMdnsStartSrvResolver	core/api/mdns_api.cpp	/^otError otMdnsStartSrvResolver(otInstance *aInstance, const otMdnsSrvResolver *aResolver)$/;"	f	typeref:typename:otError
otMdnsStartTxtResolver	core/api/mdns_api.cpp	/^otError otMdnsStartTxtResolver(otInstance *aInstance, const otMdnsTxtResolver *aResolver)$/;"	f	typeref:typename:otError
otMdnsStopBrowser	core/api/mdns_api.cpp	/^otError otMdnsStopBrowser(otInstance *aInstance, const otMdnsBrowser *aBroswer)$/;"	f	typeref:typename:otError
otMdnsStopIp4AddressResolver	core/api/mdns_api.cpp	/^otError otMdnsStopIp4AddressResolver(otInstance *aInstance, const otMdnsAddressResolver *aResolv/;"	f	typeref:typename:otError
otMdnsStopIp6AddressResolver	core/api/mdns_api.cpp	/^otError otMdnsStopIp6AddressResolver(otInstance *aInstance, const otMdnsAddressResolver *aResolv/;"	f	typeref:typename:otError
otMdnsStopSrvResolver	core/api/mdns_api.cpp	/^otError otMdnsStopSrvResolver(otInstance *aInstance, const otMdnsSrvResolver *aResolver)$/;"	f	typeref:typename:otError
otMdnsStopTxtResolver	core/api/mdns_api.cpp	/^otError otMdnsStopTxtResolver(otInstance *aInstance, const otMdnsTxtResolver *aResolver)$/;"	f	typeref:typename:otError
otMdnsUnregisterHost	core/api/mdns_api.cpp	/^otError otMdnsUnregisterHost(otInstance *aInstance, const otMdnsHost *aHost)$/;"	f	typeref:typename:otError
otMdnsUnregisterKey	core/api/mdns_api.cpp	/^otError otMdnsUnregisterKey(otInstance *aInstance, const otMdnsKey *aKey)$/;"	f	typeref:typename:otError
otMdnsUnregisterService	core/api/mdns_api.cpp	/^otError otMdnsUnregisterService(otInstance *aInstance, const otMdnsService *aService)$/;"	f	typeref:typename:otError
otMeshDiagCancel	core/api/mesh_diag_api.cpp	/^void otMeshDiagCancel(otInstance *aInstance) { AsCoreType(aInstance).Get<Utils::MeshDiag>().Canc/;"	f	typeref:typename:void
otMeshDiagDiscoverTopology	core/api/mesh_diag_api.cpp	/^otError otMeshDiagDiscoverTopology(otInstance                     *aInstance,$/;"	f	typeref:typename:otError
otMeshDiagGetNextChildInfo	core/api/mesh_diag_api.cpp	/^otError otMeshDiagGetNextChildInfo(otMeshDiagChildIterator *aIterator, otMeshDiagChildInfo *aChi/;"	f	typeref:typename:otError
otMeshDiagGetNextIp6Address	core/api/mesh_diag_api.cpp	/^otError otMeshDiagGetNextIp6Address(otMeshDiagIp6AddrIterator *aIterator, otIp6Address *aIp6Addr/;"	f	typeref:typename:otError
otMeshDiagQueryChildTable	core/api/mesh_diag_api.cpp	/^otError otMeshDiagQueryChildTable(otInstance                       *aInstance,$/;"	f	typeref:typename:otError
otMeshDiagQueryChildrenIp6Addrs	core/api/mesh_diag_api.cpp	/^otError otMeshDiagQueryChildrenIp6Addrs(otInstance                     *aInstance,$/;"	f	typeref:typename:otError
otMeshDiagQueryRouterNeighborTable	core/api/mesh_diag_api.cpp	/^otError otMeshDiagQueryRouterNeighborTable(otInstance                                *aInstance,$/;"	f	typeref:typename:otError
otMessageAppend	core/api/message_api.cpp	/^otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)$/;"	f	typeref:typename:otError
otMessageFree	core/api/message_api.cpp	/^void otMessageFree(otMessage *aMessage) { AsCoreType(aMessage).Free(); }$/;"	f	typeref:typename:void
otMessageGetBufferInfo	core/api/message_api.cpp	/^void otMessageGetBufferInfo(otInstance *aInstance, otBufferInfo *aBufferInfo)$/;"	f	typeref:typename:void
otMessageGetLength	core/api/message_api.cpp	/^uint16_t otMessageGetLength(const otMessage *aMessage) { return AsCoreType(aMessage).GetLength()/;"	f	typeref:typename:uint16_t
otMessageGetOffset	core/api/message_api.cpp	/^uint16_t otMessageGetOffset(const otMessage *aMessage) { return AsCoreType(aMessage).GetOffset()/;"	f	typeref:typename:uint16_t
otMessageGetOrigin	core/api/message_api.cpp	/^otMessageOrigin otMessageGetOrigin(const otMessage *aMessage) { return MapEnum(AsCoreType(aMessa/;"	f	typeref:typename:otMessageOrigin
otMessageGetRss	core/api/message_api.cpp	/^int8_t otMessageGetRss(const otMessage *aMessage) { return AsCoreType(aMessage).GetAverageRss();/;"	f	typeref:typename:int8_t
otMessageGetThreadLinkInfo	core/api/message_api.cpp	/^otError otMessageGetThreadLinkInfo(const otMessage *aMessage, otThreadLinkInfo *aLinkInfo)$/;"	f	typeref:typename:otError
otMessageIsLinkSecurityEnabled	core/api/message_api.cpp	/^bool otMessageIsLinkSecurityEnabled(const otMessage *aMessage) { return AsCoreType(aMessage).IsL/;"	f	typeref:typename:bool
otMessageIsLoopbackToHostAllowed	core/api/message_api.cpp	/^bool otMessageIsLoopbackToHostAllowed(const otMessage *aMessage)$/;"	f	typeref:typename:bool
otMessageIsMulticastLoopEnabled	core/api/message_api.cpp	/^bool otMessageIsMulticastLoopEnabled(otMessage *aMessage) { return AsCoreType(aMessage).GetMulti/;"	f	typeref:typename:bool
otMessageQueueDequeue	core/api/message_api.cpp	/^void otMessageQueueDequeue(otMessageQueue *aQueue, otMessage *aMessage)$/;"	f	typeref:typename:void
otMessageQueueEnqueue	core/api/message_api.cpp	/^void otMessageQueueEnqueue(otMessageQueue *aQueue, otMessage *aMessage)$/;"	f	typeref:typename:void
otMessageQueueEnqueueAtHead	core/api/message_api.cpp	/^void otMessageQueueEnqueueAtHead(otMessageQueue *aQueue, otMessage *aMessage)$/;"	f	typeref:typename:void
otMessageQueueGetHead	core/api/message_api.cpp	/^otMessage *otMessageQueueGetHead(otMessageQueue *aQueue) { return AsCoreType(aQueue).GetHead(); /;"	f	typeref:typename:otMessage *
otMessageQueueGetNext	core/api/message_api.cpp	/^otMessage *otMessageQueueGetNext(otMessageQueue *aQueue, const otMessage *aMessage)$/;"	f	typeref:typename:otMessage *
otMessageQueueInit	core/api/message_api.cpp	/^void otMessageQueueInit(otMessageQueue *aQueue)$/;"	f	typeref:typename:void
otMessageRead	core/api/message_api.cpp	/^uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength/;"	f	typeref:typename:uint16_t
otMessageResetBufferInfo	core/api/message_api.cpp	/^void otMessageResetBufferInfo(otInstance *aInstance) { AsCoreType(aInstance).ResetBufferInfo(); /;"	f	typeref:typename:void
otMessageSetDirectTransmission	core/api/message_api.cpp	/^void otMessageSetDirectTransmission(otMessage *aMessage, bool aEnabled)$/;"	f	typeref:typename:void
otMessageSetLength	core/api/message_api.cpp	/^otError otMessageSetLength(otMessage *aMessage, uint16_t aLength) { return AsCoreType(aMessage)./;"	f	typeref:typename:otError
otMessageSetLoopbackToHostAllowed	core/api/message_api.cpp	/^void otMessageSetLoopbackToHostAllowed(otMessage *aMessage, bool aAllowLoopbackToHost)$/;"	f	typeref:typename:void
otMessageSetMulticastLoopEnabled	core/api/message_api.cpp	/^void otMessageSetMulticastLoopEnabled(otMessage *aMessage, bool aEnabled)$/;"	f	typeref:typename:void
otMessageSetOffset	core/api/message_api.cpp	/^void otMessageSetOffset(otMessage *aMessage, uint16_t aOffset) { AsCoreType(aMessage).SetOffset(/;"	f	typeref:typename:void
otMessageSetOrigin	core/api/message_api.cpp	/^void otMessageSetOrigin(otMessage *aMessage, otMessageOrigin aOrigin)$/;"	f	typeref:typename:void
otMessageWrite	core/api/message_api.cpp	/^int otMessageWrite(otMessage *aMessage, uint16_t aOffset, const void *aBuf, uint16_t aLength)$/;"	f	typeref:typename:int
otMultiRadioGetNeighborInfo	core/api/multi_radio_api.cpp	/^otError otMultiRadioGetNeighborInfo(otInstance               *aInstance,$/;"	f	typeref:typename:otError
otNat64GetCidr	core/api/nat64_api.cpp	/^otError otNat64GetCidr(otInstance *aInstance, otIp4Cidr *aCidr)$/;"	f	typeref:typename:otError
otNat64GetCounters	core/api/nat64_api.cpp	/^void otNat64GetCounters(otInstance *aInstance, otNat64ProtocolCounters *aCounters)$/;"	f	typeref:typename:void
otNat64GetErrorCounters	core/api/nat64_api.cpp	/^void otNat64GetErrorCounters(otInstance *aInstance, otNat64ErrorCounters *aCounters)$/;"	f	typeref:typename:void
otNat64GetNextAddressMapping	core/api/nat64_api.cpp	/^otError otNat64GetNextAddressMapping(otInstance                    *aInstance,$/;"	f	typeref:typename:otError
otNat64GetPrefixManagerState	core/api/nat64_api.cpp	/^otNat64State otNat64GetPrefixManagerState(otInstance *aInstance)$/;"	f	typeref:typename:otNat64State
otNat64GetTranslatorState	core/api/nat64_api.cpp	/^otNat64State otNat64GetTranslatorState(otInstance *aInstance)$/;"	f	typeref:typename:otNat64State
otNat64InitAddressMappingIterator	core/api/nat64_api.cpp	/^void otNat64InitAddressMappingIterator(otInstance *aInstance, otNat64AddressMappingIterator *aIt/;"	f	typeref:typename:void
otNat64Send	core/api/nat64_api.cpp	/^otError otNat64Send(otInstance *aInstance, otMessage *aMessage)$/;"	f	typeref:typename:otError
otNat64SetEnabled	core/api/nat64_api.cpp	/^void otNat64SetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otNat64SetIp4Cidr	core/api/nat64_api.cpp	/^otError otNat64SetIp4Cidr(otInstance *aInstance, const otIp4Cidr *aCidr)$/;"	f	typeref:typename:otError
otNat64SetReceiveIp4Callback	core/api/nat64_api.cpp	/^void otNat64SetReceiveIp4Callback(otInstance *aInstance, otNat64ReceiveIp4Callback aCallback, vo/;"	f	typeref:typename:void
otNat64SynthesizeIp6Address	core/api/nat64_api.cpp	/^otError otNat64SynthesizeIp6Address(otInstance *aInstance, const otIp4Address *aIp4Address, otIp/;"	f	typeref:typename:otError
otNcpHdlcInit	ncp/ncp_hdlc.cpp	/^extern "C" void otNcpHdlcInit(otInstance *aInstance, otNcpHdlcSendCallback aSendCallback)$/;"	f	namespace:ot::Ncp	typeref:typename:void
otNcpHdlcInitMulti	ncp/ncp_hdlc.cpp	/^extern "C" void otNcpHdlcInitMulti(otInstance **aInstances, uint8_t aCount, otNcpHdlcSendCallbac/;"	f	namespace:ot::Ncp	typeref:typename:void
otNcpHdlcReceive	ncp/ncp_hdlc.cpp	/^extern "C" void otNcpHdlcReceive(const uint8_t *aBuf, uint16_t aBufLength)$/;"	f	namespace:ot::Ncp	typeref:typename:void
otNcpHdlcSendDone	ncp/ncp_hdlc.cpp	/^extern "C" void otNcpHdlcSendDone(void)$/;"	f	namespace:ot::Ncp	typeref:typename:void
otNcpRegisterPeekPoke	ncp/ncp_base.cpp	/^void otNcpRegisterPeekPoke(otNcpDelegateAllowPeekPoke aAllowPeekDelegate, otNcpDelegateAllowPeek/;"	f	typeref:typename:void
otNcpSpiInit	ncp/ncp_spi.cpp	/^extern "C" void otNcpSpiInit(otInstance *aInstance)$/;"	f	namespace:ot::Ncp	typeref:typename:void
otNcpStreamWrite	ncp/ncp_base.cpp	/^otError otNcpStreamWrite(int aStreamId, const uint8_t *aDataPtr, int aDataLen)$/;"	f	typeref:typename:otError
otNetDataContainsOmrPrefix	core/api/netdata_api.cpp	/^bool otNetDataContainsOmrPrefix(otInstance *aInstance, const otIp6Prefix *aPrefix)$/;"	f	typeref:typename:bool
otNetDataGet	core/api/netdata_api.cpp	/^otError otNetDataGet(otInstance *aInstance, bool aStable, uint8_t *aData, uint8_t *aDataLength)$/;"	f	typeref:typename:otError
otNetDataGetCommissioningDataset	core/api/netdata_api.cpp	/^void otNetDataGetCommissioningDataset(otInstance *aInstance, otCommissioningDataset *aDataset)$/;"	f	typeref:typename:void
otNetDataGetLength	core/api/netdata_api.cpp	/^uint8_t otNetDataGetLength(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otNetDataGetMaxLength	core/api/netdata_api.cpp	/^uint8_t otNetDataGetMaxLength(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otNetDataGetNextLowpanContextInfo	core/api/netdata_api.cpp	/^otError otNetDataGetNextLowpanContextInfo(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otNetDataGetNextOnMeshPrefix	core/api/netdata_api.cpp	/^otError otNetDataGetNextOnMeshPrefix(otInstance            *aInstance,$/;"	f	typeref:typename:otError
otNetDataGetNextRoute	core/api/netdata_api.cpp	/^otError otNetDataGetNextRoute(otInstance *aInstance, otNetworkDataIterator *aIterator, otExterna/;"	f	typeref:typename:otError
otNetDataGetNextService	core/api/netdata_api.cpp	/^otError otNetDataGetNextService(otInstance *aInstance, otNetworkDataIterator *aIterator, otServi/;"	f	typeref:typename:otError
otNetDataGetStableVersion	core/api/netdata_api.cpp	/^uint8_t otNetDataGetStableVersion(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otNetDataGetVersion	core/api/netdata_api.cpp	/^uint8_t otNetDataGetVersion(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otNetDataIsDnsSrpServiceAdded	core/api/netdata_publisher_api.cpp	/^bool otNetDataIsDnsSrpServiceAdded(otInstance *aInstance)$/;"	f	typeref:typename:bool
otNetDataIsPrefixAdded	core/api/netdata_publisher_api.cpp	/^bool otNetDataIsPrefixAdded(otInstance *aInstance, const otIp6Prefix *aPrefix)$/;"	f	typeref:typename:bool
otNetDataPublishDnsSrpServiceAnycast	core/api/netdata_publisher_api.cpp	/^void otNetDataPublishDnsSrpServiceAnycast(otInstance *aInstance, uint8_t aSequenceNumber)$/;"	f	typeref:typename:void
otNetDataPublishDnsSrpServiceUnicast	core/api/netdata_publisher_api.cpp	/^void otNetDataPublishDnsSrpServiceUnicast(otInstance *aInstance, const otIp6Address *aAddress, u/;"	f	typeref:typename:void
otNetDataPublishDnsSrpServiceUnicastMeshLocalEid	core/api/netdata_publisher_api.cpp	/^void otNetDataPublishDnsSrpServiceUnicastMeshLocalEid(otInstance *aInstance, uint16_t aPort)$/;"	f	typeref:typename:void
otNetDataPublishExternalRoute	core/api/netdata_publisher_api.cpp	/^otError otNetDataPublishExternalRoute(otInstance *aInstance, const otExternalRouteConfig *aConfi/;"	f	typeref:typename:otError
otNetDataPublishOnMeshPrefix	core/api/netdata_publisher_api.cpp	/^otError otNetDataPublishOnMeshPrefix(otInstance *aInstance, const otBorderRouterConfig *aConfig)$/;"	f	typeref:typename:otError
otNetDataReplacePublishedExternalRoute	core/api/netdata_publisher_api.cpp	/^otError otNetDataReplacePublishedExternalRoute(otInstance                  *aInstance,$/;"	f	typeref:typename:otError
otNetDataResetMaxLength	core/api/netdata_api.cpp	/^void otNetDataResetMaxLength(otInstance *aInstance)$/;"	f	typeref:typename:void
otNetDataSetDnsSrpServicePublisherCallback	core/api/netdata_publisher_api.cpp	/^void otNetDataSetDnsSrpServicePublisherCallback(otInstance                             *aInstanc/;"	f	typeref:typename:void
otNetDataSetPrefixPublisherCallback	core/api/netdata_publisher_api.cpp	/^void otNetDataSetPrefixPublisherCallback(otInstance                      *aInstance,$/;"	f	typeref:typename:void
otNetDataSteeringDataCheckJoiner	core/api/netdata_api.cpp	/^otError otNetDataSteeringDataCheckJoiner(otInstance *aInstance, const otExtAddress *aEui64)$/;"	f	typeref:typename:otError
otNetDataSteeringDataCheckJoinerWithDiscerner	core/api/netdata_api.cpp	/^otError otNetDataSteeringDataCheckJoinerWithDiscerner(otInstance *aInstance, const otJoinerDisce/;"	f	typeref:typename:otError
otNetDataUnpublishDnsSrpService	core/api/netdata_publisher_api.cpp	/^void otNetDataUnpublishDnsSrpService(otInstance *aInstance)$/;"	f	typeref:typename:void
otNetDataUnpublishPrefix	core/api/netdata_publisher_api.cpp	/^otError otNetDataUnpublishPrefix(otInstance *aInstance, const otIp6Prefix *aPrefix)$/;"	f	typeref:typename:otError
otNetworkNameFromString	core/api/dataset_api.cpp	/^otError otNetworkNameFromString(otNetworkName *aNetworkName, const char *aNameString)$/;"	f	typeref:typename:otError
otNetworkTimeGet	core/api/network_time_api.cpp	/^otNetworkTimeStatus otNetworkTimeGet(otInstance *aInstance, uint64_t *aNetworkTime)$/;"	f	typeref:typename:otNetworkTimeStatus
otNetworkTimeGetSyncPeriod	core/api/network_time_api.cpp	/^uint16_t otNetworkTimeGetSyncPeriod(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otNetworkTimeGetXtalThreshold	core/api/network_time_api.cpp	/^uint16_t otNetworkTimeGetXtalThreshold(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otNetworkTimeSetSyncPeriod	core/api/network_time_api.cpp	/^otError otNetworkTimeSetSyncPeriod(otInstance *aInstance, uint16_t aTimeSyncPeriod)$/;"	f	typeref:typename:otError
otNetworkTimeSetXtalThreshold	core/api/network_time_api.cpp	/^otError otNetworkTimeSetXtalThreshold(otInstance *aInstance, uint16_t aXtalThreshold)$/;"	f	typeref:typename:otError
otNetworkTimeSyncSetCallback	core/api/network_time_api.cpp	/^void otNetworkTimeSyncSetCallback(otInstance *aInstance, otNetworkTimeSyncCallbackFn aCallback, /;"	f	typeref:typename:void
otPingSenderPing	core/api/ping_sender_api.cpp	/^otError otPingSenderPing(otInstance *aInstance, const otPingSenderConfig *aConfig)$/;"	f	typeref:typename:otError
otPingSenderStop	core/api/ping_sender_api.cpp	/^void otPingSenderStop(otInstance *aInstance) { AsCoreType(aInstance).Get<Utils::PingSender>().St/;"	f	typeref:typename:void
otPlatAlarmMicroFired	core/common/timer.cpp	/^extern "C" void otPlatAlarmMicroFired(otInstance *aInstance)$/;"	f	namespace:ot	typeref:typename:void
otPlatAlarmMicroGetNow	posix/platform/alarm.cpp	/^uint32_t otPlatAlarmMicroGetNow(void) { return static_cast<uint32_t>(platformAlarmGetNow()); }$/;"	f	typeref:typename:uint32_t
otPlatAlarmMicroStartAt	posix/platform/alarm.cpp	/^void otPlatAlarmMicroStartAt(otInstance *aInstance, uint32_t aT0, uint32_t aDt)$/;"	f	typeref:typename:void
otPlatAlarmMicroStop	posix/platform/alarm.cpp	/^void otPlatAlarmMicroStop(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatAlarmMilliFired	core/common/timer.cpp	/^extern "C" void otPlatAlarmMilliFired(otInstance *aInstance)$/;"	f	namespace:ot	typeref:typename:void
otPlatAlarmMilliGetNow	posix/platform/alarm.cpp	/^uint32_t otPlatAlarmMilliGetNow(void) { return (uint32_t)(platformAlarmGetNow() \/ US_PER_MS); }$/;"	f	typeref:typename:uint32_t
otPlatAlarmMilliStartAt	posix/platform/alarm.cpp	/^void otPlatAlarmMilliStartAt(otInstance *aInstance, uint32_t aT0, uint32_t aDt)$/;"	f	typeref:typename:void
otPlatAlarmMilliStop	posix/platform/alarm.cpp	/^void otPlatAlarmMilliStop(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatAssertFail	posix/platform/misc.cpp	/^void otPlatAssertFail(const char *aFilename, int aLineNumber)$/;"	f	typeref:typename:void
otPlatBleDisable	posix/platform/ble.cpp	/^otError otPlatBleDisable(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatBleEnable	posix/platform/ble.cpp	/^otError otPlatBleEnable(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatBleGapAdvStart	posix/platform/ble.cpp	/^otError otPlatBleGapAdvStart(otInstance *aInstance, uint16_t aInterval)$/;"	f	typeref:typename:otError
otPlatBleGapAdvStop	posix/platform/ble.cpp	/^otError otPlatBleGapAdvStop(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatBleGapDisconnect	posix/platform/ble.cpp	/^otError otPlatBleGapDisconnect(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatBleGapOnConnected	core/radio/ble_secure.cpp	/^void otPlatBleGapOnConnected(otInstance *aInstance, uint16_t aConnectionId)$/;"	f	typeref:typename:void
otPlatBleGapOnDisconnected	core/radio/ble_secure.cpp	/^void otPlatBleGapOnDisconnected(otInstance *aInstance, uint16_t aConnectionId)$/;"	f	typeref:typename:void
otPlatBleGattMtuGet	posix/platform/ble.cpp	/^otError otPlatBleGattMtuGet(otInstance *aInstance, uint16_t *aMtu)$/;"	f	typeref:typename:otError
otPlatBleGattOnMtuUpdate	core/radio/ble_secure.cpp	/^void otPlatBleGattOnMtuUpdate(otInstance *aInstance, uint16_t aMtu)$/;"	f	typeref:typename:void
otPlatBleGattServerIndicate	posix/platform/ble.cpp	/^otError otPlatBleGattServerIndicate(otInstance *aInstance, uint16_t aHandle, const otBleRadioPac/;"	f	typeref:typename:otError
otPlatBleGattServerOnWriteRequest	core/radio/ble_secure.cpp	/^void otPlatBleGattServerOnWriteRequest(otInstance *aInstance, uint16_t aHandle, const otBleRadio/;"	f	typeref:typename:void
otPlatBorderRoutingProcessDhcp6PdPrefix	core/border_router/routing_manager.cpp	/^extern "C" void otPlatBorderRoutingProcessDhcp6PdPrefix(otInstance                            *a/;"	f	namespace:ot::BorderRouter	typeref:typename:void
otPlatBorderRoutingProcessIcmp6Ra	core/border_router/routing_manager.cpp	/^extern "C" void otPlatBorderRoutingProcessIcmp6Ra(otInstance *aInstance, const uint8_t *aMessage/;"	f	namespace:ot::BorderRouter	typeref:typename:void
otPlatCAlloc	posix/platform/memory.cpp	/^void *otPlatCAlloc(size_t aNum, size_t aSize) { return calloc(aNum, aSize); }$/;"	f	typeref:typename:void *
otPlatCryptoAesEncrypt	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoAesEncrypt(otCryptoContext *aContext, const uint8_t *aInput, ui/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoAesFree	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoAesFree(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoAesInit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoAesInit(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoAesSetKey	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoAesSetKey(otCryptoContext *aContext, const otCryptoKey *aKey)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoEcdsaGenerateKey	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoEcdsaGenerateKey(otPlatCryptoEcdsaKeyPair *aKeyPair)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoEcdsaGetPublicKey	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoEcdsaGetPublicKey(const otPlatCryptoEcdsaKeyPair *aKeyPair,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoEcdsaSign	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoEcdsaSign(const otPlatCryptoEcdsaKeyPair *aKeyPair,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoEcdsaVerify	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoEcdsaVerify(const otPlatCryptoEcdsaPublicKey *aPublicKey,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHkdfDeinit	core/crypto/crypto_platform.cpp	/^otError otPlatCryptoHkdfDeinit(otCryptoContext *aContext)$/;"	f	typeref:typename:otError
otPlatCryptoHkdfExpand	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHkdfExpand(otCryptoContext *aContext,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHkdfExtract	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHkdfExtract(otCryptoContext   *aContext,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHkdfInit	core/crypto/crypto_platform.cpp	/^otError otPlatCryptoHkdfInit(otCryptoContext *aContext)$/;"	f	typeref:typename:otError
otPlatCryptoHmacSha256Deinit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHmacSha256Deinit(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHmacSha256Finish	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHmacSha256Finish(otCryptoContext *aContext, uint8_t *aBuf, size/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHmacSha256Init	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHmacSha256Init(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHmacSha256Start	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHmacSha256Start(otCryptoContext *aContext, const otCryptoKey *a/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoHmacSha256Update	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoHmacSha256Update(otCryptoContext *aContext, const void *aBuf, u/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoInit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK void otPlatCryptoInit(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatCryptoPbkdf2GenerateKey	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoPbkdf2GenerateKey(const uint8_t *aPassword,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoRandomDeinit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK void otPlatCryptoRandomDeinit(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatCryptoRandomGet	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoRandomGet(uint8_t *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoRandomInit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK void otPlatCryptoRandomInit(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatCryptoSha256Deinit	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoSha256Deinit(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoSha256Finish	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoSha256Finish(otCryptoContext *aContext, uint8_t *aHash, uint16_/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoSha256Init	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoSha256Init(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoSha256Start	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoSha256Start(otCryptoContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatCryptoSha256Update	core/crypto/crypto_platform.cpp	/^OT_TOOL_WEAK otError otPlatCryptoSha256Update(otCryptoContext *aContext, const void *aBuf, uint1/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagAlarmCallback	posix/platform/radio.cpp	/^void otPlatDiagAlarmCallback(otInstance *aInstance) { OT_UNUSED_VARIABLE(aInstance); }$/;"	f	typeref:typename:void
otPlatDiagAlarmFired	core/diags/factory_diags.cpp	/^extern "C" void otPlatDiagAlarmFired(otInstance *aInstance) { otPlatDiagAlarmCallback(aInstance)/;"	f	namespace:ot::FactoryDiags	typeref:typename:void
otPlatDiagChannelSet	posix/platform/radio.cpp	/^void otPlatDiagChannelSet(uint8_t aChannel)$/;"	f	typeref:typename:void
otPlatDiagGpioGet	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagGpioGet(uint32_t aGpio, bool *aValue)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagGpioGet	posix/platform/radio.cpp	/^otError otPlatDiagGpioGet(uint32_t aGpio, bool *aValue)$/;"	f	typeref:typename:otError
otPlatDiagGpioGetMode	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagGpioGetMode(uint32_t aGpio, otGpioMode *aMode)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagGpioGetMode	posix/platform/radio.cpp	/^otError otPlatDiagGpioGetMode(uint32_t aGpio, otGpioMode *aMode)$/;"	f	typeref:typename:otError
otPlatDiagGpioSet	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagGpioSet(uint32_t aGpio, bool aValue)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagGpioSet	posix/platform/radio.cpp	/^otError otPlatDiagGpioSet(uint32_t aGpio, bool aValue)$/;"	f	typeref:typename:otError
otPlatDiagGpioSetMode	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagGpioSetMode(uint32_t aGpio, otGpioMode aMode)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagGpioSetMode	posix/platform/radio.cpp	/^otError otPlatDiagGpioSetMode(uint32_t aGpio, otGpioMode aMode)$/;"	f	typeref:typename:otError
otPlatDiagModeGet	posix/platform/radio.cpp	/^bool otPlatDiagModeGet(void) { return GetRadioSpinel().IsDiagEnabled(); }$/;"	f	typeref:typename:bool
otPlatDiagModeSet	posix/platform/radio.cpp	/^void otPlatDiagModeSet(bool aMode)$/;"	f	typeref:typename:void
otPlatDiagProcess	core/diags/factory_diags.cpp	/^otError otPlatDiagProcess(otInstance *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagProcess	posix/platform/radio.cpp	/^otError otPlatDiagProcess(otInstance *aInstance,$/;"	f	typeref:typename:otError
otPlatDiagRadioGetPowerSettings	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioGetPowerSettings(otInstance *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioGetPowerSettings	core/utils/power_calibration.cpp	/^otError otPlatDiagRadioGetPowerSettings(otInstance *aInstance,$/;"	f	typeref:typename:otError
otPlatDiagRadioGetPowerSettings	posix/platform/radio.cpp	/^otError otPlatDiagRadioGetPowerSettings(otInstance *aInstance,$/;"	f	typeref:typename:otError
otPlatDiagRadioGetRawPowerSetting	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioGetRawPowerSetting(otInstance *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioGetRawPowerSetting	posix/platform/radio.cpp	/^otError otPlatDiagRadioGetRawPowerSetting(otInstance *aInstance,$/;"	f	typeref:typename:otError
otPlatDiagRadioRawPowerSettingEnable	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioRawPowerSettingEnable(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioRawPowerSettingEnable	posix/platform/radio.cpp	/^otError otPlatDiagRadioRawPowerSettingEnable(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otPlatDiagRadioReceiveDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatDiagRadioReceiveDone(otInstance *, otRadioFrame *, otError) {}$/;"	f	typeref:typename:void
otPlatDiagRadioReceiveDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatDiagRadioReceiveDone(otInstance *aInstance, otRadioFrame *aFrame, otError /;"	f	typeref:typename:void
otPlatDiagRadioReceived	posix/platform/radio.cpp	/^void otPlatDiagRadioReceived(otInstance *aInstance, otRadioFrame *aFrame, otError aError)$/;"	f	typeref:typename:void
otPlatDiagRadioSetRawPowerSetting	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioSetRawPowerSetting(otInstance    *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioSetRawPowerSetting	posix/platform/radio.cpp	/^otError otPlatDiagRadioSetRawPowerSetting(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otPlatDiagRadioTransmitCarrier	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioTransmitCarrier(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioTransmitCarrier	posix/platform/radio.cpp	/^otError otPlatDiagRadioTransmitCarrier(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otPlatDiagRadioTransmitDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatDiagRadioTransmitDone(otInstance *, otRadioFrame *, otError) {}$/;"	f	typeref:typename:void
otPlatDiagRadioTransmitDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatDiagRadioTransmitDone(otInstance *aInstance, otRadioFrame *aFrame, otError/;"	f	typeref:typename:void
otPlatDiagRadioTransmitStream	core/diags/factory_diags.cpp	/^OT_TOOL_WEAK otError otPlatDiagRadioTransmitStream(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatDiagRadioTransmitStream	posix/platform/radio.cpp	/^otError otPlatDiagRadioTransmitStream(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:otError
otPlatDiagTxPowerSet	posix/platform/radio.cpp	/^void otPlatDiagTxPowerSet(int8_t aTxPower)$/;"	f	typeref:typename:void
otPlatDnsCancelUpstreamQuery	core/net/dnssd_server.cpp	/^void otPlatDnsCancelUpstreamQuery(otInstance *aInstance, otPlatDnsUpstreamQuery *aTxn)$/;"	f	typeref:typename:void
otPlatDnsCancelUpstreamQuery	posix/platform/resolver.cpp	/^void otPlatDnsCancelUpstreamQuery(otInstance *aInstance, otPlatDnsUpstreamQuery *aTxn)$/;"	f	typeref:typename:void
otPlatDnsStartUpstreamQuery	core/net/dnssd_server.cpp	/^void otPlatDnsStartUpstreamQuery(otInstance *aInstance, otPlatDnsUpstreamQuery *aTxn, const otMe/;"	f	typeref:typename:void
otPlatDnsStartUpstreamQuery	posix/platform/resolver.cpp	/^void otPlatDnsStartUpstreamQuery(otInstance *aInstance, otPlatDnsUpstreamQuery *aTxn, const otMe/;"	f	typeref:typename:void
otPlatDnsUpstreamQueryDone	core/net/dns_platform.cpp	/^void otPlatDnsUpstreamQueryDone(otInstance *aInstance, otPlatDnsUpstreamQuery *aTxn, otMessage */;"	f	typeref:typename:void
otPlatDnssdStateHandleStateChange	core/net/dnssd.cpp	/^extern "C" void otPlatDnssdStateHandleStateChange(otInstance *aInstance)$/;"	f	namespace:ot	typeref:typename:void
otPlatDsoAccept	core/net/dns_dso.cpp	/^extern "C" otPlatDsoConnection *otPlatDsoAccept(otInstance *aInstance, const otSockAddr *aPeerSo/;"	f	namespace:ot::Dns	typeref:typename:otPlatDsoConnection *
otPlatDsoConnect	core/net/dns_dso.cpp	/^OT_TOOL_WEAK void otPlatDsoConnect(otPlatDsoConnection *aConnection, const otSockAddr *aPeerSock/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatDsoDisconnect	core/net/dns_dso.cpp	/^OT_TOOL_WEAK void otPlatDsoDisconnect(otPlatDsoConnection *aConnection, otPlatDsoDisconnectMode /;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatDsoEnableListening	core/net/dns_dso.cpp	/^OT_TOOL_WEAK void otPlatDsoEnableListening(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatDsoGetInstance	core/net/dns_dso.cpp	/^extern "C" otInstance *otPlatDsoGetInstance(otPlatDsoConnection *aConnection)$/;"	f	namespace:ot::Dns	typeref:typename:otInstance *
otPlatDsoHandleConnected	core/net/dns_dso.cpp	/^extern "C" void otPlatDsoHandleConnected(otPlatDsoConnection *aConnection)$/;"	f	namespace:ot::Dns	typeref:typename:void
otPlatDsoHandleDisconnected	core/net/dns_dso.cpp	/^extern "C" void otPlatDsoHandleDisconnected(otPlatDsoConnection *aConnection, otPlatDsoDisconnec/;"	f	namespace:ot::Dns	typeref:typename:void
otPlatDsoHandleReceive	core/net/dns_dso.cpp	/^extern "C" void otPlatDsoHandleReceive(otPlatDsoConnection *aConnection, otMessage *aMessage)$/;"	f	namespace:ot::Dns	typeref:typename:void
otPlatDsoSend	core/net/dns_dso.cpp	/^OT_TOOL_WEAK void otPlatDsoSend(otPlatDsoConnection *aConnection, otMessage *aMessage)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatEntropyGet	posix/platform/entropy.cpp	/^otError otPlatEntropyGet(uint8_t *aOutput, uint16_t aOutputLength)$/;"	f	typeref:typename:otError
otPlatFree	posix/platform/memory.cpp	/^void otPlatFree(void *aPtr) { free(aPtr); }$/;"	f	typeref:typename:void
otPlatGetMcuPowerState	posix/platform/misc.cpp	/^otPlatMcuPowerState otPlatGetMcuPowerState(otInstance *aInstance)$/;"	f	typeref:typename:otPlatMcuPowerState
otPlatGetResetReason	posix/platform/misc.cpp	/^otPlatResetReason otPlatGetResetReason(otInstance *aInstance)$/;"	f	typeref:typename:otPlatResetReason
otPlatInfraIfDiscoverNat64Prefix	core/border_router/infra_if.cpp	/^OT_TOOL_WEAK otError otPlatInfraIfDiscoverNat64Prefix(uint32_t) { return OT_ERROR_FAILED; }$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatInfraIfDiscoverNat64Prefix	posix/platform/infra_if.cpp	/^otError otPlatInfraIfDiscoverNat64Prefix(uint32_t aInfraIfIndex)$/;"	f	typeref:typename:otError
otPlatInfraIfDiscoverNat64PrefixDone	core/border_router/infra_if.cpp	/^extern "C" void otPlatInfraIfDiscoverNat64PrefixDone(otInstance        *aInstance,$/;"	f	namespace:ot::BorderRouter	typeref:typename:void
otPlatInfraIfHasAddress	core/border_router/infra_if.cpp	/^OT_TOOL_WEAK bool otPlatInfraIfHasAddress(uint32_t, const otIp6Address *) { return false; }$/;"	f	typeref:typename:OT_TOOL_WEAK bool
otPlatInfraIfHasAddress	posix/platform/infra_if.cpp	/^bool otPlatInfraIfHasAddress(uint32_t aInfraIfIndex, const otIp6Address *aAddress)$/;"	f	typeref:typename:bool
otPlatInfraIfRecvIcmp6Nd	core/border_router/infra_if.cpp	/^extern "C" void otPlatInfraIfRecvIcmp6Nd(otInstance         *aInstance,$/;"	f	namespace:ot::BorderRouter	typeref:typename:void
otPlatInfraIfSendIcmp6Nd	core/border_router/infra_if.cpp	/^OT_TOOL_WEAK otError otPlatInfraIfSendIcmp6Nd(uint32_t, const otIp6Address *, const uint8_t *, u/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatInfraIfSendIcmp6Nd	posix/platform/infra_if.cpp	/^otError otPlatInfraIfSendIcmp6Nd(uint32_t            aInfraIfIndex,$/;"	f	typeref:typename:otError
otPlatInfraIfStateChanged	core/border_router/infra_if.cpp	/^extern "C" otError otPlatInfraIfStateChanged(otInstance *aInstance, uint32_t aInfraIfIndex, bool/;"	f	namespace:ot::BorderRouter	typeref:typename:otError
otPlatLog	ncp/ncp_base.cpp	/^extern "C" void otPlatLog(otLogLevel aLogLevel, otLogRegion aLogRegion, const char *aFormat, .../;"	f	typeref:typename:void
otPlatLog	posix/platform/logging.cpp	/^OT_TOOL_WEAK void otPlatLog(otLogLevel aLogLevel, otLogRegion aLogRegion, const char *aFormat, ./;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatLogHandleLevelChanged	core/instance/instance.cpp	/^extern "C" OT_TOOL_WEAK void otPlatLogHandleLevelChanged(otLogLevel aLogLevel) { OT_UNUSED_VARIA/;"	f	namespace:ot	typeref:typename:OT_TOOL_WEAK void
otPlatMdnsHandleReceive	core/net/mdns.cpp	/^extern "C" void otPlatMdnsHandleReceive(otInstance                  *aInstance,$/;"	f	namespace:ot::Dns::Multicast	typeref:typename:void
otPlatMdnsSendMulticast	core/net/mdns.cpp	/^OT_TOOL_WEAK void otPlatMdnsSendMulticast(otInstance *aInstance, otMessage *aMessage, uint32_t a/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatMdnsSendMulticast	posix/platform/mdns_socket.cpp	/^extern "C" void otPlatMdnsSendMulticast(otInstance *aInstance, otMessage *aMessage, uint32_t aIn/;"	f	typeref:typename:void
otPlatMdnsSendUnicast	core/net/mdns.cpp	/^OT_TOOL_WEAK void otPlatMdnsSendUnicast(otInstance                  *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatMdnsSendUnicast	posix/platform/mdns_socket.cpp	/^extern "C" void otPlatMdnsSendUnicast(otInstance *aInstance, otMessage *aMessage, const otPlatMd/;"	f	typeref:typename:void
otPlatMdnsSetListeningEnabled	core/net/mdns.cpp	/^OT_TOOL_WEAK otError otPlatMdnsSetListeningEnabled(otInstance *aInstance, bool aEnable, uint32_t/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatMdnsSetListeningEnabled	posix/platform/mdns_socket.cpp	/^extern "C" otError otPlatMdnsSetListeningEnabled(otInstance *aInstance, bool aEnable, uint32_t a/;"	f	typeref:typename:otError
otPlatMultipanGetActiveInstance	ncp/multipan_platform.cpp	/^OT_TOOL_WEAK otError otPlatMultipanGetActiveInstance(otInstance **aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatMultipanIidToInstance	ncp/multipan_platform.cpp	/^otInstance *otPlatMultipanIidToInstance(uint8_t aIid)$/;"	f	typeref:typename:otInstance *
otPlatMultipanInstanceToIid	ncp/multipan_platform.cpp	/^uint8_t otPlatMultipanInstanceToIid(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otPlatMultipanSetActiveInstance	ncp/multipan_platform.cpp	/^OT_TOOL_WEAK otError otPlatMultipanSetActiveInstance(otInstance *aInstance, bool aCompletePendin/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatMultipanSwitchoverDone	ncp/multipan_platform.cpp	/^OT_TOOL_WEAK void otPlatMultipanSwitchoverDone(otInstance *aInstance, bool success)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatMultipanSwitchoverDone	ncp/multipan_platform.cpp	/^void otPlatMultipanSwitchoverDone(otInstance *aInstance, bool success)$/;"	f	typeref:typename:void
otPlatRadioAddCalibratedPower	core/utils/power_calibration.cpp	/^otError otPlatRadioAddCalibratedPower(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otPlatRadioAddCalibratedPower	posix/platform/radio.cpp	/^otError otPlatRadioAddCalibratedPower(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otPlatRadioAddSrcMatchExtEntry	posix/platform/radio.cpp	/^otError otPlatRadioAddSrcMatchExtEntry(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otPlatRadioAddSrcMatchShortEntry	posix/platform/radio.cpp	/^otError otPlatRadioAddSrcMatchShortEntry(otInstance *aInstance, uint16_t aShortAddress)$/;"	f	typeref:typename:otError
otPlatRadioClearCalibratedPowers	core/utils/power_calibration.cpp	/^otError otPlatRadioClearCalibratedPowers(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatRadioClearCalibratedPowers	posix/platform/radio.cpp	/^otError otPlatRadioClearCalibratedPowers(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatRadioClearSrcMatchExtEntries	posix/platform/radio.cpp	/^void otPlatRadioClearSrcMatchExtEntries(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatRadioClearSrcMatchExtEntry	posix/platform/radio.cpp	/^otError otPlatRadioClearSrcMatchExtEntry(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:otError
otPlatRadioClearSrcMatchShortEntries	posix/platform/radio.cpp	/^void otPlatRadioClearSrcMatchShortEntries(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatRadioClearSrcMatchShortEntry	posix/platform/radio.cpp	/^otError otPlatRadioClearSrcMatchShortEntry(otInstance *aInstance, uint16_t aShortAddress)$/;"	f	typeref:typename:otError
otPlatRadioConfigureEnhAckProbing	posix/platform/radio.cpp	/^otError otPlatRadioConfigureEnhAckProbing(otInstance          *aInstance,$/;"	f	typeref:typename:otError
otPlatRadioDisable	posix/platform/radio.cpp	/^otError otPlatRadioDisable(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatRadioEnable	posix/platform/radio.cpp	/^otError otPlatRadioEnable(otInstance *aInstance) { return GetRadioSpinel().Enable(aInstance); }$/;"	f	typeref:typename:otError
otPlatRadioEnableSrcMatch	posix/platform/radio.cpp	/^void otPlatRadioEnableSrcMatch(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:void
otPlatRadioEnergyScan	posix/platform/radio.cpp	/^otError otPlatRadioEnergyScan(otInstance *aInstance, uint8_t aScanChannel, uint16_t aScanDuratio/;"	f	typeref:typename:otError
otPlatRadioEnergyScanDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioEnergyScanDone(otInstance *, int8_t) {}$/;"	f	typeref:typename:void
otPlatRadioEnergyScanDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioEnergyScanDone(otInstance *aInstance, int8_t aEnergyScanMaxRssi)$/;"	f	typeref:typename:void
otPlatRadioGetBusSpeed	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint32_t otPlatRadioGetBusSpeed(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint32_t
otPlatRadioGetBusSpeed	posix/platform/radio.cpp	/^uint32_t otPlatRadioGetBusSpeed(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otPlatRadioGetCaps	posix/platform/radio.cpp	/^otRadioCaps otPlatRadioGetCaps(otInstance *aInstance)$/;"	f	typeref:typename:otRadioCaps
otPlatRadioGetCcaEnergyDetectThreshold	posix/platform/radio.cpp	/^otError otPlatRadioGetCcaEnergyDetectThreshold(otInstance *aInstance, int8_t *aThreshold)$/;"	f	typeref:typename:otError
otPlatRadioGetCoexMetrics	posix/platform/radio.cpp	/^otError otPlatRadioGetCoexMetrics(otInstance *aInstance, otRadioCoexMetrics *aCoexMetrics)$/;"	f	typeref:typename:otError
otPlatRadioGetCslAccuracy	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint8_t otPlatRadioGetCslAccuracy(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint8_t
otPlatRadioGetCslAccuracy	posix/platform/radio.cpp	/^uint8_t otPlatRadioGetCslAccuracy(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otPlatRadioGetCslUncertainty	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint8_t otPlatRadioGetCslUncertainty(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint8_t
otPlatRadioGetCslUncertainty	posix/platform/radio.cpp	/^uint8_t otPlatRadioGetCslUncertainty(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otPlatRadioGetFemLnaGain	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioGetFemLnaGain(otInstance *aInstance, int8_t *aGain)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioGetFemLnaGain	posix/platform/radio.cpp	/^otError otPlatRadioGetFemLnaGain(otInstance *aInstance, int8_t *aGain)$/;"	f	typeref:typename:otError
otPlatRadioGetIeeeEui64	posix/platform/radio.cpp	/^void otPlatRadioGetIeeeEui64(otInstance *aInstance, uint8_t *aIeeeEui64)$/;"	f	typeref:typename:void
otPlatRadioGetIeeeEui64	posix/platform/settings.cpp	/^void otPlatRadioGetIeeeEui64(otInstance *aInstance, uint8_t *aIeeeEui64)$/;"	f	typeref:typename:void
otPlatRadioGetNow	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint64_t otPlatRadioGetNow(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint64_t
otPlatRadioGetNow	posix/platform/radio.cpp	/^uint64_t otPlatRadioGetNow(otInstance *aInstance)$/;"	f	typeref:typename:uint64_t
otPlatRadioGetPreferredChannelMask	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint32_t otPlatRadioGetPreferredChannelMask(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint32_t
otPlatRadioGetPreferredChannelMask	posix/platform/radio.cpp	/^uint32_t otPlatRadioGetPreferredChannelMask(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otPlatRadioGetPromiscuous	posix/platform/radio.cpp	/^bool otPlatRadioGetPromiscuous(otInstance *aInstance)$/;"	f	typeref:typename:bool
otPlatRadioGetRawPowerSetting	core/utils/power_calibration.cpp	/^otError otPlatRadioGetRawPowerSetting(otInstance *aInstance,$/;"	f	typeref:typename:otError
otPlatRadioGetReceiveSensitivity	posix/platform/radio.cpp	/^int8_t otPlatRadioGetReceiveSensitivity(otInstance *aInstance)$/;"	f	typeref:typename:int8_t
otPlatRadioGetRegion	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioGetRegion(otInstance *aInstance, uint16_t *aRegionCode)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioGetRegion	posix/platform/radio.cpp	/^otError otPlatRadioGetRegion(otInstance *aInstance, uint16_t *aRegionCode)$/;"	f	typeref:typename:otError
otPlatRadioGetRssi	posix/platform/radio.cpp	/^int8_t otPlatRadioGetRssi(otInstance *aInstance)$/;"	f	typeref:typename:int8_t
otPlatRadioGetState	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otRadioState otPlatRadioGetState(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK otRadioState
otPlatRadioGetState	posix/platform/radio.cpp	/^otRadioState otPlatRadioGetState(otInstance *aInstance)$/;"	f	typeref:typename:otRadioState
otPlatRadioGetSupportedChannelMask	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint32_t otPlatRadioGetSupportedChannelMask(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK uint32_t
otPlatRadioGetSupportedChannelMask	posix/platform/radio.cpp	/^uint32_t otPlatRadioGetSupportedChannelMask(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otPlatRadioGetTransmitBuffer	posix/platform/radio.cpp	/^otRadioFrame *otPlatRadioGetTransmitBuffer(otInstance *aInstance)$/;"	f	typeref:typename:otRadioFrame *
otPlatRadioGetTransmitPower	posix/platform/radio.cpp	/^otError otPlatRadioGetTransmitPower(otInstance *aInstance, int8_t *aPower)$/;"	f	typeref:typename:otError
otPlatRadioGetVersionString	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK const char *otPlatRadioGetVersionString(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK const char *
otPlatRadioGetVersionString	posix/platform/radio.cpp	/^const char *otPlatRadioGetVersionString(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otPlatRadioIsCoexEnabled	posix/platform/radio.cpp	/^bool otPlatRadioIsCoexEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otPlatRadioIsEnabled	posix/platform/radio.cpp	/^bool otPlatRadioIsEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otPlatRadioReceive	posix/platform/radio.cpp	/^otError otPlatRadioReceive(otInstance *aInstance, uint8_t aChannel)$/;"	f	typeref:typename:otError
otPlatRadioReceiveAt	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioReceiveAt(otInstance *aInstance, uint8_t aChannel, uint32_t aSta/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioReceiveAt	posix/platform/radio.cpp	/^otError otPlatRadioReceiveAt(otInstance *aInstance, uint8_t aChannel, uint32_t aStart, uint32_t /;"	f	typeref:typename:otError
otPlatRadioReceiveDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioReceiveDone(otInstance *, otRadioFrame *, otError) {}$/;"	f	typeref:typename:void
otPlatRadioReceiveDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioReceiveDone(otInstance *aInstance, otRadioFrame *aFrame, otError aErr/;"	f	typeref:typename:void
otPlatRadioResetCsl	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioResetCsl(otInstance *aInstance)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioSetCcaEnergyDetectThreshold	posix/platform/radio.cpp	/^otError otPlatRadioSetCcaEnergyDetectThreshold(otInstance *aInstance, int8_t aThreshold)$/;"	f	typeref:typename:otError
otPlatRadioSetChannelMaxTransmitPower	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioSetChannelMaxTransmitPower(otInstance *aInstance, uint8_t aChann/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioSetChannelMaxTransmitPower	posix/platform/radio.cpp	/^otError otPlatRadioSetChannelMaxTransmitPower(otInstance *aInstance, uint8_t aChannel, int8_t aM/;"	f	typeref:typename:otError
otPlatRadioSetChannelTargetPower	core/utils/power_calibration.cpp	/^otError otPlatRadioSetChannelTargetPower(otInstance *aInstance, uint8_t aChannel, int16_t aTarge/;"	f	typeref:typename:otError
otPlatRadioSetChannelTargetPower	posix/platform/radio.cpp	/^otError otPlatRadioSetChannelTargetPower(otInstance *aInstance, uint8_t aChannel, int16_t aTarge/;"	f	typeref:typename:otError
otPlatRadioSetCoexEnabled	posix/platform/radio.cpp	/^otError otPlatRadioSetCoexEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:otError
otPlatRadioSetExtendedAddress	posix/platform/radio.cpp	/^void otPlatRadioSetExtendedAddress(otInstance *aInstance, const otExtAddress *aAddress)$/;"	f	typeref:typename:void
otPlatRadioSetFemLnaGain	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioSetFemLnaGain(otInstance *aInstance, int8_t aGain)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioSetFemLnaGain	posix/platform/radio.cpp	/^otError otPlatRadioSetFemLnaGain(otInstance *aInstance, int8_t aGain)$/;"	f	typeref:typename:otError
otPlatRadioSetMacFrameCounter	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK void otPlatRadioSetMacFrameCounter(otInstance *aInstance, uint32_t aMacFrameCounter/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatRadioSetMacFrameCounter	posix/platform/radio.cpp	/^void otPlatRadioSetMacFrameCounter(otInstance *aInstance, uint32_t aMacFrameCounter)$/;"	f	typeref:typename:void
otPlatRadioSetMacFrameCounterIfLarger	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK void otPlatRadioSetMacFrameCounterIfLarger(otInstance *aInstance, uint32_t aMacFram/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatRadioSetMacFrameCounterIfLarger	posix/platform/radio.cpp	/^void otPlatRadioSetMacFrameCounterIfLarger(otInstance *aInstance, uint32_t aMacFrameCounter)$/;"	f	typeref:typename:void
otPlatRadioSetMacKey	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK void otPlatRadioSetMacKey(otInstance             *aInstance,$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatRadioSetMacKey	posix/platform/radio.cpp	/^void otPlatRadioSetMacKey(otInstance             *aInstance,$/;"	f	typeref:typename:void
otPlatRadioSetPanId	posix/platform/radio.cpp	/^void otPlatRadioSetPanId(otInstance *aInstance, uint16_t panid)$/;"	f	typeref:typename:void
otPlatRadioSetPromiscuous	posix/platform/radio.cpp	/^void otPlatRadioSetPromiscuous(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:void
otPlatRadioSetRegion	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK otError otPlatRadioSetRegion(otInstance *aInstance, uint16_t aRegionCode)$/;"	f	typeref:typename:OT_TOOL_WEAK otError
otPlatRadioSetRegion	posix/platform/radio.cpp	/^otError otPlatRadioSetRegion(otInstance *aInstance, uint16_t aRegionCode)$/;"	f	typeref:typename:otError
otPlatRadioSetRxOnWhenIdle	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK void otPlatRadioSetRxOnWhenIdle(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatRadioSetShortAddress	posix/platform/radio.cpp	/^void otPlatRadioSetShortAddress(otInstance *aInstance, uint16_t aAddress)$/;"	f	typeref:typename:void
otPlatRadioSetTransmitPower	posix/platform/radio.cpp	/^otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)$/;"	f	typeref:typename:otError
otPlatRadioSleep	posix/platform/radio.cpp	/^otError otPlatRadioSleep(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatRadioTransmit	posix/platform/radio.cpp	/^otError otPlatRadioTransmit(otInstance *aInstance, otRadioFrame *aFrame)$/;"	f	typeref:typename:otError
otPlatRadioTxDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioTxDone(otInstance *, otRadioFrame *, otRadioFrame *, otError) {}$/;"	f	typeref:typename:void
otPlatRadioTxDone	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioTxDone(otInstance *aInstance, otRadioFrame *aFrame, otRadioFrame *aAc/;"	f	typeref:typename:void
otPlatRadioTxStarted	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioTxStarted(otInstance *, otRadioFrame *) {}$/;"	f	typeref:typename:void
otPlatRadioTxStarted	core/radio/radio_platform.cpp	/^extern "C" void otPlatRadioTxStarted(otInstance *aInstance, otRadioFrame *aFrame)$/;"	f	typeref:typename:void
otPlatReset	posix/main.c	/^void otPlatReset(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatResetToBootloader	posix/platform/radio.cpp	/^otError otPlatResetToBootloader(otInstance *aInstance)$/;"	f	typeref:typename:otError
otPlatSetMcuPowerState	posix/platform/misc.cpp	/^otError otPlatSetMcuPowerState(otInstance *aInstance, otPlatMcuPowerState aState)$/;"	f	typeref:typename:otError
otPlatSettingsAdd	posix/platform/settings.cpp	/^otError otPlatSettingsAdd(otInstance *aInstance, uint16_t aKey, const uint8_t *aValue, uint16_t /;"	f	typeref:typename:otError
otPlatSettingsDeinit	posix/platform/settings.cpp	/^void otPlatSettingsDeinit(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatSettingsDelete	posix/platform/settings.cpp	/^otError otPlatSettingsDelete(otInstance *aInstance, uint16_t aKey, int aIndex)$/;"	f	typeref:typename:otError
otPlatSettingsGet	posix/platform/settings.cpp	/^otError otPlatSettingsGet(otInstance *aInstance, uint16_t aKey, int aIndex, uint8_t *aValue, uin/;"	f	typeref:typename:otError
otPlatSettingsInit	posix/platform/settings.cpp	/^void otPlatSettingsInit(otInstance *aInstance, const uint16_t *aSensitiveKeys, uint16_t aSensiti/;"	f	typeref:typename:void
otPlatSettingsSet	posix/platform/settings.cpp	/^otError otPlatSettingsSet(otInstance *aInstance, uint16_t aKey, const uint8_t *aValue, uint16_t /;"	f	typeref:typename:otError
otPlatSettingsSetCriticalKeys	core/common/settings.cpp	/^OT_TOOL_WEAK void otPlatSettingsSetCriticalKeys(otInstance *aInstance, const uint16_t *aKeys, ui/;"	f	typeref:typename:OT_TOOL_WEAK void
otPlatSettingsWipe	posix/platform/settings.cpp	/^void otPlatSettingsWipe(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatTimeGet	core/radio/radio_platform.cpp	/^OT_TOOL_WEAK uint64_t otPlatTimeGet(void) { return UINT64_MAX; }$/;"	f	typeref:typename:OT_TOOL_WEAK uint64_t
otPlatTimeGet	posix/platform/alarm.cpp	/^uint64_t otPlatTimeGet(void)$/;"	f	typeref:typename:uint64_t
otPlatTimeGet	posix/platform/virtual_time.cpp	/^uint64_t otPlatTimeGet(void) { return sNow; }$/;"	f	typeref:typename:uint64_t
otPlatTrelDisable	posix/platform/trel.cpp	/^void otPlatTrelDisable(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatTrelEnable	posix/platform/trel.cpp	/^void otPlatTrelEnable(otInstance *aInstance, uint16_t *aUdpPort)$/;"	f	typeref:typename:void
otPlatTrelGetCounters	posix/platform/trel.cpp	/^const otPlatTrelCounters *otPlatTrelGetCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otPlatTrelCounters *
otPlatTrelHandleDiscoveredPeerInfo	core/radio/trel_interface.cpp	/^extern "C" void otPlatTrelHandleDiscoveredPeerInfo(otInstance *aInstance, const otPlatTrelPeerIn/;"	f	namespace:ot::Trel	typeref:typename:void
otPlatTrelHandleReceived	core/radio/trel_interface.cpp	/^extern "C" void otPlatTrelHandleReceived(otInstance *aInstance, uint8_t *aBuffer, uint16_t aLeng/;"	f	namespace:ot::Trel	typeref:typename:void
otPlatTrelRegisterService	posix/platform/trel.cpp	/^void otPlatTrelRegisterService(otInstance *aInstance, uint16_t aPort, const uint8_t *aTxtData, u/;"	f	typeref:typename:void
otPlatTrelResetCounters	posix/platform/trel.cpp	/^void otPlatTrelResetCounters(otInstance *aInstance)$/;"	f	typeref:typename:void
otPlatTrelSend	posix/platform/trel.cpp	/^void otPlatTrelSend(otInstance       *aInstance,$/;"	f	typeref:typename:void
otPlatUdpBind	posix/platform/udp.cpp	/^otError otPlatUdpBind(otUdpSocket *aUdpSocket)$/;"	f	typeref:typename:otError
otPlatUdpBindToNetif	posix/platform/udp.cpp	/^otError otPlatUdpBindToNetif(otUdpSocket *aUdpSocket, otNetifIdentifier aNetifIdentifier)$/;"	f	typeref:typename:otError
otPlatUdpClose	posix/platform/udp.cpp	/^otError otPlatUdpClose(otUdpSocket *aUdpSocket)$/;"	f	typeref:typename:otError
otPlatUdpConnect	posix/platform/udp.cpp	/^otError otPlatUdpConnect(otUdpSocket *aUdpSocket)$/;"	f	typeref:typename:otError
otPlatUdpJoinMulticastGroup	posix/platform/udp.cpp	/^otError otPlatUdpJoinMulticastGroup(otUdpSocket        *aUdpSocket,$/;"	f	typeref:typename:otError
otPlatUdpLeaveMulticastGroup	posix/platform/udp.cpp	/^otError otPlatUdpLeaveMulticastGroup(otUdpSocket        *aUdpSocket,$/;"	f	typeref:typename:otError
otPlatUdpSend	posix/platform/udp.cpp	/^otError otPlatUdpSend(otUdpSocket *aUdpSocket, otMessage *aMessage, const otMessageInfo *aMessag/;"	f	typeref:typename:otError
otPlatUdpSocket	posix/platform/udp.cpp	/^otError otPlatUdpSocket(otUdpSocket *aUdpSocket)$/;"	f	typeref:typename:otError
otPlatWakeHost	posix/platform/misc.cpp	/^void otPlatWakeHost(void)$/;"	f	typeref:typename:void
otRadioTimeStatsGet	core/api/radio_stats_api.cpp	/^const otRadioTimeStats *otRadioTimeStatsGet(otInstance *aInstance)$/;"	f	typeref:typename:const otRadioTimeStats *
otRadioTimeStatsReset	core/api/radio_stats_api.cpp	/^void otRadioTimeStatsReset(otInstance *aInstance) { AsCoreType(aInstance).Get<RadioStatistics>()/;"	f	typeref:typename:void
otRandomCryptoFillBuffer	core/api/random_crypto_api.cpp	/^otError otRandomCryptoFillBuffer(uint8_t *aBuffer, uint16_t aSize)$/;"	f	typeref:typename:otError
otRandomNonCryptoAddJitter	core/api/random_noncrypto_api.cpp	/^uint32_t otRandomNonCryptoAddJitter(uint32_t aValue, uint16_t aJitter)$/;"	f	typeref:typename:uint32_t
otRandomNonCryptoFillBuffer	core/api/random_noncrypto_api.cpp	/^void otRandomNonCryptoFillBuffer(uint8_t *aBuffer, uint16_t aSize) { Random::NonCrypto::FillBuff/;"	f	typeref:typename:void
otRandomNonCryptoGetUint16	core/api/random_noncrypto_api.cpp	/^uint16_t otRandomNonCryptoGetUint16(void) { return Random::NonCrypto::GetUint16(); }$/;"	f	typeref:typename:uint16_t
otRandomNonCryptoGetUint16InRange	core/api/random_noncrypto_api.cpp	/^uint16_t otRandomNonCryptoGetUint16InRange(uint16_t aMin, uint16_t aMax)$/;"	f	typeref:typename:uint16_t
otRandomNonCryptoGetUint32	core/api/random_noncrypto_api.cpp	/^uint32_t otRandomNonCryptoGetUint32(void) { return Random::NonCrypto::GetUint32(); }$/;"	f	typeref:typename:uint32_t
otRandomNonCryptoGetUint32InRange	core/api/random_noncrypto_api.cpp	/^uint32_t otRandomNonCryptoGetUint32InRange(uint32_t aMin, uint32_t aMax)$/;"	f	typeref:typename:uint32_t
otRandomNonCryptoGetUint8	core/api/random_noncrypto_api.cpp	/^uint8_t otRandomNonCryptoGetUint8(void) { return Random::NonCrypto::GetUint8(); }$/;"	f	typeref:typename:uint8_t
otRandomNonCryptoGetUint8InRange	core/api/random_noncrypto_api.cpp	/^uint8_t otRandomNonCryptoGetUint8InRange(uint8_t aMin, uint8_t aMax)$/;"	f	typeref:typename:uint8_t
otRemoveStateChangeCallback	core/api/instance_api.cpp	/^void otRemoveStateChangeCallback(otInstance *aInstance, otStateChangedCallback aCallback, void */;"	f	typeref:typename:void
otServerAddService	core/api/server_api.cpp	/^otError otServerAddService(otInstance *aInstance, const otServiceConfig *aConfig)$/;"	f	typeref:typename:otError
otServerGetNetDataLocal	core/api/server_api.cpp	/^otError otServerGetNetDataLocal(otInstance *aInstance, bool aStable, uint8_t *aData, uint8_t *aD/;"	f	typeref:typename:otError
otServerGetNextService	core/api/server_api.cpp	/^otError otServerGetNextService(otInstance *aInstance, otNetworkDataIterator *aIterator, otServic/;"	f	typeref:typename:otError
otServerRegister	core/api/server_api.cpp	/^otError otServerRegister(otInstance *aInstance)$/;"	f	typeref:typename:otError
otServerRemoveService	core/api/server_api.cpp	/^otError otServerRemoveService(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otSetStateChangedCallback	core/api/instance_api.cpp	/^otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback, void /;"	f	typeref:typename:otError
otSntpClientQuery	core/api/sntp_api.cpp	/^otError otSntpClientQuery(otInstance           *aInstance,$/;"	f	typeref:typename:otError
otSntpClientSetUnixEra	core/api/sntp_api.cpp	/^void otSntpClientSetUnixEra(otInstance *aInstance, uint32_t aUnixEra)$/;"	f	typeref:typename:void
otSrpClientAddService	core/api/srp_client_api.cpp	/^otError otSrpClientAddService(otInstance *aInstance, otSrpClientService *aService)$/;"	f	typeref:typename:otError
otSrpClientBuffersAllocateService	core/api/srp_client_buffers_api.cpp	/^otSrpClientBuffersServiceEntry *otSrpClientBuffersAllocateService(otInstance *aInstance)$/;"	f	typeref:typename:otSrpClientBuffersServiceEntry *
otSrpClientBuffersFreeAllServices	core/api/srp_client_buffers_api.cpp	/^void otSrpClientBuffersFreeAllServices(otInstance *aInstance)$/;"	f	typeref:typename:void
otSrpClientBuffersFreeService	core/api/srp_client_buffers_api.cpp	/^void otSrpClientBuffersFreeService(otInstance *aInstance, otSrpClientBuffersServiceEntry *aServi/;"	f	typeref:typename:void
otSrpClientBuffersGetHostAddressesArray	core/api/srp_client_buffers_api.cpp	/^otIp6Address *otSrpClientBuffersGetHostAddressesArray(otInstance *aInstance, uint8_t *aArrayLeng/;"	f	typeref:typename:otIp6Address *
otSrpClientBuffersGetHostNameString	core/api/srp_client_buffers_api.cpp	/^char *otSrpClientBuffersGetHostNameString(otInstance *aInstance, uint16_t *aSize)$/;"	f	typeref:typename:char *
otSrpClientBuffersGetServiceEntryInstanceNameString	core/api/srp_client_buffers_api.cpp	/^char *otSrpClientBuffersGetServiceEntryInstanceNameString(otSrpClientBuffersServiceEntry *aEntry/;"	f	typeref:typename:char *
otSrpClientBuffersGetServiceEntryServiceNameString	core/api/srp_client_buffers_api.cpp	/^char *otSrpClientBuffersGetServiceEntryServiceNameString(otSrpClientBuffersServiceEntry *aEntry,/;"	f	typeref:typename:char *
otSrpClientBuffersGetServiceEntryTxtBuffer	core/api/srp_client_buffers_api.cpp	/^uint8_t *otSrpClientBuffersGetServiceEntryTxtBuffer(otSrpClientBuffersServiceEntry *aEntry, uint/;"	f	typeref:typename:uint8_t *
otSrpClientBuffersGetSubTypeLabelsArray	core/api/srp_client_buffers_api.cpp	/^const char **otSrpClientBuffersGetSubTypeLabelsArray(otSrpClientBuffersServiceEntry *aEntry, uin/;"	f	typeref:typename:const char **
otSrpClientClearHostAndServices	core/api/srp_client_api.cpp	/^void otSrpClientClearHostAndServices(otInstance *aInstance)$/;"	f	typeref:typename:void
otSrpClientClearService	core/api/srp_client_api.cpp	/^otError otSrpClientClearService(otInstance *aInstance, otSrpClientService *aService)$/;"	f	typeref:typename:otError
otSrpClientDisableAutoStartMode	core/api/srp_client_api.cpp	/^void otSrpClientDisableAutoStartMode(otInstance *aInstance)$/;"	f	typeref:typename:void
otSrpClientEnableAutoHostAddress	core/api/srp_client_api.cpp	/^otError otSrpClientEnableAutoHostAddress(otInstance *aInstance)$/;"	f	typeref:typename:otError
otSrpClientEnableAutoStartMode	core/api/srp_client_api.cpp	/^void otSrpClientEnableAutoStartMode(otInstance *aInstance, otSrpClientAutoStartCallback aCallbac/;"	f	typeref:typename:void
otSrpClientGetDomainName	core/api/srp_client_api.cpp	/^const char *otSrpClientGetDomainName(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otSrpClientGetHostInfo	core/api/srp_client_api.cpp	/^const otSrpClientHostInfo *otSrpClientGetHostInfo(otInstance *aInstance)$/;"	f	typeref:typename:const otSrpClientHostInfo *
otSrpClientGetKeyLeaseInterval	core/api/srp_client_api.cpp	/^uint32_t otSrpClientGetKeyLeaseInterval(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otSrpClientGetLeaseInterval	core/api/srp_client_api.cpp	/^uint32_t otSrpClientGetLeaseInterval(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otSrpClientGetServerAddress	core/api/srp_client_api.cpp	/^const otSockAddr *otSrpClientGetServerAddress(otInstance *aInstance)$/;"	f	typeref:typename:const otSockAddr *
otSrpClientGetServices	core/api/srp_client_api.cpp	/^const otSrpClientService *otSrpClientGetServices(otInstance *aInstance)$/;"	f	typeref:typename:const otSrpClientService *
otSrpClientGetTtl	core/api/srp_client_api.cpp	/^uint32_t otSrpClientGetTtl(otInstance *aInstance) { return AsCoreType(aInstance).Get<Srp::Client/;"	f	typeref:typename:uint32_t
otSrpClientIsAutoStartModeEnabled	core/api/srp_client_api.cpp	/^bool otSrpClientIsAutoStartModeEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otSrpClientIsRunning	core/api/srp_client_api.cpp	/^bool otSrpClientIsRunning(otInstance *aInstance) { return AsCoreType(aInstance).Get<Srp::Client>/;"	f	typeref:typename:bool
otSrpClientIsServiceKeyRecordEnabled	core/api/srp_client_api.cpp	/^bool otSrpClientIsServiceKeyRecordEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otSrpClientItemStateToString	core/api/srp_client_api.cpp	/^const char *otSrpClientItemStateToString(otSrpClientItemState aItemState)$/;"	f	typeref:typename:const char *
otSrpClientRemoveHostAndServices	core/api/srp_client_api.cpp	/^otError otSrpClientRemoveHostAndServices(otInstance *aInstance, bool aRemoveKeyLease, bool aSend/;"	f	typeref:typename:otError
otSrpClientRemoveService	core/api/srp_client_api.cpp	/^otError otSrpClientRemoveService(otInstance *aInstance, otSrpClientService *aService)$/;"	f	typeref:typename:otError
otSrpClientSetCallback	core/api/srp_client_api.cpp	/^void otSrpClientSetCallback(otInstance *aInstance, otSrpClientCallback aCallback, void *aContext/;"	f	typeref:typename:void
otSrpClientSetDomainName	core/api/srp_client_api.cpp	/^otError otSrpClientSetDomainName(otInstance *aInstance, const char *aDomainName)$/;"	f	typeref:typename:otError
otSrpClientSetHostAddresses	core/api/srp_client_api.cpp	/^otError otSrpClientSetHostAddresses(otInstance *aInstance, const otIp6Address *aIp6Addresses, ui/;"	f	typeref:typename:otError
otSrpClientSetHostName	core/api/srp_client_api.cpp	/^otError otSrpClientSetHostName(otInstance *aInstance, const char *aName)$/;"	f	typeref:typename:otError
otSrpClientSetKeyLeaseInterval	core/api/srp_client_api.cpp	/^void otSrpClientSetKeyLeaseInterval(otInstance *aInstance, uint32_t aInterval)$/;"	f	typeref:typename:void
otSrpClientSetLeaseInterval	core/api/srp_client_api.cpp	/^void otSrpClientSetLeaseInterval(otInstance *aInstance, uint32_t aInterval)$/;"	f	typeref:typename:void
otSrpClientSetServiceKeyRecordEnabled	core/api/srp_client_api.cpp	/^void otSrpClientSetServiceKeyRecordEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otSrpClientSetTtl	core/api/srp_client_api.cpp	/^void otSrpClientSetTtl(otInstance *aInstance, uint32_t aTtl)$/;"	f	typeref:typename:void
otSrpClientStart	core/api/srp_client_api.cpp	/^otError otSrpClientStart(otInstance *aInstance, const otSockAddr *aServerSockAddr)$/;"	f	typeref:typename:otError
otSrpClientStop	core/api/srp_client_api.cpp	/^void otSrpClientStop(otInstance *aInstance) { return AsCoreType(aInstance).Get<Srp::Client>().St/;"	f	typeref:typename:void
otSrpServerGetAddressMode	core/api/srp_server_api.cpp	/^otSrpServerAddressMode otSrpServerGetAddressMode(otInstance *aInstance)$/;"	f	typeref:typename:otSrpServerAddressMode
otSrpServerGetAnycastModeSequenceNumber	core/api/srp_server_api.cpp	/^uint8_t otSrpServerGetAnycastModeSequenceNumber(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otSrpServerGetDomain	core/api/srp_server_api.cpp	/^const char *otSrpServerGetDomain(otInstance *aInstance) { return AsCoreType(aInstance).Get<Srp::/;"	f	typeref:typename:const char *
otSrpServerGetLeaseConfig	core/api/srp_server_api.cpp	/^void otSrpServerGetLeaseConfig(otInstance *aInstance, otSrpServerLeaseConfig *aLeaseConfig)$/;"	f	typeref:typename:void
otSrpServerGetNextHost	core/api/srp_server_api.cpp	/^const otSrpServerHost *otSrpServerGetNextHost(otInstance *aInstance, const otSrpServerHost *aHos/;"	f	typeref:typename:const otSrpServerHost *
otSrpServerGetPort	core/api/srp_server_api.cpp	/^uint16_t otSrpServerGetPort(otInstance *aInstance) { return AsCoreType(aInstance).Get<Srp::Serve/;"	f	typeref:typename:uint16_t
otSrpServerGetResponseCounters	core/api/srp_server_api.cpp	/^const otSrpServerResponseCounters *otSrpServerGetResponseCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otSrpServerResponseCounters *
otSrpServerGetState	core/api/srp_server_api.cpp	/^otSrpServerState otSrpServerGetState(otInstance *aInstance)$/;"	f	typeref:typename:otSrpServerState
otSrpServerGetTtlConfig	core/api/srp_server_api.cpp	/^void otSrpServerGetTtlConfig(otInstance *aInstance, otSrpServerTtlConfig *aTtlConfig)$/;"	f	typeref:typename:void
otSrpServerHandleServiceUpdateResult	core/api/srp_server_api.cpp	/^void otSrpServerHandleServiceUpdateResult(otInstance *aInstance, otSrpServerServiceUpdateId aId,/;"	f	typeref:typename:void
otSrpServerHostGetAddresses	core/api/srp_server_api.cpp	/^const otIp6Address *otSrpServerHostGetAddresses(const otSrpServerHost *aHost, uint8_t *aAddresse/;"	f	typeref:typename:const otIp6Address *
otSrpServerHostGetFullName	core/api/srp_server_api.cpp	/^const char *otSrpServerHostGetFullName(const otSrpServerHost *aHost) { return AsCoreType(aHost)./;"	f	typeref:typename:const char *
otSrpServerHostGetKeyLease	core/api/srp_server_api.cpp	/^uint32_t otSrpServerHostGetKeyLease(const otSrpServerHost *aHost) { return AsCoreType(aHost).Get/;"	f	typeref:typename:uint32_t
otSrpServerHostGetLeaseInfo	core/api/srp_server_api.cpp	/^void otSrpServerHostGetLeaseInfo(const otSrpServerHost *aHost, otSrpServerLeaseInfo *aLeaseInfo)$/;"	f	typeref:typename:void
otSrpServerHostGetNextService	core/api/srp_server_api.cpp	/^const otSrpServerService *otSrpServerHostGetNextService(const otSrpServerHost    *aHost,$/;"	f	typeref:typename:const otSrpServerService *
otSrpServerHostIsDeleted	core/api/srp_server_api.cpp	/^bool otSrpServerHostIsDeleted(const otSrpServerHost *aHost) { return AsCoreType(aHost).IsDeleted/;"	f	typeref:typename:bool
otSrpServerHostMatchesFullName	core/api/srp_server_api.cpp	/^bool otSrpServerHostMatchesFullName(const otSrpServerHost *aHost, const char *aFullName)$/;"	f	typeref:typename:bool
otSrpServerIsAutoEnableMode	core/api/srp_server_api.cpp	/^bool otSrpServerIsAutoEnableMode(otInstance *aInstance)$/;"	f	typeref:typename:bool
otSrpServerParseSubTypeServiceName	core/api/srp_server_api.cpp	/^otError otSrpServerParseSubTypeServiceName(const char *aSubTypeServiceName, char *aLabel, uint8_/;"	f	typeref:typename:otError
otSrpServerServiceGetHost	core/api/srp_server_api.cpp	/^const otSrpServerHost *otSrpServerServiceGetHost(const otSrpServerService *aService)$/;"	f	typeref:typename:const otSrpServerHost *
otSrpServerServiceGetInstanceLabel	core/api/srp_server_api.cpp	/^const char *otSrpServerServiceGetInstanceLabel(const otSrpServerService *aService)$/;"	f	typeref:typename:const char *
otSrpServerServiceGetInstanceName	core/api/srp_server_api.cpp	/^const char *otSrpServerServiceGetInstanceName(const otSrpServerService *aService)$/;"	f	typeref:typename:const char *
otSrpServerServiceGetLeaseInfo	core/api/srp_server_api.cpp	/^void otSrpServerServiceGetLeaseInfo(const otSrpServerService *aService, otSrpServerLeaseInfo *aL/;"	f	typeref:typename:void
otSrpServerServiceGetNumberOfSubTypes	core/api/srp_server_api.cpp	/^uint16_t otSrpServerServiceGetNumberOfSubTypes(const otSrpServerService *aService)$/;"	f	typeref:typename:uint16_t
otSrpServerServiceGetPort	core/api/srp_server_api.cpp	/^uint16_t otSrpServerServiceGetPort(const otSrpServerService *aService) { return AsCoreType(aServ/;"	f	typeref:typename:uint16_t
otSrpServerServiceGetPriority	core/api/srp_server_api.cpp	/^uint16_t otSrpServerServiceGetPriority(const otSrpServerService *aService)$/;"	f	typeref:typename:uint16_t
otSrpServerServiceGetServiceName	core/api/srp_server_api.cpp	/^const char *otSrpServerServiceGetServiceName(const otSrpServerService *aService)$/;"	f	typeref:typename:const char *
otSrpServerServiceGetSubTypeServiceNameAt	core/api/srp_server_api.cpp	/^const char *otSrpServerServiceGetSubTypeServiceNameAt(const otSrpServerService *aService, uint16/;"	f	typeref:typename:const char *
otSrpServerServiceGetTtl	core/api/srp_server_api.cpp	/^uint32_t otSrpServerServiceGetTtl(const otSrpServerService *aService) { return AsCoreType(aServi/;"	f	typeref:typename:uint32_t
otSrpServerServiceGetTxtData	core/api/srp_server_api.cpp	/^const uint8_t *otSrpServerServiceGetTxtData(const otSrpServerService *aService, uint16_t *aDataL/;"	f	typeref:typename:const uint8_t *
otSrpServerServiceGetWeight	core/api/srp_server_api.cpp	/^uint16_t otSrpServerServiceGetWeight(const otSrpServerService *aService) { return AsCoreType(aSe/;"	f	typeref:typename:uint16_t
otSrpServerServiceHasSubTypeServiceName	core/api/srp_server_api.cpp	/^bool otSrpServerServiceHasSubTypeServiceName(const otSrpServerService *aService, const char *aSu/;"	f	typeref:typename:bool
otSrpServerServiceIsDeleted	core/api/srp_server_api.cpp	/^bool otSrpServerServiceIsDeleted(const otSrpServerService *aService) { return AsCoreType(aServic/;"	f	typeref:typename:bool
otSrpServerServiceMatchesInstanceName	core/api/srp_server_api.cpp	/^bool otSrpServerServiceMatchesInstanceName(const otSrpServerService *aService, const char *aInst/;"	f	typeref:typename:bool
otSrpServerServiceMatchesServiceName	core/api/srp_server_api.cpp	/^bool otSrpServerServiceMatchesServiceName(const otSrpServerService *aService, const char *aServi/;"	f	typeref:typename:bool
otSrpServerSetAddressMode	core/api/srp_server_api.cpp	/^otError otSrpServerSetAddressMode(otInstance *aInstance, otSrpServerAddressMode aMode)$/;"	f	typeref:typename:otError
otSrpServerSetAnycastModeSequenceNumber	core/api/srp_server_api.cpp	/^otError otSrpServerSetAnycastModeSequenceNumber(otInstance *aInstance, uint8_t aSequenceNumber)$/;"	f	typeref:typename:otError
otSrpServerSetAutoEnableMode	core/api/srp_server_api.cpp	/^void otSrpServerSetAutoEnableMode(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otSrpServerSetDomain	core/api/srp_server_api.cpp	/^otError otSrpServerSetDomain(otInstance *aInstance, const char *aDomain)$/;"	f	typeref:typename:otError
otSrpServerSetEnabled	core/api/srp_server_api.cpp	/^void otSrpServerSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otSrpServerSetLeaseConfig	core/api/srp_server_api.cpp	/^otError otSrpServerSetLeaseConfig(otInstance *aInstance, const otSrpServerLeaseConfig *aLeaseCon/;"	f	typeref:typename:otError
otSrpServerSetServiceUpdateHandler	core/api/srp_server_api.cpp	/^void otSrpServerSetServiceUpdateHandler(otInstance                     *aInstance,$/;"	f	typeref:typename:void
otSrpServerSetTtlConfig	core/api/srp_server_api.cpp	/^otError otSrpServerSetTtlConfig(otInstance *aInstance, const otSrpServerTtlConfig *aTtlConfig)$/;"	f	typeref:typename:otError
otSysCliInitUsingDaemon	posix/platform/system.cpp	/^void otSysCliInitUsingDaemon(otInstance *aInstance)$/;"	f	typeref:typename:void
otSysCountInfraNetifAddresses	posix/platform/infra_if.cpp	/^void otSysCountInfraNetifAddresses(otSysInfraNetIfAddressCounters *aAddressCounters)$/;"	f	typeref:typename:void
otSysDeinit	posix/platform/system.cpp	/^void otSysDeinit(void)$/;"	f	typeref:typename:void
otSysGetInfraNetifFlags	posix/platform/infra_if.cpp	/^uint32_t otSysGetInfraNetifFlags(void) { return ot::Posix::InfraNetif::Get().GetFlags(); }$/;"	f	typeref:typename:uint32_t
otSysGetInfraNetifIndex	posix/platform/infra_if.cpp	/^uint32_t otSysGetInfraNetifIndex(void) { return ot::Posix::InfraNetif::Get().GetNetifIndex(); }$/;"	f	typeref:typename:uint32_t
otSysGetInfraNetifName	posix/platform/infra_if.cpp	/^const char *otSysGetInfraNetifName(void) { return ot::Posix::InfraNetif::Get().GetNetifName(); }$/;"	f	typeref:typename:const char *
otSysGetRadioSpinelMetrics	posix/platform/radio.cpp	/^const otRadioSpinelMetrics *otSysGetRadioSpinelMetrics(void) { return GetRadioSpinel().GetRadioS/;"	f	typeref:typename:const otRadioSpinelMetrics *
otSysGetRadioUrlHelpString	posix/platform/radio_url.cpp	/^const char *otSysGetRadioUrlHelpString(void)$/;"	f	typeref:typename:const char *
otSysGetRcpInterfaceMetrics	posix/platform/radio.cpp	/^const otRcpInterfaceMetrics *otSysGetRcpInterfaceMetrics(void)$/;"	f	typeref:typename:const otRcpInterfaceMetrics *
otSysGetThreadNetifIndex	posix/platform/netif.cpp	/^unsigned int otSysGetThreadNetifIndex(void) { return gNetifIndex; }$/;"	f	typeref:typename:unsigned int
otSysGetThreadNetifName	posix/platform/netif.cpp	/^const char *otSysGetThreadNetifName(void) { return gNetifName; }$/;"	f	typeref:typename:const char *
otSysInfraIfIsRunning	posix/platform/infra_if.cpp	/^bool otSysInfraIfIsRunning(void) { return ot::Posix::InfraNetif::Get().IsRunning(); }$/;"	f	typeref:typename:bool
otSysInit	posix/platform/system.cpp	/^otInstance *otSysInit(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:otInstance *
otSysMainloopPoll	posix/platform/system.cpp	/^int otSysMainloopPoll(otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:int
otSysMainloopProcess	posix/platform/system.cpp	/^void otSysMainloopProcess(otInstance *aInstance, const otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otSysMainloopUpdate	posix/platform/system.cpp	/^void otSysMainloopUpdate(otInstance *aInstance, otSysMainloopContext *aMainloop)$/;"	f	typeref:typename:void
otSysSetInfraNetif	posix/platform/system.cpp	/^void otSysSetInfraNetif(const char *aInfraNetifName, int aIcmp6Socket)$/;"	f	typeref:typename:void
otTaskletsArePending	core/api/tasklet_api.cpp	/^bool otTaskletsArePending(otInstance *aInstance)$/;"	f	typeref:typename:bool
otTaskletsProcess	core/api/tasklet_api.cpp	/^void otTaskletsProcess(otInstance *aInstance)$/;"	f	typeref:typename:void
otTaskletsSignalPending	core/api/tasklet_api.cpp	/^OT_TOOL_WEAK void otTaskletsSignalPending(otInstance *) {}$/;"	f	typeref:typename:OT_TOOL_WEAK void
otTaskletsSignalPending	posix/main.c	/^void otTaskletsSignalPending(otInstance *aInstance) { OT_UNUSED_VARIABLE(aInstance); }$/;"	f	typeref:typename:void
otTcpAbort	core/api/tcp_api.cpp	/^otError otTcpAbort(otTcpEndpoint *aEndpoint) { return AsCoreType(aEndpoint).Abort(); }$/;"	f	typeref:typename:otError
otTcpBind	core/api/tcp_api.cpp	/^otError otTcpBind(otTcpEndpoint *aEndpoint, const otSockAddr *aSockName)$/;"	f	typeref:typename:otError
otTcpCircularSendBufferDeinitialize	core/api/tcp_ext_api.cpp	/^otError otTcpCircularSendBufferDeinitialize(otTcpCircularSendBuffer *aSendBuffer)$/;"	f	typeref:typename:otError
otTcpCircularSendBufferForceDiscardAll	core/api/tcp_ext_api.cpp	/^void otTcpCircularSendBufferForceDiscardAll(otTcpCircularSendBuffer *aSendBuffer)$/;"	f	typeref:typename:void
otTcpCircularSendBufferGetFreeSpace	core/api/tcp_ext_api.cpp	/^size_t otTcpCircularSendBufferGetFreeSpace(const otTcpCircularSendBuffer *aSendBuffer)$/;"	f	typeref:typename:size_t
otTcpCircularSendBufferHandleForwardProgress	core/api/tcp_ext_api.cpp	/^void otTcpCircularSendBufferHandleForwardProgress(otTcpCircularSendBuffer *aSendBuffer, size_t a/;"	f	typeref:typename:void
otTcpCircularSendBufferInitialize	core/api/tcp_ext_api.cpp	/^void otTcpCircularSendBufferInitialize(otTcpCircularSendBuffer *aSendBuffer, void *aDataBuffer, /;"	f	typeref:typename:void
otTcpCircularSendBufferWrite	core/api/tcp_ext_api.cpp	/^otError otTcpCircularSendBufferWrite(otTcpEndpoint           *aEndpoint,$/;"	f	typeref:typename:otError
otTcpCommitReceive	core/api/tcp_api.cpp	/^otError otTcpCommitReceive(otTcpEndpoint *aEndpoint, size_t aNumBytes, uint32_t aFlags)$/;"	f	typeref:typename:otError
otTcpConnect	core/api/tcp_api.cpp	/^otError otTcpConnect(otTcpEndpoint *aEndpoint, const otSockAddr *aSockName, uint32_t aFlags)$/;"	f	typeref:typename:otError
otTcpEndpointDeinitialize	core/api/tcp_api.cpp	/^otError otTcpEndpointDeinitialize(otTcpEndpoint *aEndpoint) { return AsCoreType(aEndpoint).Deini/;"	f	typeref:typename:otError
otTcpEndpointGetContext	core/api/tcp_api.cpp	/^void *otTcpEndpointGetContext(otTcpEndpoint *aEndpoint) { return AsCoreType(aEndpoint).GetContex/;"	f	typeref:typename:void *
otTcpEndpointGetInstance	core/api/tcp_api.cpp	/^otInstance *otTcpEndpointGetInstance(otTcpEndpoint *aEndpoint) { return &AsCoreType(aEndpoint).G/;"	f	typeref:typename:otInstance *
otTcpEndpointInitialize	core/api/tcp_api.cpp	/^otError otTcpEndpointInitialize(otInstance                        *aInstance,$/;"	f	typeref:typename:otError
otTcpGetLocalAddress	core/api/tcp_api.cpp	/^const otSockAddr *otTcpGetLocalAddress(const otTcpEndpoint *aEndpoint)$/;"	f	typeref:typename:const otSockAddr *
otTcpGetPeerAddress	core/api/tcp_api.cpp	/^const otSockAddr *otTcpGetPeerAddress(const otTcpEndpoint *aEndpoint)$/;"	f	typeref:typename:const otSockAddr *
otTcpListen	core/api/tcp_api.cpp	/^otError otTcpListen(otTcpListener *aListener, const otSockAddr *aSockName)$/;"	f	typeref:typename:otError
otTcpListenerDeinitialize	core/api/tcp_api.cpp	/^otError otTcpListenerDeinitialize(otTcpListener *aListener) { return AsCoreType(aListener).Deini/;"	f	typeref:typename:otError
otTcpListenerGetContext	core/api/tcp_api.cpp	/^void *otTcpListenerGetContext(otTcpListener *aListener) { return AsCoreType(aListener).GetContex/;"	f	typeref:typename:void *
otTcpListenerGetInstance	core/api/tcp_api.cpp	/^otInstance *otTcpListenerGetInstance(otTcpListener *aListener) { return &AsCoreType(aListener).G/;"	f	typeref:typename:otInstance *
otTcpListenerInitialize	core/api/tcp_api.cpp	/^otError otTcpListenerInitialize(otInstance                        *aInstance,$/;"	f	typeref:typename:otError
otTcpMbedTlsSslRecvCallback	core/api/tcp_ext_api.cpp	/^int otTcpMbedTlsSslRecvCallback(void *aCtx, unsigned char *aBuf, size_t aLen)$/;"	f	typeref:typename:int
otTcpMbedTlsSslSendCallback	core/api/tcp_ext_api.cpp	/^int otTcpMbedTlsSslSendCallback(void *aCtx, const unsigned char *aBuf, size_t aLen)$/;"	f	typeref:typename:int
otTcpReceiveByReference	core/api/tcp_api.cpp	/^otError otTcpReceiveByReference(otTcpEndpoint *aEndpoint, const otLinkedBuffer **aBuffer)$/;"	f	typeref:typename:otError
otTcpReceiveContiguify	core/api/tcp_api.cpp	/^otError otTcpReceiveContiguify(otTcpEndpoint *aEndpoint) { return AsCoreType(aEndpoint).ReceiveC/;"	f	typeref:typename:otError
otTcpSendByExtension	core/api/tcp_api.cpp	/^otError otTcpSendByExtension(otTcpEndpoint *aEndpoint, size_t aNumBytes, uint32_t aFlags)$/;"	f	typeref:typename:otError
otTcpSendByReference	core/api/tcp_api.cpp	/^otError otTcpSendByReference(otTcpEndpoint *aEndpoint, otLinkedBuffer *aBuffer, uint32_t aFlags)$/;"	f	typeref:typename:otError
otTcpSendEndOfStream	core/api/tcp_api.cpp	/^otError otTcpSendEndOfStream(otTcpEndpoint *aEndpoint) { return AsCoreType(aEndpoint).SendEndOfS/;"	f	typeref:typename:otError
otTcpStopListening	core/api/tcp_api.cpp	/^otError otTcpStopListening(otTcpListener *aListener) { return AsCoreType(aListener).StopListenin/;"	f	typeref:typename:otError
otThreadBecomeChild	core/api/thread_api.cpp	/^otError otThreadBecomeChild(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mle::MleRo/;"	f	typeref:typename:otError
otThreadBecomeDetached	core/api/thread_api.cpp	/^otError otThreadBecomeDetached(otInstance *aInstance)$/;"	f	typeref:typename:otError
otThreadBecomeLeader	core/api/thread_ftd_api.cpp	/^otError otThreadBecomeLeader(otInstance *aInstance)$/;"	f	typeref:typename:otError
otThreadBecomeRouter	core/api/thread_ftd_api.cpp	/^otError otThreadBecomeRouter(otInstance *aInstance)$/;"	f	typeref:typename:otError
otThreadDetachGracefully	core/api/thread_api.cpp	/^otError otThreadDetachGracefully(otInstance *aInstance, otDetachGracefullyCallback aCallback, vo/;"	f	typeref:typename:otError
otThreadDeviceRoleToString	core/api/thread_api.cpp	/^const char *otThreadDeviceRoleToString(otDeviceRole aRole) { return Mle::RoleToString(MapEnum(aR/;"	f	typeref:typename:const char *
otThreadDiscover	core/api/thread_api.cpp	/^otError otThreadDiscover(otInstance              *aInstance,$/;"	f	typeref:typename:otError
otThreadErrorToString	core/api/error_api.cpp	/^const char *otThreadErrorToString(otError aError) { return ErrorToString(aError); }$/;"	f	typeref:typename:const char *
otThreadGetAdvertisementTrickleIntervalMax	core/api/thread_ftd_api.cpp	/^uint32_t otThreadGetAdvertisementTrickleIntervalMax(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetChildInfoById	core/api/thread_ftd_api.cpp	/^otError otThreadGetChildInfoById(otInstance *aInstance, uint16_t aChildId, otChildInfo *aChildIn/;"	f	typeref:typename:otError
otThreadGetChildInfoByIndex	core/api/thread_ftd_api.cpp	/^otError otThreadGetChildInfoByIndex(otInstance *aInstance, uint16_t aChildIndex, otChildInfo *aC/;"	f	typeref:typename:otError
otThreadGetChildNextIp6Address	core/api/thread_ftd_api.cpp	/^otError otThreadGetChildNextIp6Address(otInstance                *aInstance,$/;"	f	typeref:typename:otError
otThreadGetChildRouterLinks	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetChildRouterLinks(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetChildTimeout	core/api/thread_api.cpp	/^uint32_t otThreadGetChildTimeout(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetContextIdReuseDelay	core/api/thread_ftd_api.cpp	/^uint32_t otThreadGetContextIdReuseDelay(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetDeviceProperties	core/api/thread_ftd_api.cpp	/^const otDeviceProperties *otThreadGetDeviceProperties(otInstance *aInstance)$/;"	f	typeref:typename:const otDeviceProperties *
otThreadGetDeviceRole	core/api/link_raw_api.cpp	/^otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)$/;"	f	typeref:typename:otDeviceRole
otThreadGetDeviceRole	core/api/thread_api.cpp	/^otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)$/;"	f	typeref:typename:otDeviceRole
otThreadGetDomainName	core/api/thread_api.cpp	/^const char *otThreadGetDomainName(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetExtendedPanId	core/api/thread_api.cpp	/^const otExtendedPanId *otThreadGetExtendedPanId(otInstance *aInstance)$/;"	f	typeref:typename:const otExtendedPanId *
otThreadGetFixedDuaInterfaceIdentifier	core/api/thread_api.cpp	/^const otIp6InterfaceIdentifier *otThreadGetFixedDuaInterfaceIdentifier(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6InterfaceIdentifier *
otThreadGetIp6Counters	core/api/thread_api.cpp	/^const otIpCounters *otThreadGetIp6Counters(otInstance *aInstance)$/;"	f	typeref:typename:const otIpCounters *
otThreadGetJoinerUdpPort	core/api/thread_ftd_api.cpp	/^uint16_t otThreadGetJoinerUdpPort(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otThreadGetKeySequenceCounter	core/api/thread_api.cpp	/^uint32_t otThreadGetKeySequenceCounter(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetKeySwitchGuardTime	core/api/thread_api.cpp	/^uint16_t otThreadGetKeySwitchGuardTime(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otThreadGetLeaderData	core/api/thread_api.cpp	/^otError otThreadGetLeaderData(otInstance *aInstance, otLeaderData *aLeaderData)$/;"	f	typeref:typename:otError
otThreadGetLeaderRloc	core/api/thread_api.cpp	/^otError otThreadGetLeaderRloc(otInstance *aInstance, otIp6Address *aLeaderRloc)$/;"	f	typeref:typename:otError
otThreadGetLeaderRouterId	core/api/thread_api.cpp	/^uint8_t otThreadGetLeaderRouterId(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetLeaderWeight	core/api/thread_api.cpp	/^uint8_t otThreadGetLeaderWeight(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetLinkLocalAllThreadNodesMulticastAddress	core/api/thread_api.cpp	/^const otIp6Address *otThreadGetLinkLocalAllThreadNodesMulticastAddress(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6Address *
otThreadGetLinkLocalIp6Address	core/api/thread_api.cpp	/^const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6Address *
otThreadGetLinkMode	core/api/thread_api.cpp	/^otLinkModeConfig otThreadGetLinkMode(otInstance *aInstance)$/;"	f	typeref:typename:otLinkModeConfig
otThreadGetLocalLeaderWeight	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetLocalLeaderWeight(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetMaxAllowedChildren	core/api/thread_ftd_api.cpp	/^uint16_t otThreadGetMaxAllowedChildren(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otThreadGetMaxChildIpAddresses	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetMaxChildIpAddresses(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetMaxRouterId	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetMaxRouterId(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetMaxTimeInQueue	core/api/thread_api.cpp	/^uint32_t otThreadGetMaxTimeInQueue(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetMeshLocalEid	core/api/thread_api.cpp	/^const otIp6Address *otThreadGetMeshLocalEid(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6Address *
otThreadGetMeshLocalPrefix	core/api/thread_api.cpp	/^const otMeshLocalPrefix *otThreadGetMeshLocalPrefix(otInstance *aInstance)$/;"	f	typeref:typename:const otMeshLocalPrefix *
otThreadGetMleCounters	core/api/thread_api.cpp	/^const otMleCounters *otThreadGetMleCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otMleCounters *
otThreadGetNetworkIdTimeout	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetNetworkIdTimeout(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetNetworkKey	core/api/thread_api.cpp	/^void otThreadGetNetworkKey(otInstance *aInstance, otNetworkKey *aNetworkKey)$/;"	f	typeref:typename:void
otThreadGetNetworkKeyRef	core/api/thread_api.cpp	/^otNetworkKeyRef otThreadGetNetworkKeyRef(otInstance *aInstance)$/;"	f	typeref:typename:otNetworkKeyRef
otThreadGetNetworkName	core/api/thread_api.cpp	/^const char *otThreadGetNetworkName(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetNextCacheEntry	core/api/thread_ftd_api.cpp	/^otError otThreadGetNextCacheEntry(otInstance *aInstance, otCacheEntryInfo *aEntryInfo, otCacheEn/;"	f	typeref:typename:otError
otThreadGetNextDiagnosticTlv	core/api/netdiag_api.cpp	/^otError otThreadGetNextDiagnosticTlv(const otMessage       *aMessage,$/;"	f	typeref:typename:otError
otThreadGetNextHopAndPathCost	core/api/thread_ftd_api.cpp	/^void otThreadGetNextHopAndPathCost(otInstance *aInstance,$/;"	f	typeref:typename:void
otThreadGetNextNeighborInfo	core/api/thread_api.cpp	/^otError otThreadGetNextNeighborInfo(otInstance *aInstance, otNeighborInfoIterator *aIterator, ot/;"	f	typeref:typename:otError
otThreadGetParentAverageRssi	core/api/thread_api.cpp	/^otError otThreadGetParentAverageRssi(otInstance *aInstance, int8_t *aParentRssi)$/;"	f	typeref:typename:otError
otThreadGetParentInfo	core/api/thread_api.cpp	/^otError otThreadGetParentInfo(otInstance *aInstance, otRouterInfo *aParentInfo)$/;"	f	typeref:typename:otError
otThreadGetParentLastRssi	core/api/thread_api.cpp	/^otError otThreadGetParentLastRssi(otInstance *aInstance, int8_t *aLastRssi)$/;"	f	typeref:typename:otError
otThreadGetParentPriority	core/api/thread_ftd_api.cpp	/^int8_t otThreadGetParentPriority(otInstance *aInstance)$/;"	f	typeref:typename:int8_t
otThreadGetPartitionId	core/api/thread_api.cpp	/^uint32_t otThreadGetPartitionId(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetPreferredLeaderPartitionId	core/api/thread_ftd_api.cpp	/^uint32_t otThreadGetPreferredLeaderPartitionId(otInstance *aInstance)$/;"	f	typeref:typename:uint32_t
otThreadGetPskc	core/api/thread_ftd_api.cpp	/^void otThreadGetPskc(otInstance *aInstance, otPskc *aPskc)$/;"	f	typeref:typename:void
otThreadGetPskcRef	core/api/thread_ftd_api.cpp	/^otPskcRef otThreadGetPskcRef(otInstance *aInstance) { return AsCoreType(aInstance).Get<KeyManage/;"	f	typeref:typename:otPskcRef
otThreadGetRealmLocalAllThreadNodesMulticastAddress	core/api/thread_api.cpp	/^const otIp6Address *otThreadGetRealmLocalAllThreadNodesMulticastAddress(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6Address *
otThreadGetRloc	core/api/thread_api.cpp	/^const otIp6Address *otThreadGetRloc(otInstance *aInstance)$/;"	f	typeref:typename:const otIp6Address *
otThreadGetRloc16	core/api/thread_api.cpp	/^uint16_t otThreadGetRloc16(otInstance *aInstance) { return AsCoreType(aInstance).Get<Mle::MleRou/;"	f	typeref:typename:uint16_t
otThreadGetRouterDowngradeThreshold	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetRouterDowngradeThreshold(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetRouterIdRange	core/api/thread_ftd_api.cpp	/^void otThreadGetRouterIdRange(otInstance *aInstance, uint8_t *aMinRouterId, uint8_t *aMaxRouterI/;"	f	typeref:typename:void
otThreadGetRouterIdSequence	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetRouterIdSequence(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetRouterInfo	core/api/thread_ftd_api.cpp	/^otError otThreadGetRouterInfo(otInstance *aInstance, uint16_t aRouterId, otRouterInfo *aRouterIn/;"	f	typeref:typename:otError
otThreadGetRouterSelectionJitter	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetRouterSelectionJitter(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetRouterUpgradeThreshold	core/api/thread_ftd_api.cpp	/^uint8_t otThreadGetRouterUpgradeThreshold(otInstance *aInstance)$/;"	f	typeref:typename:uint8_t
otThreadGetServiceAloc	core/api/thread_api.cpp	/^otError otThreadGetServiceAloc(otInstance *aInstance, uint8_t aServiceId, otIp6Address *aService/;"	f	typeref:typename:otError
otThreadGetTimeInQueueHistogram	core/api/thread_api.cpp	/^const uint32_t *otThreadGetTimeInQueueHistogram(otInstance *aInstance, uint16_t *aNumBins, uint3/;"	f	typeref:typename:const uint32_t *
otThreadGetVendorAppUrl	core/api/netdiag_api.cpp	/^const char *otThreadGetVendorAppUrl(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetVendorModel	core/api/netdiag_api.cpp	/^const char *otThreadGetVendorModel(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetVendorName	core/api/netdiag_api.cpp	/^const char *otThreadGetVendorName(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetVendorSwVersion	core/api/netdiag_api.cpp	/^const char *otThreadGetVendorSwVersion(otInstance *aInstance)$/;"	f	typeref:typename:const char *
otThreadGetVersion	core/api/thread_api.cpp	/^uint16_t otThreadGetVersion(void) { return kThreadVersion; }$/;"	f	typeref:typename:uint16_t
otThreadIsAnycastLocateInProgress	core/api/thread_api.cpp	/^bool otThreadIsAnycastLocateInProgress(otInstance *aInstance)$/;"	f	typeref:typename:bool
otThreadIsDiscoverInProgress	core/api/thread_api.cpp	/^bool otThreadIsDiscoverInProgress(otInstance *aInstance)$/;"	f	typeref:typename:bool
otThreadIsRouterEligible	core/api/thread_ftd_api.cpp	/^bool otThreadIsRouterEligible(otInstance *aInstance)$/;"	f	typeref:typename:bool
otThreadIsRouterIdAllocated	core/api/thread_ftd_api.cpp	/^bool otThreadIsRouterIdAllocated(otInstance *aInstance, uint8_t aRouterId)$/;"	f	typeref:typename:bool
otThreadIsSingleton	core/api/thread_api.cpp	/^bool otThreadIsSingleton(otInstance *aInstance)$/;"	f	typeref:typename:bool
otThreadIsTmfOriginFilterEnabled	core/api/thread_ftd_api.cpp	/^bool otThreadIsTmfOriginFilterEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otThreadLocateAnycastDestination	core/api/thread_api.cpp	/^otError otThreadLocateAnycastDestination(otInstance                    *aInstance,$/;"	f	typeref:typename:otError
otThreadRegisterNeighborTableCallback	core/api/thread_ftd_api.cpp	/^void otThreadRegisterNeighborTableCallback(otInstance *aInstance, otNeighborTableCallback aCallb/;"	f	typeref:typename:void
otThreadRegisterParentResponseCallback	core/api/thread_api.cpp	/^void otThreadRegisterParentResponseCallback(otInstance                    *aInstance,$/;"	f	typeref:typename:void
otThreadReleaseRouterId	core/api/thread_ftd_api.cpp	/^otError otThreadReleaseRouterId(otInstance *aInstance, uint8_t aRouterId)$/;"	f	typeref:typename:otError
otThreadResetIp6Counters	core/api/thread_api.cpp	/^void otThreadResetIp6Counters(otInstance *aInstance) { AsCoreType(aInstance).Get<MeshForwarder>(/;"	f	typeref:typename:void
otThreadResetMleCounters	core/api/thread_api.cpp	/^void otThreadResetMleCounters(otInstance *aInstance) { AsCoreType(aInstance).Get<Mle::MleRouter>/;"	f	typeref:typename:void
otThreadResetTimeInQueueStat	core/api/thread_api.cpp	/^void otThreadResetTimeInQueueStat(otInstance *aInstance)$/;"	f	typeref:typename:void
otThreadSearchForBetterParent	core/api/thread_api.cpp	/^otError otThreadSearchForBetterParent(otInstance *aInstance)$/;"	f	typeref:typename:otError
otThreadSendAddressNotification	core/api/thread_ftd_api.cpp	/^void otThreadSendAddressNotification(otInstance               *aInstance,$/;"	f	typeref:typename:void
otThreadSendDiagnosticGet	core/api/netdiag_api.cpp	/^otError otThreadSendDiagnosticGet(otInstance                    *aInstance,$/;"	f	typeref:typename:otError
otThreadSendDiagnosticReset	core/api/netdiag_api.cpp	/^otError otThreadSendDiagnosticReset(otInstance         *aInstance,$/;"	f	typeref:typename:otError
otThreadSendProactiveBackboneNotification	core/api/thread_ftd_api.cpp	/^otError otThreadSendProactiveBackboneNotification(otInstance               *aInstance,$/;"	f	typeref:typename:otError
otThreadSetCcmEnabled	core/api/thread_ftd_api.cpp	/^void otThreadSetCcmEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otThreadSetChildRouterLinks	core/api/thread_ftd_api.cpp	/^otError otThreadSetChildRouterLinks(otInstance *aInstance, uint8_t aChildRouterLinks)$/;"	f	typeref:typename:otError
otThreadSetChildTimeout	core/api/thread_api.cpp	/^void otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)$/;"	f	typeref:typename:void
otThreadSetContextIdReuseDelay	core/api/thread_ftd_api.cpp	/^void otThreadSetContextIdReuseDelay(otInstance *aInstance, uint32_t aDelay)$/;"	f	typeref:typename:void
otThreadSetDeviceProperties	core/api/thread_ftd_api.cpp	/^void otThreadSetDeviceProperties(otInstance *aInstance, const otDeviceProperties *aDevicePropert/;"	f	typeref:typename:void
otThreadSetDiscoveryRequestCallback	core/api/thread_ftd_api.cpp	/^void otThreadSetDiscoveryRequestCallback(otInstance                      *aInstance,$/;"	f	typeref:typename:void
otThreadSetDomainName	core/api/thread_api.cpp	/^otError otThreadSetDomainName(otInstance *aInstance, const char *aDomainName)$/;"	f	typeref:typename:otError
otThreadSetEnabled	core/api/thread_api.cpp	/^otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:otError
otThreadSetExtendedPanId	core/api/thread_api.cpp	/^otError otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)$/;"	f	typeref:typename:otError
otThreadSetFixedDuaInterfaceIdentifier	core/api/thread_api.cpp	/^otError otThreadSetFixedDuaInterfaceIdentifier(otInstance *aInstance, const otIp6InterfaceIdenti/;"	f	typeref:typename:otError
otThreadSetJoinerAdvertisement	core/api/thread_api.cpp	/^otError otThreadSetJoinerAdvertisement(otInstance    *aInstance,$/;"	f	typeref:typename:otError
otThreadSetJoinerUdpPort	core/api/thread_ftd_api.cpp	/^otError otThreadSetJoinerUdpPort(otInstance *aInstance, uint16_t aJoinerUdpPort)$/;"	f	typeref:typename:otError
otThreadSetKeySequenceCounter	core/api/thread_api.cpp	/^void otThreadSetKeySequenceCounter(otInstance *aInstance, uint32_t aKeySequenceCounter)$/;"	f	typeref:typename:void
otThreadSetKeySwitchGuardTime	core/api/thread_api.cpp	/^void otThreadSetKeySwitchGuardTime(otInstance *aInstance, uint16_t aKeySwitchGuardTime)$/;"	f	typeref:typename:void
otThreadSetLinkMode	core/api/thread_api.cpp	/^otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)$/;"	f	typeref:typename:otError
otThreadSetLocalLeaderWeight	core/api/thread_ftd_api.cpp	/^void otThreadSetLocalLeaderWeight(otInstance *aInstance, uint8_t aWeight)$/;"	f	typeref:typename:void
otThreadSetMaxAllowedChildren	core/api/thread_ftd_api.cpp	/^otError otThreadSetMaxAllowedChildren(otInstance *aInstance, uint16_t aMaxChildren)$/;"	f	typeref:typename:otError
otThreadSetMaxChildIpAddresses	core/api/thread_ftd_api.cpp	/^otError otThreadSetMaxChildIpAddresses(otInstance *aInstance, uint8_t aMaxIpAddresses)$/;"	f	typeref:typename:otError
otThreadSetMeshLocalPrefix	core/api/thread_api.cpp	/^otError otThreadSetMeshLocalPrefix(otInstance *aInstance, const otMeshLocalPrefix *aMeshLocalPre/;"	f	typeref:typename:otError
otThreadSetNetworkIdTimeout	core/api/thread_ftd_api.cpp	/^void otThreadSetNetworkIdTimeout(otInstance *aInstance, uint8_t aTimeout)$/;"	f	typeref:typename:void
otThreadSetNetworkKey	core/api/thread_api.cpp	/^otError otThreadSetNetworkKey(otInstance *aInstance, const otNetworkKey *aKey)$/;"	f	typeref:typename:otError
otThreadSetNetworkKeyRef	core/api/thread_api.cpp	/^otError otThreadSetNetworkKeyRef(otInstance *aInstance, otNetworkKeyRef aKeyRef)$/;"	f	typeref:typename:otError
otThreadSetNetworkName	core/api/thread_api.cpp	/^otError otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)$/;"	f	typeref:typename:otError
otThreadSetParentPriority	core/api/thread_ftd_api.cpp	/^otError otThreadSetParentPriority(otInstance *aInstance, int8_t aParentPriority)$/;"	f	typeref:typename:otError
otThreadSetPreferredLeaderPartitionId	core/api/thread_ftd_api.cpp	/^void otThreadSetPreferredLeaderPartitionId(otInstance *aInstance, uint32_t aPartitionId)$/;"	f	typeref:typename:void
otThreadSetPreferredRouterId	core/api/thread_ftd_api.cpp	/^otError otThreadSetPreferredRouterId(otInstance *aInstance, uint8_t aRouterId)$/;"	f	typeref:typename:otError
otThreadSetPskc	core/api/thread_ftd_api.cpp	/^otError otThreadSetPskc(otInstance *aInstance, const otPskc *aPskc)$/;"	f	typeref:typename:otError
otThreadSetPskcRef	core/api/thread_ftd_api.cpp	/^otError otThreadSetPskcRef(otInstance *aInstance, otPskcRef aKeyRef)$/;"	f	typeref:typename:otError
otThreadSetRouterDowngradeThreshold	core/api/thread_ftd_api.cpp	/^void otThreadSetRouterDowngradeThreshold(otInstance *aInstance, uint8_t aThreshold)$/;"	f	typeref:typename:void
otThreadSetRouterEligible	core/api/thread_ftd_api.cpp	/^otError otThreadSetRouterEligible(otInstance *aInstance, bool aEligible)$/;"	f	typeref:typename:otError
otThreadSetRouterIdRange	core/api/thread_ftd_api.cpp	/^otError otThreadSetRouterIdRange(otInstance *aInstance, uint8_t aMinRouterId, uint8_t aMaxRouter/;"	f	typeref:typename:otError
otThreadSetRouterSelectionJitter	core/api/thread_ftd_api.cpp	/^void otThreadSetRouterSelectionJitter(otInstance *aInstance, uint8_t aRouterJitter)$/;"	f	typeref:typename:void
otThreadSetRouterUpgradeThreshold	core/api/thread_ftd_api.cpp	/^void otThreadSetRouterUpgradeThreshold(otInstance *aInstance, uint8_t aThreshold)$/;"	f	typeref:typename:void
otThreadSetSteeringData	core/api/thread_ftd_api.cpp	/^void otThreadSetSteeringData(otInstance *aInstance, const otExtAddress *aExtAddress)$/;"	f	typeref:typename:void
otThreadSetThreadVersionCheckEnabled	core/api/thread_ftd_api.cpp	/^void otThreadSetThreadVersionCheckEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otThreadSetTmfOriginFilterEnabled	core/api/thread_ftd_api.cpp	/^void otThreadSetTmfOriginFilterEnabled(otInstance *aInstance, bool aEnabled)$/;"	f	typeref:typename:void
otThreadSetVendorAppUrl	core/api/netdiag_api.cpp	/^otError otThreadSetVendorAppUrl(otInstance *aInstance, const char *aVendorAppUrl)$/;"	f	typeref:typename:otError
otThreadSetVendorModel	core/api/netdiag_api.cpp	/^otError otThreadSetVendorModel(otInstance *aInstance, const char *aVendorModel)$/;"	f	typeref:typename:otError
otThreadSetVendorName	core/api/netdiag_api.cpp	/^otError otThreadSetVendorName(otInstance *aInstance, const char *aVendorName)$/;"	f	typeref:typename:otError
otThreadSetVendorSwVersion	core/api/netdiag_api.cpp	/^otError otThreadSetVendorSwVersion(otInstance *aInstance, const char *aVendorSwVersion)$/;"	f	typeref:typename:otError
otTrelGetCounters	core/api/trel_api.cpp	/^const otTrelCounters *otTrelGetCounters(otInstance *aInstance)$/;"	f	typeref:typename:const otTrelCounters *
otTrelGetNextPeer	core/api/trel_api.cpp	/^const otTrelPeer *otTrelGetNextPeer(otInstance *aInstance, otTrelPeerIterator *aIterator)$/;"	f	typeref:typename:const otTrelPeer *
otTrelGetNumberOfPeers	core/api/trel_api.cpp	/^uint16_t otTrelGetNumberOfPeers(otInstance *aInstance)$/;"	f	typeref:typename:uint16_t
otTrelInitPeerIterator	core/api/trel_api.cpp	/^void otTrelInitPeerIterator(otInstance *aInstance, otTrelPeerIterator *aIterator)$/;"	f	typeref:typename:void
otTrelIsEnabled	core/api/trel_api.cpp	/^bool otTrelIsEnabled(otInstance *aInstance) { return AsCoreType(aInstance).Get<Trel::Interface>(/;"	f	typeref:typename:bool
otTrelIsFilterEnabled	core/api/trel_api.cpp	/^bool otTrelIsFilterEnabled(otInstance *aInstance)$/;"	f	typeref:typename:bool
otTrelResetCounters	core/api/trel_api.cpp	/^void otTrelResetCounters(otInstance *aInstance) { AsCoreType(aInstance).Get<Trel::Interface>().R/;"	f	typeref:typename:void
otTrelSetEnabled	core/api/trel_api.cpp	/^void otTrelSetEnabled(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:void
otTrelSetFilterEnabled	core/api/trel_api.cpp	/^void otTrelSetFilterEnabled(otInstance *aInstance, bool aEnable)$/;"	f	typeref:typename:void
otUdpAddReceiver	core/api/udp_api.cpp	/^otError otUdpAddReceiver(otInstance *aInstance, otUdpReceiver *aUdpReceiver)$/;"	f	typeref:typename:otError
otUdpBind	core/api/udp_api.cpp	/^otError otUdpBind(otInstance *aInstance, otUdpSocket *aSocket, const otSockAddr *aSockName, otNe/;"	f	typeref:typename:otError
otUdpClose	core/api/udp_api.cpp	/^otError otUdpClose(otInstance *aInstance, otUdpSocket *aSocket)$/;"	f	typeref:typename:otError
otUdpConnect	core/api/udp_api.cpp	/^otError otUdpConnect(otInstance *aInstance, otUdpSocket *aSocket, const otSockAddr *aSockName)$/;"	f	typeref:typename:otError
otUdpForwardReceive	core/api/udp_api.cpp	/^void otUdpForwardReceive(otInstance         *aInstance,$/;"	f	typeref:typename:void
otUdpForwardSetForwarder	core/api/udp_api.cpp	/^void otUdpForwardSetForwarder(otInstance *aInstance, otUdpForwarder aForwarder, void *aContext)$/;"	f	typeref:typename:void
otUdpGetSockets	core/api/udp_api.cpp	/^otUdpSocket *otUdpGetSockets(otInstance *aInstance) { return AsCoreType(aInstance).Get<Ip6::Udp>/;"	f	typeref:typename:otUdpSocket *
otUdpIsOpen	core/api/udp_api.cpp	/^bool otUdpIsOpen(otInstance *aInstance, const otUdpSocket *aSocket)$/;"	f	typeref:typename:bool
otUdpIsPortInUse	core/api/udp_api.cpp	/^bool otUdpIsPortInUse(otInstance *aInstance, uint16_t port)$/;"	f	typeref:typename:bool
otUdpNewMessage	core/api/udp_api.cpp	/^otMessage *otUdpNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)$/;"	f	typeref:typename:otMessage *
otUdpOpen	core/api/udp_api.cpp	/^otError otUdpOpen(otInstance *aInstance, otUdpSocket *aSocket, otUdpReceive aCallback, void *aCo/;"	f	typeref:typename:otError
otUdpRemoveReceiver	core/api/udp_api.cpp	/^otError otUdpRemoveReceiver(otInstance *aInstance, otUdpReceiver *aUdpReceiver)$/;"	f	typeref:typename:otError
otUdpSend	core/api/udp_api.cpp	/^otError otUdpSend(otInstance *aInstance, otUdpSocket *aSocket, otMessage *aMessage, const otMess/;"	f	typeref:typename:otError
otUdpSendDatagram	core/api/udp_api.cpp	/^otError otUdpSendDatagram(otInstance *aInstance, otMessage *aMessage, otMessageInfo *aMessageInf/;"	f	typeref:typename:otError
otVerhoeffChecksumCalculate	core/api/verhoeff_checksum_api.cpp	/^otError otVerhoeffChecksumCalculate(const char *aDecimalString, char *aChecksum)$/;"	f	typeref:typename:otError
otVerhoeffChecksumValidate	core/api/verhoeff_checksum_api.cpp	/^otError otVerhoeffChecksumValidate(const char *aDecimalString)$/;"	f	typeref:typename:otError
platformAlarmGetNow	posix/platform/alarm.cpp	/^static uint64_t platformAlarmGetNow(void) { return otPlatTimeGet() * sSpeedUpFactor; }$/;"	f	typeref:typename:uint64_t	file:
platformAlarmInit	posix/platform/alarm.cpp	/^void platformAlarmInit(uint32_t aSpeedUpFactor, int aRealTimeSignal)$/;"	f	typeref:typename:void
platformAlarmProcess	posix/platform/alarm.cpp	/^void platformAlarmProcess(otInstance *aInstance)$/;"	f	typeref:typename:void
platformAlarmUpdateTimeout	posix/platform/alarm.cpp	/^void platformAlarmUpdateTimeout(struct timeval *aTimeout)$/;"	f	typeref:typename:void
platformBacktraceInit	posix/platform/backtrace.cpp	/^void platformBacktraceInit(void) {}$/;"	f	typeref:typename:void
platformBacktraceInit	posix/platform/backtrace.cpp	/^void platformBacktraceInit(void)$/;"	f	typeref:typename:void
platformConfigureNetLink	posix/platform/netif.cpp	/^static void platformConfigureNetLink(void)$/;"	f	typeref:typename:void	file:
platformConfigureTunDevice	posix/platform/netif.cpp	/^static void platformConfigureTunDevice(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void	file:
platformDeinitNcpMode	posix/platform/system.cpp	/^void platformDeinitNcpMode(void)$/;"	f	typeref:typename:void
platformDeinitRcpMode	posix/platform/system.cpp	/^void platformDeinitRcpMode(void)$/;"	f	typeref:typename:void
platformInit	posix/platform/system.cpp	/^void platformInit(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void
platformInitNcpMode	posix/platform/system.cpp	/^void platformInitNcpMode(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void
platformInitRcpMode	posix/platform/system.cpp	/^void platformInitRcpMode(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void
platformNetifDeinit	posix/platform/netif.cpp	/^void platformNetifDeinit(void)$/;"	f	typeref:typename:void
platformNetifInit	posix/platform/netif.cpp	/^void platformNetifInit(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void
platformNetifProcess	posix/platform/netif.cpp	/^void platformNetifProcess(const otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformNetifSetUp	posix/platform/netif.cpp	/^void platformNetifSetUp(void)$/;"	f	typeref:typename:void
platformNetifStateChange	posix/platform/netif.cpp	/^void platformNetifStateChange(otInstance *aInstance, otChangedFlags aFlags)$/;"	f	typeref:typename:void
platformNetifTearDown	posix/platform/netif.cpp	/^void platformNetifTearDown(void) {}$/;"	f	typeref:typename:void
platformNetifUpdateFdSet	posix/platform/netif.cpp	/^void platformNetifUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformRadioDeinit	posix/platform/radio.cpp	/^void platformRadioDeinit(void) { GetRadioSpinel().Deinit(); }$/;"	f	typeref:typename:void
platformRadioInit	posix/platform/radio.cpp	/^extern "C" void platformRadioInit(const char *aUrl) { sRadio.Init(aUrl); }$/;"	f	namespace:ot::Posix::__anon22891bdb0111	typeref:typename:void
platformRadioProcess	posix/platform/radio.cpp	/^void platformRadioProcess(otInstance *aInstance, const otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformRadioUpdateFdSet	posix/platform/radio.cpp	/^void platformRadioUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformRandomInit	posix/platform/entropy.cpp	/^void platformRandomInit(void)$/;"	f	typeref:typename:void
platformSetUp	posix/platform/system.cpp	/^void platformSetUp(otPlatformConfig *aPlatformConfig)$/;"	f	typeref:typename:void
platformSpinelManagerDeinit	posix/platform/spinel_manager.cpp	/^void platformSpinelManagerDeinit(void) { return sSpinelManager.Deinit(); }$/;"	f	typeref:typename:void
platformSpinelManagerInit	posix/platform/spinel_manager.cpp	/^CoprocessorType platformSpinelManagerInit(const char *aUrl) { return sSpinelManager.Init(aUrl); /;"	f	typeref:typename:CoprocessorType
platformSpinelManagerProcess	posix/platform/spinel_manager.cpp	/^void platformSpinelManagerProcess(otInstance *aInstance, const otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformSpinelManagerUpdateFdSet	posix/platform/spinel_manager.cpp	/^void platformSpinelManagerUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformTearDown	posix/platform/system.cpp	/^void platformTearDown(void)$/;"	f	typeref:typename:void
platformTrelDeinit	posix/platform/trel.cpp	/^void platformTrelDeinit(void)$/;"	f	typeref:typename:void
platformTrelInit	posix/platform/trel.cpp	/^void platformTrelInit(const char *aTrelUrl)$/;"	f	typeref:typename:void
platformTrelProcess	posix/platform/trel.cpp	/^void platformTrelProcess(otInstance *aInstance, const otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
platformTrelUpdateFdSet	posix/platform/trel.cpp	/^void platformTrelUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
printLine	posix/platform/backtrace.cpp	/^    virtual void printLine(const char *string) { otLogCritPlat("%s", string); }$/;"	f	class:LogPrinter	typeref:typename:void	file:
processAddressChange	posix/platform/netif.cpp	/^static void processAddressChange(const otIp6AddressInfo *aAddressInfo, bool aIsAdded, void *aCon/;"	f	typeref:typename:void	file:
processMLDEvent	posix/platform/netif.cpp	/^static void processMLDEvent(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
processNat64StateChange	posix/platform/netif.cpp	/^static void processNat64StateChange(void)$/;"	f	typeref:typename:void	file:
processNetifAddrEvent	posix/platform/netif.cpp	/^static void processNetifAddrEvent(otInstance *aInstance, struct nlmsghdr *aNetlinkMessage)$/;"	f	typeref:typename:void	file:
processNetifAddrEvent	posix/platform/netif.cpp	/^static void processNetifAddrEvent(otInstance *aInstance, struct rt_msghdr *rtm)$/;"	f	typeref:typename:void	file:
processNetifInfoEvent	posix/platform/netif.cpp	/^static void processNetifInfoEvent(otInstance *aInstance, struct rt_msghdr *rtm)$/;"	f	typeref:typename:void	file:
processNetifLinkEvent	posix/platform/netif.cpp	/^static void processNetifLinkEvent(otInstance *aInstance, struct nlmsghdr *aNetlinkMessage)$/;"	f	typeref:typename:void	file:
processNetlinkEvent	posix/platform/netif.cpp	/^static void processNetlinkEvent(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
processReceive	posix/platform/netif.cpp	/^static void processReceive(otMessage *aMessage, void *aContext)$/;"	f	typeref:typename:void	file:
processStateChange	posix/platform/system.cpp	/^static void processStateChange(otChangedFlags aFlags, void *aContext)$/;"	f	typeref:typename:void	file:
processTransmit	posix/platform/netif.cpp	/^static void processTransmit(otInstance *aInstance)$/;"	f	typeref:typename:void	file:
randomUint32Get	posix/platform/entropy.cpp	/^uint32_t randomUint32Get(void)$/;"	f	typeref:typename:uint32_t
receivePacket	posix/platform/udp.cpp	/^otError receivePacket(int aFd, uint8_t *aPayload, uint16_t &aLength, otMessageInfo &aMessageInfo/;"	f	namespace:__anon4c0263950111	typeref:typename:otError
resetSignalActions	posix/platform/backtrace.cpp	/^static void resetSignalActions(void)$/;"	f	typeref:typename:void	file:
signalCritical	posix/platform/backtrace.cpp	/^static void signalCritical(int sig, siginfo_t *info, void *ucontext)$/;"	f	typeref:typename:void	file:
spinel_capability_to_cstr	lib/spinel/spinel.c	/^const char *spinel_capability_to_cstr(spinel_capability_t capability)$/;"	f	typeref:typename:const char *
spinel_command_to_cstr	lib/spinel/spinel.c	/^const char *spinel_command_to_cstr(spinel_command_t command)$/;"	f	typeref:typename:const char *
spinel_datatype_pack	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_pack(uint8_t *data_out, spinel_size_t data_len_max, const char *p/;"	f	typeref:typename:spinel_ssize_t
spinel_datatype_unpack	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_unpack(const uint8_t *data_in, spinel_size_t data_len, const char/;"	f	typeref:typename:spinel_ssize_t
spinel_datatype_unpack_in_place	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_unpack_in_place(const uint8_t *data_in,$/;"	f	typeref:typename:spinel_ssize_t
spinel_datatype_vpack	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_vpack(uint8_t      *data_out,$/;"	f	typeref:typename:spinel_ssize_t
spinel_datatype_vpack_	lib/spinel/spinel.c	/^static spinel_ssize_t spinel_datatype_vpack_(uint8_t      *data_out,$/;"	f	typeref:typename:spinel_ssize_t	file:
spinel_datatype_vunpack	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_vunpack(const uint8_t *data_in,$/;"	f	typeref:typename:spinel_ssize_t
spinel_datatype_vunpack_	lib/spinel/spinel.c	/^static spinel_ssize_t spinel_datatype_vunpack_(bool           in_place,$/;"	f	typeref:typename:spinel_ssize_t	file:
spinel_datatype_vunpack_in_place	lib/spinel/spinel.c	/^spinel_ssize_t spinel_datatype_vunpack_in_place(const uint8_t *data_in,$/;"	f	typeref:typename:spinel_ssize_t
spinel_mcu_power_state_to_cstr	lib/spinel/spinel.c	/^const char *spinel_mcu_power_state_to_cstr(uint8_t mcu_power_state)$/;"	f	typeref:typename:const char *
spinel_net_role_to_cstr	lib/spinel/spinel.c	/^const char *spinel_net_role_to_cstr(uint8_t net_role)$/;"	f	typeref:typename:const char *
spinel_next_packed_datatype	lib/spinel/spinel.c	/^const char *spinel_next_packed_datatype(const char *pack_format)$/;"	f	typeref:typename:const char *
spinel_packed_uint_decode	lib/spinel/spinel.c	/^spinel_ssize_t spinel_packed_uint_decode(const uint8_t *bytes, spinel_size_t len, unsigned int */;"	f	typeref:typename:spinel_ssize_t
spinel_packed_uint_encode	lib/spinel/spinel.c	/^spinel_ssize_t spinel_packed_uint_encode(uint8_t *bytes, spinel_size_t len, unsigned int value)$/;"	f	typeref:typename:spinel_ssize_t
spinel_packed_uint_size	lib/spinel/spinel.c	/^spinel_ssize_t spinel_packed_uint_size(unsigned int value)$/;"	f	typeref:typename:spinel_ssize_t
spinel_prop_key_to_cstr	lib/spinel/spinel.c	/^const char *spinel_prop_key_to_cstr(spinel_prop_key_t prop_key)$/;"	f	typeref:typename:const char *
spinel_status_to_cstr	lib/spinel/spinel.c	/^const char *spinel_status_to_cstr(spinel_status_t status)$/;"	f	typeref:typename:const char *
spinel_strnlen	lib/spinel/spinel.c	/^static size_t spinel_strnlen(const char *s, size_t maxlen)$/;"	f	typeref:typename:size_t	file:
spinel_to_cstr	lib/spinel/spinel.c	/^static const char *spinel_to_cstr(const struct spinel_cstr *table, uint32_t val)$/;"	f	typeref:typename:const char *	file:
spinel_validate_utf8	lib/spinel/spinel.c	/^static bool spinel_validate_utf8(const uint8_t *string)$/;"	f	typeref:typename:bool	file:
swapDiscard	posix/platform/settings.cpp	/^static void swapDiscard(otInstance *aInstance, int aFd)$/;"	f	typeref:typename:void	file:
swapOpen	posix/platform/settings.cpp	/^static int swapOpen(otInstance *aInstance)$/;"	f	typeref:typename:int	file:
swapPersist	posix/platform/settings.cpp	/^static void swapPersist(otInstance *aInstance, int aFd)$/;"	f	typeref:typename:void	file:
swapWrite	posix/platform/settings.cpp	/^static void swapWrite(otInstance *aInstance, int aFd, uint16_t aLength)$/;"	f	typeref:typename:void	file:
tcplp_sys_accept_ready	core/net/tcp6.cpp	/^struct tcpcb *tcplp_sys_accept_ready(struct tcpcb_listen *aTcbListen, struct in6_addr *aAddr, ui/;"	f	typeref:struct:tcpcb *
tcplp_sys_accepted_connection	core/net/tcp6.cpp	/^bool tcplp_sys_accepted_connection(struct tcpcb_listen *aTcbListen,$/;"	f	typeref:typename:bool
tcplp_sys_autobind	core/net/tcp6.cpp	/^bool tcplp_sys_autobind(otInstance       *aInstance,$/;"	f	typeref:typename:bool
tcplp_sys_connection_lost	core/net/tcp6.cpp	/^void tcplp_sys_connection_lost(struct tcpcb *aTcb, uint8_t aErrNum)$/;"	f	typeref:typename:void
tcplp_sys_free_message	core/net/tcp6.cpp	/^void tcplp_sys_free_message(otInstance *aInstance, otMessage *aMessage)$/;"	f	typeref:typename:void
tcplp_sys_generate_isn	core/net/tcp6.cpp	/^uint32_t tcplp_sys_generate_isn()$/;"	f	typeref:typename:uint32_t
tcplp_sys_get_millis	core/net/tcp6.cpp	/^uint32_t tcplp_sys_get_millis(void) { return TimerMilli::GetNow().GetValue(); }$/;"	f	typeref:typename:uint32_t
tcplp_sys_get_ticks	core/net/tcp6.cpp	/^uint32_t tcplp_sys_get_ticks(void) { return TimerMilli::GetNow().GetValue(); }$/;"	f	typeref:typename:uint32_t
tcplp_sys_hostswap16	core/net/tcp6.cpp	/^uint16_t tcplp_sys_hostswap16(uint16_t aHostPort) { return BigEndian::HostSwap16(aHostPort); }$/;"	f	typeref:typename:uint16_t
tcplp_sys_hostswap32	core/net/tcp6.cpp	/^uint32_t tcplp_sys_hostswap32(uint32_t aHostPort) { return BigEndian::HostSwap32(aHostPort); }$/;"	f	typeref:typename:uint32_t
tcplp_sys_log	core/net/tcp6.cpp	/^void tcplp_sys_log(const char *aFormat, ...)$/;"	f	typeref:typename:void
tcplp_sys_new_message	core/net/tcp6.cpp	/^otMessage *tcplp_sys_new_message(otInstance *aInstance)$/;"	f	typeref:typename:otMessage *
tcplp_sys_on_state_change	core/net/tcp6.cpp	/^void tcplp_sys_on_state_change(struct tcpcb *aTcb, int aNewState)$/;"	f	typeref:typename:void
tcplp_sys_panic	core/net/tcp6.cpp	/^void tcplp_sys_panic(const char *aFormat, ...)$/;"	f	typeref:typename:void
tcplp_sys_send_message	core/net/tcp6.cpp	/^void tcplp_sys_send_message(otInstance *aInstance, otMessage *aMessage, otMessageInfo *aMessageI/;"	f	typeref:typename:void
tcplp_sys_set_timer	core/net/tcp6.cpp	/^void tcplp_sys_set_timer(struct tcpcb *aTcb, uint8_t aTimerFlag, uint32_t aDelay)$/;"	f	typeref:typename:void
tcplp_sys_stop_timer	core/net/tcp6.cpp	/^void tcplp_sys_stop_timer(struct tcpcb *aTcb, uint8_t aTimerFlag)$/;"	f	typeref:typename:void
threadCommand	cli/cli_extension_example.c	/^static otError threadCommand(void *aContext, uint8_t aArgsLength, char *aArgs[])$/;"	f	typeref:typename:otError	file:
transmitPacket	posix/platform/udp.cpp	/^otError transmitPacket(int aFd, uint8_t *aPayload, uint16_t aLength, const otMessageInfo &aMessa/;"	f	namespace:__anon4c0263950111	typeref:typename:otError
trelDnssdInitialize	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdInitialize(const char *aTrelNetif)$/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdProcess	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdProcess(otInstance *aInstance, const otSysMainloopContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdRegisterService	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdRegisterService(uint16_t aPort, const uint8_t *aTxtData, uint8_t aTxt/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdRemoveService	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdRemoveService(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdStartBrowse	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdStartBrowse(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdStopBrowse	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdStopBrowse(void)$/;"	f	typeref:typename:OT_TOOL_WEAK void
trelDnssdUpdateFdSet	posix/platform/trel.cpp	/^OT_TOOL_WEAK void trelDnssdUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:OT_TOOL_WEAK void
tryProcessIcmp6RaMessage	posix/platform/netif.cpp	/^static otError tryProcessIcmp6RaMessage(otInstance *aInstance, const uint8_t *data, ssize_t leng/;"	f	typeref:typename:otError	file:
trySelect	posix/platform/system.cpp	/^static int trySelect(otSysMainloopContext &aContext)$/;"	f	typeref:typename:int	file:
virtualTimeDeinit	posix/platform/virtual_time.cpp	/^void virtualTimeDeinit(void)$/;"	f	typeref:typename:void
virtualTimeInit	posix/platform/virtual_time.cpp	/^void virtualTimeInit(uint16_t aNodeId)$/;"	f	typeref:typename:void
virtualTimeProcess	posix/platform/virtual_time.cpp	/^void virtualTimeProcess(otInstance *aInstance, const otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
virtualTimeRadioProcess	posix/platform/radio.cpp	/^void virtualTimeRadioProcess(otInstance *aInstance, const struct VirtualTimeEvent *aEvent)$/;"	f	typeref:typename:void
virtualTimeReceiveEvent	posix/platform/virtual_time.cpp	/^void virtualTimeReceiveEvent(struct VirtualTimeEvent *aEvent)$/;"	f	typeref:typename:void
virtualTimeSendEvent	posix/platform/virtual_time.cpp	/^static void virtualTimeSendEvent(struct VirtualTimeEvent *aEvent, size_t aLength)$/;"	f	typeref:typename:void	file:
virtualTimeSendRadioSpinelWriteEvent	posix/platform/virtual_time.cpp	/^void virtualTimeSendRadioSpinelWriteEvent(const uint8_t *aData, uint16_t aLength)$/;"	f	typeref:typename:void
virtualTimeSendSleepEvent	posix/platform/virtual_time.cpp	/^void virtualTimeSendSleepEvent(const struct timeval *aTimeout)$/;"	f	typeref:typename:void
virtualTimeSpinelProcess	posix/platform/spinel_manager.cpp	/^void virtualTimeSpinelProcess(otInstance *aInstance, const struct VirtualTimeEvent *aEvent)$/;"	f	typeref:typename:void
virtualTimeUpdateFdSet	posix/platform/virtual_time.cpp	/^void virtualTimeUpdateFdSet(otSysMainloopContext *aContext)$/;"	f	typeref:typename:void
~AesEcb	core/crypto/aes_ecb.cpp	/^AesEcb::~AesEcb(void) { SuccessOrAssert(otPlatCryptoAesFree(&mContext)); }$/;"	f	class:ot::Crypto::AesEcb
~AllowAllGuard	posix/platform/daemon.cpp	/^        ~AllowAllGuard(void)$/;"	f	class:ot::Posix::Daemon::createListenSocketOrDie::AllowAllGuard	file:
~Array	core/common/heap_array.hpp	/^    ~Array(void) { Free(); }$/;"	f	class:ot::Heap::Array
~Data	core/common/heap_data.hpp	/^    ~Data(void) { Free(); }$/;"	f	class:ot::Heap::Data
~HdlcInterface	posix/platform/hdlc_interface.cpp	/^HdlcInterface::~HdlcInterface(void) { Deinit(); }$/;"	f	class:ot::Posix::HdlcInterface
~HkdfSha256	core/crypto/hkdf_sha256.cpp	/^HkdfSha256::~HkdfSha256(void) { SuccessOrAssert(otPlatCryptoHkdfDeinit(&mContext)); }$/;"	f	class:ot::Crypto::HkdfSha256
~HmacSha256	core/crypto/hmac_sha256.cpp	/^HmacSha256::~HmacSha256(void) { SuccessOrAssert(otPlatCryptoHmacSha256Deinit(&mContext)); }$/;"	f	class:ot::Crypto::HmacSha256
~Host	core/net/srp_server.cpp	/^Server::Host::~Host(void) { FreeAllServices(); }$/;"	f	class:ot::Srp::Server::Host
~Manager	core/common/random.cpp	/^Manager::~Manager(void)$/;"	f	class:ot::Random::Manager
~OwnedPtr	core/common/owned_ptr.hpp	/^    ~OwnedPtr(void) { Delete(); }$/;"	f	class:ot::OwnedPtr
~OwningList	core/common/owning_list.hpp	/^    ~OwningList(void) { Free(); }$/;"	f	class:ot::OwningList
~RadioSpinel	lib/spinel/radio_spinel.hpp	/^    ~RadioSpinel(void) { Deinit(); }$/;"	f	class:ot::Spinel::RadioSpinel
~RetainPtr	core/common/retain_ptr.hpp	/^    ~RetainPtr(void) { DecrementRetainCount(); }$/;"	f	class:ot::RetainPtr
~Sha256	core/crypto/sha256.cpp	/^Sha256::~Sha256(void) { SuccessOrAssert(otPlatCryptoSha256Deinit(&mContext)); }$/;"	f	class:ot::Crypto::Sha256
~SpiInterface	posix/platform/spi_interface.cpp	/^SpiInterface::~SpiInterface(void) { Deinit(); }$/;"	f	class:ot::Posix::SpiInterface
~SpinelManager	posix/platform/spinel_manager.cpp	/^SpinelManager::~SpinelManager(void) { Deinit(); }$/;"	f	class:ot::Posix::SpinelManager
~String	core/common/heap_string.hpp	/^    ~String(void) { Free(); }$/;"	f	class:ot::Heap::String
~VendorInterface	posix/platform/vendor_interface_example.cpp	/^VendorInterface::~VendorInterface(void) { Deinit(); }$/;"	f	class:ot::Posix::VendorInterface
